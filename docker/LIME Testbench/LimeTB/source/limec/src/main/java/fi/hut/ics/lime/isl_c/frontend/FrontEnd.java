/**
 * Takes care of duties that make the fi.hut.ics.lime.isl_c tool more
 * user-friendly. We take a directory and for that directory, we
 * 
 * - copy all C source files and the file Doxyfile to a temporary directory
 * - go through all these C source files in the temporary directory, stripping 
 *   away any Doxygen-style comments
 * - convert all /*@ ISL @* / (space between the last * and / included to keep 
 *   JavaDoc from breaking) statements into /*\verbatim ISL \endverbatim* / 
 *   statements (again, space between last * and / for JavaDoc).
 * - pass the converted C source files through Doxygen
 *     
 * @author lharpf
 */
package fi.hut.ics.lime.isl_c.frontend;

import java.io.File;
import java.io.IOException;
import java.io.StringReader;

import fi.hut.ics.lime.common.utils.FileUtils;
import fi.hut.ics.lime.isl_c.frontend.sourceprocessor.DoxygenParser;
import fi.hut.ics.lime.isl_c.frontend.sourceprocessor.DoxygenStripper;

public class FrontEnd {

	// contains the location of the Doxygen index.xml file
	private final File mainXMLFile;
	// the temporary directory we created for processing
	private final File tempDirectory;
	
	public FrontEnd(File sourceDirectory) {
		
		// We don't want to overwrite the user's original source files,
		// so we create a temp directory where the processing is done. To
		// prevent name conflicts, the directory is named 
		// limetool_<currentTimeInMilliseconds>
		this.tempDirectory = new File(sourceDirectory.getAbsolutePath() +
							   File.separator + "limetool_tempdir" + 
							   System.currentTimeMillis());
		
		try {
		    if (!this.tempDirectory.mkdirs()) {
		    	throw new IOException("ERROR: Creation of temp dir '"
		    	+this.tempDirectory.getCanonicalPath()+"' failed.");
			}
			// Copy all files with the extension .c or .h 
			// to a temporary directory
			FileUtils.copyByExtension(sourceDirectory, this.tempDirectory, "c");
			FileUtils.copyByExtension(sourceDirectory, this.tempDirectory, "h");
			
			// Remove Doxygen comments; convert ISL comments to Doxygen syntax
			stripDoxygenComments(this.tempDirectory);

			// Run Doxygen on the resulting files
			DoxygenRunner runner = new DoxygenRunner();
			runner.run(this.tempDirectory);
		} catch (IOException ioe) {
			ioe.printStackTrace();
			System.exit(1);
		}
		
		this.mainXMLFile = new File(this.tempDirectory.getAbsolutePath() +
					File.separator + "docs" +
					File.separator + "xml" +
					File.separator + "index.xml");
	
	}
	
	/**
	 * The fi.hut.ics.lime.isl_c tool uses Doxygen to create a representation
	 * of the C source file. However, the user of the tool might also use
	 * Doxygen for other purposes. This might cause the tool to break; it is
	 * the job of this method to prevent that from happening.
	 * 
	 * Quite simply, we remove all Doxygen comments, then replace our own ISL
	 * comment syntax with the syntax Doxygen understands. The file can then
	 * be run through Doxygen.
	 * 
	 * @param dirToStripIn The directory containing the C source files that
	 * 					   should be stripped of Doxygen comments
	 */
	private void stripDoxygenComments(File dirToStripIn) {
		
		for(File source : dirToStripIn.listFiles()) {
			
			// parse both c and h files
			if (source.isFile() && (source.getName().endsWith(".c") || source.getName().endsWith(".h"))) {			
				// A C source file. Run the contents through a parser that 
				// strips out Doxygen comments and replaces our own ISL syntax 
				// comments with Doxygen comments.
				DoxygenParser parser;
				try {
				parser = new DoxygenParser(
						 new DoxygenStripper(new StringReader(
						 FileUtils.readFile(source))));
			
					StringBuilder endresult = (StringBuilder)parser.parse().value;

					// endresult now holds our modified source file, let's 
					// write it back
					FileUtils.writeFile(source, endresult.toString());
					
				} catch (Exception e) {
					System.err.println(e.getMessage());
					System.exit(1);
				}

			}
			
		}
		
		
	}
	
	/**
	 * @return a File object representing the index.xml file created by
	 * Doxygen. The index.xml file tells us where the rest of the XML files
	 * generated by Doxygen are.
	 */
	public File getMainXMLFile() {
		return this.mainXMLFile;
	}
	
	/**
	 * @return a File object representing the temporary directory. This
	 * temporary directory contains slightly modified versions of the user's
	 * original source code files and Doxygen generated XML-files that were
	 * necessary to create the aspect.
	 * 
	 * At the end of execution, these files are no longer needed; we can
	 * and should delete the temporary directory. This is done by the
	 * classes in the fi.hut.ics.lime.isl_c.backend package, which also
	 * take care of other back-end functionality. 
	 */
	public File getTemporaryDirectory() {
		return this.tempDirectory;
	}
	
}
