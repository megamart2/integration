# 1 "insn-recog.c"
# 1 "<built-in>"
# 1 "<command line>"
# 1 "insn-recog.c"



# 1 "config.h" 1


# 1 "auto-host.h" 1
# 4 "config.h" 2

# 1 "./../include/ansidecl.h" 1
# 6 "config.h" 2
# 5 "insn-recog.c" 2
# 1 "system.h" 1
# 28 "system.h"
# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stdarg.h" 1 3 4
# 43 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 105 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 29 "system.h" 2
# 39 "system.h"
# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 152 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 214 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 3 4
typedef unsigned int size_t;
# 326 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 3 4
typedef long int wchar_t;
# 40 "system.h" 2


# 1 "/usr/include/stdio.h" 1 3 4
# 28 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 329 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 313 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 314 "/usr/include/sys/cdefs.h" 2 3 4
# 330 "/usr/include/features.h" 2 3 4
# 352 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4



# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 5 "/usr/include/gnu/stubs.h" 2 3 4


# 1 "/usr/include/gnu/stubs-32.h" 1 3 4
# 8 "/usr/include/gnu/stubs.h" 2 3 4
# 353 "/usr/include/features.h" 2 3 4
# 29 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 35 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/bits/types.h" 1 3 4
# 28 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/types.h" 2 3 4


# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 32 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;




__extension__ typedef signed long long int __int64_t;
__extension__ typedef unsigned long long int __uint64_t;







__extension__ typedef long long int __quad_t;
__extension__ typedef unsigned long long int __u_quad_t;
# 134 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 135 "/usr/include/bits/types.h" 2 3 4


__extension__ typedef __u_quad_t __dev_t;
__extension__ typedef unsigned int __uid_t;
__extension__ typedef unsigned int __gid_t;
__extension__ typedef unsigned long int __ino_t;
__extension__ typedef __u_quad_t __ino64_t;
__extension__ typedef unsigned int __mode_t;
__extension__ typedef unsigned int __nlink_t;
__extension__ typedef long int __off_t;
__extension__ typedef __quad_t __off64_t;
__extension__ typedef int __pid_t;
__extension__ typedef struct { int __val[2]; } __fsid_t;
__extension__ typedef long int __clock_t;
__extension__ typedef unsigned long int __rlim_t;
__extension__ typedef __u_quad_t __rlim64_t;
__extension__ typedef unsigned int __id_t;
__extension__ typedef long int __time_t;
__extension__ typedef unsigned int __useconds_t;
__extension__ typedef long int __suseconds_t;

__extension__ typedef int __daddr_t;
__extension__ typedef long int __swblk_t;
__extension__ typedef int __key_t;


__extension__ typedef int __clockid_t;


__extension__ typedef void * __timer_t;


__extension__ typedef long int __blksize_t;




__extension__ typedef long int __blkcnt_t;
__extension__ typedef __quad_t __blkcnt64_t;


__extension__ typedef unsigned long int __fsblkcnt_t;
__extension__ typedef __u_quad_t __fsblkcnt64_t;


__extension__ typedef unsigned long int __fsfilcnt_t;
__extension__ typedef __u_quad_t __fsfilcnt64_t;

__extension__ typedef int __ssize_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


__extension__ typedef int __intptr_t;


__extension__ typedef unsigned int __socklen_t;
# 37 "/usr/include/stdio.h" 2 3 4









typedef struct _IO_FILE FILE;





# 62 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 72 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 32 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 14 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 355 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 15 "/usr/include/_G_config.h" 2 3 4
# 24 "/usr/include/_G_config.h" 3 4
# 1 "/usr/include/wchar.h" 1 3 4
# 48 "/usr/include/wchar.h" 3 4
# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 49 "/usr/include/wchar.h" 2 3 4

# 1 "/usr/include/bits/wchar.h" 1 3 4
# 51 "/usr/include/wchar.h" 2 3 4
# 76 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 25 "/usr/include/_G_config.h" 2 3 4

typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 44 "/usr/include/_G_config.h" 3 4
# 1 "/usr/include/gconv.h" 1 3 4
# 28 "/usr/include/gconv.h" 3 4
# 1 "/usr/include/wchar.h" 1 3 4
# 48 "/usr/include/wchar.h" 3 4
# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 49 "/usr/include/wchar.h" 2 3 4
# 29 "/usr/include/gconv.h" 2 3 4


# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 32 "/usr/include/gconv.h" 2 3 4





enum
{
  __GCONV_OK = 0,
  __GCONV_NOCONV,
  __GCONV_NODB,
  __GCONV_NOMEM,

  __GCONV_EMPTY_INPUT,
  __GCONV_FULL_OUTPUT,
  __GCONV_ILLEGAL_INPUT,
  __GCONV_INCOMPLETE_INPUT,

  __GCONV_ILLEGAL_DESCRIPTOR,
  __GCONV_INTERNAL_ERROR
};



enum
{
  __GCONV_IS_LAST = 0x0001,
  __GCONV_IGNORE_ERRORS = 0x0002
};



struct __gconv_step;
struct __gconv_step_data;
struct __gconv_loaded_object;
struct __gconv_trans_data;



typedef int (*__gconv_fct) (struct __gconv_step *, struct __gconv_step_data *,
       __const unsigned char **, __const unsigned char *,
       unsigned char **, size_t *, int, int);


typedef wint_t (*__gconv_btowc_fct) (struct __gconv_step *, unsigned char);


typedef int (*__gconv_init_fct) (struct __gconv_step *);
typedef void (*__gconv_end_fct) (struct __gconv_step *);



typedef int (*__gconv_trans_fct) (struct __gconv_step *,
      struct __gconv_step_data *, void *,
      __const unsigned char *,
      __const unsigned char **,
      __const unsigned char *, unsigned char **,
      size_t *);


typedef int (*__gconv_trans_context_fct) (void *, __const unsigned char *,
       __const unsigned char *,
       unsigned char *, unsigned char *);


typedef int (*__gconv_trans_query_fct) (__const char *, __const char ***,
     size_t *);


typedef int (*__gconv_trans_init_fct) (void **, const char *);
typedef void (*__gconv_trans_end_fct) (void *);

struct __gconv_trans_data
{

  __gconv_trans_fct __trans_fct;
  __gconv_trans_context_fct __trans_context_fct;
  __gconv_trans_end_fct __trans_end_fct;
  void *__data;
  struct __gconv_trans_data *__next;
};



struct __gconv_step
{
  struct __gconv_loaded_object *__shlib_handle;
  __const char *__modname;

  int __counter;

  char *__from_name;
  char *__to_name;

  __gconv_fct __fct;
  __gconv_btowc_fct __btowc_fct;
  __gconv_init_fct __init_fct;
  __gconv_end_fct __end_fct;



  int __min_needed_from;
  int __max_needed_from;
  int __min_needed_to;
  int __max_needed_to;


  int __stateful;

  void *__data;
};



struct __gconv_step_data
{
  unsigned char *__outbuf;
  unsigned char *__outbufend;



  int __flags;



  int __invocation_counter;



  int __internal_use;

  __mbstate_t *__statep;
  __mbstate_t __state;



  struct __gconv_trans_data *__trans;
};



typedef struct __gconv_info
{
  size_t __nsteps;
  struct __gconv_step *__steps;
  __extension__ struct __gconv_step_data __data [];
} *__gconv_t;
# 45 "/usr/include/_G_config.h" 2 3 4
typedef union
{
  struct __gconv_info __cd;
  struct
  {
    struct __gconv_info __cd;
    struct __gconv_step_data __data;
  } __combined;
} _G_iconv_t;

typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));
typedef int _G_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));
# 33 "/usr/include/libio.h" 2 3 4
# 166 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 176 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 199 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 267 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 315 "/usr/include/libio.h" 3 4
  __off64_t _offset;
# 324 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 360 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);







extern int __underflow (_IO_FILE *) __attribute__ ((__nothrow__));
extern int __uflow (_IO_FILE *) __attribute__ ((__nothrow__));
extern int __overflow (_IO_FILE *, int) __attribute__ ((__nothrow__));
extern wint_t __wunderflow (_IO_FILE *) __attribute__ ((__nothrow__));
extern wint_t __wuflow (_IO_FILE *) __attribute__ ((__nothrow__));
extern wint_t __woverflow (_IO_FILE *, wint_t) __attribute__ ((__nothrow__));
# 450 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp) __attribute__ ((__nothrow__));
extern int _IO_putc (int __c, _IO_FILE *__fp) __attribute__ ((__nothrow__));
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__));

extern int _IO_peekc_locked (_IO_FILE *__fp) __attribute__ ((__nothrow__));





extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__));
# 480 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t) __attribute__ ((__nothrow__));
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t) __attribute__ ((__nothrow__));

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int) __attribute__ ((__nothrow__));
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int) __attribute__ ((__nothrow__));

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__));
# 73 "/usr/include/stdio.h" 2 3 4
# 86 "/usr/include/stdio.h" 3 4


typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 138 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 139 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;









extern int remove (__const char *__filename) __attribute__ ((__nothrow__));

extern int rename (__const char *__old, __const char *__new) __attribute__ ((__nothrow__));




extern int renameat (int __oldfd, __const char *__old, int __newfd,
       __const char *__new) __attribute__ ((__nothrow__));








extern FILE *tmpfile (void);
# 181 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void);



extern char *tmpnam (char *__s) __attribute__ ((__nothrow__));





extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__));
# 203 "/usr/include/stdio.h" 3 4
extern char *tempnam (__const char *__dir, __const char *__pfx)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__));








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 228 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 238 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);









extern FILE *fopen (__const char *__restrict __filename,
      __const char *__restrict __modes);




extern FILE *freopen (__const char *__restrict __filename,
        __const char *__restrict __modes,
        FILE *__restrict __stream);
# 269 "/usr/include/stdio.h" 3 4


extern FILE *fopen64 (__const char *__restrict __filename,
        __const char *__restrict __modes);
extern FILE *freopen64 (__const char *__restrict __filename,
   __const char *__restrict __modes,
   FILE *__restrict __stream);




extern FILE *fdopen (int __fd, __const char *__modes) __attribute__ ((__nothrow__));





extern FILE *fopencookie (void *__restrict __magic_cookie,
     __const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) __attribute__ ((__nothrow__));


extern FILE *fmemopen (void *__s, size_t __len, __const char *__modes) __attribute__ ((__nothrow__));




extern FILE *open_memstream (char **__restrict __bufloc,
        size_t *__restrict __sizeloc) __attribute__ ((__nothrow__));



extern FILE *open_wmemstream (wchar_t **__restrict __bufloc,
         size_t *__restrict __sizeloc) __attribute__ ((__nothrow__));






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__));





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__));








extern int fprintf (FILE *__restrict __stream,
      __const char *__restrict __format, ...);




extern int printf (__const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      __const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (__const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));





extern int snprintf (char *__restrict __s, size_t __maxlen,
       __const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        __const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, __const char *__restrict __f,
        __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0)));
extern int __asprintf (char **__restrict __ptr,
         __const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3)));
extern int asprintf (char **__restrict __ptr,
       __const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3)));







extern int vdprintf (int __fd, __const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, __const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     __const char *__restrict __format, ...) ;




extern int scanf (__const char *__restrict __format, ...) ;

extern int sscanf (__const char *__restrict __s,
     __const char *__restrict __format, ...) __attribute__ ((__nothrow__));








extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (__const char *__restrict __s,
      __const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__scanf__, 2, 0)));









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 466 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 477 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 510 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;






extern char *gets (char *__s) ;

# 556 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 572 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (__const char *__restrict __s, FILE *__restrict __stream);





extern int puts (__const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s) ;

# 633 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (__const char *__restrict __s,
      FILE *__restrict __stream);
# 644 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (__const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream) ;








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 680 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 699 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, __const fpos_t *__pos);
# 722 "/usr/include/stdio.h" 3 4



extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, __const fpos64_t *__pos);




extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__)) ;




extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__)) ;








extern void perror (__const char *__s);






# 1 "/usr/include/bits/sys_errlist.h" 1 3 4
# 27 "/usr/include/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern __const char *__const sys_errlist[];


extern int _sys_nerr;
extern __const char *__const _sys_errlist[];
# 761 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__)) ;
# 780 "/usr/include/stdio.h" 3 4
extern FILE *popen (__const char *__command, __const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__));





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      __const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       __const char *__restrict __format,
       __gnuc_va_list __args)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__));
# 841 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio.h" 1 3 4
# 33 "/usr/include/bits/stdio.h" 3 4
extern __inline int
vprintf (__const char *__restrict __fmt, __gnuc_va_list __arg)
{
  return vfprintf (stdout, __fmt, __arg);
}


extern __inline int
getchar (void)
{
  return _IO_getc (stdin);
}




extern __inline int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline int
putchar (int __c)
{
  return _IO_putc (__c, stdout);
}




extern __inline int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}





extern __inline __ssize_t
getline (char **__lineptr, size_t *__n, FILE *__stream)
{
  return __getdelim (__lineptr, __n, '\n', __stream);
}





extern __inline int
__attribute__ ((__nothrow__)) feof_unlocked (FILE *__stream)
{
  return (((__stream)->_flags & 0x10) != 0);
}


extern __inline int
__attribute__ ((__nothrow__)) ferror_unlocked (FILE *__stream)
{
  return (((__stream)->_flags & 0x20) != 0);
}
# 842 "/usr/include/stdio.h" 2 3 4
# 850 "/usr/include/stdio.h" 3 4

# 43 "system.h" 2
# 107 "system.h"
# 1 "./../include/safe-ctype.h" 1
# 61 "./../include/safe-ctype.h"
enum {

  _sch_isblank = 0x0001,
  _sch_iscntrl = 0x0002,
  _sch_isdigit = 0x0004,
  _sch_islower = 0x0008,
  _sch_isprint = 0x0010,
  _sch_ispunct = 0x0020,
  _sch_isspace = 0x0040,
  _sch_isupper = 0x0080,
  _sch_isxdigit = 0x0100,


  _sch_isidst = 0x0200,
  _sch_isvsp = 0x0400,
  _sch_isnvsp = 0x0800,


  _sch_isalpha = _sch_isupper|_sch_islower,
  _sch_isalnum = _sch_isalpha|_sch_isdigit,
  _sch_isidnum = _sch_isidst|_sch_isdigit,
  _sch_isgraph = _sch_isalnum|_sch_ispunct,
  _sch_iscppsp = _sch_isvsp|_sch_isnvsp,
  _sch_isbasic = _sch_isprint|_sch_iscppsp

};


extern const unsigned short _sch_istable[256];
# 114 "./../include/safe-ctype.h"
extern const unsigned char _sch_toupper[256];
extern const unsigned char _sch_tolower[256];
# 108 "system.h" 2

# 1 "/usr/include/sys/types.h" 1 3 4
# 29 "/usr/include/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __pid_t pid_t;




typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 133 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 59 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 75 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 93 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 105 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 134 "/usr/include/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 148 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 195 "/usr/include/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 217 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 38 "/usr/include/endian.h" 2 3 4
# 218 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/select.h" 1 3 4
# 31 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 32 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 23 "/usr/include/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 35 "/usr/include/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "/usr/include/time.h" 1 3 4
# 121 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    long int tv_nsec;
  };
# 45 "/usr/include/sys/select.h" 2 3 4

# 1 "/usr/include/bits/time.h" 1 3 4
# 69 "/usr/include/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 47 "/usr/include/sys/select.h" 2 3 4
# 55 "/usr/include/sys/select.h" 3 4
typedef long int __fd_mask;
# 67 "/usr/include/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 99 "/usr/include/sys/select.h" 3 4

# 109 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 121 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);



# 221 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/sysmacros.h" 1 3 4
# 29 "/usr/include/sys/sysmacros.h" 3 4
__extension__
extern __inline unsigned int gnu_dev_major (unsigned long long int __dev)
     __attribute__ ((__nothrow__));
__extension__
extern __inline unsigned int gnu_dev_minor (unsigned long long int __dev)
     __attribute__ ((__nothrow__));
__extension__
extern __inline unsigned long long int gnu_dev_makedev (unsigned int __major,
       unsigned int __minor)
     __attribute__ ((__nothrow__));


__extension__ extern __inline unsigned int
__attribute__ ((__nothrow__)) gnu_dev_major (unsigned long long int __dev)
{
  return ((__dev >> 8) & 0xfff) | ((unsigned int) (__dev >> 32) & ~0xfff);
}

__extension__ extern __inline unsigned int
__attribute__ ((__nothrow__)) gnu_dev_minor (unsigned long long int __dev)
{
  return (__dev & 0xff) | ((unsigned int) (__dev >> 12) & ~0xff);
}

__extension__ extern __inline unsigned long long int
__attribute__ ((__nothrow__)) gnu_dev_makedev (unsigned int __major, unsigned int __minor)
{
  return ((__minor & 0xff) | ((__major & 0xfff) << 8)
   | (((unsigned long long int) (__minor & ~0xff)) << 12)
   | (((unsigned long long int) (__major & ~0xfff)) << 32));
}
# 224 "/usr/include/sys/types.h" 2 3 4




typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 262 "/usr/include/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 36 "/usr/include/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


typedef union
{
  char __size[36];
  long int __align;
} pthread_attr_t;


typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;




typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;


    int __kind;
    unsigned int __nusers;
    __extension__ union
    {
      int __spins;
      __pthread_slist_t __list;
    };
  } __data;
  char __size[24];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  long int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  long int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{
  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;


    unsigned int __flags;
    int __writer;
  } __data;
  char __size[32];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[20];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/sys/types.h" 2 3 4



# 110 "system.h" 2

# 1 "/usr/include/errno.h" 1 3 4
# 32 "/usr/include/errno.h" 3 4




# 1 "/usr/include/bits/errno.h" 1 3 4
# 25 "/usr/include/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4



# 1 "/usr/include/asm/errno.h" 1 3 4
# 5 "/usr/include/linux/errno.h" 2 3 4
# 26 "/usr/include/bits/errno.h" 2 3 4
# 43 "/usr/include/bits/errno.h" 3 4
extern int *__errno_location (void) __attribute__ ((__nothrow__)) __attribute__ ((__const__));
# 37 "/usr/include/errno.h" 2 3 4
# 55 "/usr/include/errno.h" 3 4
extern char *program_invocation_name, *program_invocation_short_name;




# 69 "/usr/include/errno.h" 3 4
typedef int error_t;
# 112 "system.h" 2
# 122 "system.h"
# 1 "/usr/include/string.h" 1 3 4
# 28 "/usr/include/string.h" 3 4





# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4




extern void *memcpy (void *__restrict __dest,
       __const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, __const void *__src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, __const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (__const void *__s1, __const void *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memchr (__const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern void *rawmemchr (__const void *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern void *memrchr (__const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strcpy (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, __const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (__const char *__s1, __const char *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));






# 1 "/usr/include/xlocale.h" 1 3 4
# 28 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;
# 119 "/usr/include/string.h" 2 3 4


extern int strcoll_l (__const char *__s1, __const char *__s2, __locale_t __l)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, __const char *__src, size_t __n,
    __locale_t __l) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 4)));




extern char *strdup (__const char *__s)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (__const char *__string, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 165 "/usr/include/string.h" 3 4


extern char *strchr (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));

extern char *strrchr (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strchrnul (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strcspn (__const char *__s, __const char *__reject)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (__const char *__s, __const char *__accept)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strpbrk (__const char *__s, __const char *__accept)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strstr (__const char *__haystack, __const char *__needle)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *strtok (char *__restrict __s, __const char *__restrict __delim)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    __const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, __const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));




extern char *strcasestr (__const char *__haystack, __const char *__needle)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern void *memmem (__const void *__haystack, size_t __haystacklen,
       __const void *__needle, size_t __needlelen)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   __const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        __const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (__const char *__s)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (__const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) __attribute__ ((__nothrow__));

# 281 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));





extern void __bzero (void *__s, size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern void bcopy (__const void *__src, void *__dest, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int bcmp (__const void *__s1, __const void *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *index (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern char *rindex (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));



extern int ffs (int __i) __attribute__ ((__nothrow__)) __attribute__ ((__const__));




extern int ffsl (long int __l) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__));




extern int strcasecmp (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (__const char *__s1, __const char *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (__const char *__s1, __const char *__s2,
    __locale_t __loc)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (__const char *__s1, __const char *__s2,
     size_t __n, __locale_t __loc)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       __const char *__restrict __delim)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strsignal (int __sig) __attribute__ ((__nothrow__));


extern char *__stpcpy (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern char *basename (__const char *__filename) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 414 "/usr/include/string.h" 3 4
# 1 "/usr/include/bits/string.h" 1 3 4
# 415 "/usr/include/string.h" 2 3 4


# 1 "/usr/include/bits/string2.h" 1 3 4
# 418 "/usr/include/string.h" 2 3 4
# 426 "/usr/include/string.h" 3 4

# 123 "system.h" 2
# 1 "/usr/include/strings.h" 1 3 4
# 124 "system.h" 2
# 135 "system.h"
# 1 "/usr/include/stdlib.h" 1 3 4
# 33 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 34 "/usr/include/stdlib.h" 2 3 4








# 1 "/usr/include/bits/waitflags.h" 1 3 4
# 43 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/bits/waitstatus.h" 1 3 4
# 67 "/usr/include/bits/waitstatus.h" 3 4
union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 44 "/usr/include/stdlib.h" 2 3 4
# 68 "/usr/include/stdlib.h" 3 4
typedef union
  {
    union wait *__uptr;
    int *__iptr;
  } __WAIT_STATUS __attribute__ ((__transparent_union__));
# 96 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 140 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__)) ;




extern double atof (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (__const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





extern float strtof (__const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

extern long double strtold (__const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





extern long int strtol (__const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

extern unsigned long int strtoul (__const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;




__extension__
extern long long int strtoq (__const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtouq (__const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





__extension__
extern long long int strtoll (__const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtoull (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

# 240 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 4))) ;

extern unsigned long int strtoul_l (__const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern long long int strtoll_l (__const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern unsigned long long int strtoull_l (__const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 4))) ;

extern double strtod_l (__const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3))) ;

extern float strtof_l (__const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3))) ;

extern long double strtold_l (__const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3))) ;






extern double __strtod_internal (__const char *__restrict __nptr,
     char **__restrict __endptr, int __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
extern float __strtof_internal (__const char *__restrict __nptr,
    char **__restrict __endptr, int __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
extern long double __strtold_internal (__const char *__restrict __nptr,
           char **__restrict __endptr,
           int __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

extern long int __strtol_internal (__const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, int __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



extern unsigned long int __strtoul_internal (__const char *__restrict __nptr,
          char **__restrict __endptr,
          int __base, int __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;




__extension__
extern long long int __strtoll_internal (__const char *__restrict __nptr,
      char **__restrict __endptr,
      int __base, int __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



__extension__
extern unsigned long long int __strtoull_internal (__const char *
         __restrict __nptr,
         char **__restrict __endptr,
         int __base, int __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;








extern __inline double
__attribute__ ((__nothrow__)) strtod (__const char *__restrict __nptr, char **__restrict __endptr)
{
  return __strtod_internal (__nptr, __endptr, 0);
}
extern __inline long int
__attribute__ ((__nothrow__)) strtol (__const char *__restrict __nptr, char **__restrict __endptr, int __base)

{
  return __strtol_internal (__nptr, __endptr, __base, 0);
}
extern __inline unsigned long int
__attribute__ ((__nothrow__)) strtoul (__const char *__restrict __nptr, char **__restrict __endptr, int __base)

{
  return __strtoul_internal (__nptr, __endptr, __base, 0);
}




extern __inline float
__attribute__ ((__nothrow__)) strtof (__const char *__restrict __nptr, char **__restrict __endptr)
{
  return __strtof_internal (__nptr, __endptr, 0);
}

extern __inline long double
__attribute__ ((__nothrow__)) strtold (__const char *__restrict __nptr, char **__restrict __endptr)
{
  return __strtold_internal (__nptr, __endptr, 0);
}





__extension__ extern __inline long long int
__attribute__ ((__nothrow__)) strtoq (__const char *__restrict __nptr, char **__restrict __endptr, int __base)

{
  return __strtoll_internal (__nptr, __endptr, __base, 0);
}
__extension__ extern __inline unsigned long long int
__attribute__ ((__nothrow__)) strtouq (__const char *__restrict __nptr, char **__restrict __endptr, int __base)

{
  return __strtoull_internal (__nptr, __endptr, __base, 0);
}




__extension__ extern __inline long long int
__attribute__ ((__nothrow__)) strtoll (__const char *__restrict __nptr, char **__restrict __endptr, int __base)

{
  return __strtoll_internal (__nptr, __endptr, __base, 0);
}
__extension__ extern __inline unsigned long long int
__attribute__ ((__nothrow__)) strtoull (__const char * __restrict __nptr, char **__restrict __endptr, int __base)

{
  return __strtoull_internal (__nptr, __endptr, __base, 0);
}




extern __inline double
__attribute__ ((__nothrow__)) atof (__const char *__nptr)
{
  return strtod (__nptr, (char **) ((void *)0));
}
extern __inline int
__attribute__ ((__nothrow__)) atoi (__const char *__nptr)
{
  return (int) strtol (__nptr, (char **) ((void *)0), 10);
}
extern __inline long int
__attribute__ ((__nothrow__)) atol (__const char *__nptr)
{
  return strtol (__nptr, (char **) ((void *)0), 10);
}




__extension__ extern __inline long long int
__attribute__ ((__nothrow__)) atoll (__const char *__nptr)
{
  return strtoll (__nptr, (char **) ((void *)0), 10);
}

# 429 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__)) ;


extern long int a64l (__const char *__s)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
# 445 "/usr/include/stdlib.h" 3 4
extern long int random (void) __attribute__ ((__nothrow__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) __attribute__ ((__nothrow__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__));




extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__));







extern double drand48 (void) __attribute__ ((__nothrow__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    unsigned long long int __a;
  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;







extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) __attribute__ ((__nothrow__));




extern void cfree (void *__ptr) __attribute__ ((__nothrow__));



# 1 "/usr/include/alloca.h" 1 3 4
# 25 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 26 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__));






# 613 "/usr/include/stdlib.h" 2 3 4




extern void *valloc (size_t __size) __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;




extern void abort (void) __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));






extern void _Exit (int __status) __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));






extern char *getenv (__const char *__name) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;




extern char *__secure_getenv (__const char *__name)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





extern int putenv (char *__string) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (__const char *__name, __const char *__value, int __replace)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (__const char *__name) __attribute__ ((__nothrow__));






extern int clearenv (void) __attribute__ ((__nothrow__));
# 698 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
# 709 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 719 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 729 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;








extern int system (__const char *__command) ;







extern char *canonicalize_file_name (__const char *__name)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
# 757 "/usr/include/stdlib.h" 3 4
extern char *realpath (__const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__)) ;






typedef int (*__compar_fn_t) (__const void *, __const void *);


typedef __compar_fn_t comparison_fn_t;






extern void *bsearch (__const void *__key, __const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;



extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));



extern int abs (int __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;

# 822 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));







extern int mblen (__const char *__s, size_t __n) __attribute__ ((__nothrow__)) ;


extern int mbtowc (wchar_t *__restrict __pwc,
     __const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__)) ;


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__)) ;



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   __const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__));

extern size_t wcstombs (char *__restrict __s,
   __const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__));








extern int rpmatch (__const char *__response) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
# 910 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *__const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (__const char *__key) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) __attribute__ ((__nothrow__));



extern int unlockpt (int __fd) __attribute__ ((__nothrow__));




extern char *ptsname (int __fd) __attribute__ ((__nothrow__)) ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 978 "/usr/include/stdlib.h" 3 4

# 136 "system.h" 2
# 158 "system.h"
# 1 "/usr/include/unistd.h" 1 3 4
# 28 "/usr/include/unistd.h" 3 4

# 171 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/bits/posix_opt.h" 1 3 4
# 172 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/bits/environments.h" 1 3 4
# 176 "/usr/include/unistd.h" 2 3 4
# 195 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 196 "/usr/include/unistd.h" 2 3 4
# 236 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 256 "/usr/include/unistd.h" 3 4
extern int access (__const char *__name, int __type) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int euidaccess (__const char *__name, int __type)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int eaccess (__const char *__name, int __type)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, __const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2))) ;
# 299 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __attribute__ ((__nothrow__));
# 310 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     __attribute__ ((__nothrow__));






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, __const void *__buf, size_t __n) ;
# 341 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, __const void *__buf, size_t __n,
         __off_t __offset) ;
# 369 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, __const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__)) ;
# 391 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__));
# 403 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);






extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__));






extern int usleep (__useconds_t __useconds);
# 427 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (__const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__)) ;




extern int lchown (__const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, __const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2))) ;



extern int chdir (__const char *__path) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) __attribute__ ((__nothrow__)) ;
# 469 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__)) ;





extern char *get_current_dir_name (void) __attribute__ ((__nothrow__));






extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) __attribute__ ((__nothrow__)) ;


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__));


extern char **__environ;

extern char **environ;





extern int execve (__const char *__path, char *__const __argv[],
     char *__const __envp[]) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int fexecve (int __fd, char *__const __argv[], char *__const __envp[])
     __attribute__ ((__nothrow__));




extern int execv (__const char *__path, char *__const __argv[])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int execle (__const char *__path, __const char *__arg, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int execl (__const char *__path, __const char *__arg, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int execvp (__const char *__file, char *__const __argv[])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int execlp (__const char *__file, __const char *__arg, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int nice (int __inc) __attribute__ ((__nothrow__)) ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/bits/confname.h" 1 3 4
# 26 "/usr/include/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,


    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS

  };
# 553 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (__const char *__path, int __name)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__));


extern long int sysconf (int __name) __attribute__ ((__nothrow__)) __attribute__ ((__const__));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__));




extern __pid_t getpid (void) __attribute__ ((__nothrow__));


extern __pid_t getppid (void) __attribute__ ((__nothrow__));




extern __pid_t getpgrp (void) __attribute__ ((__nothrow__));
# 589 "/usr/include/unistd.h" 3 4
extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__));

extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__));






extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__));
# 615 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__));
# 632 "/usr/include/unistd.h" 3 4
extern __pid_t setsid (void) __attribute__ ((__nothrow__));



extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__));



extern __uid_t getuid (void) __attribute__ ((__nothrow__));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__));


extern __gid_t getgid (void) __attribute__ ((__nothrow__));


extern __gid_t getegid (void) __attribute__ ((__nothrow__));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__)) ;



extern int group_member (__gid_t __gid) __attribute__ ((__nothrow__));






extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__));




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__));




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__));






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__));




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__));




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__));





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     __attribute__ ((__nothrow__));



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     __attribute__ ((__nothrow__));



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     __attribute__ ((__nothrow__));



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     __attribute__ ((__nothrow__));






extern __pid_t fork (void) __attribute__ ((__nothrow__));






extern __pid_t vfork (void) __attribute__ ((__nothrow__));





extern char *ttyname (int __fd) __attribute__ ((__nothrow__));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) __attribute__ ((__nothrow__));





extern int ttyslot (void) __attribute__ ((__nothrow__));




extern int link (__const char *__from, __const char *__to)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, __const char *__from, int __tofd,
     __const char *__to, int __flags)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (__const char *__from, __const char *__to)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int readlink (__const char *__restrict __path, char *__restrict __buf,
       size_t __len) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (__const char *__from, int __tofd,
        __const char *__to) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3))) ;


extern int readlinkat (int __fd, __const char *__restrict __path,
         char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (__const char *__name) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, __const char *__name, int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));



extern int rmdir (__const char *__path) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__));






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (__const char *__name) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 834 "/usr/include/unistd.h" 3 4
# 1 "./../include/getopt.h" 1 3 4
# 36 "./../include/getopt.h" 3 4
extern char *optarg;
# 50 "./../include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 82 "./../include/getopt.h" 3 4
struct option
{

  const char *name;





  int has_arg;
  int *flag;
  int val;
};
# 113 "./../include/getopt.h" 3 4
extern int getopt (int argc, char *const *argv, const char *shortopts);







extern int getopt_long (int argc, char *const *argv, const char *shortopts,
          const struct option *longopts, int *longind);
extern int getopt_long_only (int argc, char *const *argv,
        const char *shortopts,
               const struct option *longopts, int *longind);


extern int _getopt_internal (int argc, char *const *argv,
        const char *shortopts,
               const struct option *longopts, int *longind,
        int long_only);
# 835 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int sethostname (__const char *__name, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) __attribute__ ((__nothrow__)) ;





extern int getdomainname (char *__name, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (__const char *__name, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) __attribute__ ((__nothrow__));


extern int revoke (__const char *__file) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int acct (__const char *__name) __attribute__ ((__nothrow__));



extern char *getusershell (void) __attribute__ ((__nothrow__));
extern void endusershell (void) __attribute__ ((__nothrow__));
extern void setusershell (void) __attribute__ ((__nothrow__));





extern int daemon (int __nochdir, int __noclose) __attribute__ ((__nothrow__)) ;






extern int chroot (__const char *__path) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (__const char *__prompt) __attribute__ ((__nonnull__ (1)));
# 920 "/usr/include/unistd.h" 3 4
extern int fsync (int __fd);






extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__));




extern int getpagesize (void) __attribute__ ((__nothrow__)) __attribute__ ((__const__));




extern int getdtablesize (void) __attribute__ ((__nothrow__));




extern int truncate (__const char *__file, __off_t __length)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
# 957 "/usr/include/unistd.h" 3 4
extern int truncate64 (__const char *__file, __off64_t __length)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
# 967 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) __attribute__ ((__nothrow__)) ;
# 977 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) __attribute__ ((__nothrow__)) ;
# 987 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) __attribute__ ((__nothrow__)) ;





extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__));
# 1008 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) __attribute__ ((__nothrow__));
# 1031 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1041 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1062 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes) __attribute__ ((__nothrow__));







extern char *crypt (__const char *__key, __const char *__salt)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern void encrypt (char *__block, int __edflag) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern void swab (__const void *__restrict __from, void *__restrict __to,
    ssize_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));







extern char *ctermid (char *__s) __attribute__ ((__nothrow__));
# 1100 "/usr/include/unistd.h" 3 4

# 159 "system.h" 2



# 1 "/usr/include/sys/param.h" 1 3 4
# 22 "/usr/include/sys/param.h" 3 4
# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/limits.h" 1 3 4
# 11 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/limits.h" 3 4
# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/limits.h" 1 3 4
# 122 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 145 "/usr/include/limits.h" 3 4
# 1 "/usr/include/bits/posix1_lim.h" 1 3 4
# 153 "/usr/include/bits/posix1_lim.h" 3 4
# 1 "/usr/include/bits/local_lim.h" 1 3 4
# 36 "/usr/include/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 37 "/usr/include/bits/local_lim.h" 2 3 4
# 154 "/usr/include/bits/posix1_lim.h" 2 3 4
# 146 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/posix2_lim.h" 1 3 4
# 150 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/xopen_lim.h" 1 3 4
# 34 "/usr/include/bits/xopen_lim.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 35 "/usr/include/bits/xopen_lim.h" 2 3 4
# 154 "/usr/include/limits.h" 2 3 4
# 123 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/limits.h" 2 3 4
# 8 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/syslimits.h" 2 3 4
# 12 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/limits.h" 2 3 4
# 23 "/usr/include/sys/param.h" 2 3 4

# 1 "/usr/include/linux/param.h" 1 3 4



# 1 "/usr/include/asm/param.h" 1 3 4
# 5 "/usr/include/linux/param.h" 2 3 4
# 25 "/usr/include/sys/param.h" 2 3 4
# 163 "system.h" 2





# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/limits.h" 1 3 4
# 169 "system.h" 2



# 1 "hwint.h" 1
# 173 "system.h" 2
# 201 "system.h"
# 1 "/usr/include/sys/time.h" 1 3 4
# 27 "/usr/include/sys/time.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 28 "/usr/include/sys/time.h" 2 3 4

# 1 "/usr/include/bits/time.h" 1 3 4
# 30 "/usr/include/sys/time.h" 2 3 4
# 39 "/usr/include/sys/time.h" 3 4

# 57 "/usr/include/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 73 "/usr/include/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int settimeofday (__const struct timeval *__tv,
    __const struct timezone *__tz)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int adjtime (__const struct timeval *__delta,
      struct timeval *__olddelta) __attribute__ ((__nothrow__));




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };




typedef enum __itimer_which __itimer_which_t;






extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) __attribute__ ((__nothrow__));




extern int setitimer (__itimer_which_t __which,
        __const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) __attribute__ ((__nothrow__));




extern int utimes (__const char *__file, __const struct timeval __tvp[2])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int lutimes (__const char *__file, __const struct timeval __tvp[2])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, __const struct timeval __tvp[2]) __attribute__ ((__nothrow__));






extern int futimesat (int __fd, __const char *__file,
        __const struct timeval __tvp[2]) __attribute__ ((__nothrow__));
# 191 "/usr/include/sys/time.h" 3 4

# 202 "system.h" 2
# 1 "/usr/include/time.h" 1 3 4
# 31 "/usr/include/time.h" 3 4








# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 40 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/time.h" 1 3 4
# 44 "/usr/include/time.h" 2 3 4
# 132 "/usr/include/time.h" 3 4


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  __const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;
# 181 "/usr/include/time.h" 3 4



extern clock_t clock (void) __attribute__ ((__nothrow__));


extern time_t time (time_t *__timer) __attribute__ ((__nothrow__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__));





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   __const char *__restrict __format,
   __const struct tm *__restrict __tp) __attribute__ ((__nothrow__));





extern char *strptime (__const char *__restrict __s,
         __const char *__restrict __fmt, struct tm *__tp)
     __attribute__ ((__nothrow__));







extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     __const char *__restrict __format,
     __const struct tm *__restrict __tp,
     __locale_t __loc) __attribute__ ((__nothrow__));

extern char *strptime_l (__const char *__restrict __s,
    __const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) __attribute__ ((__nothrow__));






extern struct tm *gmtime (__const time_t *__timer) __attribute__ ((__nothrow__));



extern struct tm *localtime (__const time_t *__timer) __attribute__ ((__nothrow__));





extern struct tm *gmtime_r (__const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__));



extern struct tm *localtime_r (__const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__));





extern char *asctime (__const struct tm *__tp) __attribute__ ((__nothrow__));


extern char *ctime (__const time_t *__timer) __attribute__ ((__nothrow__));







extern char *asctime_r (__const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__));


extern char *ctime_r (__const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__));




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__));



extern int daylight;
extern long int timezone;





extern int stime (__const time_t *__when) __attribute__ ((__nothrow__));
# 312 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__));


extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__));


extern int dysize (int __year) __attribute__ ((__nothrow__)) __attribute__ ((__const__));
# 327 "/usr/include/time.h" 3 4
extern int nanosleep (__const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__));


extern int clock_settime (clockid_t __clock_id, __const struct timespec *__tp)
     __attribute__ ((__nothrow__));






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       __const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__));


extern int timer_settime (timer_t __timerid, int __flags,
     __const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__));


extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__));
# 389 "/usr/include/time.h" 3 4
extern int getdate_err;
# 398 "/usr/include/time.h" 3 4
extern struct tm *getdate (__const char *__string);
# 412 "/usr/include/time.h" 3 4
extern int getdate_r (__const char *__restrict __string,
        struct tm *__restrict __resbufp);



# 203 "system.h" 2
# 214 "system.h"
# 1 "/usr/include/fcntl.h" 1 3 4
# 30 "/usr/include/fcntl.h" 3 4




# 1 "/usr/include/bits/fcntl.h" 1 3 4
# 138 "/usr/include/bits/fcntl.h" 3 4
struct flock
  {
    short int l_type;
    short int l_whence;

    __off_t l_start;
    __off_t l_len;




    __pid_t l_pid;
  };


struct flock64
  {
    short int l_type;
    short int l_whence;
    __off64_t l_start;
    __off64_t l_len;
    __pid_t l_pid;
  };
# 183 "/usr/include/bits/fcntl.h" 3 4



extern ssize_t readahead (int __fd, __off64_t __offset, size_t __count)
    __attribute__ ((__nothrow__));


# 35 "/usr/include/fcntl.h" 2 3 4



# 1 "/usr/include/sys/stat.h" 1 3 4
# 103 "/usr/include/sys/stat.h" 3 4


# 1 "/usr/include/bits/stat.h" 1 3 4
# 36 "/usr/include/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;
    unsigned short int __pad1;

    __ino_t st_ino;



    __mode_t st_mode;
    __nlink_t st_nlink;
    __uid_t st_uid;
    __gid_t st_gid;
    __dev_t st_rdev;
    unsigned short int __pad2;

    __off_t st_size;



    __blksize_t st_blksize;


    __blkcnt_t st_blocks;
# 70 "/usr/include/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 85 "/usr/include/bits/stat.h" 3 4
    unsigned long int __unused4;
    unsigned long int __unused5;



  };


struct stat64
  {
    __dev_t st_dev;
    unsigned int __pad1;

    __ino_t __st_ino;
    __mode_t st_mode;
    __nlink_t st_nlink;
    __uid_t st_uid;
    __gid_t st_gid;
    __dev_t st_rdev;
    unsigned int __pad2;
    __off64_t st_size;
    __blksize_t st_blksize;

    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 127 "/usr/include/bits/stat.h" 3 4
    __ino64_t st_ino;
  };
# 106 "/usr/include/sys/stat.h" 2 3 4
# 207 "/usr/include/sys/stat.h" 3 4
extern int stat (__const char *__restrict __file,
   struct stat *__restrict __buf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int fstat (int __fd, struct stat *__buf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));
# 226 "/usr/include/sys/stat.h" 3 4
extern int stat64 (__const char *__restrict __file,
     struct stat64 *__restrict __buf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int fstat64 (int __fd, struct stat64 *__buf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));







extern int fstatat (int __fd, __const char *__restrict __file,
      struct stat *__restrict __buf, int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));
# 250 "/usr/include/sys/stat.h" 3 4
extern int fstatat64 (int __fd, __const char *__restrict __file,
        struct stat64 *__restrict __buf, int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));






extern int lstat (__const char *__restrict __file,
    struct stat *__restrict __buf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 272 "/usr/include/sys/stat.h" 3 4
extern int lstat64 (__const char *__restrict __file,
      struct stat64 *__restrict __buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));





extern int chmod (__const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int lchmod (__const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) __attribute__ ((__nothrow__));





extern int fchmodat (int __fd, __const char *__file, __mode_t mode, int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2))) ;






extern __mode_t umask (__mode_t __mask) __attribute__ ((__nothrow__));




extern __mode_t getumask (void) __attribute__ ((__nothrow__));



extern int mkdir (__const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, __const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));






extern int mknod (__const char *__path, __mode_t __mode, __dev_t __dev)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int mknodat (int __fd, __const char *__path, __mode_t __mode,
      __dev_t __dev) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));




extern int mkfifo (__const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, __const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));
# 380 "/usr/include/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, __const char *__filename,
      struct stat *__stat_buf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, __const char *__filename,
       struct stat *__stat_buf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, __const char *__filename,
         struct stat *__stat_buf, int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4)));
# 413 "/usr/include/sys/stat.h" 3 4
extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3)));
extern int __xstat64 (int __ver, __const char *__filename,
        struct stat64 *__stat_buf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat64 (int __ver, __const char *__filename,
         struct stat64 *__stat_buf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat64 (int __ver, int __fildes, __const char *__filename,
    struct stat64 *__stat_buf, int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4)));

extern int __xmknod (int __ver, __const char *__path, __mode_t __mode,
       __dev_t *__dev) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, __const char *__path,
         __mode_t __mode, __dev_t *__dev)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 5)));




extern __inline__ int
__attribute__ ((__nothrow__)) stat (__const char *__path, struct stat *__statbuf)
{
  return __xstat (3, __path, __statbuf);
}


extern __inline__ int
__attribute__ ((__nothrow__)) lstat (__const char *__path, struct stat *__statbuf)
{
  return __lxstat (3, __path, __statbuf);
}


extern __inline__ int
__attribute__ ((__nothrow__)) fstat (int __fd, struct stat *__statbuf)
{
  return __fxstat (3, __fd, __statbuf);
}


extern __inline__ int
__attribute__ ((__nothrow__)) fstatat (int __fd, __const char *__filename, struct stat *__statbuf, int __flag)

{
  return __fxstatat (3, __fd, __filename, __statbuf, __flag);
}



extern __inline__ int
__attribute__ ((__nothrow__)) mknod (__const char *__path, __mode_t __mode, __dev_t __dev)
{
  return __xmknod (1, __path, __mode, &__dev);
}



extern __inline__ int
__attribute__ ((__nothrow__)) mknodat (int __fd, __const char *__path, __mode_t __mode, __dev_t __dev)

{
  return __xmknodat (1, __fd, __path, __mode, &__dev);
}





extern __inline__ int
__attribute__ ((__nothrow__)) stat64 (__const char *__path, struct stat64 *__statbuf)
{
  return __xstat64 (3, __path, __statbuf);
}


extern __inline__ int
__attribute__ ((__nothrow__)) lstat64 (__const char *__path, struct stat64 *__statbuf)
{
  return __lxstat64 (3, __path, __statbuf);
}


extern __inline__ int
__attribute__ ((__nothrow__)) fstat64 (int __fd, struct stat64 *__statbuf)
{
  return __fxstat64 (3, __fd, __statbuf);
}


extern __inline__ int
__attribute__ ((__nothrow__)) fstatat64 (int __fd, __const char *__filename, struct stat64 *__statbuf, int __flag)

{
  return __fxstatat64 (3, __fd, __filename, __statbuf, __flag);
}







# 39 "/usr/include/fcntl.h" 2 3 4
# 76 "/usr/include/fcntl.h" 3 4
extern int fcntl (int __fd, int __cmd, ...);
# 85 "/usr/include/fcntl.h" 3 4
extern int open (__const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 95 "/usr/include/fcntl.h" 3 4
extern int open64 (__const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 109 "/usr/include/fcntl.h" 3 4
extern int openat (int __fd, __const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 120 "/usr/include/fcntl.h" 3 4
extern int openat64 (int __fd, __const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 130 "/usr/include/fcntl.h" 3 4
extern int creat (__const char *__file, __mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/fcntl.h" 3 4
extern int creat64 (__const char *__file, __mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise (int __fd, __off_t __offset, __off_t __len,
     int __advise) __attribute__ ((__nothrow__));
# 188 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise64 (int __fd, __off64_t __offset, __off64_t __len,
       int __advise) __attribute__ ((__nothrow__));
# 198 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate (int __fd, __off_t __offset, __off_t __len);
# 209 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate64 (int __fd, __off64_t __offset, __off64_t __len);




# 215 "system.h" 2
# 252 "system.h"
# 1 "/usr/include/sys/wait.h" 1 3 4
# 29 "/usr/include/sys/wait.h" 3 4


# 1 "/usr/include/signal.h" 1 3 4
# 31 "/usr/include/signal.h" 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 103 "/usr/include/bits/sigset.h" 3 4
extern int __sigismember (__const __sigset_t *, int);
extern int __sigaddset (__sigset_t *, int);
extern int __sigdelset (__sigset_t *, int);
# 117 "/usr/include/bits/sigset.h" 3 4
extern __inline int __sigismember (__const __sigset_t *__set, int __sig) { unsigned long int __mask = (((unsigned long int) 1) << (((__sig) - 1) % (8 * sizeof (unsigned long int)))); unsigned long int __word = (((__sig) - 1) / (8 * sizeof (unsigned long int))); return (__set->__val[__word] & __mask) ? 1 : 0; }
extern __inline int __sigaddset ( __sigset_t *__set, int __sig) { unsigned long int __mask = (((unsigned long int) 1) << (((__sig) - 1) % (8 * sizeof (unsigned long int)))); unsigned long int __word = (((__sig) - 1) / (8 * sizeof (unsigned long int))); return ((__set->__val[__word] |= __mask), 0); }
extern __inline int __sigdelset ( __sigset_t *__set, int __sig) { unsigned long int __mask = (((unsigned long int) 1) << (((__sig) - 1) % (8 * sizeof (unsigned long int)))); unsigned long int __word = (((__sig) - 1) / (8 * sizeof (unsigned long int))); return ((__set->__val[__word] &= ~__mask), 0); }
# 34 "/usr/include/signal.h" 2 3 4







typedef __sig_atomic_t sig_atomic_t;

# 58 "/usr/include/signal.h" 3 4
# 1 "/usr/include/bits/signum.h" 1 3 4
# 59 "/usr/include/signal.h" 2 3 4
# 75 "/usr/include/signal.h" 3 4
typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__));

extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__));







extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__));
# 104 "/usr/include/signal.h" 3 4





extern __sighandler_t bsd_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__));






extern int kill (__pid_t __pid, int __sig) __attribute__ ((__nothrow__));






extern int killpg (__pid_t __pgrp, int __sig) __attribute__ ((__nothrow__));




extern int raise (int __sig) __attribute__ ((__nothrow__));




extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__));
extern int gsignal (int __sig) __attribute__ ((__nothrow__));




extern void psignal (int __sig, __const char *__s);
# 153 "/usr/include/signal.h" 3 4
extern int __sigpause (int __sig_or_mask, int __is_sig);
# 162 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
# 181 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) __attribute__ ((__nothrow__)) __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) __attribute__ ((__nothrow__)) __attribute__ ((__deprecated__));


extern int siggetmask (void) __attribute__ ((__nothrow__)) __attribute__ ((__deprecated__));
# 196 "/usr/include/signal.h" 3 4
typedef __sighandler_t sighandler_t;




typedef __sighandler_t sig_t;
# 212 "/usr/include/signal.h" 3 4
# 1 "/usr/include/bits/siginfo.h" 1 3 4
# 25 "/usr/include/bits/siginfo.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 26 "/usr/include/bits/siginfo.h" 2 3 4







typedef union sigval
  {
    int sival_int;
    void *sival_ptr;
  } sigval_t;
# 51 "/usr/include/bits/siginfo.h" 3 4
typedef struct siginfo
  {
    int si_signo;
    int si_errno;

    int si_code;

    union
      {
 int _pad[((128 / sizeof (int)) - 3)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;
      } _sifields;
  } siginfo_t;
# 129 "/usr/include/bits/siginfo.h" 3 4
enum
{
  SI_ASYNCNL = -60,

  SI_TKILL = -6,

  SI_SIGIO,

  SI_ASYNCIO,

  SI_MESGQ,

  SI_TIMER,

  SI_QUEUE,

  SI_USER,

  SI_KERNEL = 0x80

};



enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR

};


enum
{
  TRAP_BRKPT = 1,

  TRAP_TRACE

};


enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};
# 273 "/usr/include/bits/siginfo.h" 3 4
typedef struct sigevent
  {
    sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 3)];



 __pid_t _tid;

 struct
   {
     void (*_function) (sigval_t);
     void *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;






enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4

};
# 213 "/usr/include/signal.h" 2 3 4



extern int sigemptyset (sigset_t *__set) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int sigismember (__const sigset_t *__set, int __signo)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int sigisemptyset (__const sigset_t *__set) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int sigandset (sigset_t *__set, __const sigset_t *__left,
        __const sigset_t *__right) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern int sigorset (sigset_t *__set, __const sigset_t *__left,
       __const sigset_t *__right) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2, 3)));




# 1 "/usr/include/bits/sigaction.h" 1 3 4
# 25 "/usr/include/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 247 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, __const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) __attribute__ ((__nothrow__));






extern int sigsuspend (__const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, __const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) __attribute__ ((__nothrow__));


extern int sigpending (sigset_t *__set) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int sigwait (__const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));






extern int sigwaitinfo (__const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (__const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    __const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, __const union sigval __val)
     __attribute__ ((__nothrow__));
# 304 "/usr/include/signal.h" 3 4
extern __const char *__const _sys_siglist[65];
extern __const char *__const sys_siglist[65];


struct sigvec
  {
    __sighandler_t sv_handler;
    int sv_mask;

    int sv_flags;

  };
# 328 "/usr/include/signal.h" 3 4
extern int sigvec (int __sig, __const struct sigvec *__vec,
     struct sigvec *__ovec) __attribute__ ((__nothrow__));



# 1 "/usr/include/bits/sigcontext.h" 1 3 4
# 28 "/usr/include/bits/sigcontext.h" 3 4
# 1 "/usr/include/asm/sigcontext.h" 1 3 4
# 18 "/usr/include/asm/sigcontext.h" 3 4
struct _fpreg {
 unsigned short significand[4];
 unsigned short exponent;
};

struct _fpxreg {
 unsigned short significand[4];
 unsigned short exponent;
 unsigned short padding[3];
};

struct _xmmreg {
 unsigned long element[4];
};

struct _fpstate {

 unsigned long cw;
 unsigned long sw;
 unsigned long tag;
 unsigned long ipoff;
 unsigned long cssel;
 unsigned long dataoff;
 unsigned long datasel;
 struct _fpreg _st[8];
 unsigned short status;
 unsigned short magic;


 unsigned long _fxsr_env[6];
 unsigned long mxcsr;
 unsigned long reserved;
 struct _fpxreg _fxsr_st[8];
 struct _xmmreg _xmm[8];
 unsigned long padding[56];
};



struct sigcontext {
 unsigned short gs, __gsh;
 unsigned short fs, __fsh;
 unsigned short es, __esh;
 unsigned short ds, __dsh;
 unsigned long edi;
 unsigned long esi;
 unsigned long ebp;
 unsigned long esp;
 unsigned long ebx;
 unsigned long edx;
 unsigned long ecx;
 unsigned long eax;
 unsigned long trapno;
 unsigned long err;
 unsigned long eip;
 unsigned short cs, __csh;
 unsigned long eflags;
 unsigned long esp_at_signal;
 unsigned short ss, __ssh;
 struct _fpstate * fpstate;
 unsigned long oldmask;
 unsigned long cr2;
};
# 29 "/usr/include/bits/sigcontext.h" 2 3 4
# 334 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) __attribute__ ((__nothrow__));
# 346 "/usr/include/signal.h" 3 4
extern int siginterrupt (int __sig, int __interrupt) __attribute__ ((__nothrow__));

# 1 "/usr/include/bits/sigstack.h" 1 3 4
# 26 "/usr/include/bits/sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };



enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 50 "/usr/include/bits/sigstack.h" 3 4
typedef struct sigaltstack
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 349 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/sys/ucontext.h" 1 3 4
# 23 "/usr/include/sys/ucontext.h" 3 4
# 1 "/usr/include/signal.h" 1 3 4
# 24 "/usr/include/sys/ucontext.h" 2 3 4



# 1 "/usr/include/bits/sigcontext.h" 1 3 4
# 28 "/usr/include/sys/ucontext.h" 2 3 4



typedef int greg_t;





typedef greg_t gregset_t[19];



enum
{
  REG_GS = 0,

  REG_FS,

  REG_ES,

  REG_DS,

  REG_EDI,

  REG_ESI,

  REG_EBP,

  REG_ESP,

  REG_EBX,

  REG_EDX,

  REG_ECX,

  REG_EAX,

  REG_TRAPNO,

  REG_ERR,

  REG_EIP,

  REG_CS,

  REG_EFL,

  REG_UESP,

  REG_SS

};



struct _libc_fpreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
};

struct _libc_fpstate
{
  unsigned long int cw;
  unsigned long int sw;
  unsigned long int tag;
  unsigned long int ipoff;
  unsigned long int cssel;
  unsigned long int dataoff;
  unsigned long int datasel;
  struct _libc_fpreg _st[8];
  unsigned long int status;
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;


    fpregset_t fpregs;
    unsigned long int oldmask;
    unsigned long int cr2;
  } mcontext_t;


typedef struct ucontext
  {
    unsigned long int uc_flags;
    struct ucontext *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    __sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
  } ucontext_t;
# 352 "/usr/include/signal.h" 2 3 4





extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     __attribute__ ((__nothrow__)) __attribute__ ((__deprecated__));



extern int sigaltstack (__const struct sigaltstack *__restrict __ss,
   struct sigaltstack *__restrict __oss) __attribute__ ((__nothrow__));







extern int sighold (int __sig) __attribute__ ((__nothrow__));


extern int sigrelse (int __sig) __attribute__ ((__nothrow__));


extern int sigignore (int __sig) __attribute__ ((__nothrow__));


extern __sighandler_t sigset (int __sig, __sighandler_t __disp) __attribute__ ((__nothrow__));






# 1 "/usr/include/bits/sigthread.h" 1 3 4
# 31 "/usr/include/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       __const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)__attribute__ ((__nothrow__));


extern int pthread_kill (pthread_t __threadid, int __signo) __attribute__ ((__nothrow__));
# 388 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) __attribute__ ((__nothrow__));

extern int __libc_current_sigrtmax (void) __attribute__ ((__nothrow__));




# 32 "/usr/include/sys/wait.h" 2 3 4
# 1 "/usr/include/sys/resource.h" 1 3 4
# 25 "/usr/include/sys/resource.h" 3 4
# 1 "/usr/include/bits/resource.h" 1 3 4
# 33 "/usr/include/bits/resource.h" 3 4
enum __rlimit_resource
{

  RLIMIT_CPU = 0,



  RLIMIT_FSIZE = 1,



  RLIMIT_DATA = 2,



  RLIMIT_STACK = 3,



  RLIMIT_CORE = 4,






  __RLIMIT_RSS = 5,



  RLIMIT_NOFILE = 7,
  __RLIMIT_OFILE = RLIMIT_NOFILE,




  RLIMIT_AS = 9,



  __RLIMIT_NPROC = 6,



  __RLIMIT_MEMLOCK = 8,



  __RLIMIT_LOCKS = 10,



  __RLIMIT_SIGPENDING = 11,



  __RLIMIT_MSGQUEUE = 12,





  __RLIMIT_NICE = 13,




  __RLIMIT_RTPRIO = 14,


  __RLIMIT_NLIMITS = 15,
  __RLIM_NLIMITS = __RLIMIT_NLIMITS


};
# 127 "/usr/include/bits/resource.h" 3 4
typedef __rlim_t rlim_t;




typedef __rlim64_t rlim64_t;


struct rlimit
  {

    rlim_t rlim_cur;

    rlim_t rlim_max;
  };


struct rlimit64
  {

    rlim64_t rlim_cur;

    rlim64_t rlim_max;
 };



enum __rusage_who
{

  RUSAGE_SELF = 0,



  RUSAGE_CHILDREN = -1

};


# 1 "/usr/include/bits/time.h" 1 3 4
# 167 "/usr/include/bits/resource.h" 2 3 4


struct rusage
  {

    struct timeval ru_utime;

    struct timeval ru_stime;

    long int ru_maxrss;


    long int ru_ixrss;

    long int ru_idrss;

    long int ru_isrss;


    long int ru_minflt;

    long int ru_majflt;

    long int ru_nswap;


    long int ru_inblock;

    long int ru_oublock;

    long int ru_msgsnd;

    long int ru_msgrcv;

    long int ru_nsignals;



    long int ru_nvcsw;


    long int ru_nivcsw;
  };







enum __priority_which
{
  PRIO_PROCESS = 0,

  PRIO_PGRP = 1,

  PRIO_USER = 2

};
# 26 "/usr/include/sys/resource.h" 2 3 4













typedef enum __rlimit_resource __rlimit_resource_t;
typedef enum __rusage_who __rusage_who_t;
typedef enum __priority_which __priority_which_t;
# 51 "/usr/include/sys/resource.h" 3 4
extern int getrlimit (__rlimit_resource_t __resource,
        struct rlimit *__rlimits) __attribute__ ((__nothrow__));
# 62 "/usr/include/sys/resource.h" 3 4
extern int getrlimit64 (__rlimit_resource_t __resource,
   struct rlimit64 *__rlimits) __attribute__ ((__nothrow__));






extern int setrlimit (__rlimit_resource_t __resource,
        __const struct rlimit *__rlimits) __attribute__ ((__nothrow__));
# 82 "/usr/include/sys/resource.h" 3 4
extern int setrlimit64 (__rlimit_resource_t __resource,
   __const struct rlimit64 *__rlimits) __attribute__ ((__nothrow__));




extern int getrusage (__rusage_who_t __who, struct rusage *__usage) __attribute__ ((__nothrow__));





extern int getpriority (__priority_which_t __which, id_t __who) __attribute__ ((__nothrow__));



extern int setpriority (__priority_which_t __which, id_t __who, int __prio)
     __attribute__ ((__nothrow__));


# 33 "/usr/include/sys/wait.h" 2 3 4
# 102 "/usr/include/sys/wait.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 116 "/usr/include/sys/wait.h" 3 4
extern __pid_t wait (__WAIT_STATUS __stat_loc);
# 139 "/usr/include/sys/wait.h" 3 4
extern __pid_t waitpid (__pid_t __pid, int *__stat_loc, int __options);



# 1 "/usr/include/bits/siginfo.h" 1 3 4
# 25 "/usr/include/bits/siginfo.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 26 "/usr/include/bits/siginfo.h" 2 3 4
# 144 "/usr/include/sys/wait.h" 2 3 4
# 155 "/usr/include/sys/wait.h" 3 4
extern int waitid (idtype_t __idtype, __id_t __id, siginfo_t *__infop,
     int __options);





struct rusage;






extern __pid_t wait3 (__WAIT_STATUS __stat_loc, int __options,
        struct rusage * __usage) __attribute__ ((__nothrow__));





struct rusage;


extern __pid_t wait4 (__pid_t __pid, __WAIT_STATUS __stat_loc, int __options,
        struct rusage *__usage) __attribute__ ((__nothrow__));




# 253 "system.h" 2
# 303 "system.h"
extern int getopt (int, char * const *, const char *);
# 319 "system.h"
# 1 "/usr/include/malloc.h" 1 3 4
# 24 "/usr/include/malloc.h" 3 4
# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 25 "/usr/include/malloc.h" 2 3 4
# 46 "/usr/include/malloc.h" 3 4



extern void *malloc (size_t __size) __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;


extern void *calloc (size_t __nmemb, size_t __size) __attribute__ ((__nothrow__))
       __attribute__ ((__malloc__)) ;



extern void *realloc (void *__ptr, size_t __size) __attribute__ ((__nothrow__))
       __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));


extern void free (void *__ptr) __attribute__ ((__nothrow__));


extern void cfree (void *__ptr) __attribute__ ((__nothrow__));


extern void *memalign (size_t __alignment, size_t __size) __attribute__ ((__nothrow__))
       __attribute__ ((__malloc__)) ;


extern void *valloc (size_t __size) __attribute__ ((__nothrow__))
       __attribute__ ((__malloc__)) ;



extern void * pvalloc (size_t __size) __attribute__ ((__nothrow__))
       __attribute__ ((__malloc__)) ;



extern void *(*__morecore) (ptrdiff_t __size);


extern void *__default_morecore (ptrdiff_t __size) __attribute__ ((__nothrow__))
       __attribute__ ((__malloc__));



struct mallinfo {
  int arena;
  int ordblks;
  int smblks;
  int hblks;
  int hblkhd;
  int usmblks;
  int fsmblks;
  int uordblks;
  int fordblks;
  int keepcost;
};


extern struct mallinfo mallinfo (void) __attribute__ ((__nothrow__));
# 128 "/usr/include/malloc.h" 3 4
extern int mallopt (int __param, int __val) __attribute__ ((__nothrow__));



extern int malloc_trim (size_t __pad) __attribute__ ((__nothrow__));



extern size_t malloc_usable_size (void *__ptr) __attribute__ ((__nothrow__));


extern void malloc_stats (void) __attribute__ ((__nothrow__));


extern void *malloc_get_state (void) __attribute__ ((__nothrow__));



extern int malloc_set_state (void *__ptr) __attribute__ ((__nothrow__));




extern void (*__malloc_initialize_hook) (void);

extern void (*__free_hook) (void *__ptr, __const void *);

extern void *(*__malloc_hook) (size_t __size, __const void *);

extern void *(*__realloc_hook) (void *__ptr, size_t __size, __const void *);

extern void *(*__memalign_hook) (size_t __alignment, size_t __size, __const void *);


extern void (*__after_morecore_hook) (void);


extern void __malloc_check_init (void) __attribute__ ((__nothrow__));



# 320 "system.h" 2
# 469 "system.h"
# 1 "./../include/filenames.h" 1
# 470 "system.h" 2
# 480 "system.h"
# 1 "./../include/libiberty.h" 1
# 42 "./../include/libiberty.h"
# 1 "./../include/ansidecl.h" 1
# 43 "./../include/libiberty.h" 2



# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 47 "./../include/libiberty.h" 2







extern char **buildargv (const char *) __attribute__ ((__malloc__));



extern void freeargv (char **);




extern char **dupargv (char **) __attribute__ ((__malloc__));
# 86 "./../include/libiberty.h"
extern const char *lbasename (const char *);



extern char *lrealpath (const char *);





extern char *concat (const char *, ...) __attribute__ ((__malloc__));
# 105 "./../include/libiberty.h"
extern char *reconcat (char *, const char *, ...) __attribute__ ((__malloc__));





extern unsigned long concat_length (const char *, ...);






extern char *concat_copy (char *, const char *, ...);






extern char *concat_copy2 (const char *, ...);



extern char *libiberty_concat_ptr;
# 141 "./../include/libiberty.h"
extern int fdmatch (int fd1, int fd2);




extern char * getpwd (void);



extern long get_run_time (void);




extern char *make_relative_prefix (const char *, const char *, const char *);




extern char *choose_temp_base (void) __attribute__ ((__malloc__));



extern char *make_temp_file (const char *) __attribute__ ((__malloc__));



extern const char *spaces (int count);




extern int errno_max (void);




extern const char *strerrno (int);



extern int strtoerrno (const char *);



extern char *xstrerror (int);




extern int signo_max (void);
# 203 "./../include/libiberty.h"
extern const char *strsigno (int);



extern int strtosigno (const char *);



extern int xatexit (void (*fn) (void));



extern void xexit (int status) __attribute__ ((__noreturn__));



extern void xmalloc_set_program_name (const char *);


extern void xmalloc_failed (size_t) __attribute__ ((__noreturn__));





extern void * xmalloc (size_t) __attribute__ ((__malloc__));





extern void * xrealloc (void *, size_t);




extern void * xcalloc (size_t, size_t) __attribute__ ((__malloc__));



extern char *xstrdup (const char *) __attribute__ ((__malloc__));



extern void * xmemdup (const void *, size_t, size_t) __attribute__ ((__malloc__));


extern double physmem_total (void);
extern double physmem_available (void);





extern const unsigned char _hex_value[256];
extern void hex_init (void);
# 274 "./../include/libiberty.h"
extern int pexecute (const char *, char * const *, const char *, const char *, char **, char **, int);




extern int pwait (int, int *, int);





extern int asprintf (char **, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__nonnull__ (2)));
# 304 "./../include/libiberty.h"
extern void * C_alloca (size_t) __attribute__ ((__malloc__));
# 481 "system.h" 2
# 534 "system.h"
# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stdbool.h" 1 3 4
# 535 "system.h" 2
# 578 "system.h"
        




        



        
# 610 "system.h"
        
# 637 "system.h"
        
# 649 "system.h"
        
# 659 "system.h"
        
# 6 "insn-recog.c" 2
# 1 "coretypes.h" 1
# 40 "coretypes.h"
struct rtx_def;
typedef struct rtx_def *rtx;
struct rtvec_def;
typedef struct rtvec_def *rtvec;
union tree_node;
typedef union tree_node *tree;





struct cpp_reader;
# 7 "insn-recog.c" 2
# 1 "tm.h" 1



# 1 "config/i386/i386.h" 1
# 39 "config/i386/i386.h"
struct processor_costs {
  const int add;
  const int lea;
  const int shift_var;
  const int shift_const;
  const int mult_init[5];

  const int mult_bit;
  const int divide[5];

  int movsx;
  int movzx;
  const int large_insn;
  const int move_ratio;

  const int movzbl_load;
  const int int_load[3];


  const int int_store[3];

  const int fp_move;
  const int fp_load[3];

  const int fp_store[3];

  const int mmx_move;
  const int mmx_load[2];

  const int mmx_store[2];

  const int sse_move;
  const int sse_load[3];

  const int sse_store[3];

  const int mmxsse_to_integer;

  const int prefetch_block;
  const int simultaneous_prefetches;

  const int branch_cost;
  const int fadd;
  const int fmul;
  const int fdiv;
  const int fabs;
  const int fchs;
  const int fsqrt;
};

extern const struct processor_costs *ix86_cost;



extern int target_flags;
# 224 "config/i386/i386.h"
extern const int x86_use_leave, x86_push_memory, x86_zero_extend_with_and;
extern const int x86_use_bit_test, x86_cmove, x86_deep_branch;
extern const int x86_branch_hints, x86_unroll_strlen;
extern const int x86_double_with_add, x86_partial_reg_stall, x86_movx;
extern const int x86_use_loop, x86_use_fiop, x86_use_mov0;
extern const int x86_use_cltd, x86_read_modify_write;
extern const int x86_read_modify, x86_split_long_moves;
extern const int x86_promote_QImode, x86_single_stringop, x86_fast_prefix;
extern const int x86_himode_math, x86_qimode_math, x86_promote_qi_regs;
extern const int x86_promote_hi_regs, x86_integer_DFmode_moves;
extern const int x86_add_esp_4, x86_add_esp_8, x86_sub_esp_4, x86_sub_esp_8;
extern const int x86_partial_reg_dependency, x86_memory_mismatch_stall;
extern const int x86_accumulate_outgoing_args, x86_prologue_using_move;
extern const int x86_epilogue_using_move, x86_decompose_lea;
extern const int x86_arch_always_fancy_math_387, x86_shift1;
extern const int x86_sse_partial_reg_dependency, x86_sse_partial_regs;
extern const int x86_sse_typeless_stores, x86_sse_load0_by_pxor;
extern const int x86_use_ffreep, x86_sse_partial_regs_for_cvtsd2ss;
extern const int x86_inter_unit_moves;
extern int x86_prefetch_sse;
# 1278 "config/i386/i386.h"
enum reg_class
{
  NO_REGS,
  AREG, DREG, CREG, BREG, SIREG, DIREG,
  AD_REGS,
  Q_REGS,
  NON_Q_REGS,
  INDEX_REGS,
  LEGACY_REGS,
  GENERAL_REGS,
  FP_TOP_REG, FP_SECOND_REG,
  FLOAT_REGS,
  SSE_REGS,
  MMX_REGS,
  FP_TOP_SSE_REGS,
  FP_SECOND_SSE_REGS,
  FLOAT_SSE_REGS,
  FLOAT_INT_REGS,
  INT_SSE_REGS,
  FLOAT_INT_SSE_REGS,
  ALL_REGS, LIM_REG_CLASSES
};
# 1748 "config/i386/i386.h"
typedef struct ix86_args {
  int words;
  int nregs;
  int regno;
  int fastcall;
  int sse_words;
  int sse_nregs;
  int warn_sse;
  int warn_mmx;
  int sse_regno;
  int mmx_words;
  int mmx_nregs;
  int mmx_regno;
  int maybe_vaarg;
} CUMULATIVE_ARGS;
# 2086 "config/i386/i386.h"
enum ix86_builtins
{
  IX86_BUILTIN_ADDPS,
  IX86_BUILTIN_ADDSS,
  IX86_BUILTIN_DIVPS,
  IX86_BUILTIN_DIVSS,
  IX86_BUILTIN_MULPS,
  IX86_BUILTIN_MULSS,
  IX86_BUILTIN_SUBPS,
  IX86_BUILTIN_SUBSS,

  IX86_BUILTIN_CMPEQPS,
  IX86_BUILTIN_CMPLTPS,
  IX86_BUILTIN_CMPLEPS,
  IX86_BUILTIN_CMPGTPS,
  IX86_BUILTIN_CMPGEPS,
  IX86_BUILTIN_CMPNEQPS,
  IX86_BUILTIN_CMPNLTPS,
  IX86_BUILTIN_CMPNLEPS,
  IX86_BUILTIN_CMPNGTPS,
  IX86_BUILTIN_CMPNGEPS,
  IX86_BUILTIN_CMPORDPS,
  IX86_BUILTIN_CMPUNORDPS,
  IX86_BUILTIN_CMPNEPS,
  IX86_BUILTIN_CMPEQSS,
  IX86_BUILTIN_CMPLTSS,
  IX86_BUILTIN_CMPLESS,
  IX86_BUILTIN_CMPNEQSS,
  IX86_BUILTIN_CMPNLTSS,
  IX86_BUILTIN_CMPNLESS,
  IX86_BUILTIN_CMPORDSS,
  IX86_BUILTIN_CMPUNORDSS,
  IX86_BUILTIN_CMPNESS,

  IX86_BUILTIN_COMIEQSS,
  IX86_BUILTIN_COMILTSS,
  IX86_BUILTIN_COMILESS,
  IX86_BUILTIN_COMIGTSS,
  IX86_BUILTIN_COMIGESS,
  IX86_BUILTIN_COMINEQSS,
  IX86_BUILTIN_UCOMIEQSS,
  IX86_BUILTIN_UCOMILTSS,
  IX86_BUILTIN_UCOMILESS,
  IX86_BUILTIN_UCOMIGTSS,
  IX86_BUILTIN_UCOMIGESS,
  IX86_BUILTIN_UCOMINEQSS,

  IX86_BUILTIN_CVTPI2PS,
  IX86_BUILTIN_CVTPS2PI,
  IX86_BUILTIN_CVTSI2SS,
  IX86_BUILTIN_CVTSI642SS,
  IX86_BUILTIN_CVTSS2SI,
  IX86_BUILTIN_CVTSS2SI64,
  IX86_BUILTIN_CVTTPS2PI,
  IX86_BUILTIN_CVTTSS2SI,
  IX86_BUILTIN_CVTTSS2SI64,

  IX86_BUILTIN_MAXPS,
  IX86_BUILTIN_MAXSS,
  IX86_BUILTIN_MINPS,
  IX86_BUILTIN_MINSS,

  IX86_BUILTIN_LOADAPS,
  IX86_BUILTIN_LOADUPS,
  IX86_BUILTIN_STOREAPS,
  IX86_BUILTIN_STOREUPS,
  IX86_BUILTIN_LOADSS,
  IX86_BUILTIN_STORESS,
  IX86_BUILTIN_MOVSS,

  IX86_BUILTIN_MOVHLPS,
  IX86_BUILTIN_MOVLHPS,
  IX86_BUILTIN_LOADHPS,
  IX86_BUILTIN_LOADLPS,
  IX86_BUILTIN_STOREHPS,
  IX86_BUILTIN_STORELPS,

  IX86_BUILTIN_MASKMOVQ,
  IX86_BUILTIN_MOVMSKPS,
  IX86_BUILTIN_PMOVMSKB,

  IX86_BUILTIN_MOVNTPS,
  IX86_BUILTIN_MOVNTQ,

  IX86_BUILTIN_LOADDQA,
  IX86_BUILTIN_LOADDQU,
  IX86_BUILTIN_STOREDQA,
  IX86_BUILTIN_STOREDQU,
  IX86_BUILTIN_MOVQ,
  IX86_BUILTIN_LOADD,
  IX86_BUILTIN_STORED,

  IX86_BUILTIN_CLRTI,

  IX86_BUILTIN_PACKSSWB,
  IX86_BUILTIN_PACKSSDW,
  IX86_BUILTIN_PACKUSWB,

  IX86_BUILTIN_PADDB,
  IX86_BUILTIN_PADDW,
  IX86_BUILTIN_PADDD,
  IX86_BUILTIN_PADDQ,
  IX86_BUILTIN_PADDSB,
  IX86_BUILTIN_PADDSW,
  IX86_BUILTIN_PADDUSB,
  IX86_BUILTIN_PADDUSW,
  IX86_BUILTIN_PSUBB,
  IX86_BUILTIN_PSUBW,
  IX86_BUILTIN_PSUBD,
  IX86_BUILTIN_PSUBQ,
  IX86_BUILTIN_PSUBSB,
  IX86_BUILTIN_PSUBSW,
  IX86_BUILTIN_PSUBUSB,
  IX86_BUILTIN_PSUBUSW,

  IX86_BUILTIN_PAND,
  IX86_BUILTIN_PANDN,
  IX86_BUILTIN_POR,
  IX86_BUILTIN_PXOR,

  IX86_BUILTIN_PAVGB,
  IX86_BUILTIN_PAVGW,

  IX86_BUILTIN_PCMPEQB,
  IX86_BUILTIN_PCMPEQW,
  IX86_BUILTIN_PCMPEQD,
  IX86_BUILTIN_PCMPGTB,
  IX86_BUILTIN_PCMPGTW,
  IX86_BUILTIN_PCMPGTD,

  IX86_BUILTIN_PEXTRW,
  IX86_BUILTIN_PINSRW,

  IX86_BUILTIN_PMADDWD,

  IX86_BUILTIN_PMAXSW,
  IX86_BUILTIN_PMAXUB,
  IX86_BUILTIN_PMINSW,
  IX86_BUILTIN_PMINUB,

  IX86_BUILTIN_PMULHUW,
  IX86_BUILTIN_PMULHW,
  IX86_BUILTIN_PMULLW,

  IX86_BUILTIN_PSADBW,
  IX86_BUILTIN_PSHUFW,

  IX86_BUILTIN_PSLLW,
  IX86_BUILTIN_PSLLD,
  IX86_BUILTIN_PSLLQ,
  IX86_BUILTIN_PSRAW,
  IX86_BUILTIN_PSRAD,
  IX86_BUILTIN_PSRLW,
  IX86_BUILTIN_PSRLD,
  IX86_BUILTIN_PSRLQ,
  IX86_BUILTIN_PSLLWI,
  IX86_BUILTIN_PSLLDI,
  IX86_BUILTIN_PSLLQI,
  IX86_BUILTIN_PSRAWI,
  IX86_BUILTIN_PSRADI,
  IX86_BUILTIN_PSRLWI,
  IX86_BUILTIN_PSRLDI,
  IX86_BUILTIN_PSRLQI,

  IX86_BUILTIN_PUNPCKHBW,
  IX86_BUILTIN_PUNPCKHWD,
  IX86_BUILTIN_PUNPCKHDQ,
  IX86_BUILTIN_PUNPCKLBW,
  IX86_BUILTIN_PUNPCKLWD,
  IX86_BUILTIN_PUNPCKLDQ,

  IX86_BUILTIN_SHUFPS,

  IX86_BUILTIN_RCPPS,
  IX86_BUILTIN_RCPSS,
  IX86_BUILTIN_RSQRTPS,
  IX86_BUILTIN_RSQRTSS,
  IX86_BUILTIN_SQRTPS,
  IX86_BUILTIN_SQRTSS,

  IX86_BUILTIN_UNPCKHPS,
  IX86_BUILTIN_UNPCKLPS,

  IX86_BUILTIN_ANDPS,
  IX86_BUILTIN_ANDNPS,
  IX86_BUILTIN_ORPS,
  IX86_BUILTIN_XORPS,

  IX86_BUILTIN_EMMS,
  IX86_BUILTIN_LDMXCSR,
  IX86_BUILTIN_STMXCSR,
  IX86_BUILTIN_SFENCE,


  IX86_BUILTIN_FEMMS,
  IX86_BUILTIN_PAVGUSB,
  IX86_BUILTIN_PF2ID,
  IX86_BUILTIN_PFACC,
  IX86_BUILTIN_PFADD,
  IX86_BUILTIN_PFCMPEQ,
  IX86_BUILTIN_PFCMPGE,
  IX86_BUILTIN_PFCMPGT,
  IX86_BUILTIN_PFMAX,
  IX86_BUILTIN_PFMIN,
  IX86_BUILTIN_PFMUL,
  IX86_BUILTIN_PFRCP,
  IX86_BUILTIN_PFRCPIT1,
  IX86_BUILTIN_PFRCPIT2,
  IX86_BUILTIN_PFRSQIT1,
  IX86_BUILTIN_PFRSQRT,
  IX86_BUILTIN_PFSUB,
  IX86_BUILTIN_PFSUBR,
  IX86_BUILTIN_PI2FD,
  IX86_BUILTIN_PMULHRW,


  IX86_BUILTIN_PF2IW,
  IX86_BUILTIN_PFNACC,
  IX86_BUILTIN_PFPNACC,
  IX86_BUILTIN_PI2FW,
  IX86_BUILTIN_PSWAPDSI,
  IX86_BUILTIN_PSWAPDSF,

  IX86_BUILTIN_SSE_ZERO,
  IX86_BUILTIN_MMX_ZERO,


  IX86_BUILTIN_ADDPD,
  IX86_BUILTIN_ADDSD,
  IX86_BUILTIN_DIVPD,
  IX86_BUILTIN_DIVSD,
  IX86_BUILTIN_MULPD,
  IX86_BUILTIN_MULSD,
  IX86_BUILTIN_SUBPD,
  IX86_BUILTIN_SUBSD,

  IX86_BUILTIN_CMPEQPD,
  IX86_BUILTIN_CMPLTPD,
  IX86_BUILTIN_CMPLEPD,
  IX86_BUILTIN_CMPGTPD,
  IX86_BUILTIN_CMPGEPD,
  IX86_BUILTIN_CMPNEQPD,
  IX86_BUILTIN_CMPNLTPD,
  IX86_BUILTIN_CMPNLEPD,
  IX86_BUILTIN_CMPNGTPD,
  IX86_BUILTIN_CMPNGEPD,
  IX86_BUILTIN_CMPORDPD,
  IX86_BUILTIN_CMPUNORDPD,
  IX86_BUILTIN_CMPNEPD,
  IX86_BUILTIN_CMPEQSD,
  IX86_BUILTIN_CMPLTSD,
  IX86_BUILTIN_CMPLESD,
  IX86_BUILTIN_CMPNEQSD,
  IX86_BUILTIN_CMPNLTSD,
  IX86_BUILTIN_CMPNLESD,
  IX86_BUILTIN_CMPORDSD,
  IX86_BUILTIN_CMPUNORDSD,
  IX86_BUILTIN_CMPNESD,

  IX86_BUILTIN_COMIEQSD,
  IX86_BUILTIN_COMILTSD,
  IX86_BUILTIN_COMILESD,
  IX86_BUILTIN_COMIGTSD,
  IX86_BUILTIN_COMIGESD,
  IX86_BUILTIN_COMINEQSD,
  IX86_BUILTIN_UCOMIEQSD,
  IX86_BUILTIN_UCOMILTSD,
  IX86_BUILTIN_UCOMILESD,
  IX86_BUILTIN_UCOMIGTSD,
  IX86_BUILTIN_UCOMIGESD,
  IX86_BUILTIN_UCOMINEQSD,

  IX86_BUILTIN_MAXPD,
  IX86_BUILTIN_MAXSD,
  IX86_BUILTIN_MINPD,
  IX86_BUILTIN_MINSD,

  IX86_BUILTIN_ANDPD,
  IX86_BUILTIN_ANDNPD,
  IX86_BUILTIN_ORPD,
  IX86_BUILTIN_XORPD,

  IX86_BUILTIN_SQRTPD,
  IX86_BUILTIN_SQRTSD,

  IX86_BUILTIN_UNPCKHPD,
  IX86_BUILTIN_UNPCKLPD,

  IX86_BUILTIN_SHUFPD,

  IX86_BUILTIN_LOADAPD,
  IX86_BUILTIN_LOADUPD,
  IX86_BUILTIN_STOREAPD,
  IX86_BUILTIN_STOREUPD,
  IX86_BUILTIN_LOADSD,
  IX86_BUILTIN_STORESD,
  IX86_BUILTIN_MOVSD,

  IX86_BUILTIN_LOADHPD,
  IX86_BUILTIN_LOADLPD,
  IX86_BUILTIN_STOREHPD,
  IX86_BUILTIN_STORELPD,

  IX86_BUILTIN_CVTDQ2PD,
  IX86_BUILTIN_CVTDQ2PS,

  IX86_BUILTIN_CVTPD2DQ,
  IX86_BUILTIN_CVTPD2PI,
  IX86_BUILTIN_CVTPD2PS,
  IX86_BUILTIN_CVTTPD2DQ,
  IX86_BUILTIN_CVTTPD2PI,

  IX86_BUILTIN_CVTPI2PD,
  IX86_BUILTIN_CVTSI2SD,
  IX86_BUILTIN_CVTSI642SD,

  IX86_BUILTIN_CVTSD2SI,
  IX86_BUILTIN_CVTSD2SI64,
  IX86_BUILTIN_CVTSD2SS,
  IX86_BUILTIN_CVTSS2SD,
  IX86_BUILTIN_CVTTSD2SI,
  IX86_BUILTIN_CVTTSD2SI64,

  IX86_BUILTIN_CVTPS2DQ,
  IX86_BUILTIN_CVTPS2PD,
  IX86_BUILTIN_CVTTPS2DQ,

  IX86_BUILTIN_MOVNTI,
  IX86_BUILTIN_MOVNTPD,
  IX86_BUILTIN_MOVNTDQ,

  IX86_BUILTIN_SETPD1,
  IX86_BUILTIN_SETPD,
  IX86_BUILTIN_CLRPD,
  IX86_BUILTIN_SETRPD,
  IX86_BUILTIN_LOADPD1,
  IX86_BUILTIN_LOADRPD,
  IX86_BUILTIN_STOREPD1,
  IX86_BUILTIN_STORERPD,


  IX86_BUILTIN_MASKMOVDQU,
  IX86_BUILTIN_MOVMSKPD,
  IX86_BUILTIN_PMOVMSKB128,
  IX86_BUILTIN_MOVQ2DQ,
  IX86_BUILTIN_MOVDQ2Q,

  IX86_BUILTIN_PACKSSWB128,
  IX86_BUILTIN_PACKSSDW128,
  IX86_BUILTIN_PACKUSWB128,

  IX86_BUILTIN_PADDB128,
  IX86_BUILTIN_PADDW128,
  IX86_BUILTIN_PADDD128,
  IX86_BUILTIN_PADDQ128,
  IX86_BUILTIN_PADDSB128,
  IX86_BUILTIN_PADDSW128,
  IX86_BUILTIN_PADDUSB128,
  IX86_BUILTIN_PADDUSW128,
  IX86_BUILTIN_PSUBB128,
  IX86_BUILTIN_PSUBW128,
  IX86_BUILTIN_PSUBD128,
  IX86_BUILTIN_PSUBQ128,
  IX86_BUILTIN_PSUBSB128,
  IX86_BUILTIN_PSUBSW128,
  IX86_BUILTIN_PSUBUSB128,
  IX86_BUILTIN_PSUBUSW128,

  IX86_BUILTIN_PAND128,
  IX86_BUILTIN_PANDN128,
  IX86_BUILTIN_POR128,
  IX86_BUILTIN_PXOR128,

  IX86_BUILTIN_PAVGB128,
  IX86_BUILTIN_PAVGW128,

  IX86_BUILTIN_PCMPEQB128,
  IX86_BUILTIN_PCMPEQW128,
  IX86_BUILTIN_PCMPEQD128,
  IX86_BUILTIN_PCMPGTB128,
  IX86_BUILTIN_PCMPGTW128,
  IX86_BUILTIN_PCMPGTD128,

  IX86_BUILTIN_PEXTRW128,
  IX86_BUILTIN_PINSRW128,

  IX86_BUILTIN_PMADDWD128,

  IX86_BUILTIN_PMAXSW128,
  IX86_BUILTIN_PMAXUB128,
  IX86_BUILTIN_PMINSW128,
  IX86_BUILTIN_PMINUB128,

  IX86_BUILTIN_PMULUDQ,
  IX86_BUILTIN_PMULUDQ128,
  IX86_BUILTIN_PMULHUW128,
  IX86_BUILTIN_PMULHW128,
  IX86_BUILTIN_PMULLW128,

  IX86_BUILTIN_PSADBW128,
  IX86_BUILTIN_PSHUFHW,
  IX86_BUILTIN_PSHUFLW,
  IX86_BUILTIN_PSHUFD,

  IX86_BUILTIN_PSLLW128,
  IX86_BUILTIN_PSLLD128,
  IX86_BUILTIN_PSLLQ128,
  IX86_BUILTIN_PSRAW128,
  IX86_BUILTIN_PSRAD128,
  IX86_BUILTIN_PSRLW128,
  IX86_BUILTIN_PSRLD128,
  IX86_BUILTIN_PSRLQ128,
  IX86_BUILTIN_PSLLDQI128,
  IX86_BUILTIN_PSLLWI128,
  IX86_BUILTIN_PSLLDI128,
  IX86_BUILTIN_PSLLQI128,
  IX86_BUILTIN_PSRAWI128,
  IX86_BUILTIN_PSRADI128,
  IX86_BUILTIN_PSRLDQI128,
  IX86_BUILTIN_PSRLWI128,
  IX86_BUILTIN_PSRLDI128,
  IX86_BUILTIN_PSRLQI128,

  IX86_BUILTIN_PUNPCKHBW128,
  IX86_BUILTIN_PUNPCKHWD128,
  IX86_BUILTIN_PUNPCKHDQ128,
  IX86_BUILTIN_PUNPCKHQDQ128,
  IX86_BUILTIN_PUNPCKLBW128,
  IX86_BUILTIN_PUNPCKLWD128,
  IX86_BUILTIN_PUNPCKLDQ128,
  IX86_BUILTIN_PUNPCKLQDQ128,

  IX86_BUILTIN_CLFLUSH,
  IX86_BUILTIN_MFENCE,
  IX86_BUILTIN_LFENCE,


  IX86_BUILTIN_ADDSUBPS,
  IX86_BUILTIN_HADDPS,
  IX86_BUILTIN_HSUBPS,
  IX86_BUILTIN_MOVSHDUP,
  IX86_BUILTIN_MOVSLDUP,
  IX86_BUILTIN_ADDSUBPD,
  IX86_BUILTIN_HADDPD,
  IX86_BUILTIN_HSUBPD,
  IX86_BUILTIN_LOADDDUP,
  IX86_BUILTIN_MOVDDUP,
  IX86_BUILTIN_LDDQU,

  IX86_BUILTIN_MONITOR,
  IX86_BUILTIN_MWAIT,

  IX86_BUILTIN_MAX
};
# 2783 "config/i386/i386.h"
extern int const dbx_register_map[53];
extern int const dbx64_register_map[53];
extern int const svr4_dbx_register_map[53];
# 3000 "config/i386/i386.h"
enum processor_type
{
  PROCESSOR_I386,
  PROCESSOR_I486,
  PROCESSOR_PENTIUM,
  PROCESSOR_PENTIUMPRO,
  PROCESSOR_K6,
  PROCESSOR_ATHLON,
  PROCESSOR_PENTIUM4,
  PROCESSOR_K8,
  PROCESSOR_max
};

extern enum processor_type ix86_tune;
extern const char *ix86_tune_string;

extern enum processor_type ix86_arch;
extern const char *ix86_arch_string;

enum fpmath_unit
{
  FPMATH_387 = 1,
  FPMATH_SSE = 2
};

extern enum fpmath_unit ix86_fpmath;
extern const char *ix86_fpmath_string;

enum tls_dialect
{
  TLS_DIALECT_GNU,
  TLS_DIALECT_SUN
};

extern enum tls_dialect ix86_tls_dialect;
extern const char *ix86_tls_dialect_string;

enum cmodel {
  CM_32,
  CM_SMALL,
  CM_KERNEL,
  CM_MEDIUM,
  CM_LARGE,
  CM_SMALL_PIC
};

extern enum cmodel ix86_cmodel;
extern const char *ix86_cmodel_string;






enum asm_dialect {
  ASM_ATT,
  ASM_INTEL
};

extern const char *ix86_asm_string;
extern enum asm_dialect ix86_asm_dialect;

extern int ix86_regparm;
extern const char *ix86_regparm_string;

extern int ix86_preferred_stack_boundary;
extern const char *ix86_preferred_stack_boundary_string;

extern int ix86_branch_cost;
extern const char *ix86_branch_cost_string;

extern const char *ix86_debug_arg_string;
extern const char *ix86_debug_addr_string;


extern const char *ix86_align_loops_string;
extern const char *ix86_align_jumps_string;
extern const char *ix86_align_funcs_string;


extern enum reg_class const regclass_map[53];

extern rtx ix86_compare_op0;
extern rtx ix86_compare_op1;
# 3100 "config/i386/i386.h"
enum fp_cw_mode {FP_CW_STORED, FP_CW_UNINITIALIZED, FP_CW_ANY};
# 3161 "config/i386/i386.h"
struct machine_function
{
  struct stack_local_entry *stack_locals;
  const char *some_ld_name;
  int save_varrargs_registers;
  int accesses_prev_frame;
  int optimize_mode_switching;


  int use_fast_prologue_epilogue;


  int use_fast_prologue_epilogue_nregs;
};
# 5 "tm.h" 2
# 1 "config/i386/unix.h" 1
# 6 "tm.h" 2
# 1 "config/i386/att.h" 1
# 7 "tm.h" 2
# 1 "config/dbxelf.h" 1
# 8 "tm.h" 2
# 1 "config/elfos.h" 1
# 9 "tm.h" 2
# 1 "config/svr4.h" 1
# 10 "tm.h" 2
# 1 "config/linux.h" 1
# 11 "tm.h" 2
# 1 "config/i386/linux.h" 1
# 12 "tm.h" 2
# 1 "defaults.h" 1
# 13 "tm.h" 2


# 1 "insn-constants.h" 1
# 16 "tm.h" 2
# 1 "insn-flags.h" 1
# 744 "insn-flags.h"
static __inline__ rtx gen_cmpdi_ccno_1_rex64 (rtx, rtx);
static __inline__ rtx
gen_cmpdi_ccno_1_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_cmpdi_1_insn_rex64 (rtx, rtx);
static __inline__ rtx
gen_cmpdi_1_insn_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_cmpqi_ext_3_insn (rtx, rtx);
static __inline__ rtx gen_cmpqi_ext_3_insn_rex64 (rtx, rtx);
static __inline__ rtx
gen_cmpqi_ext_3_insn_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_x86_sahf_1 (rtx);
extern rtx gen_popsi1 (rtx);
extern rtx gen_movsi_insv_1 (rtx, rtx);
static __inline__ rtx gen_pushdi2_rex64 (rtx, rtx);
static __inline__ rtx
gen_pushdi2_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_popdi1 (rtx);
static __inline__ rtx
gen_popdi1(rtx a __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_swapxf (rtx, rtx);
extern rtx gen_zero_extendhisi2_and (rtx, rtx);
extern rtx gen_zero_extendsidi2_32 (rtx, rtx);
static __inline__ rtx gen_zero_extendsidi2_rex64 (rtx, rtx);
static __inline__ rtx
gen_zero_extendsidi2_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_zero_extendhidi2 (rtx, rtx);
static __inline__ rtx
gen_zero_extendhidi2(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_zero_extendqidi2 (rtx, rtx);
static __inline__ rtx
gen_zero_extendqidi2(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_extendsidi2_rex64 (rtx, rtx);
static __inline__ rtx
gen_extendsidi2_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_extendhidi2 (rtx, rtx);
static __inline__ rtx
gen_extendhidi2(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_extendqidi2 (rtx, rtx);
static __inline__ rtx
gen_extendqidi2(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_extendhisi2 (rtx, rtx);
extern rtx gen_extendqihi2 (rtx, rtx);
extern rtx gen_extendqisi2 (rtx, rtx);
extern rtx gen_truncdfsf2_sse_only (rtx, rtx);
extern rtx gen_fix_truncdi_nomemory (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncdi_memory (rtx, rtx, rtx, rtx);
static __inline__ rtx gen_fix_truncsfdi_sse (rtx, rtx);
static __inline__ rtx
gen_fix_truncsfdi_sse(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_fix_truncdfdi_sse (rtx, rtx);
static __inline__ rtx
gen_fix_truncdfdi_sse(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fix_truncsi_nomemory (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncsi_memory (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncsfsi_sse (rtx, rtx);
extern rtx gen_fix_truncdfsi_sse (rtx, rtx);
extern rtx gen_fix_trunchi_nomemory (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fix_trunchi_memory (rtx, rtx, rtx, rtx);
extern rtx gen_x86_fnstcw_1 (rtx);
extern rtx gen_x86_fldcw_1 (rtx);
extern rtx gen_floathixf2 (rtx, rtx);
extern rtx gen_floatsixf2 (rtx, rtx);
extern rtx gen_floatdixf2 (rtx, rtx);
static __inline__ rtx gen_adddi3_carry_rex64 (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_adddi3_carry_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_addqi3_carry (rtx, rtx, rtx, rtx);
extern rtx gen_addhi3_carry (rtx, rtx, rtx, rtx);
extern rtx gen_addsi3_carry (rtx, rtx, rtx, rtx);
extern rtx gen_addqi3_cc (rtx, rtx, rtx);
static __inline__ rtx gen_addsi_1_zext (rtx, rtx, rtx);
static __inline__ rtx
gen_addsi_1_zext(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_addqi_ext_1 (rtx, rtx, rtx);
static __inline__ rtx gen_subdi3_carry_rex64 (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_subdi3_carry_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_subqi3_carry (rtx, rtx, rtx, rtx);
extern rtx gen_subhi3_carry (rtx, rtx, rtx, rtx);
extern rtx gen_subsi3_carry (rtx, rtx, rtx, rtx);
static __inline__ rtx gen_subsi3_carry_zext (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_subsi3_carry_zext(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_divqi3 (rtx, rtx, rtx);
extern rtx gen_udivqi3 (rtx, rtx, rtx);
extern rtx gen_divmodhi4 (rtx, rtx, rtx, rtx);
static __inline__ rtx gen_udivmoddi4 (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_udivmoddi4(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_udivmodsi4 (rtx, rtx, rtx, rtx);
extern rtx gen_testsi_1 (rtx, rtx);
extern rtx gen_andqi_ext_0 (rtx, rtx, rtx);
extern rtx gen_iorqi_ext_0 (rtx, rtx, rtx);
extern rtx gen_xorqi_ext_0 (rtx, rtx, rtx);
extern rtx gen_negsf2_memory (rtx, rtx);
extern rtx gen_negsf2_ifs (rtx, rtx, rtx);
extern rtx gen_negdf2_memory (rtx, rtx);
extern rtx gen_negdf2_ifs (rtx, rtx, rtx);
extern rtx gen_abssf2_memory (rtx, rtx);
extern rtx gen_abssf2_ifs (rtx, rtx, rtx);
extern rtx gen_absdf2_memory (rtx, rtx);
extern rtx gen_absdf2_ifs (rtx, rtx, rtx);
extern rtx gen_ashldi3_1 (rtx, rtx, rtx);
extern rtx gen_x86_shld_1 (rtx, rtx, rtx);
static __inline__ rtx gen_ashrdi3_63_rex64 (rtx, rtx, rtx);
static __inline__ rtx
gen_ashrdi3_63_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ashrdi3_1 (rtx, rtx, rtx);
extern rtx gen_x86_shrd_1 (rtx, rtx, rtx);
extern rtx gen_ashrsi3_31 (rtx, rtx, rtx);
extern rtx gen_lshrdi3_1 (rtx, rtx, rtx);
extern rtx gen_setcc_2 (rtx, rtx);
extern rtx gen_jump (rtx);
extern rtx gen_doloop_end_internal (rtx, rtx, rtx);
extern rtx gen_blockage (rtx);
extern rtx gen_return_internal (void);
extern rtx gen_return_internal_long (void);
extern rtx gen_return_pop_internal (rtx);
extern rtx gen_return_indirect_internal (rtx);
extern rtx gen_nop (void);
extern rtx gen_align (rtx);
extern rtx gen_set_got (rtx);
extern rtx gen_eh_return_si (rtx);
static __inline__ rtx gen_eh_return_di (rtx);
static __inline__ rtx
gen_eh_return_di(rtx a __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_leave (void);
static __inline__ rtx gen_leave_rex64 (void);
static __inline__ rtx
gen_leave_rex64(void)
{
  return 0;
}
extern rtx gen_ctzsi2 (rtx, rtx);
extern rtx gen_sqrtsf2_1 (rtx, rtx);
extern rtx gen_sqrtsf2_1_sse_only (rtx, rtx);
extern rtx gen_sqrtsf2_i387 (rtx, rtx);
extern rtx gen_sqrtdf2_1 (rtx, rtx);
extern rtx gen_sqrtdf2_1_sse_only (rtx, rtx);
extern rtx gen_sqrtdf2_i387 (rtx, rtx);
extern rtx gen_sqrtxf2 (rtx, rtx);
extern rtx gen_sindf2 (rtx, rtx);
extern rtx gen_sinsf2 (rtx, rtx);
extern rtx gen_sinxf2 (rtx, rtx);
extern rtx gen_cosdf2 (rtx, rtx);
extern rtx gen_cossf2 (rtx, rtx);
extern rtx gen_cosxf2 (rtx, rtx);
extern rtx gen_atan2df3_1 (rtx, rtx, rtx);
extern rtx gen_atan2sf3_1 (rtx, rtx, rtx);
extern rtx gen_atan2xf3_1 (rtx, rtx, rtx);
extern rtx gen_cld (void);
static __inline__ rtx gen_x86_movdicc_0_m1_rex64 (rtx, rtx);
static __inline__ rtx
gen_x86_movdicc_0_m1_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_movdicc_c_rex64 (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_movdicc_c_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_x86_movsicc_0_m1 (rtx, rtx);
extern rtx gen_pro_epilogue_adjust_stack_1 (rtx, rtx, rtx);
static __inline__ rtx gen_pro_epilogue_adjust_stack_rex64 (rtx, rtx, rtx);
static __inline__ rtx
gen_pro_epilogue_adjust_stack_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_pro_epilogue_adjust_stack_rex64_2 (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_pro_epilogue_adjust_stack_rex64_2(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse_movsfcc (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_movsfcc_eq (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_movdfcc (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_movdfcc_eq (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_allocate_stack_worker_1 (rtx);
static __inline__ rtx gen_allocate_stack_worker_rex64 (rtx);
static __inline__ rtx
gen_allocate_stack_worker_rex64(rtx a __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_trap (void);
extern rtx gen_movv4sf_internal (rtx, rtx);
extern rtx gen_movv4si_internal (rtx, rtx);
extern rtx gen_movv2di_internal (rtx, rtx);
extern rtx gen_movv8qi_internal (rtx, rtx);
extern rtx gen_movv4hi_internal (rtx, rtx);
extern rtx gen_movv2si_internal (rtx, rtx);
extern rtx gen_movv2sf_internal (rtx, rtx);
extern rtx gen_movv2df_internal (rtx, rtx);
extern rtx gen_movv8hi_internal (rtx, rtx);
extern rtx gen_movv16qi_internal (rtx, rtx);
extern rtx gen_movti_internal (rtx, rtx);
extern rtx gen_sse_movmskps (rtx, rtx);
extern rtx gen_mmx_pmovmskb (rtx, rtx);
extern rtx gen_mmx_maskmovq (rtx, rtx, rtx);
static __inline__ rtx gen_mmx_maskmovq_rex (rtx, rtx, rtx);
static __inline__ rtx
gen_mmx_maskmovq_rex(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse_movntv4sf (rtx, rtx);
extern rtx gen_sse_movntdi (rtx, rtx);
extern rtx gen_sse_movhlps (rtx, rtx, rtx);
extern rtx gen_sse_movlhps (rtx, rtx, rtx);
extern rtx gen_sse_movhps (rtx, rtx, rtx);
extern rtx gen_sse_movlps (rtx, rtx, rtx);
extern rtx gen_sse_loadss_1 (rtx, rtx, rtx);
extern rtx gen_sse_movss (rtx, rtx, rtx);
extern rtx gen_sse_storess (rtx, rtx);
extern rtx gen_sse_shufps (rtx, rtx, rtx, rtx);
extern rtx gen_addv4sf3 (rtx, rtx, rtx);
extern rtx gen_vmaddv4sf3 (rtx, rtx, rtx);
extern rtx gen_subv4sf3 (rtx, rtx, rtx);
extern rtx gen_vmsubv4sf3 (rtx, rtx, rtx);
extern rtx gen_mulv4sf3 (rtx, rtx, rtx);
extern rtx gen_vmmulv4sf3 (rtx, rtx, rtx);
extern rtx gen_divv4sf3 (rtx, rtx, rtx);
extern rtx gen_vmdivv4sf3 (rtx, rtx, rtx);
extern rtx gen_rcpv4sf2 (rtx, rtx);
extern rtx gen_vmrcpv4sf2 (rtx, rtx, rtx);
extern rtx gen_rsqrtv4sf2 (rtx, rtx);
extern rtx gen_vmrsqrtv4sf2 (rtx, rtx, rtx);
extern rtx gen_sqrtv4sf2 (rtx, rtx);
extern rtx gen_vmsqrtv4sf2 (rtx, rtx, rtx);
extern rtx gen_sse2_andv2di3 (rtx, rtx, rtx);
extern rtx gen_sse2_nandv2di3 (rtx, rtx, rtx);
extern rtx gen_sse2_iorv2di3 (rtx, rtx, rtx);
extern rtx gen_sse2_xorv2di3 (rtx, rtx, rtx);
extern rtx gen_sse_clrv4sf (rtx, rtx);
extern rtx gen_sse_clrv2df (rtx);
extern rtx gen_maskcmpv4sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_maskncmpv4sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_vmmaskcmpv4sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_vmmaskncmpv4sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_sse_comi (rtx, rtx);
extern rtx gen_sse_ucomi (rtx, rtx);
extern rtx gen_sse_unpckhps (rtx, rtx, rtx);
extern rtx gen_sse_unpcklps (rtx, rtx, rtx);
extern rtx gen_smaxv4sf3 (rtx, rtx, rtx);
extern rtx gen_vmsmaxv4sf3 (rtx, rtx, rtx);
extern rtx gen_sminv4sf3 (rtx, rtx, rtx);
extern rtx gen_vmsminv4sf3 (rtx, rtx, rtx);
extern rtx gen_cvtpi2ps (rtx, rtx, rtx);
extern rtx gen_cvtps2pi (rtx, rtx);
extern rtx gen_cvttps2pi (rtx, rtx);
extern rtx gen_cvtsi2ss (rtx, rtx, rtx);
static __inline__ rtx gen_cvtsi2ssq (rtx, rtx, rtx);
static __inline__ rtx
gen_cvtsi2ssq(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_cvtss2si (rtx, rtx);
extern rtx gen_cvtss2siq (rtx, rtx);
extern rtx gen_cvttss2si (rtx, rtx);
static __inline__ rtx gen_cvttss2siq (rtx, rtx);
static __inline__ rtx
gen_cvttss2siq(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_addv8qi3 (rtx, rtx, rtx);
extern rtx gen_addv4hi3 (rtx, rtx, rtx);
extern rtx gen_addv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_adddi3 (rtx, rtx, rtx);
extern rtx gen_ssaddv8qi3 (rtx, rtx, rtx);
extern rtx gen_ssaddv4hi3 (rtx, rtx, rtx);
extern rtx gen_usaddv8qi3 (rtx, rtx, rtx);
extern rtx gen_usaddv4hi3 (rtx, rtx, rtx);
extern rtx gen_subv8qi3 (rtx, rtx, rtx);
extern rtx gen_subv4hi3 (rtx, rtx, rtx);
extern rtx gen_subv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_subdi3 (rtx, rtx, rtx);
extern rtx gen_sssubv8qi3 (rtx, rtx, rtx);
extern rtx gen_sssubv4hi3 (rtx, rtx, rtx);
extern rtx gen_ussubv8qi3 (rtx, rtx, rtx);
extern rtx gen_ussubv4hi3 (rtx, rtx, rtx);
extern rtx gen_mulv4hi3 (rtx, rtx, rtx);
extern rtx gen_smulv4hi3_highpart (rtx, rtx, rtx);
extern rtx gen_umulv4hi3_highpart (rtx, rtx, rtx);
extern rtx gen_mmx_pmaddwd (rtx, rtx, rtx);
extern rtx gen_mmx_iordi3 (rtx, rtx, rtx);
extern rtx gen_mmx_xordi3 (rtx, rtx, rtx);
extern rtx gen_mmx_clrdi (rtx);
extern rtx gen_mmx_anddi3 (rtx, rtx, rtx);
extern rtx gen_mmx_nanddi3 (rtx, rtx, rtx);
extern rtx gen_mmx_uavgv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_uavgv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_psadbw (rtx, rtx, rtx);
extern rtx gen_mmx_pinsrw (rtx, rtx, rtx, rtx);
extern rtx gen_mmx_pextrw (rtx, rtx, rtx);
extern rtx gen_mmx_pshufw (rtx, rtx, rtx);
extern rtx gen_eqv8qi3 (rtx, rtx, rtx);
extern rtx gen_eqv4hi3 (rtx, rtx, rtx);
extern rtx gen_eqv2si3 (rtx, rtx, rtx);
extern rtx gen_gtv8qi3 (rtx, rtx, rtx);
extern rtx gen_gtv4hi3 (rtx, rtx, rtx);
extern rtx gen_gtv2si3 (rtx, rtx, rtx);
extern rtx gen_umaxv8qi3 (rtx, rtx, rtx);
extern rtx gen_smaxv4hi3 (rtx, rtx, rtx);
extern rtx gen_uminv8qi3 (rtx, rtx, rtx);
extern rtx gen_sminv4hi3 (rtx, rtx, rtx);
extern rtx gen_ashrv4hi3 (rtx, rtx, rtx);
extern rtx gen_ashrv2si3 (rtx, rtx, rtx);
extern rtx gen_lshrv4hi3 (rtx, rtx, rtx);
extern rtx gen_lshrv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_lshrdi3 (rtx, rtx, rtx);
extern rtx gen_ashlv4hi3 (rtx, rtx, rtx);
extern rtx gen_ashlv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_ashldi3 (rtx, rtx, rtx);
extern rtx gen_mmx_packsswb (rtx, rtx, rtx);
extern rtx gen_mmx_packssdw (rtx, rtx, rtx);
extern rtx gen_mmx_packuswb (rtx, rtx, rtx);
extern rtx gen_mmx_punpckhbw (rtx, rtx, rtx);
extern rtx gen_mmx_punpckhwd (rtx, rtx, rtx);
extern rtx gen_mmx_punpckhdq (rtx, rtx, rtx);
extern rtx gen_mmx_punpcklbw (rtx, rtx, rtx);
extern rtx gen_mmx_punpcklwd (rtx, rtx, rtx);
extern rtx gen_mmx_punpckldq (rtx, rtx, rtx);
extern rtx gen_emms (void);
extern rtx gen_ldmxcsr (rtx);
extern rtx gen_stmxcsr (rtx);
extern rtx gen_addv2sf3 (rtx, rtx, rtx);
extern rtx gen_subv2sf3 (rtx, rtx, rtx);
extern rtx gen_subrv2sf3 (rtx, rtx, rtx);
extern rtx gen_gtv2sf3 (rtx, rtx, rtx);
extern rtx gen_gev2sf3 (rtx, rtx, rtx);
extern rtx gen_eqv2sf3 (rtx, rtx, rtx);
extern rtx gen_pfmaxv2sf3 (rtx, rtx, rtx);
extern rtx gen_pfminv2sf3 (rtx, rtx, rtx);
extern rtx gen_mulv2sf3 (rtx, rtx, rtx);
extern rtx gen_femms (void);
extern rtx gen_pf2id (rtx, rtx);
extern rtx gen_pf2iw (rtx, rtx);
extern rtx gen_pfacc (rtx, rtx, rtx);
extern rtx gen_pfnacc (rtx, rtx, rtx);
extern rtx gen_pfpnacc (rtx, rtx, rtx);
extern rtx gen_pi2fw (rtx, rtx);
extern rtx gen_floatv2si2 (rtx, rtx);
extern rtx gen_pavgusb (rtx, rtx, rtx);
extern rtx gen_pfrcpv2sf2 (rtx, rtx);
extern rtx gen_pfrcpit1v2sf3 (rtx, rtx, rtx);
extern rtx gen_pfrcpit2v2sf3 (rtx, rtx, rtx);
extern rtx gen_pfrsqrtv2sf2 (rtx, rtx);
extern rtx gen_pfrsqit1v2sf3 (rtx, rtx, rtx);
extern rtx gen_pmulhrwv4hi3 (rtx, rtx, rtx);
extern rtx gen_pswapdv2si2 (rtx, rtx);
extern rtx gen_pswapdv2sf2 (rtx, rtx);
extern rtx gen_addv2df3 (rtx, rtx, rtx);
extern rtx gen_vmaddv2df3 (rtx, rtx, rtx);
extern rtx gen_subv2df3 (rtx, rtx, rtx);
extern rtx gen_vmsubv2df3 (rtx, rtx, rtx);
extern rtx gen_mulv2df3 (rtx, rtx, rtx);
extern rtx gen_vmmulv2df3 (rtx, rtx, rtx);
extern rtx gen_divv2df3 (rtx, rtx, rtx);
extern rtx gen_vmdivv2df3 (rtx, rtx, rtx);
extern rtx gen_smaxv2df3 (rtx, rtx, rtx);
extern rtx gen_vmsmaxv2df3 (rtx, rtx, rtx);
extern rtx gen_sminv2df3 (rtx, rtx, rtx);
extern rtx gen_vmsminv2df3 (rtx, rtx, rtx);
extern rtx gen_sqrtv2df2 (rtx, rtx);
extern rtx gen_vmsqrtv2df2 (rtx, rtx, rtx);
extern rtx gen_maskcmpv2df3 (rtx, rtx, rtx, rtx);
extern rtx gen_maskncmpv2df3 (rtx, rtx, rtx, rtx);
extern rtx gen_vmmaskcmpv2df3 (rtx, rtx, rtx, rtx);
extern rtx gen_vmmaskncmpv2df3 (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_comi (rtx, rtx);
extern rtx gen_sse2_ucomi (rtx, rtx);
extern rtx gen_sse2_movmskpd (rtx, rtx);
extern rtx gen_sse2_pmovmskb (rtx, rtx);
extern rtx gen_sse2_maskmovdqu (rtx, rtx, rtx);
extern rtx gen_sse2_maskmovdqu_rex64 (rtx, rtx, rtx);
extern rtx gen_sse2_movntv2df (rtx, rtx);
extern rtx gen_sse2_movntv2di (rtx, rtx);
extern rtx gen_sse2_movntsi (rtx, rtx);
extern rtx gen_cvtdq2ps (rtx, rtx);
extern rtx gen_cvtps2dq (rtx, rtx);
extern rtx gen_cvttps2dq (rtx, rtx);
extern rtx gen_cvtdq2pd (rtx, rtx);
extern rtx gen_cvtpd2dq (rtx, rtx);
extern rtx gen_cvttpd2dq (rtx, rtx);
extern rtx gen_cvtpd2pi (rtx, rtx);
extern rtx gen_cvttpd2pi (rtx, rtx);
extern rtx gen_cvtpi2pd (rtx, rtx);
extern rtx gen_cvtsd2si (rtx, rtx);
static __inline__ rtx gen_cvtsd2siq (rtx, rtx);
static __inline__ rtx
gen_cvtsd2siq(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_cvttsd2si (rtx, rtx);
static __inline__ rtx gen_cvttsd2siq (rtx, rtx);
static __inline__ rtx
gen_cvttsd2siq(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_cvtsi2sd (rtx, rtx, rtx);
static __inline__ rtx gen_cvtsi2sdq (rtx, rtx, rtx);
static __inline__ rtx
gen_cvtsi2sdq(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_cvtsd2ss (rtx, rtx, rtx);
extern rtx gen_cvtss2sd (rtx, rtx, rtx);
extern rtx gen_cvtpd2ps (rtx, rtx);
extern rtx gen_cvtps2pd (rtx, rtx);
extern rtx gen_addv16qi3 (rtx, rtx, rtx);
extern rtx gen_addv8hi3 (rtx, rtx, rtx);
extern rtx gen_addv4si3 (rtx, rtx, rtx);
extern rtx gen_addv2di3 (rtx, rtx, rtx);
extern rtx gen_ssaddv16qi3 (rtx, rtx, rtx);
extern rtx gen_ssaddv8hi3 (rtx, rtx, rtx);
extern rtx gen_usaddv16qi3 (rtx, rtx, rtx);
extern rtx gen_usaddv8hi3 (rtx, rtx, rtx);
extern rtx gen_subv16qi3 (rtx, rtx, rtx);
extern rtx gen_subv8hi3 (rtx, rtx, rtx);
extern rtx gen_subv4si3 (rtx, rtx, rtx);
extern rtx gen_subv2di3 (rtx, rtx, rtx);
extern rtx gen_sssubv16qi3 (rtx, rtx, rtx);
extern rtx gen_sssubv8hi3 (rtx, rtx, rtx);
extern rtx gen_ussubv16qi3 (rtx, rtx, rtx);
extern rtx gen_ussubv8hi3 (rtx, rtx, rtx);
extern rtx gen_mulv8hi3 (rtx, rtx, rtx);
extern rtx gen_smulv8hi3_highpart (rtx, rtx, rtx);
extern rtx gen_umulv8hi3_highpart (rtx, rtx, rtx);
extern rtx gen_sse2_umulsidi3 (rtx, rtx, rtx);
extern rtx gen_sse2_umulv2siv2di3 (rtx, rtx, rtx);
extern rtx gen_sse2_pmaddwd (rtx, rtx, rtx);
extern rtx gen_sse2_clrti (rtx);
extern rtx gen_sse2_uavgv16qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_uavgv8hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_psadbw (rtx, rtx, rtx);
extern rtx gen_sse2_pinsrw (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pextrw (rtx, rtx, rtx);
extern rtx gen_sse2_pshufd (rtx, rtx, rtx);
extern rtx gen_sse2_pshuflw (rtx, rtx, rtx);
extern rtx gen_sse2_pshufhw (rtx, rtx, rtx);
extern rtx gen_eqv16qi3 (rtx, rtx, rtx);
extern rtx gen_eqv8hi3 (rtx, rtx, rtx);
extern rtx gen_eqv4si3 (rtx, rtx, rtx);
extern rtx gen_gtv16qi3 (rtx, rtx, rtx);
extern rtx gen_gtv8hi3 (rtx, rtx, rtx);
extern rtx gen_gtv4si3 (rtx, rtx, rtx);
extern rtx gen_umaxv16qi3 (rtx, rtx, rtx);
extern rtx gen_smaxv8hi3 (rtx, rtx, rtx);
extern rtx gen_uminv16qi3 (rtx, rtx, rtx);
extern rtx gen_sminv8hi3 (rtx, rtx, rtx);
extern rtx gen_ashrv8hi3 (rtx, rtx, rtx);
extern rtx gen_ashrv4si3 (rtx, rtx, rtx);
extern rtx gen_lshrv8hi3 (rtx, rtx, rtx);
extern rtx gen_lshrv4si3 (rtx, rtx, rtx);
extern rtx gen_lshrv2di3 (rtx, rtx, rtx);
extern rtx gen_ashlv8hi3 (rtx, rtx, rtx);
extern rtx gen_ashlv4si3 (rtx, rtx, rtx);
extern rtx gen_ashlv2di3 (rtx, rtx, rtx);
extern rtx gen_ashrv8hi3_ti (rtx, rtx, rtx);
extern rtx gen_ashrv4si3_ti (rtx, rtx, rtx);
extern rtx gen_lshrv8hi3_ti (rtx, rtx, rtx);
extern rtx gen_lshrv4si3_ti (rtx, rtx, rtx);
extern rtx gen_lshrv2di3_ti (rtx, rtx, rtx);
extern rtx gen_ashlv8hi3_ti (rtx, rtx, rtx);
extern rtx gen_ashlv4si3_ti (rtx, rtx, rtx);
extern rtx gen_ashlv2di3_ti (rtx, rtx, rtx);
extern rtx gen_sse2_ashlti3 (rtx, rtx, rtx);
extern rtx gen_sse2_lshrti3 (rtx, rtx, rtx);
extern rtx gen_sse2_unpckhpd (rtx, rtx, rtx);
extern rtx gen_sse2_unpcklpd (rtx, rtx, rtx);
extern rtx gen_sse2_packsswb (rtx, rtx, rtx);
extern rtx gen_sse2_packssdw (rtx, rtx, rtx);
extern rtx gen_sse2_packuswb (rtx, rtx, rtx);
extern rtx gen_sse2_punpckhbw (rtx, rtx, rtx);
extern rtx gen_sse2_punpckhwd (rtx, rtx, rtx);
extern rtx gen_sse2_punpckhdq (rtx, rtx, rtx);
extern rtx gen_sse2_punpcklbw (rtx, rtx, rtx);
extern rtx gen_sse2_punpcklwd (rtx, rtx, rtx);
extern rtx gen_sse2_punpckldq (rtx, rtx, rtx);
extern rtx gen_sse2_punpcklqdq (rtx, rtx, rtx);
extern rtx gen_sse2_punpckhqdq (rtx, rtx, rtx);
extern rtx gen_sse2_movapd (rtx, rtx);
extern rtx gen_sse2_movupd (rtx, rtx);
extern rtx gen_sse2_movdqa (rtx, rtx);
extern rtx gen_sse2_movdqu (rtx, rtx);
extern rtx gen_sse2_movdq2q (rtx, rtx);
static __inline__ rtx gen_sse2_movdq2q_rex64 (rtx, rtx);
static __inline__ rtx
gen_sse2_movdq2q_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse2_movq2dq (rtx, rtx);
static __inline__ rtx gen_sse2_movq2dq_rex64 (rtx, rtx);
static __inline__ rtx
gen_sse2_movq2dq_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse2_movq (rtx, rtx);
extern rtx gen_sse2_loadd (rtx, rtx);
extern rtx gen_sse2_stored (rtx, rtx);
extern rtx gen_sse2_movhpd (rtx, rtx, rtx);
extern rtx gen_sse2_loadsd_1 (rtx, rtx, rtx);
extern rtx gen_sse2_movsd (rtx, rtx, rtx);
extern rtx gen_sse2_storesd (rtx, rtx);
extern rtx gen_sse2_shufpd (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_clflush (rtx);
extern rtx gen_mwait (rtx, rtx);
extern rtx gen_monitor (rtx, rtx, rtx);
extern rtx gen_addsubv4sf3 (rtx, rtx, rtx);
extern rtx gen_addsubv2df3 (rtx, rtx, rtx);
extern rtx gen_haddv4sf3 (rtx, rtx, rtx);
extern rtx gen_haddv2df3 (rtx, rtx, rtx);
extern rtx gen_hsubv4sf3 (rtx, rtx, rtx);
extern rtx gen_hsubv2df3 (rtx, rtx, rtx);
extern rtx gen_movshdup (rtx, rtx);
extern rtx gen_movsldup (rtx, rtx);
extern rtx gen_lddqu (rtx, rtx);
extern rtx gen_loadddup (rtx, rtx);
extern rtx gen_movddup (rtx, rtx);
extern rtx gen_cmpdi (rtx, rtx);
extern rtx gen_cmpsi (rtx, rtx);
extern rtx gen_cmphi (rtx, rtx);
extern rtx gen_cmpqi (rtx, rtx);
static __inline__ rtx gen_cmpdi_1_rex64 (rtx, rtx);
static __inline__ rtx
gen_cmpdi_1_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_cmpsi_1 (rtx, rtx);
extern rtx gen_cmpqi_ext_3 (rtx, rtx);
extern rtx gen_cmpxf (rtx, rtx);
extern rtx gen_cmpdf (rtx, rtx);
extern rtx gen_cmpsf (rtx, rtx);
extern rtx gen_movsi (rtx, rtx);
extern rtx gen_movhi (rtx, rtx);
extern rtx gen_movstricthi (rtx, rtx);
extern rtx gen_movqi (rtx, rtx);
extern rtx gen_reload_outqi (rtx, rtx, rtx);
extern rtx gen_movstrictqi (rtx, rtx);
extern rtx gen_movdi (rtx, rtx);
extern rtx gen_movsf (rtx, rtx);
extern rtx gen_movdf (rtx, rtx);
extern rtx gen_movxf (rtx, rtx);
extern rtx gen_zero_extendhisi2 (rtx, rtx);
extern rtx gen_zero_extendqihi2 (rtx, rtx);
extern rtx gen_zero_extendqisi2 (rtx, rtx);
extern rtx gen_zero_extendsidi2 (rtx, rtx);
extern rtx gen_extendsidi2 (rtx, rtx);
extern rtx gen_extendsfdf2 (rtx, rtx);
extern rtx gen_extendsfxf2 (rtx, rtx);
extern rtx gen_extenddfxf2 (rtx, rtx);
extern rtx gen_truncdfsf2 (rtx, rtx);
extern rtx gen_truncxfsf2 (rtx, rtx);
extern rtx gen_truncxfdf2 (rtx, rtx);
extern rtx gen_fix_truncxfdi2 (rtx, rtx);
extern rtx gen_fix_truncdfdi2 (rtx, rtx);
extern rtx gen_fix_truncsfdi2 (rtx, rtx);
extern rtx gen_fix_truncxfsi2 (rtx, rtx);
extern rtx gen_fix_truncdfsi2 (rtx, rtx);
extern rtx gen_fix_truncsfsi2 (rtx, rtx);
extern rtx gen_fix_truncxfhi2 (rtx, rtx);
extern rtx gen_fix_truncdfhi2 (rtx, rtx);
extern rtx gen_fix_truncsfhi2 (rtx, rtx);
extern rtx gen_floathisf2 (rtx, rtx);
extern rtx gen_floatsisf2 (rtx, rtx);
extern rtx gen_floatdisf2 (rtx, rtx);
extern rtx gen_floathidf2 (rtx, rtx);
extern rtx gen_floatsidf2 (rtx, rtx);
extern rtx gen_floatdidf2 (rtx, rtx);
extern rtx gen_floatunssisf2 (rtx, rtx);
static __inline__ rtx gen_floatunsdisf2 (rtx, rtx);
static __inline__ rtx
gen_floatunsdisf2(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_floatunsdidf2 (rtx, rtx);
static __inline__ rtx
gen_floatunsdidf2(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_vec_setv2df (rtx, rtx, rtx);
extern rtx gen_vec_extractv2df (rtx, rtx, rtx);
extern rtx gen_vec_initv2df (rtx, rtx);
extern rtx gen_vec_setv4sf (rtx, rtx, rtx);
extern rtx gen_vec_extractv4sf (rtx, rtx, rtx);
extern rtx gen_vec_initv4sf (rtx, rtx);
extern rtx gen_adddi3 (rtx, rtx, rtx);
extern rtx gen_addsi3 (rtx, rtx, rtx);
extern rtx gen_addhi3 (rtx, rtx, rtx);
extern rtx gen_addqi3 (rtx, rtx, rtx);
extern rtx gen_addxf3 (rtx, rtx, rtx);
extern rtx gen_adddf3 (rtx, rtx, rtx);
extern rtx gen_addsf3 (rtx, rtx, rtx);
extern rtx gen_subdi3 (rtx, rtx, rtx);
extern rtx gen_subsi3 (rtx, rtx, rtx);
extern rtx gen_subhi3 (rtx, rtx, rtx);
extern rtx gen_subqi3 (rtx, rtx, rtx);
extern rtx gen_subxf3 (rtx, rtx, rtx);
extern rtx gen_subdf3 (rtx, rtx, rtx);
extern rtx gen_subsf3 (rtx, rtx, rtx);
static __inline__ rtx gen_muldi3 (rtx, rtx, rtx);
static __inline__ rtx
gen_muldi3(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_mulsi3 (rtx, rtx, rtx);
extern rtx gen_mulhi3 (rtx, rtx, rtx);
extern rtx gen_mulqi3 (rtx, rtx, rtx);
extern rtx gen_umulqihi3 (rtx, rtx, rtx);
extern rtx gen_mulqihi3 (rtx, rtx, rtx);
static __inline__ rtx gen_umulditi3 (rtx, rtx, rtx);
static __inline__ rtx
gen_umulditi3(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_umulsidi3 (rtx, rtx, rtx);
static __inline__ rtx gen_mulditi3 (rtx, rtx, rtx);
static __inline__ rtx
gen_mulditi3(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_mulsidi3 (rtx, rtx, rtx);
static __inline__ rtx gen_umuldi3_highpart (rtx, rtx, rtx);
static __inline__ rtx
gen_umuldi3_highpart(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_umulsi3_highpart (rtx, rtx, rtx);
static __inline__ rtx gen_smuldi3_highpart (rtx, rtx, rtx);
static __inline__ rtx
gen_smuldi3_highpart(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_smulsi3_highpart (rtx, rtx, rtx);
extern rtx gen_mulxf3 (rtx, rtx, rtx);
extern rtx gen_muldf3 (rtx, rtx, rtx);
extern rtx gen_mulsf3 (rtx, rtx, rtx);
extern rtx gen_divxf3 (rtx, rtx, rtx);
extern rtx gen_divdf3 (rtx, rtx, rtx);
extern rtx gen_divsf3 (rtx, rtx, rtx);
static __inline__ rtx gen_divmoddi4 (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_divmoddi4(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_divmodsi4 (rtx, rtx, rtx, rtx);
extern rtx gen_udivmodhi4 (rtx, rtx, rtx, rtx);
extern rtx gen_testsi_ccno_1 (rtx, rtx);
extern rtx gen_testqi_ccz_1 (rtx, rtx);
extern rtx gen_testqi_ext_ccno_0 (rtx, rtx);
static __inline__ rtx gen_anddi3 (rtx, rtx, rtx);
static __inline__ rtx
gen_anddi3(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_andsi3 (rtx, rtx, rtx);
extern rtx gen_andhi3 (rtx, rtx, rtx);
extern rtx gen_andqi3 (rtx, rtx, rtx);
static __inline__ rtx gen_iordi3 (rtx, rtx, rtx);
static __inline__ rtx
gen_iordi3(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_iorsi3 (rtx, rtx, rtx);
extern rtx gen_iorhi3 (rtx, rtx, rtx);
extern rtx gen_iorqi3 (rtx, rtx, rtx);
static __inline__ rtx gen_xordi3 (rtx, rtx, rtx);
static __inline__ rtx
gen_xordi3(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_xorsi3 (rtx, rtx, rtx);
extern rtx gen_xorhi3 (rtx, rtx, rtx);
extern rtx gen_xorqi3 (rtx, rtx, rtx);
extern rtx gen_xorqi_cc_ext_1 (rtx, rtx, rtx);
extern rtx gen_negdi2 (rtx, rtx);
extern rtx gen_negsi2 (rtx, rtx);
extern rtx gen_neghi2 (rtx, rtx);
extern rtx gen_negqi2 (rtx, rtx);
extern rtx gen_negsf2 (rtx, rtx);
extern rtx gen_negdf2 (rtx, rtx);
extern rtx gen_negxf2 (rtx, rtx);
extern rtx gen_abssf2 (rtx, rtx);
extern rtx gen_absdf2 (rtx, rtx);
extern rtx gen_absxf2 (rtx, rtx);
static __inline__ rtx gen_one_cmpldi2 (rtx, rtx);
static __inline__ rtx
gen_one_cmpldi2(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_one_cmplsi2 (rtx, rtx);
extern rtx gen_one_cmplhi2 (rtx, rtx);
extern rtx gen_one_cmplqi2 (rtx, rtx);
extern rtx gen_ashldi3 (rtx, rtx, rtx);
extern rtx gen_x86_shift_adj_1 (rtx, rtx, rtx, rtx);
extern rtx gen_x86_shift_adj_2 (rtx, rtx, rtx);
extern rtx gen_ashlsi3 (rtx, rtx, rtx);
extern rtx gen_ashlhi3 (rtx, rtx, rtx);
extern rtx gen_ashlqi3 (rtx, rtx, rtx);
extern rtx gen_ashrdi3 (rtx, rtx, rtx);
extern rtx gen_x86_shift_adj_3 (rtx, rtx, rtx);
extern rtx gen_ashrsi3 (rtx, rtx, rtx);
extern rtx gen_ashrhi3 (rtx, rtx, rtx);
extern rtx gen_ashrqi3 (rtx, rtx, rtx);
extern rtx gen_lshrdi3 (rtx, rtx, rtx);
extern rtx gen_lshrsi3 (rtx, rtx, rtx);
extern rtx gen_lshrhi3 (rtx, rtx, rtx);
extern rtx gen_lshrqi3 (rtx, rtx, rtx);
static __inline__ rtx gen_rotldi3 (rtx, rtx, rtx);
static __inline__ rtx
gen_rotldi3(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_rotlsi3 (rtx, rtx, rtx);
extern rtx gen_rotlhi3 (rtx, rtx, rtx);
extern rtx gen_rotlqi3 (rtx, rtx, rtx);
static __inline__ rtx gen_rotrdi3 (rtx, rtx, rtx);
static __inline__ rtx
gen_rotrdi3(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_rotrsi3 (rtx, rtx, rtx);
extern rtx gen_rotrhi3 (rtx, rtx, rtx);
extern rtx gen_rotrqi3 (rtx, rtx, rtx);
extern rtx gen_extv (rtx, rtx, rtx, rtx);
extern rtx gen_extzv (rtx, rtx, rtx, rtx);
extern rtx gen_insv (rtx, rtx, rtx, rtx);
extern rtx gen_seq (rtx);
extern rtx gen_sne (rtx);
extern rtx gen_sgt (rtx);
extern rtx gen_sgtu (rtx);
extern rtx gen_slt (rtx);
extern rtx gen_sltu (rtx);
extern rtx gen_sge (rtx);
extern rtx gen_sgeu (rtx);
extern rtx gen_sle (rtx);
extern rtx gen_sleu (rtx);
extern rtx gen_sunordered (rtx);
extern rtx gen_sordered (rtx);
extern rtx gen_suneq (rtx);
extern rtx gen_sunge (rtx);
extern rtx gen_sungt (rtx);
extern rtx gen_sunle (rtx);
extern rtx gen_sunlt (rtx);
extern rtx gen_sltgt (rtx);
extern rtx gen_beq (rtx);
extern rtx gen_bne (rtx);
extern rtx gen_bgt (rtx);
extern rtx gen_bgtu (rtx);
extern rtx gen_blt (rtx);
extern rtx gen_bltu (rtx);
extern rtx gen_bge (rtx);
extern rtx gen_bgeu (rtx);
extern rtx gen_ble (rtx);
extern rtx gen_bleu (rtx);
extern rtx gen_bunordered (rtx);
extern rtx gen_bordered (rtx);
extern rtx gen_buneq (rtx);
extern rtx gen_bunge (rtx);
extern rtx gen_bungt (rtx);
extern rtx gen_bunle (rtx);
extern rtx gen_bunlt (rtx);
extern rtx gen_bltgt (rtx);
extern rtx gen_indirect_jump (rtx);
extern rtx gen_tablejump (rtx, rtx);
extern rtx gen_doloop_end (rtx, rtx, rtx, rtx, rtx);

extern rtx gen_call_pop (rtx, rtx, rtx, rtx);

extern rtx gen_call (rtx, rtx, rtx);

extern rtx gen_sibcall (rtx, rtx, rtx);

extern rtx gen_call_value_pop (rtx, rtx, rtx, rtx, rtx);

extern rtx gen_call_value (rtx, rtx, rtx, rtx);

extern rtx gen_sibcall_value (rtx, rtx, rtx, rtx);
extern rtx gen_untyped_call (rtx, rtx, rtx);
extern rtx gen_return (void);
extern rtx gen_prologue (void);
extern rtx gen_epilogue (void);
extern rtx gen_sibcall_epilogue (void);
extern rtx gen_eh_return (rtx);
extern rtx gen_ffssi2 (rtx, rtx);
extern rtx gen_clzsi2 (rtx, rtx);
extern rtx gen_tls_global_dynamic_32 (rtx, rtx);
extern rtx gen_tls_global_dynamic_64 (rtx, rtx);
extern rtx gen_tls_local_dynamic_base_32 (rtx);
extern rtx gen_tls_local_dynamic_base_64 (rtx);
extern rtx gen_sqrtsf2 (rtx, rtx);
extern rtx gen_sqrtdf2 (rtx, rtx);
extern rtx gen_atan2df3 (rtx, rtx, rtx);
extern rtx gen_atan2sf3 (rtx, rtx, rtx);
extern rtx gen_atan2xf3 (rtx, rtx, rtx);
extern rtx gen_logsf2 (rtx, rtx);
extern rtx gen_logdf2 (rtx, rtx);
extern rtx gen_logxf2 (rtx, rtx);
extern rtx gen_expsf2 (rtx, rtx);
extern rtx gen_expdf2 (rtx, rtx);
extern rtx gen_expxf2 (rtx, rtx);
extern rtx gen_atansf2 (rtx, rtx);
extern rtx gen_atandf2 (rtx, rtx);
extern rtx gen_atanxf2 (rtx, rtx);
extern rtx gen_movstrsi (rtx, rtx, rtx, rtx);
static __inline__ rtx gen_movstrdi (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_movstrdi(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_strmov (rtx, rtx, rtx, rtx);
extern rtx gen_strmov_singleop (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_rep_mov (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_clrstrsi (rtx, rtx, rtx);
static __inline__ rtx gen_clrstrdi (rtx, rtx, rtx);
static __inline__ rtx
gen_clrstrdi(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_strset (rtx, rtx, rtx);
extern rtx gen_strset_singleop (rtx, rtx, rtx, rtx);
extern rtx gen_rep_stos (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_cmpstrsi (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_cmpintqi (rtx);
extern rtx gen_cmpstrqi_nz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_cmpstrqi_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_strlensi (rtx, rtx, rtx, rtx);
extern rtx gen_strlendi (rtx, rtx, rtx, rtx);
extern rtx gen_strlenqi_1 (rtx, rtx, rtx);
static __inline__ rtx gen_movdicc (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_movdicc(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_movsicc (rtx, rtx, rtx, rtx);
extern rtx gen_movhicc (rtx, rtx, rtx, rtx);
extern rtx gen_movqicc (rtx, rtx, rtx, rtx);
extern rtx gen_movsfcc (rtx, rtx, rtx, rtx);
extern rtx gen_movdfcc (rtx, rtx, rtx, rtx);
extern rtx gen_movxfcc (rtx, rtx, rtx, rtx);
extern rtx gen_minsf3 (rtx, rtx, rtx);
extern rtx gen_addqicc (rtx, rtx, rtx, rtx);
extern rtx gen_addhicc (rtx, rtx, rtx, rtx);
extern rtx gen_addsicc (rtx, rtx, rtx, rtx);
static __inline__ rtx gen_adddicc (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_adddicc(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_mindf3 (rtx, rtx, rtx);
extern rtx gen_maxsf3 (rtx, rtx, rtx);
extern rtx gen_maxdf3 (rtx, rtx, rtx);
extern rtx gen_allocate_stack_worker (rtx);
extern rtx gen_allocate_stack_worker_postreload (rtx);
extern rtx gen_allocate_stack_worker_rex64_postreload (rtx);
extern rtx gen_allocate_stack (rtx, rtx);
extern rtx gen_builtin_setjmp_receiver (rtx);
extern rtx gen_conditional_trap (rtx, rtx);
extern rtx gen_movti (rtx, rtx);
static __inline__ rtx gen_movtf (rtx, rtx);
static __inline__ rtx
gen_movtf(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_movv2df (rtx, rtx);
extern rtx gen_movv8hi (rtx, rtx);
extern rtx gen_movv16qi (rtx, rtx);
extern rtx gen_movv4sf (rtx, rtx);
extern rtx gen_movv4si (rtx, rtx);
extern rtx gen_movv2di (rtx, rtx);
extern rtx gen_movv2si (rtx, rtx);
extern rtx gen_movv4hi (rtx, rtx);
extern rtx gen_movv8qi (rtx, rtx);
extern rtx gen_movv2sf (rtx, rtx);
extern rtx gen_sse_movaps (rtx, rtx);
extern rtx gen_sse_movups (rtx, rtx);
extern rtx gen_sse_loadss (rtx, rtx);
extern rtx gen_sse_andv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_nandv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_iorv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_xorv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse2_andv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_nandv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_iorv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_xorv2df3 (rtx, rtx, rtx);
extern rtx gen_sfence (void);
static __inline__ rtx gen_sse_prologue_save (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_sse_prologue_save(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_prefetch (rtx, rtx, rtx);
extern rtx gen_sse2_loadsd (rtx, rtx);
extern rtx gen_sse2_mfence (void);
extern rtx gen_sse2_lfence (void);
# 17 "tm.h" 2
# 8 "insn-recog.c" 2
# 1 "rtl.h" 1
# 25 "rtl.h"
struct function;

# 1 "machmode.h" 1
# 26 "machmode.h"
# 1 "insn-modes.h" 1






enum machine_mode
{
  VOIDmode,
  BLKmode,
  CCmode,
  CCGCmode,
  CCGOCmode,
  CCNOmode,
  CCZmode,
  CCFPmode,
  CCFPUmode,
  BImode,
  QImode,
  HImode,
  SImode,
  DImode,
  TImode,
  SFmode,
  DFmode,
  XFmode,
  TFmode,
  CQImode,
  CHImode,
  CSImode,
  CDImode,
  CTImode,
  SCmode,
  DCmode,
  XCmode,
  TCmode,
  V2QImode,
  V4QImode,
  V2HImode,
  V8QImode,
  V4HImode,
  V2SImode,
  V1DImode,
  V16QImode,
  V8HImode,
  V4SImode,
  V2DImode,
  V8SImode,
  V4DImode,
  V8DImode,
  V2SFmode,
  V4SFmode,
  V2DFmode,
  V8SFmode,
  V4DFmode,
  V16SFmode,
  V8DFmode,
  MAX_MACHINE_MODE,

  MIN_MODE_RANDOM = VOIDmode,
  MAX_MODE_RANDOM = BLKmode,

  MIN_MODE_CC = CCmode,
  MAX_MODE_CC = CCFPUmode,

  MIN_MODE_INT = QImode,
  MAX_MODE_INT = TImode,

  MIN_MODE_PARTIAL_INT = VOIDmode,
  MAX_MODE_PARTIAL_INT = VOIDmode,

  MIN_MODE_FLOAT = SFmode,
  MAX_MODE_FLOAT = TFmode,

  MIN_MODE_COMPLEX_INT = CQImode,
  MAX_MODE_COMPLEX_INT = CTImode,

  MIN_MODE_COMPLEX_FLOAT = SCmode,
  MAX_MODE_COMPLEX_FLOAT = TCmode,

  MIN_MODE_VECTOR_INT = V2QImode,
  MAX_MODE_VECTOR_INT = V8DImode,

  MIN_MODE_VECTOR_FLOAT = V2SFmode,
  MAX_MODE_VECTOR_FLOAT = V8DFmode,

  NUM_MACHINE_MODES = MAX_MACHINE_MODE
};
# 27 "machmode.h" 2



extern const char * const mode_name[NUM_MACHINE_MODES];




# 1 "mode-classes.def" 1
# 36 "machmode.h" 2

enum mode_class { MODE_RANDOM, MODE_CC, MODE_INT, MODE_PARTIAL_INT, MODE_FLOAT, MODE_COMPLEX_INT, MODE_COMPLEX_FLOAT, MODE_VECTOR_INT, MODE_VECTOR_FLOAT, MAX_MODE_CLASS };






extern const unsigned char mode_class[NUM_MACHINE_MODES];
# 81 "machmode.h"
extern unsigned char mode_size[NUM_MACHINE_MODES];




extern const unsigned short mode_precision[NUM_MACHINE_MODES];





extern const unsigned long mode_mask_array[NUM_MACHINE_MODES];





extern const unsigned char mode_inner[NUM_MACHINE_MODES];
# 110 "machmode.h"
extern const unsigned char mode_nunits[NUM_MACHINE_MODES];




extern const unsigned char mode_wider[NUM_MACHINE_MODES];






extern enum machine_mode mode_for_size (unsigned int, enum mode_class, int);



extern enum machine_mode smallest_mode_for_size (unsigned int,
       enum mode_class);





extern enum machine_mode int_mode_for_mode (enum machine_mode);



extern enum machine_mode get_best_mode (int, int, unsigned int,
     enum machine_mode, int);



extern unsigned char mode_base_align[NUM_MACHINE_MODES];

extern unsigned get_mode_alignment (enum machine_mode);





extern const unsigned char class_narrowest_mode[MAX_MODE_CLASS];





extern enum machine_mode byte_mode;
extern enum machine_mode word_mode;
extern enum machine_mode ptr_mode;


extern void init_adjust_machine_modes (void);
# 28 "rtl.h" 2
# 1 "input.h" 1
# 27 "input.h"
struct location_s
{

  const char *file;


  int line;
};
typedef struct location_s location_t;

struct file_stack
{
  struct file_stack *next;
  location_t location;
};


extern const char *main_input_filename;

extern location_t input_location;





extern struct file_stack *input_file_stack;


extern struct file_stack *expr_wfl_stack;


extern int input_file_stack_tick;

extern void push_srcloc (const char *name, int line);
extern void pop_srcloc (void);
# 29 "rtl.h" 2
# 42 "rtl.h"
enum rtx_code {


# 1 "rtl.def" 1
# 70 "rtl.def"
UNKNOWN ,



NIL ,




INCLUDE ,






EXPR_LIST ,



INSN_LIST ,
# 129 "rtl.def"
MATCH_OPERAND ,






MATCH_SCRATCH ,




MATCH_DUP ,







MATCH_OPERATOR ,
# 158 "rtl.def"
MATCH_PARALLEL ,




MATCH_OP_DUP ,




MATCH_PAR_DUP ,




MATCH_INSN ,
# 192 "rtl.def"
DEFINE_INSN ,







DEFINE_PEEPHOLE ,
# 211 "rtl.def"
DEFINE_SPLIT ,
# 239 "rtl.def"
DEFINE_INSN_AND_SPLIT ,



DEFINE_PEEPHOLE2 ,



DEFINE_COMBINE ,
# 260 "rtl.def"
DEFINE_EXPAND ,
# 276 "rtl.def"
DEFINE_DELAY ,
# 317 "rtl.def"
DEFINE_FUNCTION_UNIT ,


DEFINE_ASM_ATTRIBUTES ,
# 333 "rtl.def"
DEFINE_COND_EXEC ,





SEQUENCE ,


ADDRESS ,
# 358 "rtl.def"
DEFINE_CPU_UNIT ,




DEFINE_QUERY_CPU_UNIT ,
# 373 "rtl.def"
EXCLUSION_SET ,
# 395 "rtl.def"
PRESENCE_SET ,
# 416 "rtl.def"
FINAL_PRESENCE_SET ,
# 439 "rtl.def"
ABSENCE_SET ,




FINAL_ABSENCE_SET ,
# 455 "rtl.def"
DEFINE_BYPASS ,
# 464 "rtl.def"
DEFINE_AUTOMATON ,
# 487 "rtl.def"
AUTOMATA_OPTION ,
# 496 "rtl.def"
DEFINE_RESERVATION ,
# 544 "rtl.def"
DEFINE_INSN_RESERVATION ,
# 555 "rtl.def"
DEFINE_ATTR ,


ATTR ,







SET_ATTR ,
# 581 "rtl.def"
SET_ATTR_ALTERNATIVE ,




EQ_ATTR ,



EQ_ATTR_ALT ,
# 600 "rtl.def"
ATTR_FLAG ,
# 613 "rtl.def"
INSN ,



JUMP_INSN ,






CALL_INSN ,


BARRIER ,







CODE_LABEL ,






NOTE ,
# 655 "rtl.def"
COND_EXEC ,


PARALLEL ,







ASM_INPUT ,
# 680 "rtl.def"
ASM_OPERANDS ,
# 691 "rtl.def"
UNSPEC ,


UNSPEC_VOLATILE ,



ADDR_VEC ,
# 723 "rtl.def"
ADDR_DIFF_VEC ,
# 734 "rtl.def"
PREFETCH ,
# 746 "rtl.def"
SET ,




USE ,




CLOBBER ,





CALL ,



RETURN ,





TRAP_IF ,




RESX ,






CONST_INT ,




CONST_DOUBLE ,


CONST_VECTOR ,


CONST_STRING ,





CONST ,



PC ,


VALUE ,
# 817 "rtl.def"
REG ,






SCRATCH ,
# 834 "rtl.def"
SUBREG ,
# 847 "rtl.def"
STRICT_LOW_PART ,





CONCAT ,




MEM ,





LABEL_REF ,






SYMBOL_REF ,






CC0 ,
# 887 "rtl.def"
ADDRESSOF ,
# 905 "rtl.def"
QUEUED ,
# 917 "rtl.def"
IF_THEN_ELSE ,
# 926 "rtl.def"
COND ,


COMPARE ,


PLUS ,


MINUS ,


NEG ,

MULT ,


DIV ,

MOD ,


UDIV ,
UMOD ,


AND ,

IOR ,

XOR ,

NOT ,




ASHIFT ,
ROTATE ,
ASHIFTRT ,
LSHIFTRT ,
ROTATERT ,





SMIN ,
SMAX ,
UMIN ,
UMAX ,
# 985 "rtl.def"
PRE_DEC ,
PRE_INC ,
POST_DEC ,
POST_INC ,
# 1002 "rtl.def"
PRE_MODIFY ,
POST_MODIFY ,



NE ,
EQ ,
GE ,
GT ,
LE ,
LT ,
GEU ,
GTU ,
LEU ,
LTU ,


UNORDERED ,
ORDERED ,


UNEQ ,
UNGE ,
UNGT ,
UNLE ,
UNLT ,


LTGT ,




SIGN_EXTEND ,


ZERO_EXTEND ,


TRUNCATE ,


FLOAT_EXTEND ,
FLOAT_TRUNCATE ,


FLOAT ,







FIX ,


UNSIGNED_FLOAT ,




UNSIGNED_FIX ,


ABS ,


SQRT ,




FFS ,


CLZ ,


CTZ ,


POPCOUNT ,


PARITY ,
# 1098 "rtl.def"
SIGN_EXTRACT ,


ZERO_EXTRACT ,




HIGH ,



LO_SUM ,
# 1123 "rtl.def"
RANGE_INFO ,
# 1138 "rtl.def"
RANGE_REG ,





RANGE_VAR ,



RANGE_LIVE ,




CONSTANT_P_RTX ,
# 1174 "rtl.def"
CALL_PLACEHOLDER ,






VEC_MERGE ,





VEC_SELECT ,




VEC_CONCAT ,





VEC_DUPLICATE ,


SS_PLUS ,


US_PLUS ,


SS_MINUS ,


US_MINUS ,


SS_TRUNCATE ,


US_TRUNCATE ,
# 46 "rtl.h" 2


  LAST_AND_UNUSED_RTX_CODE};






extern const unsigned char rtx_length[((int) LAST_AND_UNUSED_RTX_CODE)];


extern const char * const rtx_name[((int) LAST_AND_UNUSED_RTX_CODE)];


extern const char * const rtx_format[((int) LAST_AND_UNUSED_RTX_CODE)];


extern const char rtx_class[((int) LAST_AND_UNUSED_RTX_CODE)];


extern const unsigned char rtx_size[((int) LAST_AND_UNUSED_RTX_CODE)];
extern const unsigned char rtx_next[((int) LAST_AND_UNUSED_RTX_CODE)];



typedef struct
{

  unsigned min_align: 8;

  unsigned base_after_vec: 1;
  unsigned min_after_vec: 1;

  unsigned max_after_vec: 1;

  unsigned min_after_base: 1;

  unsigned max_after_base: 1;


  unsigned offset_unsigned: 1;
  unsigned : 2;
  unsigned scale : 8;
} addr_diff_vec_flags;
# 99 "rtl.h"
typedef struct mem_attrs
{
  long alias;
  tree expr;
  rtx offset;
  rtx size;
  unsigned int align;
} mem_attrs;




typedef struct reg_attrs
{
  tree decl;
  long offset;
} reg_attrs;



union rtunion_def
{
  int rtint;
  unsigned int rtuint;
  const char *rtstr;
  rtx rtx;
  rtvec rtvec;
  enum machine_mode rttype;
  addr_diff_vec_flags rt_addr_diff_vec_flags;
  struct cselib_val_struct *rt_cselib;
  struct bitmap_head_def *rtbit;
  tree rttree;
  struct basic_block_def *bb;
  mem_attrs *rtmem;
  reg_attrs *rtreg;
};
typedef union rtunion_def rtunion;



struct rtx_def

{

  __extension__ enum rtx_code code: 16;


  __extension__ enum machine_mode mode : 8;






  unsigned int jump : 1;


  unsigned int call : 1;







  unsigned int unchanging : 1;
# 173 "rtl.h"
  unsigned int volatil : 1;
# 192 "rtl.h"
  unsigned int in_struct : 1;






  unsigned int used : 1;




  unsigned integrated : 1;
# 213 "rtl.h"
  unsigned frame_related : 1;




  union u {
    rtunion fld[1];
    long hwint[1];
  } u;
};
# 261 "rtl.h"
struct rtvec_def {
  int num_elem;
  rtx elem[1];
};
# 638 "rtl.h"
enum reg_note
{



  REG_DEAD = 1,


  REG_INC,
# 657 "rtl.h"
  REG_EQUIV,




  REG_EQUAL,





  REG_RETVAL,




  REG_LIBCALL,






  REG_NONNEG,



  REG_NO_CONFLICT,


  REG_UNUSED,
# 696 "rtl.h"
  REG_CC_SETTER, REG_CC_USER,




  REG_LABEL,





  REG_DEP_ANTI, REG_DEP_OUTPUT,





  REG_BR_PROB,




  REG_VALUE_PROFILE,



  REG_NOALIAS,



  REG_SAVE_AREA,





  REG_BR_PRED,




  REG_FRAME_RELATED_EXPR,




  REG_EH_CONTEXT,





  REG_EH_REGION,


  REG_SAVE_NOTE,





  REG_MAYBE_DEAD,


  REG_NORETURN,



  REG_NON_LOCAL_GOTO,



  REG_SETJMP,


  REG_ALWAYS_RETURN,



  REG_VTABLE_REF
};
# 788 "rtl.h"
extern const char * const reg_note_name[];
# 850 "rtl.h"
enum insn_note
{

  NOTE_INSN_BIAS = -100,



  NOTE_INSN_DELETED,



  NOTE_INSN_BLOCK_BEG,
  NOTE_INSN_BLOCK_END,


  NOTE_INSN_LOOP_BEG,
  NOTE_INSN_LOOP_END,


  NOTE_INSN_LOOP_CONT,

  NOTE_INSN_LOOP_VTOP,





  NOTE_INSN_LOOP_END_TOP_COND,






  NOTE_INSN_FUNCTION_END,


  NOTE_INSN_PROLOGUE_END,


  NOTE_INSN_EPILOGUE_BEG,


  NOTE_INSN_DELETED_LABEL,




  NOTE_INSN_FUNCTION_BEG,



  NOTE_INSN_EH_REGION_BEG,
  NOTE_INSN_EH_REGION_END,




  NOTE_INSN_REPEATED_LINE_NUMBER,


  NOTE_INSN_BASIC_BLOCK,



  NOTE_INSN_EXPECTED_VALUE,


  NOTE_INSN_PREDICTION,

  NOTE_INSN_MAX
};



extern const char * const note_insn_name[NOTE_INSN_MAX - NOTE_INSN_BIAS];
# 940 "rtl.h"
enum label_kind
{
  LABEL_NORMAL = 0,
  LABEL_STATIC_ENTRY,
  LABEL_GLOBAL_ENTRY,
  LABEL_WEAK_ENTRY
};
# 1067 "rtl.h"
extern unsigned int subreg_lsb (rtx);
extern unsigned int subreg_regno_offset (unsigned int, enum machine_mode,
      unsigned int, enum machine_mode);
extern _Bool subreg_offset_representable_p (unsigned int, enum machine_mode,
        unsigned int, enum machine_mode);
extern unsigned int subreg_regno (rtx);
# 1422 "rtl.h"
extern int rtx_equal_function_value_matters;


extern int generating_concat_p;




extern int ceil_log2 (unsigned long);




extern rtx expand_builtin_expect_jump (tree, rtx, rtx);
extern void purge_builtin_constant_p (void);


extern void set_stack_check_libfunc (rtx);
extern long trunc_int_for_mode (long, enum machine_mode);
extern rtx plus_constant_wide (rtx, long);
extern rtx plus_constant_for_output_wide (rtx, long);
extern void optimize_save_area_alloca (rtx);


extern rtx gen_rtx (enum rtx_code, enum machine_mode, ...);
extern rtvec gen_rtvec (int, ...);
extern rtx copy_insn_1 (rtx);
extern rtx copy_insn (rtx);
extern rtx gen_int_mode (long, enum machine_mode);
extern rtx emit_copy_of_insn_after (rtx, rtx);
extern void set_reg_attrs_from_mem (rtx, rtx);
extern void set_mem_attrs_from_reg (rtx, rtx);
extern void set_reg_attrs_for_parm (rtx, rtx);
extern int mem_expr_equal_p (tree, tree);


extern rtx rtx_alloc (enum rtx_code);
extern rtvec rtvec_alloc (int);
extern rtx copy_rtx (rtx);
extern void dump_rtx_statistics (void);


extern rtx copy_rtx_if_shared (rtx);


extern rtx copy_most_rtx (rtx, rtx);
extern rtx shallow_copy_rtx (rtx);
extern int rtx_equal_p (rtx, rtx);


extern rtvec gen_rtvec_v (int, rtx *);
extern rtx gen_reg_rtx (enum machine_mode);
extern rtx gen_rtx_REG_offset (rtx, enum machine_mode, unsigned int, int);
extern rtx gen_label_rtx (void);
extern int subreg_hard_regno (rtx, int);
extern rtx gen_lowpart_common (enum machine_mode, rtx);
extern rtx gen_lowpart (enum machine_mode, rtx);


extern rtx gen_lowpart_if_possible (enum machine_mode, rtx);


extern rtx gen_highpart (enum machine_mode, rtx);
extern rtx gen_highpart_mode (enum machine_mode, enum machine_mode, rtx);
extern rtx gen_realpart (enum machine_mode, rtx);
extern rtx gen_imagpart (enum machine_mode, rtx);
extern rtx operand_subword (rtx, unsigned int, int, enum machine_mode);


extern rtx operand_subword_force (rtx, unsigned int, enum machine_mode);
extern int subreg_lowpart_p (rtx);
extern unsigned int subreg_lowpart_offset (enum machine_mode,
        enum machine_mode);
extern unsigned int subreg_highpart_offset (enum machine_mode,
         enum machine_mode);
extern rtx make_safe_from (rtx, rtx);
extern rtx convert_memory_address (enum machine_mode, rtx);
extern rtx get_insns (void);
extern const char *get_insn_name (int);
extern rtx get_last_insn (void);
extern rtx get_last_insn_anywhere (void);
extern rtx get_first_nonnote_insn (void);
extern rtx get_last_nonnote_insn (void);
extern void start_sequence (void);
extern void push_to_sequence (rtx);
extern void end_sequence (void);
extern void push_to_full_sequence (rtx, rtx);
extern void end_full_sequence (rtx*, rtx*);
extern rtx immed_double_const (long, long,
          enum machine_mode);


extern rtx force_const_mem (enum machine_mode, rtx);


extern rtx get_pool_constant (rtx);
extern rtx get_pool_constant_mark (rtx, _Bool *);
extern enum machine_mode get_pool_mode (rtx);
extern rtx get_pool_constant_for_function (struct function *, rtx);
extern enum machine_mode get_pool_mode_for_function (struct function *, rtx);
extern int get_pool_offset (rtx);
extern rtx simplify_subtraction (rtx);


extern rtx assign_stack_local (enum machine_mode, long, int);
extern rtx assign_stack_temp (enum machine_mode, long, int);
extern rtx assign_stack_temp_for_type (enum machine_mode,
           long, int, tree);
extern rtx assign_temp (tree, int, int, int);


extern rtx emit_insn_before (rtx, rtx);
extern rtx emit_insn_before_noloc (rtx, rtx);
extern rtx emit_insn_before_setloc (rtx, rtx, int);
extern rtx emit_jump_insn_before (rtx, rtx);
extern rtx emit_jump_insn_before_noloc (rtx, rtx);
extern rtx emit_jump_insn_before_setloc (rtx, rtx, int);
extern rtx emit_call_insn_before (rtx, rtx);
extern rtx emit_call_insn_before_noloc (rtx, rtx);
extern rtx emit_call_insn_before_setloc (rtx, rtx, int);
extern rtx emit_barrier_before (rtx);
extern rtx emit_label_before (rtx, rtx);
extern rtx emit_note_before (int, rtx);
extern rtx emit_insn_after (rtx, rtx);
extern rtx emit_insn_after_noloc (rtx, rtx);
extern rtx emit_insn_after_setloc (rtx, rtx, int);
extern rtx emit_jump_insn_after (rtx, rtx);
extern rtx emit_jump_insn_after_noloc (rtx, rtx);
extern rtx emit_jump_insn_after_setloc (rtx, rtx, int);
extern rtx emit_call_insn_after (rtx, rtx);
extern rtx emit_call_insn_after_noloc (rtx, rtx);
extern rtx emit_call_insn_after_setloc (rtx, rtx, int);
extern rtx emit_barrier_after (rtx);
extern rtx emit_label_after (rtx, rtx);
extern rtx emit_note_after (int, rtx);
extern rtx emit_note_copy_after (rtx, rtx);
extern rtx emit_insn (rtx);
extern rtx emit_jump_insn (rtx);
extern rtx emit_call_insn (rtx);
extern rtx emit_label (rtx);
extern rtx emit_barrier (void);
extern rtx emit_note (int);
extern rtx emit_note_copy (rtx);
extern rtx emit_line_note (location_t);
extern rtx make_insn_raw (rtx);
extern void add_function_usage_to (rtx, rtx);
extern rtx last_call_insn (void);
extern rtx previous_insn (rtx);
extern rtx next_insn (rtx);
extern rtx prev_nonnote_insn (rtx);
extern rtx next_nonnote_insn (rtx);
extern rtx prev_real_insn (rtx);
extern rtx next_real_insn (rtx);
extern rtx prev_active_insn (rtx);
extern rtx next_active_insn (rtx);
extern int active_insn_p (rtx);
extern rtx prev_label (rtx);
extern rtx next_label (rtx);
extern rtx next_cc0_user (rtx);
extern rtx prev_cc0_setter (rtx);


extern tree choose_inner_scope (tree, tree);
extern int insn_line (rtx);
extern const char * insn_file (rtx);
extern int locator_line (int);
extern const char * locator_file (int);
extern int prologue_locator, epilogue_locator;


extern enum rtx_code reverse_condition (enum rtx_code);
extern enum rtx_code reverse_condition_maybe_unordered (enum rtx_code);
extern enum rtx_code swap_condition (enum rtx_code);
extern enum rtx_code unsigned_condition (enum rtx_code);
extern enum rtx_code signed_condition (enum rtx_code);
extern void mark_jump_label (rtx, rtx, int);
extern void cleanup_barriers (void);


extern _Bool squeeze_notes (rtx *, rtx *);
extern rtx delete_related_insns (rtx);
extern void delete_jump (rtx);
extern void delete_barrier (rtx);
extern rtx get_label_before (rtx);
extern rtx get_label_after (rtx);
extern rtx follow_jumps (rtx);


extern rtx *find_constant_term_loc (rtx *);


extern rtx try_split (rtx, rtx, int);
extern int split_branch_probability;


extern rtx split_insns (rtx, rtx);


extern rtx simplify_unary_operation (enum rtx_code, enum machine_mode, rtx,
         enum machine_mode);
extern rtx simplify_binary_operation (enum rtx_code, enum machine_mode, rtx,
          rtx);
extern rtx simplify_ternary_operation (enum rtx_code, enum machine_mode,
           enum machine_mode, rtx, rtx, rtx);
extern rtx simplify_relational_operation (enum rtx_code, enum machine_mode,
       rtx, rtx);
extern rtx simplify_gen_binary (enum rtx_code, enum machine_mode, rtx, rtx);
extern rtx simplify_gen_unary (enum rtx_code, enum machine_mode, rtx,
          enum machine_mode);
extern rtx simplify_gen_ternary (enum rtx_code, enum machine_mode,
     enum machine_mode, rtx, rtx, rtx);
extern rtx simplify_gen_relational (enum rtx_code, enum machine_mode,
        enum machine_mode, rtx, rtx);
extern rtx simplify_subreg (enum machine_mode, rtx, enum machine_mode,
       unsigned int);
extern rtx simplify_gen_subreg (enum machine_mode, rtx, enum machine_mode,
    unsigned int);
extern rtx simplify_replace_rtx (rtx, rtx, rtx);
extern rtx simplify_rtx (rtx);
extern rtx avoid_constant_pool_reference (rtx);


extern rtx gen_mem_addressof (rtx, tree, int);


extern enum machine_mode choose_hard_reg_mode (unsigned int, unsigned int,
            _Bool);


extern rtx set_unique_reg_note (rtx, enum reg_note, rtx);
# 1663 "rtl.h"
typedef struct replace_label_data
{
  rtx r1;
  rtx r2;
  _Bool update_label_nuses;
} replace_label_data;

extern int rtx_addr_can_trap_p (rtx);
extern _Bool nonzero_address_p (rtx);
extern int rtx_unstable_p (rtx);
extern int rtx_varies_p (rtx, int);
extern int rtx_addr_varies_p (rtx, int);
extern long get_integer_term (rtx);
extern rtx get_related_value (rtx);
extern rtx get_jump_table_offset (rtx, rtx *);
extern int global_reg_mentioned_p (rtx);
extern int reg_mentioned_p (rtx, rtx);
extern int count_occurrences (rtx, rtx, int);
extern int reg_referenced_p (rtx, rtx);
extern int reg_used_between_p (rtx, rtx, rtx);
extern int reg_referenced_between_p (rtx, rtx, rtx);
extern int reg_set_between_p (rtx, rtx, rtx);
extern int regs_set_between_p (rtx, rtx, rtx);
extern int commutative_operand_precedence (rtx);
extern int swap_commutative_operands_p (rtx, rtx);
extern int modified_between_p (rtx, rtx, rtx);
extern int no_labels_between_p (rtx, rtx);
extern int no_jumps_between_p (rtx, rtx);
extern int modified_in_p (rtx, rtx);
extern int insn_dependent_p (rtx, rtx);
extern int reg_set_p (rtx, rtx);
extern rtx single_set_2 (rtx, rtx);
extern int multiple_sets (rtx);
extern int set_noop_p (rtx);
extern int noop_move_p (rtx);
extern rtx find_last_value (rtx, rtx *, rtx, int);
extern int refers_to_regno_p (unsigned int, unsigned int, rtx, rtx *);
extern int reg_overlap_mentioned_p (rtx, rtx);
extern rtx set_of (rtx, rtx);
extern void note_stores (rtx, void (*) (rtx, rtx, void *), void *);
extern void note_uses (rtx *, void (*) (rtx *, void *), void *);
extern rtx reg_set_last (rtx, rtx);
extern int dead_or_set_p (rtx, rtx);
extern int dead_or_set_regno_p (rtx, unsigned int);
extern rtx find_reg_note (rtx, enum reg_note, rtx);
extern rtx find_regno_note (rtx, enum reg_note, unsigned int);
extern rtx find_reg_equal_equiv_note (rtx);
extern int find_reg_fusage (rtx, enum rtx_code, rtx);
extern int find_regno_fusage (rtx, enum rtx_code, unsigned int);
extern int pure_call_p (rtx);
extern void remove_note (rtx, rtx);
extern int side_effects_p (rtx);
extern int volatile_refs_p (rtx);
extern int volatile_insn_p (rtx);
extern int may_trap_p (rtx);
extern int inequality_comparisons_p (rtx);
extern rtx replace_rtx (rtx, rtx, rtx);
extern rtx replace_regs (rtx, rtx *, unsigned int, int);
extern int replace_label (rtx *, void *);
extern int rtx_referenced_p (rtx, rtx);
extern _Bool tablejump_p (rtx, rtx *, rtx *);
extern int computed_jump_p (rtx);
typedef int (*rtx_function) (rtx *, void *);
extern int for_each_rtx (rtx *, rtx_function, void *);
extern rtx regno_use_in (unsigned int, rtx);
extern int auto_inc_p (rtx);
extern int in_expr_list_p (rtx, rtx);
extern void remove_node_from_expr_list (rtx, rtx *);
extern int insns_safe_to_move_p (rtx, rtx, rtx *);
extern int loc_mentioned_in_p (rtx *, rtx);
extern rtx find_first_parameter_load (rtx, rtx);
extern _Bool keep_with_call_p (rtx);
extern _Bool label_is_jump_target_p (rtx, rtx);



extern rtx find_use_as_address (rtx, rtx, long);



void free_EXPR_LIST_list (rtx *);
void free_INSN_LIST_list (rtx *);
void free_EXPR_LIST_node (rtx);
void free_INSN_LIST_node (rtx);
rtx alloc_INSN_LIST (rtx, rtx);
rtx alloc_EXPR_LIST (int, rtx, rtx);







extern int max_parallel;


extern void free_reg_info (void);


extern int asm_noperands (rtx);
extern const char *decode_asm_operands (rtx, rtx *, rtx **, const char **,
     enum machine_mode *);

extern enum reg_class reg_preferred_class (int);
extern enum reg_class reg_alternate_class (int);

extern rtx get_first_nonparm_insn (void);

extern void split_all_insns (int);
extern void split_all_insns_noflow (void);


extern rtx const_int_rtx[64 * 2 + 1];





extern rtx const_true_rtx;

extern rtx const_tiny_rtx[3][(int) MAX_MACHINE_MODE];
# 1806 "rtl.h"
enum global_rtl_index
{
  GR_PC,
  GR_CC0,
  GR_STACK_POINTER,
  GR_FRAME_POINTER,
# 1821 "rtl.h"
  GR_HARD_FRAME_POINTER,





  GR_ARG_POINTER,


  GR_VIRTUAL_INCOMING_ARGS,
  GR_VIRTUAL_STACK_ARGS,
  GR_VIRTUAL_STACK_DYNAMIC,
  GR_VIRTUAL_OUTGOING_ARGS,
  GR_VIRTUAL_CFA,

  GR_MAX
};


extern rtx global_rtl[GR_MAX];
# 1854 "rtl.h"
extern rtx pic_offset_table_rtx;
extern rtx static_chain_rtx;
extern rtx static_chain_incoming_rtx;
extern rtx return_address_pointer_rtx;




# 1 "genrtl.h" 1





extern rtx gen_rtx_fmt_s (enum rtx_code, enum machine_mode mode,
           const char *arg0);
extern rtx gen_rtx_fmt_ee (enum rtx_code, enum machine_mode mode,
           rtx arg0, rtx arg1);
extern rtx gen_rtx_fmt_ue (enum rtx_code, enum machine_mode mode,
           rtx arg0, rtx arg1);
extern rtx gen_rtx_fmt_iss (enum rtx_code, enum machine_mode mode,
           int arg0, const char *arg1,
           const char *arg2);
extern rtx gen_rtx_fmt_is (enum rtx_code, enum machine_mode mode,
           int arg0, const char *arg1);
extern rtx gen_rtx_fmt_i (enum rtx_code, enum machine_mode mode,
           int arg0);
extern rtx gen_rtx_fmt_isE (enum rtx_code, enum machine_mode mode,
           int arg0, const char *arg1,
           rtvec arg2);
extern rtx gen_rtx_fmt_iE (enum rtx_code, enum machine_mode mode,
           int arg0, rtvec arg1);
extern rtx gen_rtx_fmt_Ess (enum rtx_code, enum machine_mode mode,
           rtvec arg0, const char *arg1,
           const char *arg2);
extern rtx gen_rtx_fmt_sEss (enum rtx_code, enum machine_mode mode,
           const char *arg0, rtvec arg1,
           const char *arg2, const char *arg3);
extern rtx gen_rtx_fmt_eE (enum rtx_code, enum machine_mode mode,
           rtx arg0, rtvec arg1);
extern rtx gen_rtx_fmt_E (enum rtx_code, enum machine_mode mode,
           rtvec arg0);
extern rtx gen_rtx_fmt_e (enum rtx_code, enum machine_mode mode,
           rtx arg0);
extern rtx gen_rtx_fmt_ss (enum rtx_code, enum machine_mode mode,
           const char *arg0, const char *arg1);
extern rtx gen_rtx_fmt_sies (enum rtx_code, enum machine_mode mode,
           const char *arg0, int arg1,
           rtx arg2, const char *arg3);
extern rtx gen_rtx_fmt_sse (enum rtx_code, enum machine_mode mode,
           const char *arg0, const char *arg1,
           rtx arg2);
extern rtx gen_rtx_fmt_sE (enum rtx_code, enum machine_mode mode,
           const char *arg0, rtvec arg1);
extern rtx gen_rtx_fmt_ii (enum rtx_code, enum machine_mode mode,
           int arg0, int arg1);
extern rtx gen_rtx_fmt_iuuBieiee (enum rtx_code, enum machine_mode mode,
           int arg0, rtx arg1, rtx arg2,
           struct basic_block_def *arg3,
           int arg4, rtx arg5, int arg6,
           rtx arg7, rtx arg8);
extern rtx gen_rtx_fmt_iuuBieiee0 (enum rtx_code, enum machine_mode mode,
           int arg0, rtx arg1, rtx arg2,
           struct basic_block_def *arg3,
           int arg4, rtx arg5, int arg6,
           rtx arg7, rtx arg8);
extern rtx gen_rtx_fmt_iuuBieieee (enum rtx_code, enum machine_mode mode,
           int arg0, rtx arg1, rtx arg2,
           struct basic_block_def *arg3,
           int arg4, rtx arg5, int arg6,
           rtx arg7, rtx arg8, rtx arg9);
extern rtx gen_rtx_fmt_iuu000000 (enum rtx_code, enum machine_mode mode,
           int arg0, rtx arg1, rtx arg2);
extern rtx gen_rtx_fmt_iuuB00is (enum rtx_code, enum machine_mode mode,
           int arg0, rtx arg1, rtx arg2,
           struct basic_block_def *arg3,
           int arg4, const char *arg5);
extern rtx gen_rtx_fmt_ssiEEsi (enum rtx_code, enum machine_mode mode,
           const char *arg0, const char *arg1,
           int arg2, rtvec arg3, rtvec arg4,
           const char *arg5, int arg6);
extern rtx gen_rtx_fmt_Ei (enum rtx_code, enum machine_mode mode,
           rtvec arg0, int arg1);
extern rtx gen_rtx_fmt_eEee0 (enum rtx_code, enum machine_mode mode,
           rtx arg0, rtvec arg1, rtx arg2,
           rtx arg3);
extern rtx gen_rtx_fmt_eee (enum rtx_code, enum machine_mode mode,
           rtx arg0, rtx arg1, rtx arg2);
extern rtx gen_rtx_fmt_ (enum rtx_code, enum machine_mode mode);
extern rtx gen_rtx_fmt_w (enum rtx_code, enum machine_mode mode,
           long arg0);
extern rtx gen_rtx_fmt_0 (enum rtx_code, enum machine_mode mode);
extern rtx gen_rtx_fmt_i00 (enum rtx_code, enum machine_mode mode,
           int arg0);
extern rtx gen_rtx_fmt_ei (enum rtx_code, enum machine_mode mode,
           rtx arg0, int arg1);
extern rtx gen_rtx_fmt_e0 (enum rtx_code, enum machine_mode mode,
           rtx arg0);
extern rtx gen_rtx_fmt_u00 (enum rtx_code, enum machine_mode mode,
           rtx arg0);
extern rtx gen_rtx_fmt_s00 (enum rtx_code, enum machine_mode mode,
           const char *arg0);
extern rtx gen_rtx_fmt_eit (enum rtx_code, enum machine_mode mode,
           rtx arg0, int arg1,
           union tree_node *arg2);
extern rtx gen_rtx_fmt_eeeee (enum rtx_code, enum machine_mode mode,
           rtx arg0, rtx arg1, rtx arg2,
           rtx arg3, rtx arg4);
extern rtx gen_rtx_fmt_Ee (enum rtx_code, enum machine_mode mode,
           rtvec arg0, rtx arg1);
extern rtx gen_rtx_fmt_uuEiiiiiibbii (enum rtx_code, enum machine_mode mode,
           rtx arg0, rtx arg1, rtvec arg2,
           int arg3, int arg4, int arg5,
           int arg6, int arg7, int arg8,
           struct bitmap_head_def *arg9,
           struct bitmap_head_def *arg10,
           int arg11, int arg12);
extern rtx gen_rtx_fmt_iiiiiiiitt (enum rtx_code, enum machine_mode mode,
           int arg0, int arg1, int arg2,
           int arg3, int arg4, int arg5,
           int arg6, int arg7,
           union tree_node *arg8,
           union tree_node *arg9);
extern rtx gen_rtx_fmt_eti (enum rtx_code, enum machine_mode mode,
           rtx arg0, union tree_node *arg1,
           int arg2);
extern rtx gen_rtx_fmt_bi (enum rtx_code, enum machine_mode mode,
           struct bitmap_head_def *arg0,
           int arg1);
extern rtx gen_rtx_fmt_uuuu (enum rtx_code, enum machine_mode mode,
           rtx arg0, rtx arg1, rtx arg2,
           rtx arg3);
# 1863 "rtl.h" 2







extern rtx gen_rtx_CONST_INT (enum machine_mode, long);
extern rtx gen_rtx_CONST_VECTOR (enum machine_mode, rtvec);
extern rtx gen_raw_REG (enum machine_mode, int);
extern rtx gen_rtx_REG (enum machine_mode, unsigned);
extern rtx gen_rtx_SUBREG (enum machine_mode, rtx, int);
extern rtx gen_rtx_MEM (enum machine_mode, rtx);

extern rtx gen_lowpart_SUBREG (enum machine_mode, rtx);
# 1947 "rtl.h"
extern rtx output_constant_def (tree, int);
extern rtx lookup_constant_def (tree);


extern void notice_rtl_inlining_of_deferred_constant (void);



extern int flow2_completed;




extern int reload_completed;


extern int epilogue_completed;




extern int reload_in_progress;







extern int cse_not_expected;



extern int no_new_pseudos;





extern int rtx_to_tree_code (enum rtx_code);


struct cse_basic_block_data;
# 2000 "rtl.h"
extern int rtx_cost (rtx, enum rtx_code);
extern int address_cost (rtx, enum machine_mode);
extern int delete_trivially_dead_insns (rtx, int);

extern int cse_main (rtx, int, int, FILE *);

extern void cse_end_of_basic_block (rtx, struct cse_basic_block_data *,
        int, int, int);
extern void cse_condition_code_reg (void);


extern int comparison_dominates_p (enum rtx_code, enum rtx_code);
extern int condjump_p (rtx);
extern int any_condjump_p (rtx);
extern int any_uncondjump_p (rtx);
extern int safe_to_remove_jump_p (rtx);
extern rtx pc_set (rtx);
extern rtx condjump_label (rtx);
extern int simplejump_p (rtx);
extern int returnjump_p (rtx);
extern int onlyjump_p (rtx);
extern int only_sets_cc0_p (rtx);
extern int sets_cc0_p (rtx);
extern int invert_jump_1 (rtx, rtx);
extern int invert_jump (rtx, rtx, int);
extern int rtx_renumbered_equal_p (rtx, rtx);
extern int true_regnum (rtx);
extern unsigned int reg_or_subregno (rtx);
extern int redirect_jump_1 (rtx, rtx);
extern int redirect_jump (rtx, rtx, int);
extern void rebuild_jump_labels (rtx);
extern enum rtx_code reversed_comparison_code (rtx, rtx);
extern enum rtx_code reversed_comparison_code_parts (enum rtx_code,
           rtx, rtx, rtx);
extern void delete_for_peephole (rtx, rtx);
extern int condjump_in_parallel_p (rtx);
extern void never_reached_warning (rtx, rtx);
extern void purge_line_number_notes (rtx);
extern void copy_loop_headers (rtx);


extern int max_reg_num (void);
extern int max_label_num (void);
extern int get_first_label_num (void);
extern void delete_insns_since (rtx);
extern void mark_reg_pointer (rtx, int);
extern void mark_user_reg (rtx);
extern void reset_used_flags (rtx);
extern void set_used_flags (rtx);
extern void reorder_insns (rtx, rtx, rtx);
extern void reorder_insns_nobb (rtx, rtx, rtx);
extern int get_max_uid (void);
extern int in_sequence_p (void);
extern void force_next_line_note (void);
extern void init_emit (void);
extern void init_emit_once (int);
extern void push_topmost_sequence (void);
extern void pop_topmost_sequence (void);
extern int subreg_realpart_p (rtx);
extern void reverse_comparison (rtx);
extern void set_new_first_and_last_insn (rtx, rtx);
extern void set_new_last_label_num (int);
extern void unshare_all_rtl_again (rtx);
extern void unshare_all_rtl_in_chain (rtx);
extern void verify_rtl_sharing (void);
extern void set_first_insn (rtx);
extern void set_last_insn (rtx);
extern void link_cc0_insns (rtx);
extern void add_insn (rtx);
extern void add_insn_before (rtx, rtx);
extern void add_insn_after (rtx, rtx);
extern void remove_insn (rtx);
extern void reorder_insns_with_line_notes (rtx, rtx, rtx);
extern void emit_insn_after_with_line_notes (rtx, rtx, rtx);
extern enum rtx_code classify_insn (rtx);
extern rtx emit (rtx);



int force_line_numbers (void);
void restore_line_number_status (int old_value);
extern void renumber_insns (FILE *);
extern void remove_unnecessary_notes (void);
extern rtx delete_insn (rtx);
extern void delete_insn_chain (rtx, rtx);
extern rtx unlink_insn_chain (rtx, rtx);
extern rtx delete_insn_and_edges (rtx);
extern void delete_insn_chain_and_edges (rtx, rtx);


extern int combine_instructions (rtx, unsigned int);
extern unsigned int extended_count (rtx, enum machine_mode, int);
extern rtx remove_death (unsigned int, rtx);

extern void dump_combine_stats (FILE *);
extern void dump_combine_total_stats (FILE *);


extern void web_main (void);



extern void schedule_insns (FILE *);
extern void schedule_ebbs (FILE *);

extern void fix_sched_param (const char *, const char *);


extern const char *print_rtx_head;
extern void debug_rtx (rtx);
extern void debug_rtx_list (rtx, int);
extern void debug_rtx_range (rtx, rtx);
extern rtx debug_rtx_find (rtx, int);

extern void print_mem_expr (FILE *, tree);
extern void print_rtl (FILE *, rtx);
extern void print_simple_rtl (FILE *, rtx);
extern int print_rtl_single (FILE *, rtx);
extern void print_inline_rtx (FILE *, rtx, int);



extern void init_loop (void);
extern rtx libcall_other_reg (rtx, rtx);

extern void loop_optimize (rtx, FILE *, int);

extern void branch_target_load_optimize (rtx, _Bool);
extern void record_excess_regs (rtx, rtx, rtx *);


extern void reposition_prologue_and_epilogue_notes (rtx);
extern void thread_prologue_and_epilogue_insns (rtx);
extern int prologue_epilogue_contains (rtx);
extern int sibcall_epilogue_contains (rtx);
extern void preserve_rtl_expr_result (rtx);
extern void mark_temp_addr_taken (rtx);
extern void update_temp_slot_address (rtx, rtx);
extern void purge_addressof (rtx);
extern void purge_hard_subreg_sets (rtx);


extern void set_file_and_line_for_stmt (location_t);
extern void expand_null_return (void);
extern void expand_naked_return (void);
extern void emit_jump (rtx);
extern int preserve_subexpressions_p (void);


extern rtx move_by_pieces (rtx, rtx, unsigned long,
      unsigned int, int);


extern void recompute_reg_usage (rtx, int);
extern int initialize_uninitialized_subregs (void);
extern void delete_dead_jumptables (void);

extern void print_rtl_with_bb (FILE *, rtx);
extern void dump_flow_info (FILE *);



extern void init_expmed (void);
extern void expand_inc (rtx, rtx);
extern void expand_dec (rtx, rtx);
extern rtx expand_mult_highpart (enum machine_mode, rtx,
     unsigned long, rtx, int, int);


extern _Bool can_copy_p (enum machine_mode);
extern rtx fis_get_condition (rtx);

extern int gcse_main (rtx, FILE *);
extern int bypass_jumps (FILE *);



extern void mark_elimination (int, int);

extern int global_alloc (FILE *);
extern void dump_global_regs (FILE *);





extern void build_insn_chain (rtx);


extern int reg_classes_intersect_p (enum reg_class, enum reg_class);
extern int reg_class_subset_p (enum reg_class, enum reg_class);
extern void globalize_reg (int);
extern void init_reg_modes_once (void);
extern void init_regs (void);
extern void init_fake_stack_mems (void);
extern void init_reg_sets (void);
extern void regset_release_memory (void);
extern void regclass_init (void);
extern void regclass (rtx, int, FILE *);
extern void reg_scan (rtx, unsigned int, int);
extern void reg_scan_update (rtx, rtx, unsigned int);
extern void fix_register (const char *, int, int);




extern _Bool invalid_mode_change_p (unsigned int, enum reg_class,
       enum machine_mode);

extern int delete_null_pointer_checks (rtx);



extern void regmove_optimize (rtx, int, FILE *);

extern void combine_stack_adjustments (void);



extern void dbr_schedule (rtx, FILE *);




extern void dump_local_alloc (FILE *);

extern int local_alloc (void);
extern int function_invariant_p (rtx);


extern void init_branch_prob (void);
extern void branch_prob (void);
extern void end_branch_prob (void);



extern _Bool reg_to_stack (rtx, FILE *);



enum libcall_type
{
  LCT_NORMAL = 0,
  LCT_CONST = 1,
  LCT_PURE = 2,
  LCT_CONST_MAKE_BLOCK = 3,
  LCT_PURE_MAKE_BLOCK = 4,
  LCT_NORETURN = 5,
  LCT_THROW = 6,
  LCT_ALWAYS_RETURN = 7,
  LCT_RETURNS_TWICE = 8
};

extern void emit_library_call (rtx, enum libcall_type, enum machine_mode, int,
          ...);
extern rtx emit_library_call_value (rtx, rtx, enum libcall_type,
        enum machine_mode, int, ...);


extern int set_dominates_use (int, int, int, rtx, rtx);


extern int in_data_section (void);
extern void init_varasm_once (void);


extern void init_rtl (void);
extern void traverse_md_constants (int (*) (void **, void *), void *);
struct md_constant { char *name, *value; };


extern int read_skip_spaces (FILE *);
extern rtx read_rtx (FILE *);


extern const char *read_rtx_filename;
extern int read_rtx_lineno;







extern void fancy_abort (const char *, int, const char *)
    __attribute__ ((__noreturn__));



extern void clear_reg_alias_info (rtx);
extern rtx canon_rtx (rtx);
extern int true_dependence (rtx, enum machine_mode, rtx, int (*)(rtx, int));
extern rtx get_addr (rtx);
extern int canon_true_dependence (rtx, enum machine_mode, rtx, rtx,
      int (*)(rtx, int));
extern int read_dependence (rtx, rtx);
extern int anti_dependence (rtx, rtx);
extern int output_dependence (rtx, rtx);
extern int unchanging_anti_dependence (rtx, rtx);
extern void mark_constant_function (void);
extern void init_alias_once (void);
extern void init_alias_analysis (void);
extern void end_alias_analysis (void);
extern rtx addr_side_effect_eval (rtx, int, int);
extern _Bool memory_modified_in_insn_p (rtx, rtx);
extern rtx find_base_term (rtx);


typedef enum {
  sibcall_use_normal = 1,
  sibcall_use_tail_recursion,
  sibcall_use_sibcall
} sibcall_use_t;

extern void optimize_sibling_and_tail_recursive_calls (void);
extern void replace_call_placeholder (rtx, sibcall_use_t);


extern int stack_regs_mentioned (rtx insn);



extern rtx stack_limit_rtx;


extern void regrename_optimize (void);
extern void copyprop_hardreg_forward (void);


extern void if_convert (int);


extern void invert_br_probabilities (rtx);
extern _Bool expensive_function_p (int);

extern void tracer (void);
# 9 "insn-recog.c" 2
# 1 "tm_p.h" 1



# 1 "config/i386/i386-protos.h" 1
# 23 "config/i386/i386-protos.h"
extern void override_options (void);
extern void optimization_options (int, int);

extern int ix86_can_use_return_insn_p (void);
extern int ix86_frame_pointer_required (void);
extern void ix86_setup_frame_addresses (void);

extern void ix86_file_end (void);
extern long ix86_initial_elimination_offset (int, int);
extern void ix86_expand_prologue (void);
extern void ix86_expand_epilogue (int);

extern void ix86_output_addr_vec_elt (FILE *, int);
extern void ix86_output_addr_diff_elt (FILE *, int, int);


extern int ix86_aligned_p (rtx);

extern int standard_80387_constant_p (rtx);
extern const char *standard_80387_constant_opcode (rtx);
extern rtx standard_80387_constant_rtx (int);
extern int standard_sse_constant_p (rtx);
extern int symbolic_reference_mentioned_p (rtx);
extern _Bool extended_reg_mentioned_p (rtx);
extern _Bool x86_extended_QIreg_mentioned_p (rtx);
extern _Bool x86_extended_reg_mentioned_p (rtx);

extern int any_fp_register_operand (rtx, enum machine_mode);
extern int register_and_not_any_fp_reg_operand (rtx, enum machine_mode);

extern int fp_register_operand (rtx, enum machine_mode);
extern int register_and_not_fp_reg_operand (rtx, enum machine_mode);

extern int x86_64_general_operand (rtx, enum machine_mode);
extern int x86_64_szext_general_operand (rtx, enum machine_mode);
extern int x86_64_nonmemory_operand (rtx, enum machine_mode);
extern int x86_64_szext_nonmemory_operand (rtx, enum machine_mode);
extern int x86_64_immediate_operand (rtx, enum machine_mode);
extern int x86_64_zext_immediate_operand (rtx, enum machine_mode);
extern int symbolic_operand (rtx, enum machine_mode);
extern int tls_symbolic_operand (rtx, enum machine_mode);
extern int global_dynamic_symbolic_operand (rtx, enum machine_mode);
extern int local_dynamic_symbolic_operand (rtx, enum machine_mode);
extern int initial_exec_symbolic_operand (rtx, enum machine_mode);
extern int local_exec_symbolic_operand (rtx, enum machine_mode);
extern int pic_symbolic_operand (rtx, enum machine_mode);
extern int call_insn_operand (rtx, enum machine_mode);
extern int sibcall_insn_operand (rtx, enum machine_mode);
extern int constant_call_address_operand (rtx, enum machine_mode);
extern int const0_operand (rtx, enum machine_mode);
extern int const1_operand (rtx, enum machine_mode);
extern int const248_operand (rtx, enum machine_mode);
extern int incdec_operand (rtx, enum machine_mode);
extern int reg_no_sp_operand (rtx, enum machine_mode);
extern int mmx_reg_operand (rtx, enum machine_mode);
extern int general_no_elim_operand (rtx, enum machine_mode);
extern int nonmemory_no_elim_operand (rtx, enum machine_mode);
extern int q_regs_operand (rtx, enum machine_mode);
extern int non_q_regs_operand (rtx, enum machine_mode);
extern int sse_comparison_operator (rtx, enum machine_mode);
extern int fcmov_comparison_operator (rtx, enum machine_mode);
extern int cmp_fp_expander_operand (rtx, enum machine_mode);
extern int ix86_comparison_operator (rtx, enum machine_mode);
extern int ext_register_operand (rtx, enum machine_mode);
extern int binary_fp_operator (rtx, enum machine_mode);
extern int mult_operator (rtx, enum machine_mode);
extern int div_operator (rtx, enum machine_mode);
extern int arith_or_logical_operator (rtx, enum machine_mode);
extern int promotable_binary_operator (rtx, enum machine_mode);
extern int memory_displacement_operand (rtx, enum machine_mode);
extern int cmpsi_operand (rtx, enum machine_mode);
extern int long_memory_operand (rtx, enum machine_mode);
extern int aligned_operand (rtx, enum machine_mode);
extern enum machine_mode ix86_cc_mode (enum rtx_code, rtx, rtx);

extern int ix86_expand_movstr (rtx, rtx, rtx, rtx);
extern int ix86_expand_clrstr (rtx, rtx, rtx);
extern int ix86_expand_strlen (rtx, rtx, rtx, rtx);

extern _Bool legitimate_constant_p (rtx);
extern _Bool constant_address_p (rtx);
extern _Bool legitimate_pic_operand_p (rtx);
extern int legitimate_pic_address_disp_p (rtx);
extern int legitimate_address_p (enum machine_mode, rtx, int);
extern rtx legitimize_pic_address (rtx, rtx);
extern rtx legitimize_address (rtx, rtx, enum machine_mode);

extern void print_reg (rtx, int, FILE*);
extern void print_operand (FILE*, rtx, int);
extern void print_operand_address (FILE*, rtx);
extern _Bool output_addr_const_extra (FILE*, rtx);

extern void split_di (rtx[], int, rtx[], rtx[]);
extern void split_ti (rtx[], int, rtx[], rtx[]);

extern const char *output_set_got (rtx);
extern const char *output_387_binary_op (rtx, rtx*);
extern const char *output_fix_trunc (rtx, rtx*);
extern const char *output_fp_compare (rtx, rtx*, int, int);

extern void i386_dwarf_output_addr_const (FILE*, rtx);
extern void i386_output_dwarf_dtprel (FILE*, int, rtx);

extern void ix86_expand_clear (rtx);
extern void ix86_expand_move (enum machine_mode, rtx[]);
extern void ix86_expand_vector_move (enum machine_mode, rtx[]);
extern void ix86_expand_binary_operator (enum rtx_code,
      enum machine_mode, rtx[]);
extern int ix86_binary_operator_ok (enum rtx_code, enum machine_mode, rtx[]);
extern void ix86_expand_unary_operator (enum rtx_code, enum machine_mode,
     rtx[]);
extern int ix86_unary_operator_ok (enum rtx_code, enum machine_mode, rtx[]);
extern int ix86_match_ccmode (rtx, enum machine_mode);
extern rtx ix86_expand_compare (enum rtx_code, rtx *, rtx *);
extern int ix86_use_fcomi_compare (enum rtx_code);
extern void ix86_expand_branch (enum rtx_code, rtx);
extern int ix86_expand_setcc (enum rtx_code, rtx);
extern int ix86_expand_int_movcc (rtx[]);
extern int ix86_expand_fp_movcc (rtx[]);
extern int ix86_expand_int_addcc (rtx[]);
extern void ix86_expand_call (rtx, rtx, rtx, rtx, rtx, int);
extern void x86_initialize_trampoline (rtx, rtx, rtx);
extern rtx ix86_zero_extend_to_Pmode (rtx);
extern void ix86_split_long_move (rtx[]);
extern void ix86_split_ashldi (rtx *, rtx);
extern void ix86_split_ashrdi (rtx *, rtx);
extern void ix86_split_lshrdi (rtx *, rtx);
extern rtx ix86_find_base_term (rtx);
extern int ix86_check_movabs (rtx, int);

extern rtx assign_386_stack_local (enum machine_mode, int);
extern int ix86_attr_length_immediate_default (rtx, int);
extern int ix86_attr_length_address_default (rtx);

extern enum machine_mode ix86_fp_compare_mode (enum rtx_code);

extern int x86_64_sign_extended_value (rtx);
extern int x86_64_zero_extended_value (rtx);
extern rtx ix86_libcall_value (enum machine_mode);
extern _Bool ix86_function_value_regno_p (int);
extern _Bool ix86_function_arg_regno_p (int);
extern int ix86_function_arg_boundary (enum machine_mode, tree);
extern int ix86_return_in_memory (tree);
extern void ix86_va_start (tree, rtx);
extern rtx ix86_va_arg (tree, tree);
extern void ix86_setup_incoming_varargs (CUMULATIVE_ARGS *,
      enum machine_mode, tree, int *, int);

extern rtx ix86_force_to_memory (enum machine_mode, rtx);
extern void ix86_free_from_memory (enum machine_mode);
extern void ix86_split_fp_branch (enum rtx_code code, rtx, rtx, rtx, rtx, rtx);
extern int ix86_hard_regno_mode_ok (int, enum machine_mode);
extern int ix86_register_move_cost (enum machine_mode, enum reg_class,
        enum reg_class);
extern int ix86_secondary_memory_needed (enum reg_class, enum reg_class,
      enum machine_mode, int);
extern enum reg_class ix86_preferred_reload_class (rtx, enum reg_class);
extern int ix86_memory_move_cost (enum machine_mode, enum reg_class, int);
extern void emit_i387_cw_initialization (rtx, rtx);
extern _Bool ix86_fp_jump_nontrivial_p (enum rtx_code);
extern void x86_order_regs_for_local_alloc (void);
extern void x86_function_profiler (FILE *, int);
extern void x86_emit_floatuns (rtx [2]);
# 216 "config/i386/i386-protos.h"
extern rtx ix86_tls_get_addr (void);
extern _Bool ix86_must_pass_in_stack (enum machine_mode mode, tree);

extern void ix86_expand_vector_init (rtx, rtx);

extern int i386_pe_dllexport_name_p (const char *);
extern int i386_pe_dllimport_name_p (const char *);
extern void i386_pe_unique_section (tree, int);
extern void i386_pe_declare_function_type (FILE *, const char *, int);
extern void i386_pe_record_external_function (const char *);
extern void i386_pe_record_exported_symbol (const char *, int);
extern void i386_pe_asm_file_end (FILE *);
extern void i386_pe_encode_section_info (tree, rtx, int);
extern const char *i386_pe_strip_name_encoding (const char *);
extern const char *i386_pe_strip_name_encoding_full (const char *);
extern void i386_pe_output_labelref (FILE *, const char *);
# 5 "tm_p.h" 2
# 1 "tm-preds.h" 1







extern int x86_64_immediate_operand (rtx, enum machine_mode);
extern int x86_64_nonmemory_operand (rtx, enum machine_mode);
extern int x86_64_movabs_operand (rtx, enum machine_mode);
extern int x86_64_szext_nonmemory_operand (rtx, enum machine_mode);
extern int x86_64_general_operand (rtx, enum machine_mode);
extern int x86_64_szext_general_operand (rtx, enum machine_mode);
extern int x86_64_zext_immediate_operand (rtx, enum machine_mode);
extern int shiftdi_operand (rtx, enum machine_mode);
extern int const_int_1_31_operand (rtx, enum machine_mode);
extern int symbolic_operand (rtx, enum machine_mode);
extern int aligned_operand (rtx, enum machine_mode);
extern int pic_symbolic_operand (rtx, enum machine_mode);
extern int call_insn_operand (rtx, enum machine_mode);
extern int sibcall_insn_operand (rtx, enum machine_mode);
extern int constant_call_address_operand (rtx, enum machine_mode);
extern int const0_operand (rtx, enum machine_mode);
extern int const1_operand (rtx, enum machine_mode);
extern int const248_operand (rtx, enum machine_mode);
extern int const_0_to_3_operand (rtx, enum machine_mode);
extern int const_0_to_7_operand (rtx, enum machine_mode);
extern int const_0_to_15_operand (rtx, enum machine_mode);
extern int const_0_to_255_operand (rtx, enum machine_mode);
extern int incdec_operand (rtx, enum machine_mode);
extern int mmx_reg_operand (rtx, enum machine_mode);
extern int reg_no_sp_operand (rtx, enum machine_mode);
extern int general_no_elim_operand (rtx, enum machine_mode);
extern int nonmemory_no_elim_operand (rtx, enum machine_mode);
extern int index_register_operand (rtx, enum machine_mode);
extern int flags_reg_operand (rtx, enum machine_mode);
extern int q_regs_operand (rtx, enum machine_mode);
extern int non_q_regs_operand (rtx, enum machine_mode);
extern int fcmov_comparison_operator (rtx, enum machine_mode);
extern int sse_comparison_operator (rtx, enum machine_mode);
extern int ix86_comparison_operator (rtx, enum machine_mode);
extern int ix86_carry_flag_operator (rtx, enum machine_mode);
extern int cmp_fp_expander_operand (rtx, enum machine_mode);
extern int ext_register_operand (rtx, enum machine_mode);
extern int binary_fp_operator (rtx, enum machine_mode);
extern int mult_operator (rtx, enum machine_mode);
extern int div_operator (rtx, enum machine_mode);
extern int arith_or_logical_operator (rtx, enum machine_mode);
extern int promotable_binary_operator (rtx, enum machine_mode);
extern int memory_displacement_operand (rtx, enum machine_mode);
extern int cmpsi_operand (rtx, enum machine_mode);
extern int long_memory_operand (rtx, enum machine_mode);
extern int tls_symbolic_operand (rtx, enum machine_mode);
extern int global_dynamic_symbolic_operand (rtx, enum machine_mode);
extern int local_dynamic_symbolic_operand (rtx, enum machine_mode);
extern int initial_exec_symbolic_operand (rtx, enum machine_mode);
extern int local_exec_symbolic_operand (rtx, enum machine_mode);
extern int any_fp_register_operand (rtx, enum machine_mode);
extern int register_and_not_any_fp_reg_operand (rtx, enum machine_mode);
extern int fp_register_operand (rtx, enum machine_mode);
extern int register_and_not_fp_reg_operand (rtx, enum machine_mode);
extern int zero_extended_scalar_load_operand (rtx, enum machine_mode);
extern int vector_move_operand (rtx, enum machine_mode);
extern int no_seg_address_operand (rtx, enum machine_mode);
# 6 "tm_p.h" 2
# 10 "insn-recog.c" 2
# 1 "function.h" 1
# 25 "function.h"
struct var_refs_queue
{
  rtx modified;
  enum machine_mode promoted_mode;
  int unsignedp;
  struct var_refs_queue *next;
};






struct sequence_stack
{

  rtx first;
  rtx last;
  tree sequence_rtl_expr;
  struct sequence_stack *next;
};

extern struct sequence_stack *sequence_stack;



struct simple_obstack_stack
{
  struct obstack *obstack;
  struct simple_obstack_stack *next;
};

struct emit_status
{


  int x_reg_rtx_no;


  int x_first_label_num;






  rtx x_first_insn;
  rtx x_last_insn;




  tree sequence_rtl_expr;





  struct sequence_stack *sequence_stack;



  int x_cur_insn_uid;



  location_t x_last_location;





  int regno_pointer_align_length;




  unsigned char *
    regno_pointer_align;






  rtx * x_regno_reg_rtx;
};
# 121 "function.h"
struct expr_status
{


  int x_pending_stack_adjust;
# 142 "function.h"
  int x_inhibit_defer_pop;





  int x_stack_pointer_delta;




  rtx x_saveregs_value;


  rtx x_apply_args_value;


  rtx x_forced_labels;


  rtx x_pending_chain;
};
# 176 "function.h"
struct function
{
  struct eh_status *eh;
  struct stmt_status *stmt;
  struct expr_status *expr;
  struct emit_status *emit;
  struct varasm_status *varasm;




  tree decl;


  struct function *outer;




  int pops_args;




  int args_size;




  int pretend_args_size;



  int outgoing_args_size;



  rtx arg_offset_rtx;



  CUMULATIVE_ARGS args_info;





  rtx return_rtx;


  rtx internal_arg_pointer;



  const char *cannot_inline;



  struct initial_value_struct *hard_reg_initial_vals;


  int x_function_call_count;




  tree x_nonlocal_labels;





  rtx x_nonlocal_goto_handler_slots;



  rtx x_nonlocal_goto_handler_labels;




  rtx x_nonlocal_goto_stack_level;





  rtx x_cleanup_label;




  rtx x_return_label;




  rtx x_naked_return_label;


  rtx computed_goto_common_label;
  rtx computed_goto_common_reg;



  rtx x_save_expr_regs;



  rtx x_stack_slot_list;


  tree x_rtl_expr_chain;



  rtx x_tail_recursion_label;


  rtx x_tail_recursion_reentry;





  rtx x_arg_pointer_save_area;




  rtx x_clobber_return_insn;




  long x_frame_offset;




  tree x_context_display;
# 325 "function.h"
  tree x_trampoline_list;


  rtx x_parm_birth_insn;



  rtx x_last_parm_insn;



  unsigned int x_max_parm_reg;





  rtx * x_parm_reg_stack_loc;


  struct temp_slot *x_temp_slots;


  int x_temp_slot_level;


  int x_var_temp_slot_level;





  int x_target_temp_slot_level;



  struct var_refs_queue *fixup_var_refs_queue;


  int inlinable;
  int no_debugging_symbols;
  rtvec original_arg_vector;
  tree original_decl_initial;


  rtx inl_last_parm_insn;

  int inl_max_label_num;


  int funcdef_no;




  struct machine_function * machine;

  int stack_alignment_needed;

  int preferred_stack_boundary;

  _Bool recursive_call_emit;


  struct language_function * language;





  rtx epilogue_delay_list;



  enum function_frequency {


    FUNCTION_FREQUENCY_UNLIKELY_EXECUTED,

    FUNCTION_FREQUENCY_NORMAL,


    FUNCTION_FREQUENCY_HOT
  } function_frequency;



  int max_jumptable_ents;





  unsigned int returns_struct : 1;



  unsigned int returns_pcc_struct : 1;


  unsigned int returns_pointer : 1;


  unsigned int needs_context : 1;


  unsigned int calls_setjmp : 1;


  unsigned int calls_longjmp : 1;



  unsigned int calls_alloca : 1;


  unsigned int calls_eh_return : 1;


  unsigned int calls_constant_p : 1;



  unsigned int has_nonlocal_label : 1;



  unsigned int has_nonlocal_goto : 1;


  unsigned int contains_functions : 1;


  unsigned int has_computed_jump : 1;





  unsigned int is_thunk : 1;






  unsigned int all_throwers_are_sibcalls : 1;



  unsigned int instrument_entry_exit : 1;


  unsigned int profile : 1;



  unsigned int limit_stack : 1;


  unsigned int stdarg : 1;





  unsigned int x_whole_function_mode_p : 1;
# 500 "function.h"
  unsigned int x_dont_save_pending_sizes_p : 1;


  unsigned int uses_const_pool : 1;


  unsigned int uses_pic_offset_table : 1;


  unsigned int uses_eh_lsda : 1;


  unsigned int arg_pointer_save_area_init : 1;



  unsigned int rtl_inline_init : 1;


  unsigned int saved_for_inline : 1;
};


extern struct function *cfun;


extern struct function *outer_function_chain;


extern int virtuals_instantiated;


extern int trampolines_created;
# 594 "function.h"
extern tree inline_function_decl;



struct function *find_function_data (tree);


extern void identify_blocks (void);



extern void reorder_blocks (void);


extern void number_blocks (tree);




extern long get_frame_size (void);

extern long get_func_frame_size (struct function *);



extern struct machine_function * (*init_machine_status) (void);


extern void restore_emit_status (struct function *);
extern void free_after_parsing (struct function *);
extern void free_after_compilation (struct function *);

extern void init_varasm_status (struct function *);


extern void diddle_return_value (void (*)(rtx, void*), void*);
extern void clobber_return_register (void);
extern void use_return_register (void);


extern rtx get_arg_pointer_save_area (struct function *);

extern void init_virtual_regs (struct emit_status *);


extern const char *current_function_name (void);


extern void init_function_once (void);
# 11 "insn-recog.c" 2
# 1 "insn-config.h" 1
# 12 "insn-recog.c" 2
# 1 "recog.h" 1
# 28 "recog.h"
enum op_type {
  OP_IN,
  OP_OUT,
  OP_INOUT
};

struct operand_alternative
{


  const char *constraint;


  enum reg_class class;



  unsigned int reject;


  int matches;



  int matched;


  unsigned int earlyclobber:1;

  unsigned int memory_ok:1;

  unsigned int offmem_ok:1;

  unsigned int nonoffmem_ok:1;

  unsigned int decmem_ok:1;

  unsigned int incmem_ok:1;

  unsigned int is_address:1;


  unsigned int anything_ok:1;
};


extern void init_recog (void);
extern void init_recog_no_volatile (void);
extern int recog_memoized_1 (rtx);
extern int check_asm_operands (rtx);
extern int asm_operand_ok (rtx, const char *);
extern int validate_change (rtx, rtx *, rtx, int);
extern int insn_invalid_p (rtx);
extern int apply_change_group (void);
extern int num_validated_changes (void);
extern void cancel_changes (int);
extern int constrain_operands (int);
extern int constrain_operands_cached (int);
extern int memory_address_p (enum machine_mode, rtx);
extern int strict_memory_address_p (enum machine_mode, rtx);
extern int validate_replace_rtx_subexp (rtx, rtx, rtx, rtx *);
extern int validate_replace_rtx (rtx, rtx, rtx);
extern void validate_replace_rtx_group (rtx, rtx, rtx);
extern int validate_replace_src (rtx, rtx, rtx);
extern void validate_replace_src_group (rtx, rtx, rtx);
extern int num_changes_pending (void);



extern int reg_fits_class_p (rtx, enum reg_class, int, enum machine_mode);
extern rtx *find_single_use (rtx, rtx, rtx *);

extern int general_operand (rtx, enum machine_mode);
extern int address_operand (rtx, enum machine_mode);
extern int register_operand (rtx, enum machine_mode);
extern int pmode_register_operand (rtx, enum machine_mode);
extern int scratch_operand (rtx, enum machine_mode);
extern int immediate_operand (rtx, enum machine_mode);
extern int const_int_operand (rtx, enum machine_mode);
extern int const_double_operand (rtx, enum machine_mode);
extern int nonimmediate_operand (rtx, enum machine_mode);
extern int nonmemory_operand (rtx, enum machine_mode);
extern int push_operand (rtx, enum machine_mode);
extern int pop_operand (rtx, enum machine_mode);
extern int memory_operand (rtx, enum machine_mode);
extern int indirect_operand (rtx, enum machine_mode);
extern int comparison_operator (rtx, enum machine_mode);

extern int offsettable_memref_p (rtx);
extern int offsettable_nonstrict_memref_p (rtx);
extern int offsettable_address_p (int, enum machine_mode, rtx);
extern int mode_dependent_address_p (rtx);

extern int recog (rtx, rtx, int *);
extern void add_clobbers (rtx, int);
extern int added_clobbers_hard_reg_p (int);
extern void insn_extract (rtx);
extern void extract_insn (rtx);
extern void extract_constrain_insn_cached (rtx);
extern void extract_insn_cached (rtx);
extern void preprocess_constraints (void);
extern rtx peep2_next_insn (int);
extern int peep2_regno_dead_p (int, int);
extern int peep2_reg_dead_p (int, rtx);




extern void peephole2_optimize (FILE *);
extern rtx peephole2_insns (rtx, rtx, int *);

extern int store_data_bypass_p (rtx, rtx);
extern int if_test_bypass_p (rtx, rtx);


extern int volatile_ok;



extern int which_alternative;



struct recog_data
{







  rtx operand[30];


  rtx *operand_loc[30];


  const char *constraints[30];


  enum machine_mode operand_mode[30];


  enum op_type operand_type[30];



  rtx *dup_loc[4];



  char dup_num[4];
# 193 "recog.h"
  char n_operands;


  char n_dups;


  char n_alternatives;


  rtx insn;
};

extern struct recog_data recog_data;



extern struct operand_alternative recog_op_alt[30][30];




typedef int (*insn_operand_predicate_fn) (rtx, enum machine_mode);
typedef const char * (*insn_output_fn) (rtx *, rtx);
typedef rtx (*insn_gen_fn) (rtx, ...);

struct insn_operand_data
{
  const insn_operand_predicate_fn predicate;

  const char *const constraint;

  __extension__ enum machine_mode const mode : 16;

  const char strict_low;

  const char eliminable;
};
# 238 "recog.h"
struct insn_data
{
  const char *const name;

  union {
    const char *single;
    const char *const *multi;
    insn_output_fn function;
  } output;







  const insn_gen_fn genfun;
  const struct insn_operand_data *const operand;

  const char n_operands;
  const char n_dups;
  const char n_alternatives;
  const char output_format;
};

extern const struct insn_data insn_data[];
# 13 "insn-recog.c" 2
# 1 "real.h" 1
# 30 "real.h"
enum real_value_class {
  rvc_zero,
  rvc_normal,
  rvc_inf,
  rvc_nan
};







struct real_value
{
  __extension__ enum real_value_class class : 2;
  unsigned int sign : 1;
  unsigned int signalling : 1;
  unsigned int canonical : 1;
  signed int exp : (32 - 5);
  unsigned long sig[((128 + (8 * 4)) / (8 * 4))];
};
# 68 "real.h"
extern char test_real_width
  [sizeof(struct real_value) <= (((128 + (8 * 4)) + 32)/(8 * 4) + (((128 + (8 * 4)) + 32)%(8 * 4) ? 1 : 0))*sizeof(long) ? 1 : -1];
# 106 "real.h"
struct real_format
{

  void (*encode) (const struct real_format *, long *,
    const struct real_value *);
  void (*decode) (const struct real_format *, struct real_value *,
    const long *);


  int b;


  int log2_b;


  int p;


  int pnan;


  int emin;


  int emax;


  int signbit;


  _Bool has_nans;
  _Bool has_inf;
  _Bool has_denorm;
  _Bool has_signed_zero;
  _Bool qnan_msb_set;
};




extern const struct real_format *
  real_format_for_mode[MAX_MODE_FLOAT - MIN_MODE_FLOAT + 1];






extern void real_arithmetic (struct real_value *, int, const struct real_value *,
        const struct real_value *);


extern _Bool real_compare (int, const struct real_value *, const struct real_value *);


extern _Bool real_isinf (const struct real_value *);


extern _Bool real_isnan (const struct real_value *);


extern _Bool real_isneg (const struct real_value *);


extern _Bool real_isnegzero (const struct real_value *);


extern _Bool real_identical (const struct real_value *, const struct real_value *);


extern void real_convert (struct real_value *, enum machine_mode,
     const struct real_value *);


extern _Bool exact_real_truncate (enum machine_mode, const struct real_value *);


extern void real_to_decimal (char *, const struct real_value *, size_t,
        size_t, int);


extern void real_to_hexadecimal (char *, const struct real_value *,
     size_t, size_t, int);


extern long real_to_integer (const struct real_value *);
extern void real_to_integer2 (long *, long *,
         const struct real_value *);


extern void real_from_string (struct real_value *, const char *);


extern void real_from_integer (struct real_value *, enum machine_mode,
          unsigned long, long, int);

extern long real_to_target_fmt (long *, const struct real_value *,
    const struct real_format *);
extern long real_to_target (long *, const struct real_value *, enum machine_mode);

extern void real_from_target_fmt (struct real_value *, const long *,
      const struct real_format *);
extern void real_from_target (struct real_value *, const long *,
         enum machine_mode);

extern void real_inf (struct real_value *);

extern _Bool real_nan (struct real_value *, const char *, int, enum machine_mode);

extern void real_maxval (struct real_value *, int, enum machine_mode);

extern void real_2expN (struct real_value *, int);

extern unsigned int real_hash (const struct real_value *);



extern const struct real_format ieee_single_format;
extern const struct real_format mips_single_format;
extern const struct real_format ieee_double_format;
extern const struct real_format mips_double_format;
extern const struct real_format ieee_extended_motorola_format;
extern const struct real_format ieee_extended_intel_96_format;
extern const struct real_format ieee_extended_intel_96_round_53_format;
extern const struct real_format ieee_extended_intel_128_format;
extern const struct real_format ibm_extended_format;
extern const struct real_format mips_extended_format;
extern const struct real_format ieee_quad_format;
extern const struct real_format mips_quad_format;
extern const struct real_format vax_f_format;
extern const struct real_format vax_d_format;
extern const struct real_format vax_g_format;
extern const struct real_format i370_single_format;
extern const struct real_format i370_double_format;
extern const struct real_format c4x_single_format;
extern const struct real_format c4x_extended_format;
extern const struct real_format real_internal_format;
# 285 "real.h"
extern struct real_value real_value_truncate (enum machine_mode,
         struct real_value);




extern struct real_value real_arithmetic2 (int, const struct real_value *,
      const struct real_value *);







extern int significand_size (enum machine_mode);

extern struct real_value real_from_string2 (const char *, enum machine_mode);
# 320 "real.h"
extern int real_exponent (const struct real_value *);


extern void real_ldexp (struct real_value *, const struct real_value *, int);





extern struct real_value dconst0;
extern struct real_value dconst1;
extern struct real_value dconst2;
extern struct real_value dconst3;
extern struct real_value dconst10;
extern struct real_value dconstm1;
extern struct real_value dconstm2;
extern struct real_value dconsthalf;
extern struct real_value dconstthird;
extern struct real_value dconstpi;
extern struct real_value dconste;



struct real_value real_value_from_int_cst (tree, tree);
# 352 "real.h"
extern rtx const_double_from_real_value (struct real_value, enum machine_mode);


extern _Bool exact_real_inverse (enum machine_mode, struct real_value *);


extern tree build_real (tree, struct real_value);


extern _Bool real_sqrt (struct real_value *, enum machine_mode,
         const struct real_value *);


extern _Bool real_powi (struct real_value *, enum machine_mode,
         const struct real_value *, long);


extern void real_trunc (struct real_value *, enum machine_mode,
   const struct real_value *);
extern void real_floor (struct real_value *, enum machine_mode,
   const struct real_value *);
extern void real_ceil (struct real_value *, enum machine_mode,
         const struct real_value *);
# 14 "insn-recog.c" 2
# 1 "output.h" 1
# 27 "output.h"
extern void compute_alignments (void);


extern void init_final (const char *);



extern void app_enable (void);



extern void app_disable (void);




extern int dbr_sequence_length (void);


extern void init_insn_lengths (void);



extern int get_attr_length (rtx);



extern void shorten_branches (rtx);






extern void final_start_function (rtx, FILE *, int);




extern void final_end_function (void);


extern void final (rtx, FILE *, int, int);




extern rtx final_scan_insn (rtx, FILE *, int, int, int, int *);



extern rtx alter_subreg (rtx *);



extern void output_operand_lossage (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2))) __attribute__ ((__nonnull__ (1)));



extern void output_asm_insn (const char *, rtx *);




extern int insn_current_reference_address (rtx);



extern int label_to_alignment (rtx);


extern void output_asm_label (rtx);



extern void output_address (rtx);




extern void output_addr_const (FILE *, rtx);
# 116 "output.h"
typedef long __gcc_host_wide_int__;




extern void asm_fprintf (FILE *file, const char *p, ...)
     __attribute__ ((__format__ (__asm_fprintf__, 2, 3))) __attribute__ ((__nonnull__ (2)));



extern void split_double (rtx, rtx *, rtx *);


extern int leaf_function_p (void);




extern int final_forward_branch_p (rtx);



extern int only_leaf_regs_used (void);



extern void leaf_renumber_regs_insn (rtx);


extern const char *get_insn_template (int, rtx);



extern int add_weak (tree, const char *, const char *);


extern void allocate_for_life_analysis (void);
extern int regno_uninitialized (unsigned int);
extern int regno_clobbered_at_setjmp (int);
extern void find_basic_blocks (rtx, int, FILE *);
extern _Bool cleanup_cfg (int);
extern _Bool delete_unreachable_blocks (void);
extern void check_function_return_warnings (void);




extern void text_section (void);


extern void data_section (void);



extern void readonly_data_section (void);


extern int in_text_section (void);
# 184 "output.h"
extern void bss_section (void);



extern void init_section (void);



extern void fini_section (void);
# 211 "output.h"
extern void named_section (tree, const char *, int);


extern void function_section (tree);


extern void mergeable_string_section (tree, unsigned long,
          unsigned int);


extern void mergeable_constant_section (enum machine_mode,
     unsigned long, unsigned int);


extern void declare_weak (tree);

extern void merge_weak (tree, tree);


extern void weak_finish (void);
# 239 "output.h"
extern int decode_reg_name (const char *);



extern void make_var_volatile (tree);

extern void assemble_alias (tree, tree);

extern void default_assemble_visibility (tree, int);



extern void assemble_asm (tree);





extern void assemble_start_function (tree, const char *);



extern void assemble_end_function (tree, const char *);
# 272 "output.h"
extern void assemble_variable (tree, int, int, int);




extern void assemble_external (tree);


extern void assemble_zeros (unsigned long);


extern void assemble_align (int);
extern void assemble_eh_align (int);


extern void assemble_string (const char *, int);


extern void assemble_external_libcall (rtx);


extern void assemble_label (const char *);
extern void assemble_eh_label (const char *);






extern void assemble_name (FILE *, const char *);
# 310 "output.h"
extern const char *integer_asm_op (int, int);



extern void assemble_integer_with_op (const char *, rtx);


extern _Bool default_assemble_integer (rtx, unsigned int, int);





extern _Bool assemble_integer (rtx, unsigned, unsigned, int);
# 333 "output.h"
extern void assemble_real (struct real_value, enum machine_mode, unsigned);



extern int get_pool_size (void);






extern void output_constant_pool (const char *, tree);
# 355 "output.h"
extern tree initializer_constant_valid_p (tree, tree);
# 365 "output.h"
extern void output_constant (tree, unsigned long, unsigned int);







extern rtx final_sequence;
# 385 "output.h"
extern FILE *asm_out_file;



extern const char *first_global_object_name;


extern const char *weak_global_object_name;






extern int current_function_is_leaf;




extern int current_function_nothrow;





extern int current_function_sp_is_unchanging;





extern int current_function_uses_only_leaf_regs;




extern FILE *rtl_dump_file;



extern rtx current_insn_predicate;


extern rtx current_output_insn;




extern rtx this_is_asm_operands;



extern _Bool decl_readonly_section (tree, int);
extern _Bool decl_readonly_section_1 (tree, int, int);



extern int compute_reloc_for_constant (tree);


extern const char *user_label_prefix;


extern void default_function_pro_epilogue (FILE *, long);


extern void default_exception_section (void);


extern void named_section_eh_frame_section (void);
extern void collect2_eh_frame_section (void);
extern void default_eh_frame_section (void);


extern void no_asm_to_stream (FILE *);
# 478 "output.h"
extern unsigned int get_named_section_flags (const char *);
extern _Bool set_named_section_flags (const char *, unsigned int);
extern void named_section_flags (const char *, unsigned int);
extern _Bool named_section_first_declaration (const char *);
extern unsigned int default_section_type_flags (tree, const char *, int);
extern unsigned int default_section_type_flags_1 (tree, const char *, int, int);

extern void default_no_named_section (const char *, unsigned int);
extern void default_elf_asm_named_section (const char *, unsigned int);
extern void default_coff_asm_named_section (const char *, unsigned int);
extern void default_pe_asm_named_section (const char *, unsigned int);

extern void default_stabs_asm_out_destructor (rtx, int);
extern void default_named_section_asm_out_destructor (rtx, int);
extern void default_dtor_section_asm_out_destructor (rtx, int);
extern void default_stabs_asm_out_constructor (rtx, int);
extern void default_named_section_asm_out_constructor (rtx, int);
extern void default_ctor_section_asm_out_constructor (rtx, int);

extern void default_select_section (tree, int, unsigned long);
extern void default_elf_select_section (tree, int, unsigned long);
extern void default_elf_select_section_1 (tree, int,
       unsigned long, int);
extern void default_unique_section (tree, int);
extern void default_unique_section_1 (tree, int, int);
extern void default_select_rtx_section (enum machine_mode, rtx,
     unsigned long);
extern void default_elf_select_rtx_section (enum machine_mode, rtx,
         unsigned long);
extern void default_encode_section_info (tree, rtx, int);
extern const char *default_strip_name_encoding (const char *);
extern _Bool default_binds_local_p (tree);
extern _Bool default_binds_local_p_1 (tree, int);
extern void default_globalize_label (FILE *, const char *);
extern void default_internal_label (FILE *, const char *, unsigned long);
extern void default_file_start (void);
extern void file_end_indicate_exec_stack (void);
extern _Bool default_valid_pointer_mode (enum machine_mode);

extern int default_address_cost (rtx);
# 15 "insn-recog.c" 2
# 1 "flags.h" 1
# 26 "flags.h"
enum debug_info_type
{
  NO_DEBUG,
  DBX_DEBUG,
  SDB_DEBUG,
  DWARF_DEBUG,
  DWARF2_DEBUG,
  XCOFF_DEBUG,
  VMS_DEBUG,
  VMS_AND_DWARF2_DEBUG

};


extern enum debug_info_type write_symbols;


extern const char *const debug_type_names[];

enum debug_info_level
{
  DINFO_LEVEL_NONE,
  DINFO_LEVEL_TERSE,
  DINFO_LEVEL_NORMAL,
  DINFO_LEVEL_VERBOSE
};


extern enum debug_info_level debug_info_level;



extern _Bool use_gnu_debug_info_extensions;


extern int flag_debug_only_used_symbols;



extern int optimize;



extern int optimize_size;




extern int quiet_flag;




extern int mem_report;



extern _Bool inhibit_warnings;



extern _Bool warn_system_headers;




extern _Bool extra_warnings;



extern _Bool warnings_are_errors;





extern void set_Wunused (int setting);

extern _Bool warn_unused_function;
extern _Bool warn_unused_label;
extern _Bool warn_unused_parameter;
extern _Bool warn_unused_variable;
extern _Bool warn_unused_value;



extern _Bool warn_notreached;



extern _Bool warn_inline;



extern int warn_uninitialized;



extern _Bool warn_shadow;




extern _Bool warn_switch;



extern _Bool warn_switch_default;




extern _Bool warn_switch_enum;




extern int warn_return_type;



extern _Bool warn_missing_noreturn;





extern _Bool warn_cast_align;





extern _Bool warn_larger_than;
extern long larger_than_size;




extern _Bool warn_aggregate_return;



extern _Bool warn_packed;



extern _Bool warn_padded;



extern _Bool warn_disabled_optimization;




extern _Bool warn_deprecated_decl;




extern _Bool warn_strict_aliasing;



extern int profile_flag;



extern int profile_arc_flag;



extern int flag_profile_values;



extern int flag_test_coverage;



extern int flag_branch_probabilities;



extern int flag_reorder_blocks;



extern int flag_reorder_functions;



extern int flag_rename_registers;




extern int pedantic;




extern int in_system_header;




extern int flag_print_asm_name;





extern int flag_signed_char;



extern int flag_short_enums;





extern int flag_caller_saves;



extern int flag_pcc_struct_return;




extern int flag_force_mem;




extern int flag_force_addr;




extern int flag_defer_pop;




extern int flag_float_store;



extern int flag_strength_reduce;






extern int flag_old_unroll_loops;




extern int flag_old_unroll_all_loops;




extern int flag_move_all_movables;



extern int flag_prefetch_loop_arrays;




extern int flag_reduce_all_givs;




extern int flag_cse_follow_jumps;




extern int flag_cse_skip_blocks;



extern int flag_expensive_optimizations;




extern int flag_writable_strings;





extern int flag_no_function_cse;




extern int flag_omit_frame_pointer;



extern int flag_no_peephole;



extern int flag_optimize_sibling_calls;




extern int flag_errno_math;






extern int flag_unsafe_math_optimizations;



extern int flag_finite_math_only;





extern int flag_trapping_math;




extern int flag_rounding_math;





extern int flag_complex_divide_method;



extern int flag_rerun_loop_opt;




extern int flag_inline_functions;





extern int flag_keep_inline_functions;







extern int flag_no_inline;




extern int flag_really_no_inline;



extern int flag_syntax_only;



extern int flag_gen_aux_info;



extern int flag_shared_data;






extern int flag_schedule_insns;
extern int flag_schedule_insns_after_reload;
extern int flag_sched2_use_superblocks;
extern int flag_sched2_use_traces;
# 437 "flags.h"
extern int flag_schedule_interblock;
extern int flag_schedule_speculative;
extern int flag_schedule_speculative_load;
extern int flag_schedule_speculative_load_dangerous;
# 453 "flags.h"
extern int flag_sched_stalled_insns;
extern int flag_sched_stalled_insns_dep;



extern int flag_branch_on_count_reg;





extern int flag_single_precision_constant;



extern int flag_delayed_branch;




extern int flag_dump_unnumbered;




extern int flag_pedantic_errors;




extern int flag_pic;




extern int flag_pie;




extern int flag_shlib;




extern int flag_exceptions;



extern int flag_unwind_tables;



extern int flag_asynchronous_unwind_tables;




extern int flag_no_common;





extern int flag_inhibit_size_directive;




extern int flag_function_sections;



extern int flag_data_sections;
# 535 "flags.h"
extern int flag_verbose_asm;
# 544 "flags.h"
extern int flag_debug_asm;

extern int flag_dump_rtl_in_asm;



extern int flag_leading_underscore;


extern int flag_pack_struct;
# 562 "flags.h"
extern int flag_argument_noalias;





extern int flag_strict_aliasing;



extern int flag_stack_check;


extern int flag_regmove;


extern int flag_instrument_function_entry_exit;


extern int flag_peephole2;


extern int flag_guess_branch_prob;





extern int flag_bounds_check;




extern int flag_merge_constants;




extern int flag_renumber_insns;







extern int frame_pointer_needed;



extern int flag_trapv;


extern int flag_wrapv;


extern int flag_evaluation_order;


extern unsigned long g_switch_value;
extern _Bool g_switch_set;






extern int align_loops;
extern int align_loops_log;
extern int align_loops_max_skip;
extern int align_jumps;
extern int align_jumps_log;
extern int align_jumps_max_skip;
extern int align_labels;
extern int align_labels_log;
extern int align_labels_max_skip;
extern int align_functions;
extern int align_functions_log;



extern int force_align_functions_log;


extern int dump_for_graph;


enum graph_dump_types
{
  no_graph = 0,
  vcg
};
extern enum graph_dump_types graph_dump_format;





extern int flag_no_ident;



extern int flag_gcse;



extern int flag_gcse_lm;



extern int flag_gcse_sm;




extern int flag_gcse_las;


extern int flag_value_profile_transformations;




extern int flag_branch_target_load_optimize;




extern int flag_branch_target_load_optimize2;




extern int flag_eliminate_dwarf2_dups;



extern int flag_eliminate_unused_debug_types;



extern int flag_detailed_statistics;


extern int flag_non_call_exceptions;


extern int flag_zero_initialized_in_bss;


extern int flag_signaling_nans;

extern int flag_unit_at_a_time;

extern int flag_web;



extern int flag_remove_unreachable_functions;




extern const char *flag_random_seed;
# 740 "flags.h"
extern int flag_abi_version;
# 16 "insn-recog.c" 2
# 1 "hard-reg-set.h" 1
# 41 "hard-reg-set.h"
typedef unsigned long HARD_REG_ELT_TYPE;
# 52 "hard-reg-set.h"
typedef HARD_REG_ELT_TYPE HARD_REG_SET[((53 + (8 * 4) - 1) / (8 * 4))];
# 395 "hard-reg-set.h"
extern char fixed_regs[53];



extern HARD_REG_SET fixed_reg_set;






extern char call_used_regs[53];







extern HARD_REG_SET call_used_reg_set;


extern HARD_REG_SET losing_caller_save_reg_set;







extern char call_fixed_regs[53];



extern HARD_REG_SET call_fixed_reg_set;






extern char global_regs[53];
# 445 "hard-reg-set.h"
extern HARD_REG_SET regs_invalidated_by_call;




extern int reg_alloc_order[53];



extern int inv_reg_alloc_order[53];




extern HARD_REG_SET reg_class_contents[((int) LIM_REG_CLASSES)];



extern unsigned int reg_class_size[((int) LIM_REG_CLASSES)];



extern enum reg_class reg_class_superclasses[((int) LIM_REG_CLASSES)][((int) LIM_REG_CLASSES)];



extern enum reg_class reg_class_subclasses[((int) LIM_REG_CLASSES)][((int) LIM_REG_CLASSES)];




extern enum reg_class reg_class_subunion[((int) LIM_REG_CLASSES)][((int) LIM_REG_CLASSES)];




extern enum reg_class reg_class_superunion[((int) LIM_REG_CLASSES)][((int) LIM_REG_CLASSES)];



extern int n_non_fixed_regs;



extern const char * reg_names[53];
# 17 "insn-recog.c" 2
# 1 "resource.h" 1
# 27 "resource.h"
struct resources
{
  char memory;
  char unch_memory;
  char volatil;
  char cc;
  HARD_REG_SET regs;
};


enum mark_resource_type
{
  MARK_SRC_DEST = 0,
  MARK_SRC_DEST_CALL = 1
};

extern void mark_target_live_regs (rtx, rtx, struct resources *);
extern void mark_set_resources (rtx, struct resources *, int,
    enum mark_resource_type);
extern void mark_referenced_resources (rtx, struct resources *, int);
extern void clear_hashed_info_for_insn (rtx);
extern void incr_ticks_for_insn (rtx);
extern void mark_end_of_function_resources (rtx, int);
extern void init_resource_info (rtx);
extern void free_resource_info (void);
# 18 "insn-recog.c" 2
# 1 "toplev.h" 1
# 30 "toplev.h"
extern int toplev_main (unsigned int, const char **);
extern int read_integral_parameter (const char *, const char *, const int);
extern void strip_off_ending (char *, int);
extern const char *trim_filename (const char *);
extern void _fatal_insn_not_found (rtx, const char *, int, const char *)
     __attribute__ ((__noreturn__));
extern void _fatal_insn (const char *, rtx, const char *, int, const char *)
     __attribute__ ((__noreturn__));
# 57 "toplev.h"
extern void internal_error (const char *, ...) __attribute__ ((__format__ (__gcc_diag__, 1, 2))) __attribute__ ((__nonnull__ (1)))
     __attribute__ ((__noreturn__));
extern void warning (const char *, ...);
extern void error (const char *, ...);
extern void fatal_error (const char *, ...) __attribute__ ((__format__ (__gcc_diag__, 1, 2))) __attribute__ ((__nonnull__ (1)))
     __attribute__ ((__noreturn__));
extern void pedwarn (const char *, ...);
extern void sorry (const char *, ...);
extern void inform (const char *, ...) __attribute__ ((__format__ (__gcc_diag__, 1, 2))) __attribute__ ((__nonnull__ (1)));

extern void rest_of_decl_compilation (tree, const char *, int, int);
extern void rest_of_type_compilation (tree, int);
extern void rest_of_compilation (tree);
extern void tree_rest_of_compilation (tree, _Bool);

extern void announce_function (tree);

extern void error_for_asm (rtx, const char *, ...) __attribute__ ((__format__ (__gcc_diag__, 2, 3))) __attribute__ ((__nonnull__ (2)));
extern void warning_for_asm (rtx, const char *, ...) __attribute__ ((__format__ (__gcc_diag__, 2, 3))) __attribute__ ((__nonnull__ (2)));
extern void warn_deprecated_use (tree);


extern void output_quoted_string (FILE *, const char *);
extern void output_file_directive (FILE *, const char *);





extern void fnotice (FILE *, const char *, ...)
     __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__nonnull__ (2)));


extern int wrapup_global_declarations (tree *, int);
extern void check_global_declarations (tree *, int);
extern void write_global_declarations (void);


extern unsigned local_tick;

extern const char *progname;
extern const char *dump_base_name;
extern const char *aux_base_name;
extern const char *aux_info_file_name;
extern const char *asm_file_name;
extern _Bool exit_after_options;
extern _Bool version_flag;

extern int target_flags_explicit;


extern int flag_loop_optimize;
extern int flag_crossjumping;
extern int flag_if_conversion;
extern int flag_if_conversion2;
extern int flag_delete_null_pointer_checks;
extern int flag_keep_static_consts;
extern int flag_peel_loops;
extern int flag_rerun_cse_after_loop;
extern int flag_thread_jumps;
extern int flag_tracer;
extern int flag_unroll_loops;
extern int flag_unroll_all_loops;
extern int flag_unswitch_loops;
extern int flag_cprop_registers;
extern int time_report;
extern int flag_new_regalloc;


extern void display_target_options (void);
extern void print_version (FILE *, const char *);
extern void set_target_switch (const char *);
extern void * default_get_pch_validity (size_t *);
extern const char * default_pch_valid_p (const void *, size_t);


extern struct ht *ident_hash;




extern void set_fast_math_flags (int);


extern void decode_d_option (const char *);


extern _Bool fast_math_flags_set_p (void);
# 153 "toplev.h"
extern int exact_log2_wide (unsigned long);
extern int floor_log2_wide (unsigned long);




extern const char *get_src_pwd (void);
extern _Bool set_src_pwd (const char *);
# 19 "insn-recog.c" 2
# 1 "reload.h" 1
# 47 "reload.h"
extern int memory_move_secondary_cost (enum machine_mode, enum reg_class, int);
# 76 "reload.h"
enum reload_type
{
  RELOAD_FOR_INPUT, RELOAD_FOR_OUTPUT, RELOAD_FOR_INSN,
  RELOAD_FOR_INPUT_ADDRESS, RELOAD_FOR_INPADDR_ADDRESS,
  RELOAD_FOR_OUTPUT_ADDRESS, RELOAD_FOR_OUTADDR_ADDRESS,
  RELOAD_FOR_OPERAND_ADDRESS, RELOAD_FOR_OPADDR_ADDR,
  RELOAD_OTHER, RELOAD_FOR_OTHER_ADDRESS
};
# 167 "reload.h"
extern rtx *reg_equiv_constant;
extern rtx *reg_equiv_memory_loc;
extern rtx *reg_equiv_address;
extern rtx *reg_equiv_mem;



extern int n_earlyclobbers;
extern rtx reload_earlyclobbers[30];


extern int reload_n_operands;



extern int reload_first_uid;





extern char indirect_symref_ok;


extern char double_reg_address_ok;

extern int num_not_at_initial_offset;

struct needs
{

  short regs[2][((int) LIM_REG_CLASSES)];
  short groups[((int) LIM_REG_CLASSES)];
};
# 260 "reload.h"
extern rtx get_secondary_mem (rtx, enum machine_mode, int, enum reload_type);


extern void clear_secondary_mem (void);



extern void transfer_replacements (int, int);





extern int remove_address_replacements (rtx in_rtx);




extern int operands_match_p (rtx, rtx);


extern int safe_from_earlyclobber (rtx, rtx);




extern int find_reloads (rtx, int, int, int, short *);





extern rtx form_sum (rtx, rtx);



extern void subst_reloads (rtx);




extern void copy_replacements (rtx, rtx);


extern void move_replacements (rtx *x, rtx *y);



extern rtx find_replacement (rtx *);




extern int refers_to_regno_for_reload_p (unsigned int, unsigned int,
      rtx, rtx *);


extern int reg_overlap_mentioned_for_reload_p (rtx, rtx);



extern int refers_to_mem_for_reload_p (rtx);



extern rtx find_equiv_reg (rtx, rtx, enum reg_class, int, short *,
      int, enum machine_mode);


extern int regno_clobbered_p (unsigned int, rtx, enum machine_mode, int);


extern int earlyclobber_operand_p (rtx);


extern int push_reload (rtx, rtx, rtx *, rtx *, enum reg_class,
   enum machine_mode, enum machine_mode,
   int, int, int, enum reload_type);


extern void reload_cse_regs (rtx);


extern int reloads_conflict (int, int);


extern void init_reload (void);


extern int reload (rtx, int);



extern void mark_home_live (int);



extern rtx eliminate_regs (rtx, enum machine_mode, rtx);




extern rtx gen_reload (rtx, rtx, int, enum reload_type);


extern void deallocate_reload_reg (int r);




extern void init_caller_save (void);


extern void init_save_areas (void);


extern void setup_save_areas (void);


extern void save_call_clobbered_regs (void);


extern void cleanup_subreg_operands (rtx);


extern void debug_reload_to_stream (FILE *);
extern void debug_reload (void);



extern rtx reload_adjust_reg_for_mode (rtx, enum machine_mode);
# 20 "insn-recog.c" 2
# 51 "insn-recog.c"
extern rtx gen_split_841 (rtx *);
extern rtx gen_split_842 (rtx *);
extern rtx gen_split_844 (rtx *);
extern rtx gen_split_845 (rtx *);
extern rtx gen_split_847 (rtx *);
extern rtx gen_split_848 (rtx *);
extern rtx gen_split_849 (rtx *);
extern rtx gen_split_851 (rtx *);
extern rtx gen_split_852 (rtx *);
extern rtx gen_split_853 (rtx *);
extern rtx gen_split_854 (rtx *);
extern rtx gen_split_856 (rtx *);
extern rtx gen_split_858 (rtx *);
extern rtx gen_split_859 (rtx *);
extern rtx gen_split_860 (rtx *);
extern rtx gen_split_862 (rtx *);
extern rtx gen_split_863 (rtx *);
extern rtx gen_split_864 (rtx *);
extern rtx gen_split_866 (rtx *);
extern rtx gen_split_867 (rtx *);
extern rtx gen_split_869 (rtx *);
extern rtx gen_split_870 (rtx *);
extern rtx gen_split_871 (rtx *);
extern rtx gen_split_872 (rtx *);
extern rtx gen_split_873 (rtx *);
extern rtx gen_split_874 (rtx *);
extern rtx gen_split_879 (rtx *);
extern rtx gen_split_880 (rtx *);
extern rtx gen_split_881 (rtx *);
extern rtx gen_split_882 (rtx *);
extern rtx gen_split_884 (rtx *);
extern rtx gen_split_885 (rtx *);
extern rtx gen_split_887 (rtx *);
extern rtx gen_split_888 (rtx *);
extern rtx gen_split_892 (rtx *);
extern rtx gen_split_893 (rtx *);
extern rtx gen_split_894 (rtx *);
extern rtx gen_peephole2_895 (rtx, rtx *);
extern rtx gen_peephole2_896 (rtx, rtx *);
extern rtx gen_split_900 (rtx *);
extern rtx gen_peephole2_901 (rtx, rtx *);
extern rtx gen_peephole2_902 (rtx, rtx *);
extern rtx gen_split_903 (rtx *);
extern rtx gen_split_904 (rtx *);
extern rtx gen_split_908 (rtx *);
extern rtx gen_split_909 (rtx *);
extern rtx gen_split_910 (rtx *);
extern rtx gen_split_913 (rtx *);
extern rtx gen_split_915 (rtx *);
extern rtx gen_split_919 (rtx *);
extern rtx gen_split_928 (rtx *);
extern rtx gen_split_930 (rtx *);
extern rtx gen_split_931 (rtx *);
extern rtx gen_split_932 (rtx *);
extern rtx gen_split_933 (rtx *);
extern rtx gen_split_940 (rtx *);
extern rtx gen_split_963 (rtx *);
extern rtx gen_split_964 (rtx *);
extern rtx gen_split_969 (rtx *);
extern rtx gen_split_970 (rtx *);
extern rtx gen_split_971 (rtx *);
extern rtx gen_split_973 (rtx *);
extern rtx gen_split_974 (rtx *);
extern rtx gen_split_975 (rtx *);
extern rtx gen_split_978 (rtx *);
extern rtx gen_split_979 (rtx *);
extern rtx gen_split_983 (rtx *);
extern rtx gen_split_984 (rtx *);
extern rtx gen_split_989 (rtx *);
extern rtx gen_split_990 (rtx *);
extern rtx gen_split_992 (rtx *);
extern rtx gen_split_997 (rtx *);
extern rtx gen_split_998 (rtx *);
extern rtx gen_split_999 (rtx *);
extern rtx gen_split_1000 (rtx *);
extern rtx gen_split_1001 (rtx *);
extern rtx gen_split_1002 (rtx *);
extern rtx gen_split_1004 (rtx *);
extern rtx gen_split_1005 (rtx *);
extern rtx gen_split_1006 (rtx *);
extern rtx gen_split_1007 (rtx *);
extern rtx gen_split_1008 (rtx *);
extern rtx gen_split_1010 (rtx *);
extern rtx gen_split_1011 (rtx *);
extern rtx gen_split_1013 (rtx *);
extern rtx gen_split_1014 (rtx *);
extern rtx gen_split_1015 (rtx *);
extern rtx gen_split_1016 (rtx *);
extern rtx gen_split_1017 (rtx *);
extern rtx gen_split_1018 (rtx *);
extern rtx gen_split_1020 (rtx *);
extern rtx gen_split_1021 (rtx *);
extern rtx gen_split_1022 (rtx *);
extern rtx gen_split_1023 (rtx *);
extern rtx gen_split_1024 (rtx *);
extern rtx gen_split_1026 (rtx *);
extern rtx gen_split_1027 (rtx *);
extern rtx gen_split_1029 (rtx *);
extern rtx gen_split_1030 (rtx *);
extern rtx gen_split_1032 (rtx *);
extern rtx gen_split_1034 (rtx *);
extern rtx gen_split_1036 (rtx *);
extern rtx gen_split_1037 (rtx *);
extern rtx gen_split_1041 (rtx *);
extern rtx gen_split_1042 (rtx *);
extern rtx gen_split_1046 (rtx *);
extern rtx gen_split_1047 (rtx *);
extern rtx gen_split_1053 (rtx *);
extern rtx gen_split_1054 (rtx *);
extern rtx gen_split_1085 (rtx *);
extern rtx gen_split_1086 (rtx *);
extern rtx gen_split_1087 (rtx *);
extern rtx gen_split_1088 (rtx *);
extern rtx gen_split_1107 (rtx *);
extern rtx gen_split_1108 (rtx *);
extern rtx gen_split_1109 (rtx *);
extern rtx gen_split_1110 (rtx *);
extern rtx gen_split_1114 (rtx *);
extern rtx gen_split_1115 (rtx *);
extern rtx gen_peephole2_1116 (rtx, rtx *);
extern rtx gen_peephole2_1117 (rtx, rtx *);
extern rtx gen_split_1130 (rtx *);
extern rtx gen_split_1131 (rtx *);
extern rtx gen_split_1133 (rtx *);
extern rtx gen_split_1134 (rtx *);
extern rtx gen_split_1140 (rtx *);
extern rtx gen_split_1141 (rtx *);
extern rtx gen_split_1142 (rtx *);
extern rtx gen_peephole2_1172 (rtx, rtx *);
extern rtx gen_peephole2_1173 (rtx, rtx *);
extern rtx gen_split_1177 (rtx *);
extern rtx gen_split_1180 (rtx *);
extern rtx gen_split_1183 (rtx *);
extern rtx gen_split_1187 (rtx *);
extern rtx gen_split_1189 (rtx *);
extern rtx gen_split_1190 (rtx *);
extern rtx gen_split_1192 (rtx *);
extern rtx gen_split_1193 (rtx *);
extern rtx gen_split_1195 (rtx *);
extern rtx gen_split_1196 (rtx *);
extern rtx gen_split_1197 (rtx *);
extern rtx gen_split_1198 (rtx *);
extern rtx gen_split_1199 (rtx *);
extern rtx gen_split_1205 (rtx *);
extern rtx gen_split_1206 (rtx *);
extern rtx gen_split_1207 (rtx *);
extern rtx gen_split_1208 (rtx *);
extern rtx gen_split_1209 (rtx *);
extern rtx gen_split_1210 (rtx *);
extern rtx gen_peephole2_1211 (rtx, rtx *);
extern rtx gen_peephole2_1212 (rtx, rtx *);
extern rtx gen_peephole2_1213 (rtx, rtx *);
extern rtx gen_peephole2_1214 (rtx, rtx *);
extern rtx gen_peephole2_1215 (rtx, rtx *);
extern rtx gen_peephole2_1216 (rtx, rtx *);
extern rtx gen_peephole2_1217 (rtx, rtx *);
extern rtx gen_peephole2_1218 (rtx, rtx *);
extern rtx gen_peephole2_1219 (rtx, rtx *);
extern rtx gen_peephole2_1220 (rtx, rtx *);
extern rtx gen_peephole2_1221 (rtx, rtx *);
extern rtx gen_peephole2_1222 (rtx, rtx *);
extern rtx gen_peephole2_1223 (rtx, rtx *);
extern rtx gen_peephole2_1224 (rtx, rtx *);
extern rtx gen_peephole2_1225 (rtx, rtx *);
extern rtx gen_peephole2_1226 (rtx, rtx *);
extern rtx gen_peephole2_1227 (rtx, rtx *);
extern rtx gen_peephole2_1228 (rtx, rtx *);
extern rtx gen_peephole2_1229 (rtx, rtx *);
extern rtx gen_peephole2_1230 (rtx, rtx *);
extern rtx gen_peephole2_1231 (rtx, rtx *);
extern rtx gen_peephole2_1232 (rtx, rtx *);
extern rtx gen_peephole2_1233 (rtx, rtx *);
extern rtx gen_peephole2_1234 (rtx, rtx *);
extern rtx gen_peephole2_1235 (rtx, rtx *);
extern rtx gen_peephole2_1236 (rtx, rtx *);
extern rtx gen_peephole2_1237 (rtx, rtx *);
extern rtx gen_peephole2_1238 (rtx, rtx *);
extern rtx gen_peephole2_1239 (rtx, rtx *);
extern rtx gen_peephole2_1240 (rtx, rtx *);
extern rtx gen_peephole2_1241 (rtx, rtx *);
extern rtx gen_peephole2_1242 (rtx, rtx *);
extern rtx gen_peephole2_1243 (rtx, rtx *);
extern rtx gen_peephole2_1244 (rtx, rtx *);
extern rtx gen_peephole2_1245 (rtx, rtx *);
extern rtx gen_peephole2_1246 (rtx, rtx *);
extern rtx gen_peephole2_1247 (rtx, rtx *);
extern rtx gen_peephole2_1248 (rtx, rtx *);
extern rtx gen_peephole2_1249 (rtx, rtx *);
extern rtx gen_peephole2_1250 (rtx, rtx *);
extern rtx gen_peephole2_1251 (rtx, rtx *);
extern rtx gen_peephole2_1252 (rtx, rtx *);
extern rtx gen_peephole2_1253 (rtx, rtx *);
extern rtx gen_peephole2_1254 (rtx, rtx *);
extern rtx gen_peephole2_1255 (rtx, rtx *);
extern rtx gen_peephole2_1256 (rtx, rtx *);
extern rtx gen_peephole2_1257 (rtx, rtx *);
extern rtx gen_peephole2_1258 (rtx, rtx *);
extern rtx gen_peephole2_1259 (rtx, rtx *);
extern rtx gen_peephole2_1260 (rtx, rtx *);
extern rtx gen_peephole2_1261 (rtx, rtx *);
extern rtx gen_peephole2_1262 (rtx, rtx *);
extern rtx gen_peephole2_1263 (rtx, rtx *);
extern rtx gen_peephole2_1264 (rtx, rtx *);
extern rtx gen_peephole2_1265 (rtx, rtx *);
extern rtx gen_peephole2_1266 (rtx, rtx *);
extern rtx gen_peephole2_1267 (rtx, rtx *);
extern rtx gen_peephole2_1268 (rtx, rtx *);
extern rtx gen_peephole2_1269 (rtx, rtx *);
extern rtx gen_peephole2_1270 (rtx, rtx *);
extern rtx gen_peephole2_1271 (rtx, rtx *);
extern rtx gen_peephole2_1272 (rtx, rtx *);
extern rtx gen_split_1274 (rtx *);
extern rtx gen_split_1275 (rtx *);
extern rtx gen_split_1287 (rtx *);
extern rtx gen_split_1288 (rtx *);
extern rtx gen_split_1289 (rtx *);



static int
recog_1 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((x0)->u.fld[0]).rtx);
  switch (((enum rtx_code) (x1)->code))
    {
    case MEM:
      goto L10242;
    case REG:
      goto L10243;
    default:
     break;
   }
 L10137: __attribute__ ((__unused__))
  if (register_operand (x1, HImode))
    {
      operands[0] = x1;
      goto L101;
    }
 L10145: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, HImode))
    {
      operands[0] = x1;
      goto L767;
    }
 L10162: __attribute__ ((__unused__))
  if (memory_operand (x1, HImode))
    {
      operands[0] = x1;
      goto L794;
    }
  goto ret0;

 L10242: __attribute__ ((__unused__))
  if (push_operand (x1, HImode))
    {
      operands[0] = x1;
      goto L272;
    }
  goto L10145;

 L272: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (general_no_elim_operand (x1, HImode))
    {
      operands[1] = x1;
      return 39;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L10243: __attribute__ ((__unused__))
  if ((((x1)->u.fld[0]).rtint) == 18)
    goto L798;
  goto L10137;

 L798: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == HImode
      && ((enum rtx_code) (x1)->code) == UNSPEC
      && (((((x1)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x1)->u.fld[1]).rtint) == 28)
    goto L799;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10137;

 L799: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (memory_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L800;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10137;

 L800: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return 115;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10137;

 L101: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == HImode)
    goto L10244;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L10244: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case UNSPEC:
      goto L10250;
    case SIGN_EXTRACT:
      goto L348;
    case ZERO_EXTEND:
      goto L482;
    case SIGN_EXTEND:
      goto L575;
    case MULT:
      goto L1535;
    case IF_THEN_ELSE:
      goto L5251;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L10250: __attribute__ ((__unused__))
  if ((((((x1)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x1)->u.fld[1]).rtint) == 24)
    goto L102;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L102: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  switch (((enum machine_mode) (x2)->mode))
    {
    case CCFPmode:
      goto L10251;
    case CCFPUmode:
      goto L10252;
    default:
      break;
    }
 L161: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 18
      && ((target_flags & 0x00000001)))
    {
      return 22;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L10251: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == COMPARE)
    goto L116;
  goto L161;

 L116: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x3)->mode))
    {
    case SFmode:
      goto L10253;
    case DFmode:
      goto L10254;
    case XFmode:
      goto L10255;
    default:
      break;
    }
 L103: __attribute__ ((__unused__))
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L104;
    }
  goto L161;

 L10253: __attribute__ ((__unused__))
  if (register_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L117;
    }
  goto L103;

 L117: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[2] = x3;
      goto L118;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L103;

 L118: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return 15;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L103;

 L10254: __attribute__ ((__unused__))
  if (register_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L130;
    }
  goto L103;

 L130: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[2] = x3;
      goto L131;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L103;

 L131: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return 17;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L103;

 L10255: __attribute__ ((__unused__))
  if (register_operand (x3, XFmode))
    {
      operands[1] = x3;
      goto L143;
    }
  goto L103;

 L143: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, XFmode))
    {
      operands[2] = x3;
      goto L144;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L103;

 L144: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return 19;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L103;

 L104: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const0_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L105;
    }
  goto L161;

 L105: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)
   && (mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_VECTOR_FLOAT)
   && ((enum machine_mode) (operands[1])->mode) == ((enum machine_mode) (operands[2])->mode)))
    {
      return 13;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  goto L161;

 L10252: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == COMPARE)
    goto L155;
  goto L161;

 L155: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L156;
    }
  goto L161;

 L156: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L157;
    }
  goto L161;

 L157: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)
   && (mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_VECTOR_FLOAT)
   && ((enum machine_mode) (operands[1])->mode) == ((enum machine_mode) (operands[2])->mode)))
    {
      return 21;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  goto L161;

 L348: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (ext_register_operand (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L349;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L349: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 8L)
    goto L350;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L350: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 8L)
    {
      return 51;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L482: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L483;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L483: __attribute__ ((__unused__))
  if (((x86_zero_extend_with_and & (1 << ix86_tune)) && !optimize_size)
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 75;
    }
 L495: __attribute__ ((__unused__))
  if ((!(x86_zero_extend_with_and & (1 << ix86_tune)) || optimize_size)
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 76;
    }
 L500: __attribute__ ((__unused__))
  if (((!(x86_zero_extend_with_and & (1 << ix86_tune)) || optimize_size) && reload_completed))
    {
      return 77;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L575: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[1] = x2;
      return 85;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L1535: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode)
    goto L10257;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L10257: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case ZERO_EXTEND:
      goto L1566;
    case SIGN_EXTEND:
      goto L1584;
    case SUBREG:
    case REG:
    case MEM:
    case ADDRESSOF:
      goto L10256;
    default:
      x1 = (((x0)->u.fld[0]).rtx);
      goto L10145;
   }
 L10256: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L1536;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L1566: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L1567;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L1567: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == ZERO_EXTEND)
    goto L1568;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L1568: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L1569;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L1569: __attribute__ ((__unused__))
  if (((x86_qimode_math & (1 << ix86_tune))
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 175;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L1584: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L1585;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L1585: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == SIGN_EXTEND)
    goto L1586;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L1586: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L1587;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L1587: __attribute__ ((__unused__))
  if (((x86_qimode_math & (1 << ix86_tune))
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 176;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L1536: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, HImode))
    {
      operands[2] = x2;
      goto L1537;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L1537: __attribute__ ((__unused__))
  if ((((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 173;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L5251: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (ix86_comparison_operator (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L5252;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L5252: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 17)
    goto L5253;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L5253: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L5254;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L5254: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[2] = x2;
      goto L5255;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L5255: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[3] = x2;
      goto L5256;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L5256: __attribute__ ((__unused__))
  if ((((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0))
   && (((enum rtx_code) (operands[2])->code) != MEM || ((enum rtx_code) (operands[3])->code) != MEM)))
    {
      return 456;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10145;

 L767: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == HImode)
    goto L10259;
 L275: __attribute__ ((__unused__))
  if (general_operand (x1, HImode))
    {
      operands[1] = x1;
      goto L276;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10162;

 L10259: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case FIX:
      goto L768;
    case PLUS:
      goto L906;
    case MINUS:
      goto L1357;
    case AND:
      goto L1985;
    case IOR:
      goto L2221;
    case XOR:
      goto L2471;
    case NEG:
      goto L2732;
    case NOT:
      goto L3041;
    case ASHIFT:
      goto L3163;
    case ASHIFTRT:
      goto L3368;
    case LSHIFTRT:
      goto L3592;
    case ROTATE:
      goto L3760;
    case ROTATERT:
      goto L3876;
    default:
     break;
   }
  goto L275;

 L768: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L769;
    }
  goto L275;

 L769: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_VECTOR_FLOAT)
   && !reload_completed && !reload_in_progress
   && !((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode))))
    {
      return 111;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L275;

 L906: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode)
    goto L10272;
  goto L275;

 L10272: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == PLUS)
    goto L907;
  if (nonimmediate_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L1069;
    }
  goto L275;

 L907: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (ix86_carry_flag_operator (x3, HImode))
    {
      operands[3] = x3;
      goto L908;
    }
  goto L275;

 L908: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L909;
    }
  goto L275;

 L909: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, HImode))
    {
      operands[2] = x2;
      goto L910;
    }
  goto L275;

 L910: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (PLUS, HImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 130;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L275;

 L1069: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, HImode))
    {
      operands[2] = x2;
      goto L1070;
    }
  goto L275;

 L1070: __attribute__ ((__unused__))
  if ((!(x86_partial_reg_stall & (1 << ix86_tune))
   && ix86_binary_operator_ok (PLUS, HImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 143;
    }
 L1084: __attribute__ ((__unused__))
  if (((x86_partial_reg_stall & (1 << ix86_tune))
   && ix86_binary_operator_ok (PLUS, HImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 144;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L275;

 L1357: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L1358;
    }
  goto L275;

 L1358: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L1359;
  if (general_operand (x2, HImode))
    {
      operands[2] = x2;
      goto L1431;
    }
  goto L275;

 L1359: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (ix86_carry_flag_operator (x3, HImode))
    {
      operands[3] = x3;
      goto L1360;
    }
  goto L275;

 L1360: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, HImode))
    {
      operands[2] = x3;
      goto L1361;
    }
  goto L275;

 L1361: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (MINUS, HImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 160;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L275;

 L1431: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (MINUS, HImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 165;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L275;

 L1985: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L1986;
    }
  goto L275;

 L1986: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, HImode))
    {
      operands[2] = x2;
      goto L1987;
    }
  goto L275;

 L1987: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (AND, HImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 199;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L275;

 L2221: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L2222;
    }
  goto L275;

 L2222: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, HImode))
    {
      operands[2] = x2;
      goto L2223;
    }
  goto L275;

 L2223: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (IOR, HImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 212;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L275;

 L2471: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L2472;
    }
  goto L275;

 L2472: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, HImode))
    {
      operands[2] = x2;
      goto L2473;
    }
  goto L275;

 L2473: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (XOR, HImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 226;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L275;

 L2732: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L2733;
    }
  goto L275;

 L2733: __attribute__ ((__unused__))
  if ((ix86_unary_operator_ok (NEG, HImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 241;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L275;

 L3041: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L3042;
    }
  goto L275;

 L3042: __attribute__ ((__unused__))
  if ((ix86_unary_operator_ok (NOT, HImode, operands)))
    {
      return 273;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L275;

 L3163: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L3164;
    }
  goto L275;

 L3164: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonmemory_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3165;
    }
  goto L275;

 L3165: __attribute__ ((__unused__))
  if ((!(x86_partial_reg_stall & (1 << ix86_tune))
   && ix86_binary_operator_ok (ASHIFT, HImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 282;
    }
 L3179: __attribute__ ((__unused__))
  if (((x86_partial_reg_stall & (1 << ix86_tune))
   && ix86_binary_operator_ok (ASHIFT, HImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 283;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L275;

 L3368: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L3369;
    }
  goto L275;

 L3369: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const1_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3370;
    }
 L3383: __attribute__ ((__unused__))
  if (nonmemory_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3384;
    }
  goto L275;

 L3370: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (ASHIFTRT, HImode, operands)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 296;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L3383;

 L3384: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (ASHIFTRT, HImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 297;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L275;

 L3592: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L3593;
    }
  goto L275;

 L3593: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const1_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3594;
    }
 L3607: __attribute__ ((__unused__))
  if (nonmemory_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3608;
    }
  goto L275;

 L3594: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (LSHIFTRT, HImode, operands)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 312;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L3607;

 L3608: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (LSHIFTRT, HImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 313;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L275;

 L3760: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L3761;
    }
  goto L275;

 L3761: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const1_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3762;
    }
 L3775: __attribute__ ((__unused__))
  if (nonmemory_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3776;
    }
  goto L275;

 L3762: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (ROTATE, HImode, operands)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 324;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L3775;

 L3776: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (ROTATE, HImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 325;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L275;

 L3876: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L3877;
    }
  goto L275;

 L3877: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const1_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3878;
    }
 L3891: __attribute__ ((__unused__))
  if (nonmemory_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3892;
    }
  goto L275;

 L3878: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (ROTATERT, HImode, operands)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 332;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L3891;

 L3892: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (ROTATERT, HImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 333;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L275;

 L276: __attribute__ ((__unused__))
  if ((((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM))
    {
      return 40;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10162;

 L794: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == HImode
      && ((enum rtx_code) (x1)->code) == UNSPEC
      && (((((x1)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x1)->u.fld[1]).rtint) == 26)
    goto L795;
  goto ret0;

 L795: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 18
      && ((target_flags & 0x00000001)))
    {
      return 114;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_2 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((x0)->u.fld[0]).rtx);
  switch (((enum rtx_code) (x1)->code))
    {
    case MEM:
      goto L10277;
    case ZERO_EXTRACT:
      goto L372;
    case SUBREG:
    case REG:
    case ADDRESSOF:
      goto L10142;
    default:
      goto L10143;
   }
 L10142: __attribute__ ((__unused__))
  if (register_operand (x1, SImode))
    {
      operands[0] = x1;
      goto L341;
    }
 L10143: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, SImode))
    {
      operands[0] = x1;
      goto L730;
    }
 L10161: __attribute__ ((__unused__))
  if (register_operand (x1, SImode))
    {
      operands[0] = x1;
      goto L757;
    }
 L10172: __attribute__ ((__unused__))
  if (((enum rtx_code) (x1)->code) == REG
      && (((x1)->u.fld[0]).rtint) == 19)
    goto L4969;
 L10165: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, SImode))
    {
      operands[0] = x1;
      goto L990;
    }
  goto ret0;

 L10277: __attribute__ ((__unused__))
  if (push_operand (x1, SImode))
    {
      operands[0] = x1;
      goto L204;
    }
  goto L10143;

 L204: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (general_no_elim_operand (x1, SImode))
    {
      operands[1] = x1;
      return 30;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10143;

 L372: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (ext_register_operand (x2, VOIDmode))
    {
      operands[0] = x2;
      goto L373;
    }
  goto ret0;

 L373: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 8L)
    goto L374;
  goto ret0;

 L374: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 8L)
    goto L381;
  goto ret0;

 L381: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == SImode)
    goto L10278;
 L375: __attribute__ ((__unused__))
  if (general_operand (x1, SImode))
    {
      operands[1] = x1;
      return 55;
    }
  goto ret0;

 L10278: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case LSHIFTRT:
      goto L382;
    case PLUS:
      goto L1275;
    case AND:
      goto L2078;
    case IOR:
      goto L2350;
    case XOR:
      goto L2555;
    default:
     break;
   }
  goto L375;

 L382: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L383;
    }
  goto L375;

 L383: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 8L)
    {
      return 56;
    }
  goto L375;

 L1275: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == ZERO_EXTRACT)
    goto L1276;
  goto L375;

 L1276: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (ext_register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L1277;
    }
  goto L375;

 L1277: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 8L)
    goto L1278;
  goto L375;

 L1278: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 8L)
    goto L1308;
  goto L375;

 L1308: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == ZERO_EXTRACT)
    goto L1309;
  if (general_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L1280;
    }
  goto L375;

 L1309: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (ext_register_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L1310;
    }
  goto L375;

 L1310: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 8L)
    goto L1311;
  goto L375;

 L1311: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 8L
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 157;
    }
  goto L375;

 L1280: __attribute__ ((__unused__))
  if (pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 156;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L375;

 L2078: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == ZERO_EXTRACT)
    goto L2079;
  goto L375;

 L2079: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (ext_register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L2080;
    }
  goto L375;

 L2080: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 8L)
    goto L2081;
  goto L375;

 L2081: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 8L)
    goto L2131;
  goto L375;

 L2131: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode)
    goto L10283;
 L2082: __attribute__ ((__unused__))
  if (const_int_operand (x2, VOIDmode))
    {
      operands[2] = x2;
      goto L2083;
    }
  goto L375;

 L10283: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case ZERO_EXTEND:
      goto L2132;
    case ZERO_EXTRACT:
      goto L2162;
    default:
     break;
   }
  goto L2082;

 L2132: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (general_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L2133;
    }
  goto L2082;

 L2133: __attribute__ ((__unused__))
  if (pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 207;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L2082;

 L2162: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (ext_register_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L2163;
    }
  goto L2082;

 L2163: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 8L)
    goto L2164;
  goto L2082;

 L2164: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 8L
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 208;
    }
  goto L2082;

 L2083: __attribute__ ((__unused__))
  if (pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 205;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L375;

 L2350: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == ZERO_EXTRACT)
    goto L2351;
  goto L375;

 L2351: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (ext_register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L2352;
    }
  goto L375;

 L2352: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 8L)
    goto L2353;
  goto L375;

 L2353: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 8L)
    goto L2381;
  goto L375;

 L2381: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode)
    goto L10285;
 L2354: __attribute__ ((__unused__))
  if (const_int_operand (x2, VOIDmode))
    {
      operands[2] = x2;
      goto L2355;
    }
  goto L375;

 L10285: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case ZERO_EXTEND:
      goto L2382;
    case ZERO_EXTRACT:
      goto L2412;
    default:
     break;
   }
  goto L2354;

 L2382: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (general_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L2383;
    }
  goto L2354;

 L2383: __attribute__ ((__unused__))
  if ((!0
   && (!(x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 221;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L2354;

 L2412: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (ext_register_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L2413;
    }
  goto L2354;

 L2413: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 8L)
    goto L2414;
  goto L2354;

 L2414: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 8L
      && ((!(x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 222;
    }
  goto L2354;

 L2355: __attribute__ ((__unused__))
  if (((!(x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 220;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L375;

 L2555: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == ZERO_EXTRACT)
    goto L2556;
  goto L375;

 L2556: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (ext_register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L2557;
    }
  goto L375;

 L2557: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 8L)
    goto L2558;
  goto L375;

 L2558: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 8L)
    goto L2586;
  goto L375;

 L2586: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode)
    goto L10287;
 L2559: __attribute__ ((__unused__))
  if (const_int_operand (x2, VOIDmode))
    {
      operands[2] = x2;
      goto L2560;
    }
  goto L375;

 L10287: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case ZERO_EXTEND:
      goto L2587;
    case ZERO_EXTRACT:
      goto L2617;
    default:
     break;
   }
  goto L2559;

 L2587: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (general_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L2588;
    }
  goto L2559;

 L2588: __attribute__ ((__unused__))
  if ((!0
   && (!(x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 232;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L2559;

 L2617: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (ext_register_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L2618;
    }
  goto L2559;

 L2618: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 8L)
    goto L2619;
  goto L2559;

 L2619: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 8L
      && ((!(x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 233;
    }
  goto L2559;

 L2560: __attribute__ ((__unused__))
  if (((!(x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 231;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L375;

 L341: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == SImode)
    goto L10289;
 L243: __attribute__ ((__unused__))
  if (const0_operand (x1, SImode))
    {
      operands[1] = x1;
      goto L244;
    }
 L253: __attribute__ ((__unused__))
  if (immediate_operand (x1, SImode))
    {
      operands[1] = x1;
      goto L254;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10143;

 L10289: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case SIGN_EXTRACT:
      goto L342;
    case ZERO_EXTRACT:
      goto L360;
    case ZERO_EXTEND:
      goto L465;
    case SIGN_EXTEND:
      goto L571;
    default:
     break;
   }
  goto L243;

 L342: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (ext_register_operand (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L343;
    }
  goto L243;

 L343: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 8L)
    goto L344;
  goto L243;

 L344: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 8L)
    {
      return 50;
    }
  goto L243;

 L360: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (ext_register_operand (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L361;
    }
  goto L243;

 L361: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 8L)
    goto L362;
  goto L243;

 L362: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 8L)
    {
      return 53;
    }
  goto L243;

 L465: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case HImode:
      goto L10293;
    case QImode:
      goto L10295;
    default:
      break;
    }
  goto L243;

 L10293: __attribute__ ((__unused__))
  if (register_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L466;
    }
 L10294: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L471;
    }
  goto L243;

 L466: __attribute__ ((__unused__))
  if (((x86_zero_extend_with_and & (1 << ix86_tune)) && !optimize_size)
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 73;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L10294;

 L471: __attribute__ ((__unused__))
  if ((!(x86_zero_extend_with_and & (1 << ix86_tune)) || optimize_size))
    {
      return 74;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L243;

 L10295: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L512;
    }
  goto L243;

 L512: __attribute__ ((__unused__))
  if (((x86_zero_extend_with_and & (1 << ix86_tune)) && !optimize_size)
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 78;
    }
 L524: __attribute__ ((__unused__))
  if ((!(x86_zero_extend_with_and & (1 << ix86_tune)) || optimize_size)
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 79;
    }
 L529: __attribute__ ((__unused__))
  if (((!(x86_zero_extend_with_and & (1 << ix86_tune)) || optimize_size) && reload_completed))
    {
      return 80;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L243;

 L571: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case HImode:
      goto L10296;
    case QImode:
      goto L10297;
    default:
      break;
    }
  goto L243;

 L10296: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, HImode))
    {
      operands[1] = x2;
      return 84;
    }
  goto L243;

 L10297: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, QImode))
    {
      operands[1] = x2;
      return 86;
    }
  goto L243;

 L244: __attribute__ ((__unused__))
  if ((reload_completed && (!(x86_use_mov0 & (1 << ix86_tune)) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 34;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L253;

 L254: __attribute__ ((__unused__))
  if ((reload_completed
   && operands[1] == (const_int_rtx[64 -1])
   && ((ix86_tune == PROCESSOR_PENTIUM) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 35;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10143;

 L730: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == SImode)
    goto L10298;
 L257: __attribute__ ((__unused__))
  if (general_operand (x1, SImode))
    {
      operands[1] = x1;
      goto L258;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10161;

 L10298: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case FIX:
      goto L731;
    case PLUS:
      goto L924;
    default:
     break;
   }
  goto L257;

 L731: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L732;
    }
  goto L257;

 L732: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_VECTOR_FLOAT)
   && !reload_completed && !reload_in_progress
   && !((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode))))
    {
      return 106;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L257;

 L924: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L925;
  goto L257;

 L925: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (ix86_carry_flag_operator (x3, SImode))
    {
      operands[3] = x3;
      goto L926;
    }
  goto L257;

 L926: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L927;
    }
  goto L257;

 L927: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L928;
    }
  goto L257;

 L928: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (PLUS, SImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 131;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L257;

 L258: __attribute__ ((__unused__))
  if ((((x86_inter_unit_moves & (1 << ix86_tune)) || optimize_size)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 36;
    }
 L262: __attribute__ ((__unused__))
  if (((!(x86_inter_unit_moves & (1 << ix86_tune)) && !optimize_size)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 37;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10161;

 L757: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == SImode)
    goto L10300;
 L953: __attribute__ ((__unused__))
  if (no_seg_address_operand (x1, SImode))
    {
      operands[1] = x1;
      return 134;
    }
 L1520: __attribute__ ((__unused__))
  if (((enum machine_mode) (x1)->mode) == SImode)
    goto L10310;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10172;

 L10300: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case FIX:
      goto L758;
    case TRUNCATE:
      goto L1642;
    case UNSPEC:
      goto L10312;
    case FFS:
      goto L4381;
    case CTZ:
      goto L4417;
    case MINUS:
      goto L4431;
    case IF_THEN_ELSE:
      goto L5236;
    default:
     break;
   }
  goto L953;

 L758: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case SFmode:
      goto L10316;
    case DFmode:
      goto L10317;
    default:
      break;
    }
  goto L953;

 L10316: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, SFmode))
    {
      operands[1] = x2;
      goto L759;
    }
  goto L953;

 L759: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 109;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L953;

 L10317: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L764;
    }
  goto L953;

 L764: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 110;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L953;

 L1642: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == LSHIFTRT)
    goto L1643;
  goto L953;

 L1643: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == DImode
      && ((enum rtx_code) (x3)->code) == MULT)
    goto L1644;
  goto L953;

 L1644: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == DImode)
    goto L10318;
  goto L953;

 L10318: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x4)->code))
    {
    case ZERO_EXTEND:
      goto L1645;
    case SIGN_EXTEND:
      goto L1670;
    default:
     break;
   }
  goto L953;

 L1645: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (nonimmediate_operand (x5, SImode))
    {
      operands[1] = x5;
      goto L1646;
    }
  goto L953;

 L1646: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum machine_mode) (x4)->mode) == DImode
      && ((enum rtx_code) (x4)->code) == ZERO_EXTEND)
    goto L1647;
  goto L953;

 L1647: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (nonimmediate_operand (x5, SImode))
    {
      operands[2] = x5;
      goto L1648;
    }
  goto L953;

 L1648: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 32L
      && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 2;
      return 179;
    }
  goto L953;

 L1670: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (nonimmediate_operand (x5, SImode))
    {
      operands[1] = x5;
      goto L1671;
    }
  goto L953;

 L1671: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum machine_mode) (x4)->mode) == DImode
      && ((enum rtx_code) (x4)->code) == SIGN_EXTEND)
    goto L1672;
  goto L953;

 L1672: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (nonimmediate_operand (x5, SImode))
    {
      operands[2] = x5;
      goto L1673;
    }
  goto L953;

 L1673: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 32L
      && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 2;
      return 180;
    }
  goto L953;

 L10312: __attribute__ ((__unused__))
  switch ((((((x1)->u.fld[0]).rtvec))->num_elem))
    {
    case 1:
      goto L10320;
    case 3:
      goto L10321;
    case 2:
      goto L10322;
    default:
      break;
    }
  goto L953;

 L10320: __attribute__ ((__unused__))
  switch ((((x1)->u.fld[1]).rtint))
    {
    case 12L:
      goto L4353;
    case 15L:
      goto L4540;
    default:
      break;
    }
  goto L953;

 L4353: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 370;
    }
  goto L953;

 L4540: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L)
    {
      return 383;
    }
  goto L953;

 L10321: __attribute__ ((__unused__))
  if ((((x1)->u.fld[1]).rtint) == 16)
    goto L4451;
  goto L953;

 L4451: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L4452;
    }
  goto L953;

 L4452: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (tls_symbolic_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L4453;
    }
  goto L953;

 L4453: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[2]);
  if (call_insn_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L4454;
    }
  goto L953;

 L4454: __attribute__ ((__unused__))
  if ((!0 && (ix86_tls_dialect == TLS_DIALECT_GNU))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 3;
      return 378;
    }
 L4474: __attribute__ ((__unused__))
  if ((!0 && (ix86_tls_dialect == TLS_DIALECT_SUN))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 3;
      return 379;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L953;

 L10322: __attribute__ ((__unused__))
  if ((((x1)->u.fld[1]).rtint) == 17)
    goto L4490;
  goto L953;

 L4490: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L4491;
    }
  goto L953;

 L4491: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (call_insn_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L4492;
    }
  goto L953;

 L4492: __attribute__ ((__unused__))
  if ((!0 && (ix86_tls_dialect == TLS_DIALECT_GNU))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 3;
      return 380;
    }
 L4510: __attribute__ ((__unused__))
  if ((!0 && (ix86_tls_dialect == TLS_DIALECT_SUN))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 3;
      return 381;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L953;

 L4381: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L4382;
    }
  goto L953;

 L4382: __attribute__ ((__unused__))
  if ((((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0)))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 2;
      return 373;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L953;

 L4417: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L4418;
    }
  goto L953;

 L4418: __attribute__ ((__unused__))
  if (pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 376;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L953;

 L4431: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 31L)
    goto L4432;
  goto L953;

 L4432: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == CLZ)
    goto L4433;
  goto L953;

 L4433: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L4434;
    }
  goto L953;

 L4434: __attribute__ ((__unused__))
  if (pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 377;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L953;

 L5236: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (ix86_carry_flag_operator (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L5237;
    }
 L5242: __attribute__ ((__unused__))
  if (ix86_comparison_operator (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L5243;
    }
  goto L953;

 L5237: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == -1L)
    goto L5238;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5242;

 L5238: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 454;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5242;

 L5243: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 17)
    goto L5244;
  goto L953;

 L5244: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L5245;
  goto L953;

 L5245: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L5246;
    }
  goto L953;

 L5246: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L5247;
    }
  goto L953;

 L5247: __attribute__ ((__unused__))
  if ((((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0))
   && (((enum rtx_code) (operands[2])->code) != MEM || ((enum rtx_code) (operands[3])->code) != MEM)))
    {
      return 455;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L953;

 L10310: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case MULT:
      goto L1521;
    case PLUS:
      goto L4530;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10172;

 L1521: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L1522;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10172;

 L1522: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L1523;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10172;

 L1523: __attribute__ ((__unused__))
  if ((((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 172;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10172;

 L4530: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode)
    goto L10324;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10172;

 L10324: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == UNSPEC)
    goto L10326;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10172;

 L10326: __attribute__ ((__unused__))
  switch ((((((x2)->u.fld[0]).rtvec))->num_elem))
    {
    case 2:
      goto L10328;
    case 1:
      goto L10329;
    default:
      break;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10172;

 L10328: __attribute__ ((__unused__))
  if ((((x2)->u.fld[1]).rtint) == 17)
    goto L4531;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10172;

 L4531: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L4532;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10172;

 L4532: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[1]);
  if (call_insn_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L4533;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10172;

 L4533: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == CONST)
    goto L4534;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10172;

 L4534: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == UNSPEC
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x3)->u.fld[1]).rtint) == 6)
    goto L4535;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10172;

 L4535: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (tls_symbolic_operand (x4, SImode))
    {
      operands[3] = x4;
      goto L4536;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10172;

 L4536: __attribute__ ((__unused__))
  if (pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 3;
      return 382;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10172;

 L10329: __attribute__ ((__unused__))
  if ((((x2)->u.fld[1]).rtint) == 15)
    goto L4554;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10172;

 L4554: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L4555;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10172;

 L4555: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L4556;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10172;

 L4556: __attribute__ ((__unused__))
  if (pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 384;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10172;

 L4969: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum rtx_code) (x1)->code) == CONST_INT
      && ((x1)->u.hwint[0]) == 0L)
    {
      return 440;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10165;

 L990: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == SImode)
    goto L10330;
  goto ret0;

 L10330: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case PLUS:
      goto L991;
    case MINUS:
      goto L1375;
    case AND:
      goto L1958;
    case IOR:
      goto L2176;
    case XOR:
      goto L2426;
    case NEG:
      goto L2709;
    case NOT:
      goto L3025;
    case ASHIFT:
      goto L3136;
    case ASHIFTRT:
      goto L3300;
    case LSHIFTRT:
      goto L3538;
    case ROTATE:
      goto L3732;
    case ROTATERT:
      goto L3848;
    case FFS:
      goto L4395;
    default:
     break;
   }
  goto ret0;

 L991: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L992;
    }
  goto ret0;

 L992: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L993;
    }
  goto ret0;

 L993: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (PLUS, SImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 138;
    }
  goto ret0;

 L1375: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L1376;
    }
  goto ret0;

 L1376: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L1377;
  if (general_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L1393;
    }
  goto ret0;

 L1377: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (ix86_carry_flag_operator (x3, SImode))
    {
      operands[3] = x3;
      goto L1378;
    }
  goto ret0;

 L1378: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L1379;
    }
  goto ret0;

 L1379: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (MINUS, SImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 161;
    }
  goto ret0;

 L1393: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (MINUS, SImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 162;
    }
  goto ret0;

 L1958: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L1959;
    }
  goto ret0;

 L1959: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L1960;
    }
  goto ret0;

 L1960: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (AND, SImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 197;
    }
  goto ret0;

 L2176: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode)
    goto L10344;
  goto ret0;

 L10344: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case ASHIFT:
      goto L3118;
    case ASHIFTRT:
      goto L3282;
    case SUBREG:
    case REG:
    case MEM:
    case ADDRESSOF:
      goto L10343;
    default:
      goto ret0;
   }
 L10343: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L2177;
    }
  goto ret0;

 L3118: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[0]))
    goto L3119;
  goto ret0;

 L3119: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3120;
    }
  goto ret0;

 L3120: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == LSHIFTRT)
    goto L3121;
  goto ret0;

 L3121: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L3122;
    }
  goto ret0;

 L3122: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == QImode
      && ((enum rtx_code) (x3)->code) == MINUS)
    goto L3123;
  goto ret0;

 L3123: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 32L)
    goto L3124;
  goto ret0;

 L3124: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (rtx_equal_p (x4, operands[2])
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 279;
    }
  goto ret0;

 L3282: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[0]))
    goto L3283;
  goto ret0;

 L3283: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3284;
    }
  goto ret0;

 L3284: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == ASHIFT)
    goto L3285;
  goto ret0;

 L3285: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L3286;
    }
  goto ret0;

 L3286: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == QImode
      && ((enum rtx_code) (x3)->code) == MINUS)
    goto L3287;
  goto ret0;

 L3287: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 32L)
    goto L3288;
  goto ret0;

 L3288: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (rtx_equal_p (x4, operands[2])
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 290;
    }
  goto ret0;

 L2177: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L2178;
    }
  goto ret0;

 L2178: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (IOR, SImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 209;
    }
  goto ret0;

 L2426: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L2427;
    }
  goto ret0;

 L2427: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L2428;
    }
  goto ret0;

 L2428: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (XOR, SImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 223;
    }
  goto ret0;

 L2709: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L2710;
    }
  goto ret0;

 L2710: __attribute__ ((__unused__))
  if ((ix86_unary_operator_ok (NEG, SImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 239;
    }
  goto ret0;

 L3025: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L3026;
    }
  goto ret0;

 L3026: __attribute__ ((__unused__))
  if ((ix86_unary_operator_ok (NOT, SImode, operands)))
    {
      return 271;
    }
  goto ret0;

 L3136: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L3137;
    }
  goto ret0;

 L3137: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonmemory_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3138;
    }
  goto ret0;

 L3138: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (ASHIFT, SImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 280;
    }
  goto ret0;

 L3300: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L3301;
    }
  goto ret0;

 L3301: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT)
    goto L10346;
 L3329: __attribute__ ((__unused__))
  if (nonmemory_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3330;
    }
  goto ret0;

 L10346: __attribute__ ((__unused__))
  if (const_int_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L3302;
    }
 L10347: __attribute__ ((__unused__))
  if (const1_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3316;
    }
  goto L3329;

 L3302: __attribute__ ((__unused__))
  if ((((operands[2])->u.hwint[0]) == 31 && ((x86_use_cltd & (1 << ix86_tune)) || optimize_size)
   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 291;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L10347;

 L3316: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (ASHIFTRT, SImode, operands)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 292;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L3329;

 L3330: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (ASHIFTRT, SImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 293;
    }
  goto ret0;

 L3538: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L3539;
    }
  goto ret0;

 L3539: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const1_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3540;
    }
 L3553: __attribute__ ((__unused__))
  if (nonmemory_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3554;
    }
  goto ret0;

 L3540: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (LSHIFTRT, HImode, operands)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 308;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L3553;

 L3554: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (LSHIFTRT, HImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 309;
    }
  goto ret0;

 L3732: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L3733;
    }
  goto ret0;

 L3733: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const1_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3734;
    }
 L3747: __attribute__ ((__unused__))
  if (nonmemory_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3748;
    }
  goto ret0;

 L3734: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (ROTATE, SImode, operands)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 322;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L3747;

 L3748: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (ROTATE, SImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 323;
    }
  goto ret0;

 L3848: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L3849;
    }
  goto ret0;

 L3849: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const1_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3850;
    }
 L3863: __attribute__ ((__unused__))
  if (nonmemory_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3864;
    }
  goto ret0;

 L3850: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (ROTATERT, SImode, operands)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 330;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L3863;

 L3864: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (ROTATERT, SImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 331;
    }
  goto ret0;

 L4395: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L4396;
    }
  goto ret0;

 L4396: __attribute__ ((__unused__))
  if (pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 2;
      return 374;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_3 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((x0)->u.fld[0]).rtx);
  if (push_operand (x1, QImode))
    {
      operands[0] = x1;
      goto L310;
    }
 L10147: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, QImode))
    {
      operands[0] = x1;
      goto L353;
    }
 L10166: __attribute__ ((__unused__))
  if (register_operand (x1, QImode))
    {
      operands[0] = x1;
      goto L1548;
    }
  goto ret0;

 L310: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (nonmemory_no_elim_operand (x1, QImode))
    {
      operands[1] = x1;
      return 45;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10147;

 L353: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == QImode)
    goto L10348;
 L313: __attribute__ ((__unused__))
  if (general_operand (x1, QImode))
    {
      operands[1] = x1;
      goto L314;
    }
 L365: __attribute__ ((__unused__))
  if (((enum machine_mode) (x1)->mode) == QImode
      && ((enum rtx_code) (x1)->code) == SUBREG
      && (((x1)->u.fld[1]).rtint) == 0)
    goto L366;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10166;

 L10348: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case SIGN_EXTRACT:
      goto L354;
    case PLUS:
      goto L888;
    case MINUS:
      goto L1339;
    case AND:
      goto L2012;
    case IOR:
      goto L2266;
    case XOR:
      goto L2516;
    case NEG:
      goto L2755;
    case NOT:
      goto L3057;
    case ASHIFT:
      goto L3204;
    case ASHIFTRT:
      goto L3422;
    case LSHIFTRT:
      goto L3646;
    case ROTATE:
      goto L3804;
    case ROTATERT:
      goto L3904;
    case EQ:
    case NE:
    case LE:
    case LT:
    case GE:
    case GT:
    case LEU:
    case LTU:
    case GEU:
    case GTU:
    case UNORDERED:
    case ORDERED:
    case UNLE:
    case UNLT:
    case UNGE:
    case UNGT:
    case LTGT:
    case UNEQ:
      goto L10361;
    default:
      goto L313;
   }
 L10361: __attribute__ ((__unused__))
  if (ix86_comparison_operator (x1, QImode))
    {
      operands[1] = x1;
      goto L3956;
    }
  goto L313;

 L354: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (ext_register_operand (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L355;
    }
  goto L313;

 L355: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 8L)
    goto L356;
  goto L313;

 L356: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 8L)
    {
      return 52;
    }
  goto L313;

 L888: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode)
    goto L10362;
  goto L313;

 L10362: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == PLUS)
    goto L889;
  if (nonimmediate_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L1160;
    }
  goto L313;

 L889: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (ix86_carry_flag_operator (x3, QImode))
    {
      operands[3] = x3;
      goto L890;
    }
  goto L313;

 L890: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L891;
    }
  goto L313;

 L891: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L892;
    }
  goto L313;

 L892: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (PLUS, QImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 129;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L313;

 L1160: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L1161;
    }
  goto L313;

 L1161: __attribute__ ((__unused__))
  if ((!(x86_partial_reg_stall & (1 << ix86_tune))
   && ix86_binary_operator_ok (PLUS, QImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 149;
    }
 L1175: __attribute__ ((__unused__))
  if (((x86_partial_reg_stall & (1 << ix86_tune))
   && ix86_binary_operator_ok (PLUS, QImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 150;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L313;

 L1339: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L1340;
    }
  goto L313;

 L1340: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L1341;
  if (general_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L1469;
    }
  goto L313;

 L1341: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (ix86_carry_flag_operator (x3, QImode))
    {
      operands[3] = x3;
      goto L1342;
    }
  goto L313;

 L1342: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L1343;
    }
  goto L313;

 L1343: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (MINUS, QImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 159;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L313;

 L1469: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (MINUS, QImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 168;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L313;

 L2012: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L2013;
    }
  goto L313;

 L2013: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L2014;
    }
  goto L313;

 L2014: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (AND, QImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 201;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L313;

 L2266: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L2267;
    }
  goto L313;

 L2267: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L2268;
    }
  goto L313;

 L2268: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (IOR, QImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 215;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L313;

 L2516: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L2517;
    }
  goto L313;

 L2517: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L2518;
    }
  goto L313;

 L2518: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (XOR, QImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 229;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L313;

 L2755: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L2756;
    }
  goto L313;

 L2756: __attribute__ ((__unused__))
  if ((ix86_unary_operator_ok (NEG, QImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 243;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L313;

 L3057: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L3058;
    }
  goto L313;

 L3058: __attribute__ ((__unused__))
  if ((ix86_unary_operator_ok (NOT, QImode, operands)))
    {
      return 275;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L313;

 L3204: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L3205;
    }
  goto L313;

 L3205: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonmemory_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3206;
    }
  goto L313;

 L3206: __attribute__ ((__unused__))
  if ((!(x86_partial_reg_stall & (1 << ix86_tune))
   && ix86_binary_operator_ok (ASHIFT, QImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 285;
    }
 L3220: __attribute__ ((__unused__))
  if (((x86_partial_reg_stall & (1 << ix86_tune))
   && ix86_binary_operator_ok (ASHIFT, QImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 286;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L313;

 L3422: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L3423;
    }
  goto L313;

 L3423: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const1_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3424;
    }
 L3453: __attribute__ ((__unused__))
  if (nonmemory_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3454;
    }
  goto L313;

 L3424: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (ASHIFTRT, QImode, operands)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 300;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L3453;

 L3454: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (ASHIFTRT, QImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 302;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L313;

 L3646: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L3647;
    }
  goto L313;

 L3647: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const1_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3648;
    }
 L3677: __attribute__ ((__unused__))
  if (nonmemory_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3678;
    }
  goto L313;

 L3648: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (LSHIFTRT, QImode, operands)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 316;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L3677;

 L3678: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (LSHIFTRT, QImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 318;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L313;

 L3804: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L3805;
    }
  goto L313;

 L3805: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const1_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3806;
    }
 L3835: __attribute__ ((__unused__))
  if (nonmemory_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3836;
    }
  goto L313;

 L3806: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (ROTATE, QImode, operands)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 327;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L3835;

 L3836: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (ROTATE, QImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 329;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L313;

 L3904: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L3905;
    }
  goto L313;

 L3905: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const1_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3906;
    }
 L3935: __attribute__ ((__unused__))
  if (nonmemory_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3936;
    }
  goto L313;

 L3906: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (ROTATERT, QImode, operands)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 334;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L3935;

 L3936: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (ROTATERT, QImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 336;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L313;

 L3956: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L3957;
  goto L313;

 L3957: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L)
    {
      return 338;
    }
  goto L313;

 L314: __attribute__ ((__unused__))
  if ((((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM))
    {
      return 46;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L365;

 L366: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == ZERO_EXTRACT)
    goto L367;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10166;

 L367: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (ext_register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L368;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10166;

 L368: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 8L)
    goto L369;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10166;

 L369: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 8L)
    {
      return 54;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10166;

 L1548: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == QImode)
    goto L10364;
  goto ret0;

 L10364: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case MULT:
      goto L1549;
    case DIV:
      goto L1685;
    case UDIV:
      goto L1699;
    case IF_THEN_ELSE:
      goto L5260;
    default:
     break;
   }
  goto ret0;

 L1549: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L1550;
    }
  goto ret0;

 L1550: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L1551;
    }
  goto ret0;

 L1551: __attribute__ ((__unused__))
  if (((x86_qimode_math & (1 << ix86_tune))
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 174;
    }
  goto ret0;

 L1685: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L1686;
    }
  goto ret0;

 L1686: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L1687;
    }
  goto ret0;

 L1687: __attribute__ ((__unused__))
  if (((x86_qimode_math & (1 << ix86_tune)))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 181;
    }
  goto ret0;

 L1699: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L1700;
    }
  goto ret0;

 L1700: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L1701;
    }
  goto ret0;

 L1701: __attribute__ ((__unused__))
  if (((x86_qimode_math & (1 << ix86_tune)))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 182;
    }
  goto ret0;

 L5260: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (ix86_comparison_operator (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L5261;
    }
  goto ret0;

 L5261: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (flags_reg_operand (x3, VOIDmode))
    {
      operands[4] = x3;
      goto L5262;
    }
  goto ret0;

 L5262: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L5263;
  goto ret0;

 L5263: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L5264;
    }
  goto ret0;

 L5264: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (register_operand (x2, QImode))
    {
      operands[3] = x2;
      goto L5265;
    }
  goto ret0;

 L5265: __attribute__ ((__unused__))
  if ((((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0)) && !(x86_partial_reg_stall & (1 << ix86_tune))))
    {
      return 457;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_4 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((x0)->u.fld[1]).rtx);
  switch (((enum rtx_code) (x1)->code))
    {
    case NEG:
      goto L2865;
    case ABS:
      goto L2992;
    case SQRT:
      goto L4730;
    case UNSPEC:
      goto L10403;
    case IF_THEN_ELSE:
      goto L5307;
    case EQ:
    case LT:
    case LE:
    case UNORDERED:
    case NE:
    case UNGE:
    case UNGT:
    case ORDERED:
    case UNEQ:
    case UNLT:
    case UNLE:
    case LTGT:
    case GE:
    case GT:
      goto L10394;
    case PLUS:
    case MINUS:
    case MULT:
    case DIV:
      goto L10395;
    default:
      goto ret0;
   }
 L10394: __attribute__ ((__unused__))
  if (sse_comparison_operator (x1, SFmode))
    {
      operands[1] = x1;
      goto L3967;
    }
 L10395: __attribute__ ((__unused__))
  if (binary_fp_operator (x1, SFmode))
    {
      operands[3] = x1;
      goto L4560;
    }
  goto ret0;

 L2865: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SFmode))
    {
      operands[1] = x2;
      goto L2866;
    }
  goto ret0;

 L2866: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && reload_completed))
    {
      return 252;
    }
  goto ret0;

 L2992: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SFmode))
    {
      operands[1] = x2;
      goto L2993;
    }
  goto ret0;

 L2993: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && reload_completed))
    {
      return 265;
    }
  goto ret0;

 L4730: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SFmode)
    goto L10408;
  goto ret0;

 L10408: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, SFmode))
    {
      operands[1] = x2;
      goto L4731;
    }
 L10409: __attribute__ ((__unused__))
  if (register_operand (x2, SFmode))
    {
      operands[1] = x2;
      goto L4741;
    }
  goto ret0;

 L4731: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && (((ix86_fpmath & FPMATH_SSE) != 0) && ((ix86_fpmath & FPMATH_SSE) && (ix86_fpmath & FPMATH_387)))))
    {
      return 411;
    }
 L4736: __attribute__ ((__unused__))
  if ((((ix86_fpmath & FPMATH_SSE) != 0) && (!(target_flags & 0x00000001) || !((ix86_fpmath & FPMATH_SSE) && (ix86_fpmath & FPMATH_387)))))
    {
      return 412;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L10409;

 L4741: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && !((ix86_fpmath & FPMATH_SSE) != 0)))
    {
      return 413;
    }
  goto ret0;

 L10403: __attribute__ ((__unused__))
  switch ((((((x1)->u.fld[0]).rtvec))->num_elem))
    {
    case 1:
      goto L10410;
    case 2:
      goto L10412;
    default:
      break;
    }
  goto ret0;

 L10410: __attribute__ ((__unused__))
  switch ((((x1)->u.fld[1]).rtint))
    {
    case 21L:
      goto L4788;
    case 22L:
      goto L4809;
    default:
      break;
    }
  goto ret0;

 L4788: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, SFmode))
    {
      operands[1] = x2;
      goto L4789;
    }
  goto ret0;

 L4789: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations))
    {
      return 422;
    }
  goto ret0;

 L4809: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, SFmode))
    {
      operands[1] = x2;
      goto L4810;
    }
  goto ret0;

 L4810: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations))
    {
      return 426;
    }
  goto ret0;

 L10412: __attribute__ ((__unused__))
  switch ((((x1)->u.fld[1]).rtint))
    {
    case 65L:
      goto L4849;
    case 66L:
      goto L4879;
    case 67L:
      goto L4924;
    default:
      break;
    }
  goto ret0;

 L4849: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, SFmode))
    {
      operands[2] = x2;
      goto L4850;
    }
  goto ret0;

 L4850: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x2, SFmode))
    {
      operands[1] = x2;
      goto L4851;
    }
  goto ret0;

 L4851: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations)
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 430;
    }
  goto ret0;

 L4879: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, SFmode))
    {
      operands[2] = x2;
      goto L4880;
    }
  goto ret0;

 L4880: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x2, XFmode))
    {
      operands[1] = x2;
      goto L4881;
    }
  goto ret0;

 L4881: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations)
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 432;
    }
  goto ret0;

 L4924: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, XFmode))
    {
      operands[2] = x2;
      goto L4925;
    }
  goto ret0;

 L4925: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x2, XFmode))
    {
      operands[1] = x2;
      goto L4926;
    }
  goto ret0;

 L4926: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations)
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 435;
    }
  goto ret0;

 L5307: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum rtx_code) (x2)->code))
    {
    case LT:
      goto L5308;
    case GT:
      goto L5400;
    default:
     break;
   }
 L5269: __attribute__ ((__unused__))
  if (fcmov_comparison_operator (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L5270;
    }
 L5504: __attribute__ ((__unused__))
  if (sse_comparison_operator (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L5505;
    }
 L5526: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == EQ)
    goto L5527;
 L5597: __attribute__ ((__unused__))
  if (fcmov_comparison_operator (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L5598;
    }
  goto ret0;

 L5308: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SFmode)
    goto L10415;
  goto L5269;

 L10415: __attribute__ ((__unused__))
  if (register_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L5309;
    }
 L10416: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L5328;
    }
 L10417: __attribute__ ((__unused__))
  if (register_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L5336;
    }
  goto L5269;

 L5309: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[2] = x3;
      goto L5310;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10416;

 L5310: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L5311;
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10416;

 L5311: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (rtx_equal_p (x2, operands[2])
      && (((target_flags & 0x00004000) != 0) && (target_flags & 0x00000010))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 461;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10416;

 L5328: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[2] = x3;
      goto L5329;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10417;

 L5329: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L5330;
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10417;

 L5330: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (rtx_equal_p (x2, operands[2])
      && (((target_flags & 0x00004000) != 0) && !(target_flags & 0x00000010)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 462;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10417;

 L5336: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[2] = x3;
      goto L5337;
    }
  goto L5269;

 L5337: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L5338;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5269;

 L5338: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (rtx_equal_p (x2, operands[2])
      && (((target_flags & 0x00004000) != 0) && reload_completed))
    {
      return 463;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5269;

 L5400: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SFmode)
    goto L10418;
  goto L5269;

 L10418: __attribute__ ((__unused__))
  if (register_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L5401;
    }
 L10419: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L5420;
    }
 L10420: __attribute__ ((__unused__))
  if (register_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L5428;
    }
  goto L5269;

 L5401: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[2] = x3;
      goto L5402;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10419;

 L5402: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L5403;
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10419;

 L5403: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (rtx_equal_p (x2, operands[2])
      && (((target_flags & 0x00004000) != 0) && (target_flags & 0x00000010))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 467;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10419;

 L5420: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[2] = x3;
      goto L5421;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10420;

 L5421: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L5422;
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10420;

 L5422: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (rtx_equal_p (x2, operands[2])
      && (((target_flags & 0x00004000) != 0) && !(target_flags & 0x00000010)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 468;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10420;

 L5428: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[2] = x3;
      goto L5429;
    }
  goto L5269;

 L5429: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L5430;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5269;

 L5430: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (rtx_equal_p (x2, operands[2])
      && (((target_flags & 0x00004000) != 0) && reload_completed))
    {
      return 469;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5269;

 L5270: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 17)
    goto L5271;
  goto L5504;

 L5271: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L5272;
  goto L5504;

 L5272: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, SFmode))
    {
      operands[2] = x2;
      goto L5273;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5504;

 L5273: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (nonimmediate_operand (x2, SFmode))
    {
      operands[3] = x2;
      goto L5274;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5504;

 L5274: __attribute__ ((__unused__))
  if ((((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0))
   && (((enum rtx_code) (operands[2])->code) != MEM || ((enum rtx_code) (operands[3])->code) != MEM)))
    {
      return 458;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5504;

 L5505: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SFmode)
    goto L10421;
  goto L5526;

 L10421: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[4] = x3;
      goto L5506;
    }
 L10422: __attribute__ ((__unused__))
  if (register_operand (x3, SFmode))
    {
      operands[4] = x3;
      goto L5581;
    }
  goto L5526;

 L5506: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[5] = x3;
      goto L5507;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10422;

 L5507: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, SFmode))
    {
      operands[2] = x2;
      goto L5508;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10422;

 L5508: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (nonimmediate_operand (x2, SFmode))
    {
      operands[3] = x2;
      goto L5509;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10422;

 L5509: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)
   && (((enum rtx_code) (operands[2])->code) != MEM || ((enum rtx_code) (operands[3])->code) != MEM)


   && ((((enum rtx_code) (operands[1])->code) != LT && ((enum rtx_code) (operands[1])->code) != GT
 && ((enum rtx_code) (operands[1])->code) != UNLE && ((enum rtx_code) (operands[1])->code) != UNGE)
       || !rtx_equal_p (operands[4], operands[2])
       || !rtx_equal_p (operands[5], operands[3]))
   && (!(target_flags & 0x00000010)
       || (((enum rtx_code) (operands[1])->code) != EQ && ((enum rtx_code) (operands[1])->code) != NE)))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 2;
      return 474;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10422;

 L5581: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[5] = x3;
      goto L5582;
    }
  goto L5526;

 L5582: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, SFmode))
    {
      operands[2] = x2;
      goto L5583;
    }
  if (const0_operand (x2, SFmode))
    {
      operands[2] = x2;
      goto L5592;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5526;

 L5583: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (const0_operand (x2, SFmode))
    {
      operands[3] = x2;
      goto L5584;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5526;

 L5584: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 478;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5526;

 L5592: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (register_operand (x2, SFmode))
    {
      operands[3] = x2;
      goto L5593;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5526;

 L5593: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 479;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5526;

 L5527: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[3] = x3;
      goto L5528;
    }
  goto L5597;

 L5528: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[4] = x3;
      goto L5529;
    }
  goto L5597;

 L5529: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, SFmode))
    {
      operands[1] = x2;
      goto L5530;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5597;

 L5530: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (nonimmediate_operand (x2, SFmode))
    {
      operands[2] = x2;
      goto L5531;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5597;

 L5531: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)
   && (((enum rtx_code) (operands[2])->code) != MEM || ((enum rtx_code) (operands[3])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 2;
      return 475;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5597;

 L5598: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[4] = x3;
      goto L5599;
    }
  goto ret0;

 L5599: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, SFmode))
    {
      operands[5] = x3;
      goto L5600;
    }
  goto ret0;

 L5600: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, SFmode))
    {
      operands[2] = x2;
      goto L5601;
    }
  if (const0_operand (x2, SFmode))
    {
      operands[2] = x2;
      goto L5610;
    }
  goto ret0;

 L5601: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (const0_operand (x2, SFmode))
    {
      operands[3] = x2;
      goto L5602;
    }
  goto ret0;

 L5602: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 480;
    }
  goto ret0;

 L5610: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (register_operand (x2, SFmode))
    {
      operands[3] = x2;
      goto L5611;
    }
  goto ret0;

 L5611: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 481;
    }
  goto ret0;

 L3967: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SFmode))
    {
      operands[2] = x2;
      goto L3968;
    }
  goto ret0;

 L3968: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, SFmode))
    {
      operands[3] = x2;
      goto L3969;
    }
  goto ret0;

 L3969: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0) && reload_completed))
    {
      return 340;
    }
  goto ret0;

 L4560: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SFmode)
    goto L10425;
  goto ret0;

 L10425: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == FLOAT)
    goto L4621;
  if (nonimmediate_operand (x2, SFmode))
    {
      operands[1] = x2;
      goto L4561;
    }
 L10424: __attribute__ ((__unused__))
  if (register_operand (x2, SFmode))
    {
      operands[1] = x2;
      goto L4615;
    }
  goto ret0;

 L4621: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L4622;
    }
  goto ret0;

 L4622: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, SFmode))
    {
      operands[2] = x2;
      goto L4623;
    }
  goto ret0;

 L4623: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (x86_use_fiop & (1 << ix86_tune)) && !((ix86_fpmath & FPMATH_SSE) != 0)))
    {
      return 395;
    }
  goto ret0;

 L4561: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, SFmode))
    {
      operands[2] = x2;
      goto L4562;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L10424;

 L4562: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && !((ix86_fpmath & FPMATH_SSE) != 0)
   && (rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == 'c'
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 385;
    }
 L4568: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && ((ix86_fpmath & FPMATH_SSE) != 0) && ((ix86_fpmath & FPMATH_SSE) && (ix86_fpmath & FPMATH_387))
   && (rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == 'c'
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 386;
    }
 L4574: __attribute__ ((__unused__))
  if ((((ix86_fpmath & FPMATH_SSE) != 0) && (rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == 'c'
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 387;
    }
 L4604: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && !((ix86_fpmath & FPMATH_SSE) != 0)
   && (rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) != 'c'
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 392;
    }
 L4610: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && ((ix86_fpmath & FPMATH_SSE) != 0) && ((ix86_fpmath & FPMATH_SSE) && (ix86_fpmath & FPMATH_387))
   && (rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) != 'c'
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 393;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L10424;

 L4615: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SFmode)
    goto L10427;
  goto ret0;

 L10427: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == FLOAT)
    goto L4629;
  if (nonimmediate_operand (x2, SFmode))
    {
      operands[2] = x2;
      goto L4616;
    }
  goto ret0;

 L4629: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L4630;
    }
  goto ret0;

 L4630: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (x86_use_fiop & (1 << ix86_tune)) && !((ix86_fpmath & FPMATH_SSE) != 0)))
    {
      return 396;
    }
  goto ret0;

 L4616: __attribute__ ((__unused__))
  if ((((ix86_fpmath & FPMATH_SSE) != 0)
   && (rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) != 'c'))
    {
      return 394;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_5 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((x0)->u.fld[1]).rtx);
  switch (((enum rtx_code) (x1)->code))
    {
    case NEG:
      goto L2870;
    case ABS:
      goto L2997;
    case SQRT:
      goto L4745;
    case UNSPEC:
      goto L10449;
    case IF_THEN_ELSE:
      goto L5353;
    case EQ:
    case LT:
    case LE:
    case UNORDERED:
    case NE:
    case UNGE:
    case UNGT:
    case ORDERED:
    case UNEQ:
    case UNLT:
    case UNLE:
    case LTGT:
    case GE:
    case GT:
      goto L10440;
    case PLUS:
    case MINUS:
    case MULT:
    case DIV:
      goto L10441;
    default:
      goto ret0;
   }
 L10440: __attribute__ ((__unused__))
  if (sse_comparison_operator (x1, DFmode))
    {
      operands[1] = x1;
      goto L3973;
    }
 L10441: __attribute__ ((__unused__))
  if (binary_fp_operator (x1, DFmode))
    {
      operands[3] = x1;
      goto L4578;
    }
  goto ret0;

 L2870: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode)
    goto L10455;
  goto ret0;

 L10455: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == FLOAT_EXTEND)
    goto L2876;
  if (register_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L2871;
    }
  goto ret0;

 L2876: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L2877;
    }
  goto ret0;

 L2877: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return 254;
    }
  goto ret0;

 L2871: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && reload_completed))
    {
      return 253;
    }
  goto ret0;

 L2997: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode)
    goto L10457;
  goto ret0;

 L10457: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == FLOAT_EXTEND)
    goto L3003;
  if (register_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L2998;
    }
  goto ret0;

 L3003: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L3004;
    }
  goto ret0;

 L3004: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return 267;
    }
  goto ret0;

 L2998: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && reload_completed))
    {
      return 266;
    }
  goto ret0;

 L4745: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode)
    goto L10460;
  goto ret0;

 L10460: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == FLOAT_EXTEND)
    goto L4761;
  if (nonimmediate_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L4746;
    }
 L10459: __attribute__ ((__unused__))
  if (register_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L4756;
    }
  goto ret0;

 L4761: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L4762;
    }
  goto ret0;

 L4762: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && !(((target_flags & 0x00008000) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0))))
    {
      return 417;
    }
  goto ret0;

 L4746: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && (((target_flags & 0x00008000) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0) && ((ix86_fpmath & FPMATH_SSE) && (ix86_fpmath & FPMATH_387)))))
    {
      return 414;
    }
 L4751: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0) && (!(target_flags & 0x00000001) || !((ix86_fpmath & FPMATH_SSE) && (ix86_fpmath & FPMATH_387)))))
    {
      return 415;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L10459;

 L4756: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && (!((target_flags & 0x00008000) != 0) || !((ix86_fpmath & FPMATH_SSE) != 0))))
    {
      return 416;
    }
  goto ret0;

 L10449: __attribute__ ((__unused__))
  switch ((((((x1)->u.fld[0]).rtvec))->num_elem))
    {
    case 1:
      goto L10461;
    case 2:
      goto L10463;
    default:
      break;
    }
  goto ret0;

 L10461: __attribute__ ((__unused__))
  switch ((((x1)->u.fld[1]).rtint))
    {
    case 21L:
      goto L4783;
    case 22L:
      goto L4804;
    default:
      break;
    }
  goto ret0;

 L4783: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (((enum machine_mode) (x2)->mode) == DFmode)
    goto L10467;
  goto ret0;

 L10467: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == FLOAT_EXTEND)
    goto L4794;
  if (register_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L4784;
    }
  goto ret0;

 L4794: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L4795;
    }
  goto ret0;

 L4795: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations))
    {
      return 423;
    }
  goto ret0;

 L4784: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations))
    {
      return 421;
    }
  goto ret0;

 L4804: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (((enum machine_mode) (x2)->mode) == DFmode)
    goto L10469;
  goto ret0;

 L10469: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == FLOAT_EXTEND)
    goto L4815;
  if (register_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L4805;
    }
  goto ret0;

 L4815: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L4816;
    }
  goto ret0;

 L4816: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations))
    {
      return 427;
    }
  goto ret0;

 L4805: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations))
    {
      return 425;
    }
  goto ret0;

 L10463: __attribute__ ((__unused__))
  switch ((((x1)->u.fld[1]).rtint))
    {
    case 65L:
      goto L4834;
    case 66L:
      goto L4894;
    case 67L:
      goto L4939;
    default:
      break;
    }
  goto ret0;

 L4834: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, DFmode))
    {
      operands[2] = x2;
      goto L4835;
    }
  goto ret0;

 L4835: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L4836;
    }
  goto ret0;

 L4836: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations)
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 429;
    }
  goto ret0;

 L4894: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, DFmode))
    {
      operands[2] = x2;
      goto L4895;
    }
  goto ret0;

 L4895: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x2, XFmode))
    {
      operands[1] = x2;
      goto L4896;
    }
  goto ret0;

 L4896: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations)
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 433;
    }
  goto ret0;

 L4939: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, XFmode))
    {
      operands[2] = x2;
      goto L4940;
    }
  goto ret0;

 L4940: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x2, XFmode))
    {
      operands[1] = x2;
      goto L4941;
    }
  goto ret0;

 L4941: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations)
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 436;
    }
  goto ret0;

 L5353: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum rtx_code) (x2)->code))
    {
    case LT:
      goto L5354;
    case GT:
      goto L5446;
    default:
     break;
   }
 L5278: __attribute__ ((__unused__))
  if (fcmov_comparison_operator (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L5279;
    }
 L5548: __attribute__ ((__unused__))
  if (sse_comparison_operator (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L5549;
    }
 L5570: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == EQ)
    goto L5571;
 L5633: __attribute__ ((__unused__))
  if (fcmov_comparison_operator (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L5634;
    }
  goto ret0;

 L5354: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == DFmode)
    goto L10470;
  goto L5278;

 L10470: __attribute__ ((__unused__))
  if (register_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L5355;
    }
 L10471: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L5374;
    }
 L10472: __attribute__ ((__unused__))
  if (register_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L5382;
    }
  goto L5278;

 L5355: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[2] = x3;
      goto L5356;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10471;

 L5356: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L5357;
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10471;

 L5357: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (rtx_equal_p (x2, operands[2])
      && (((target_flags & 0x00008000) != 0) && (target_flags & 0x00000010) && ((ix86_fpmath & FPMATH_SSE) != 0))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 464;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10471;

 L5374: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[2] = x3;
      goto L5375;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10472;

 L5375: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L5376;
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10472;

 L5376: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (rtx_equal_p (x2, operands[2])
      && (((target_flags & 0x00008000) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0) && !(target_flags & 0x00000010)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 465;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10472;

 L5382: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[2] = x3;
      goto L5383;
    }
  goto L5278;

 L5383: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L5384;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5278;

 L5384: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (rtx_equal_p (x2, operands[2])
      && (((target_flags & 0x00008000) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0) && reload_completed))
    {
      return 466;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5278;

 L5446: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == DFmode)
    goto L10473;
  goto L5278;

 L10473: __attribute__ ((__unused__))
  if (register_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L5447;
    }
 L10474: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L5466;
    }
 L10475: __attribute__ ((__unused__))
  if (register_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L5474;
    }
  goto L5278;

 L5447: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[2] = x3;
      goto L5448;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10474;

 L5448: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L5449;
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10474;

 L5449: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (rtx_equal_p (x2, operands[2])
      && (((target_flags & 0x00008000) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0) && (target_flags & 0x00000010))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 470;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10474;

 L5466: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[2] = x3;
      goto L5467;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10475;

 L5467: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L5468;
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10475;

 L5468: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (rtx_equal_p (x2, operands[2])
      && (((target_flags & 0x00008000) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0) && !(target_flags & 0x00000010)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 471;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10475;

 L5474: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[2] = x3;
      goto L5475;
    }
  goto L5278;

 L5475: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L5476;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5278;

 L5476: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (rtx_equal_p (x2, operands[2])
      && (((target_flags & 0x00008000) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0) && reload_completed))
    {
      return 472;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5278;

 L5279: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 17)
    goto L5280;
  goto L5548;

 L5280: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L5281;
  goto L5548;

 L5281: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, DFmode))
    {
      operands[2] = x2;
      goto L5282;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5548;

 L5282: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (nonimmediate_operand (x2, DFmode))
    {
      operands[3] = x2;
      goto L5283;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5548;

 L5283: __attribute__ ((__unused__))
  if ((!0 && ((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0))
   && (((enum rtx_code) (operands[2])->code) != MEM || ((enum rtx_code) (operands[3])->code) != MEM)))
    {
      return 459;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5548;

 L5549: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == DFmode)
    goto L10476;
  goto L5570;

 L10476: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[4] = x3;
      goto L5550;
    }
 L10477: __attribute__ ((__unused__))
  if (register_operand (x3, DFmode))
    {
      operands[4] = x3;
      goto L5617;
    }
  goto L5570;

 L5550: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[5] = x3;
      goto L5551;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10477;

 L5551: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, DFmode))
    {
      operands[2] = x2;
      goto L5552;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10477;

 L5552: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (nonimmediate_operand (x2, DFmode))
    {
      operands[3] = x2;
      goto L5553;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10477;

 L5553: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)
   && (((enum rtx_code) (operands[2])->code) != MEM || ((enum rtx_code) (operands[3])->code) != MEM)


   && ((((enum rtx_code) (operands[1])->code) != LT && ((enum rtx_code) (operands[1])->code) != GT
 && ((enum rtx_code) (operands[1])->code) != UNLE && ((enum rtx_code) (operands[1])->code) != UNGE)
       || !rtx_equal_p (operands[4], operands[2])
       || !rtx_equal_p (operands[5], operands[3]))
   && (!(target_flags & 0x00000010)
       || (((enum rtx_code) (operands[1])->code) != EQ && ((enum rtx_code) (operands[1])->code) != NE)))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 2;
      return 476;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10477;

 L5617: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[5] = x3;
      goto L5618;
    }
  goto L5570;

 L5618: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, DFmode))
    {
      operands[2] = x2;
      goto L5619;
    }
  if (const0_operand (x2, DFmode))
    {
      operands[2] = x2;
      goto L5628;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5570;

 L5619: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (const0_operand (x2, DFmode))
    {
      operands[3] = x2;
      goto L5620;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5570;

 L5620: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 482;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5570;

 L5628: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (register_operand (x2, DFmode))
    {
      operands[3] = x2;
      goto L5629;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5570;

 L5629: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 483;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5570;

 L5571: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[3] = x3;
      goto L5572;
    }
  goto L5633;

 L5572: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[4] = x3;
      goto L5573;
    }
  goto L5633;

 L5573: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L5574;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5633;

 L5574: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (nonimmediate_operand (x2, DFmode))
    {
      operands[2] = x2;
      goto L5575;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5633;

 L5575: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)
   && (((enum rtx_code) (operands[2])->code) != MEM || ((enum rtx_code) (operands[3])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 2;
      return 477;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5633;

 L5634: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[4] = x3;
      goto L5635;
    }
  goto ret0;

 L5635: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, DFmode))
    {
      operands[5] = x3;
      goto L5636;
    }
  goto ret0;

 L5636: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, DFmode))
    {
      operands[2] = x2;
      goto L5637;
    }
  if (const0_operand (x2, DFmode))
    {
      operands[2] = x2;
      goto L5646;
    }
  goto ret0;

 L5637: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (const0_operand (x2, DFmode))
    {
      operands[3] = x2;
      goto L5638;
    }
  goto ret0;

 L5638: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 484;
    }
  goto ret0;

 L5646: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (register_operand (x2, DFmode))
    {
      operands[3] = x2;
      goto L5647;
    }
  goto ret0;

 L5647: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 485;
    }
  goto ret0;

 L3973: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, DFmode))
    {
      operands[2] = x2;
      goto L3974;
    }
  goto ret0;

 L3974: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, DFmode))
    {
      operands[3] = x2;
      goto L3975;
    }
  goto ret0;

 L3975: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0) && reload_completed))
    {
      return 341;
    }
  goto ret0;

 L4578: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode)
    goto L10480;
  goto ret0;

 L10480: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case FLOAT:
      goto L4653;
    case FLOAT_EXTEND:
      goto L4667;
    case SUBREG:
    case REG:
    case MEM:
    case ADDRESSOF:
      goto L10478;
    default:
      goto L10479;
   }
 L10478: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L4579;
    }
 L10479: __attribute__ ((__unused__))
  if (register_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L4647;
    }
  goto ret0;

 L4653: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L4654;
    }
  goto ret0;

 L4654: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, DFmode))
    {
      operands[2] = x2;
      goto L4655;
    }
  goto ret0;

 L4655: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (x86_use_fiop & (1 << ix86_tune)) && !(((target_flags & 0x00008000) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0))))
    {
      return 400;
    }
  goto ret0;

 L4667: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SFmode)
    goto L10482;
  goto ret0;

 L10482: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L4668;
    }
 L10483: __attribute__ ((__unused__))
  if (register_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L4682;
    }
  goto ret0;

 L4668: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, DFmode))
    {
      operands[2] = x2;
      goto L4669;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10483;

 L4669: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (!((target_flags & 0x00008000) != 0) || !((ix86_fpmath & FPMATH_SSE) != 0))
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 402;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10483;

 L4682: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode
      && ((enum rtx_code) (x2)->code) == FLOAT_EXTEND)
    goto L4683;
  goto ret0;

 L4683: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[2] = x3;
      goto L4684;
    }
  goto ret0;

 L4684: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && !(((target_flags & 0x00008000) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0))))
    {
      return 404;
    }
  goto ret0;

 L4579: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, DFmode))
    {
      operands[2] = x2;
      goto L4580;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L10479;

 L4580: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (!((target_flags & 0x00008000) != 0) || !((ix86_fpmath & FPMATH_SSE) != 0))
   && (rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == 'c'
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 388;
    }
 L4586: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && ((ix86_fpmath & FPMATH_SSE) != 0) && ((target_flags & 0x00008000) != 0) && ((ix86_fpmath & FPMATH_SSE) && (ix86_fpmath & FPMATH_387))
   && (rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == 'c'
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 389;
    }
 L4592: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0)
   && (rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == 'c'
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 390;
    }
 L4636: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (!((target_flags & 0x00008000) != 0) || !((ix86_fpmath & FPMATH_SSE) != 0))
   && (rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) != 'c'
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 397;
    }
 L4642: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && ((target_flags & 0x00008000) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0) && ((ix86_fpmath & FPMATH_SSE) && (ix86_fpmath & FPMATH_387))
   && (rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) != 'c'
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 398;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L10479;

 L4647: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode)
    goto L10485;
  goto ret0;

 L10485: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case FLOAT:
      goto L4661;
    case FLOAT_EXTEND:
      goto L4675;
    case SUBREG:
    case REG:
    case MEM:
    case ADDRESSOF:
      goto L10484;
    default:
      goto ret0;
   }
 L10484: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, DFmode))
    {
      operands[2] = x2;
      goto L4648;
    }
  goto ret0;

 L4661: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L4662;
    }
  goto ret0;

 L4662: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (x86_use_fiop & (1 << ix86_tune)) && !(((target_flags & 0x00008000) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0))))
    {
      return 401;
    }
  goto ret0;

 L4675: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[2] = x3;
      goto L4676;
    }
  goto ret0;

 L4676: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && !(((target_flags & 0x00008000) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0))))
    {
      return 403;
    }
  goto ret0;

 L4648: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0)
   && (rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) != 'c'))
    {
      return 399;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_6 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((x0)->u.fld[1]).rtx);
  switch (((enum rtx_code) (x1)->code))
    {
    case FLOAT:
      goto L849;
    case NEG:
      goto L2881;
    case ABS:
      goto L3008;
    case SQRT:
      goto L4766;
    case UNSPEC:
      goto L10505;
    case IF_THEN_ELSE:
      goto L5287;
    case PLUS:
    case MINUS:
    case MULT:
    case DIV:
      goto L10495;
    default:
      goto ret0;
   }
 L10495: __attribute__ ((__unused__))
  if (binary_fp_operator (x1, XFmode))
    {
      operands[3] = x1;
      goto L4596;
    }
  goto ret0;

 L849: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case HImode:
      goto L10512;
    case SImode:
      goto L10513;
    case DImode:
      goto L10514;
    default:
      break;
    }
  goto ret0;

 L10512: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L850;
    }
  goto ret0;

 L850: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return 125;
    }
  goto ret0;

 L10513: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L855;
    }
  goto ret0;

 L855: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return 126;
    }
  goto ret0;

 L10514: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, DImode))
    {
      operands[1] = x2;
      goto L860;
    }
  goto ret0;

 L860: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return 127;
    }
  goto ret0;

 L2881: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode)
    goto L10516;
  goto ret0;

 L10516: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == FLOAT_EXTEND)
    goto L2887;
  if (register_operand (x2, XFmode))
    {
      operands[1] = x2;
      goto L2882;
    }
  goto ret0;

 L2887: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x3)->mode))
    {
    case DFmode:
      goto L10517;
    case SFmode:
      goto L10518;
    default:
      break;
    }
  goto ret0;

 L10517: __attribute__ ((__unused__))
  if (register_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L2888;
    }
  goto ret0;

 L2888: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return 256;
    }
  goto ret0;

 L10518: __attribute__ ((__unused__))
  if (register_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L2894;
    }
  goto ret0;

 L2894: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return 257;
    }
  goto ret0;

 L2882: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && reload_completed))
    {
      return 255;
    }
  goto ret0;

 L3008: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode)
    goto L10520;
  goto ret0;

 L10520: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == FLOAT_EXTEND)
    goto L3014;
  if (register_operand (x2, XFmode))
    {
      operands[1] = x2;
      goto L3009;
    }
  goto ret0;

 L3014: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x3)->mode))
    {
    case DFmode:
      goto L10521;
    case SFmode:
      goto L10522;
    default:
      break;
    }
  goto ret0;

 L10521: __attribute__ ((__unused__))
  if (register_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L3015;
    }
  goto ret0;

 L3015: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return 269;
    }
  goto ret0;

 L10522: __attribute__ ((__unused__))
  if (register_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L3021;
    }
  goto ret0;

 L3021: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return 270;
    }
  goto ret0;

 L3009: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && reload_completed))
    {
      return 268;
    }
  goto ret0;

 L4766: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode)
    goto L10524;
  goto ret0;

 L10524: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == FLOAT_EXTEND)
    goto L4772;
  if (register_operand (x2, XFmode))
    {
      operands[1] = x2;
      goto L4767;
    }
  goto ret0;

 L4772: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x3)->mode))
    {
    case DFmode:
      goto L10525;
    case SFmode:
      goto L10526;
    default:
      break;
    }
  goto ret0;

 L10525: __attribute__ ((__unused__))
  if (register_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L4773;
    }
  goto ret0;

 L4773: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && !(target_flags & 0x00000040)))
    {
      return 419;
    }
  goto ret0;

 L10526: __attribute__ ((__unused__))
  if (register_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L4779;
    }
  goto ret0;

 L4779: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && !(target_flags & 0x00000040)))
    {
      return 420;
    }
  goto ret0;

 L4767: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && !(target_flags & 0x00000040)
   && ((target_flags & 0x00000010) || flag_unsafe_math_optimizations) ))
    {
      return 418;
    }
  goto ret0;

 L10505: __attribute__ ((__unused__))
  switch ((((((x1)->u.fld[0]).rtvec))->num_elem))
    {
    case 1:
      goto L10527;
    case 2:
      goto L10529;
    default:
      break;
    }
  goto ret0;

 L10527: __attribute__ ((__unused__))
  switch ((((x1)->u.fld[1]).rtint))
    {
    case 21L:
      goto L4799;
    case 22L:
      goto L4820;
    case 68L:
      goto L4960;
    case 69L:
      goto L4965;
    default:
      break;
    }
  goto ret0;

 L4799: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, XFmode))
    {
      operands[1] = x2;
      goto L4800;
    }
  goto ret0;

 L4800: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && !(target_flags & 0x00000040)
   && flag_unsafe_math_optimizations))
    {
      return 424;
    }
  goto ret0;

 L4820: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, XFmode))
    {
      operands[1] = x2;
      goto L4821;
    }
  goto ret0;

 L4821: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations))
    {
      return 428;
    }
  goto ret0;

 L4960: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, XFmode))
    {
      operands[1] = x2;
      goto L4961;
    }
  goto ret0;

 L4961: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations))
    {
      return 438;
    }
  goto ret0;

 L4965: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, XFmode))
    {
      operands[1] = x2;
      goto L4966;
    }
  goto ret0;

 L4966: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations))
    {
      return 439;
    }
  goto ret0;

 L10529: __attribute__ ((__unused__))
  switch ((((x1)->u.fld[1]).rtint))
    {
    case 65L:
      goto L4864;
    case 66L:
      goto L4909;
    case 67L:
      goto L4954;
    default:
      break;
    }
  goto ret0;

 L4864: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, XFmode))
    {
      operands[2] = x2;
      goto L4865;
    }
  goto ret0;

 L4865: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x2, XFmode))
    {
      operands[1] = x2;
      goto L4866;
    }
  goto ret0;

 L4866: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations)
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 431;
    }
  goto ret0;

 L4909: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, XFmode))
    {
      operands[2] = x2;
      goto L4910;
    }
  goto ret0;

 L4910: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x2, XFmode))
    {
      operands[1] = x2;
      goto L4911;
    }
  goto ret0;

 L4911: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations)
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 434;
    }
  goto ret0;

 L4954: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, XFmode))
    {
      operands[2] = x2;
      goto L4955;
    }
  goto ret0;

 L4955: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x2, XFmode))
    {
      operands[1] = x2;
      goto L4956;
    }
  goto ret0;

 L4956: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations)
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 437;
    }
  goto ret0;

 L5287: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (fcmov_comparison_operator (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L5288;
    }
  goto ret0;

 L5288: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 17)
    goto L5289;
  goto ret0;

 L5289: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L5290;
  goto ret0;

 L5290: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, XFmode))
    {
      operands[2] = x2;
      goto L5291;
    }
  goto ret0;

 L5291: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (register_operand (x2, XFmode))
    {
      operands[3] = x2;
      goto L5292;
    }
  goto ret0;

 L5292: __attribute__ ((__unused__))
  if ((((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0))))
    {
      return 460;
    }
  goto ret0;

 L4596: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode)
    goto L10535;
  goto ret0;

 L10535: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case FLOAT:
      goto L4695;
    case FLOAT_EXTEND:
      goto L4709;
    case SUBREG:
    case REG:
    case ADDRESSOF:
      goto L10534;
    default:
      goto ret0;
   }
 L10534: __attribute__ ((__unused__))
  if (register_operand (x2, XFmode))
    {
      operands[1] = x2;
      goto L4597;
    }
  goto ret0;

 L4695: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L4696;
    }
  goto ret0;

 L4696: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, XFmode))
    {
      operands[2] = x2;
      goto L4697;
    }
  goto ret0;

 L4697: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (x86_use_fiop & (1 << ix86_tune))))
    {
      return 406;
    }
  goto ret0;

 L4709: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L4710;
    }
 L4723: __attribute__ ((__unused__))
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L4724;
    }
  goto ret0;

 L4710: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, XFmode))
    {
      operands[2] = x2;
      goto L4711;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L4723;

 L4711: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return 408;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L4723;

 L4724: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode
      && ((enum rtx_code) (x2)->code) == FLOAT_EXTEND)
    goto L4725;
  goto ret0;

 L4725: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L4726;
    }
  goto ret0;

 L4726: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return 410;
    }
  goto ret0;

 L4597: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode)
    goto L10538;
  goto ret0;

 L10538: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case FLOAT:
      goto L4703;
    case FLOAT_EXTEND:
      goto L4717;
    case SUBREG:
    case REG:
    case ADDRESSOF:
      goto L10537;
    default:
      goto ret0;
   }
 L10537: __attribute__ ((__unused__))
  if (register_operand (x2, XFmode))
    {
      operands[2] = x2;
      goto L4598;
    }
  goto ret0;

 L4703: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L4704;
    }
  goto ret0;

 L4704: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (x86_use_fiop & (1 << ix86_tune))))
    {
      return 407;
    }
  goto ret0;

 L4717: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L4718;
    }
  goto ret0;

 L4718: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return 409;
    }
  goto ret0;

 L4598: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)
   && (rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == 'c'))
    {
      return 391;
    }
 L4690: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)
   && (rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) != 'c'))
    {
      return 405;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_7 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case SImode:
      goto L10541;
    case HImode:
      goto L10543;
    case QImode:
      goto L10545;
    default:
      break;
    }
 L60: __attribute__ ((__unused__))
  if (general_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L61;
    }
 L79: __attribute__ ((__unused__))
  if (((enum machine_mode) (x2)->mode) == QImode)
    goto L10565;
  goto ret0;

 L10541: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case MINUS:
      goto L10;
    case NEG:
      goto L1021;
    case PLUS:
      goto L1054;
    case AND:
      goto L1888;
    case ZERO_EXTRACT:
      goto L1943;
    case IOR:
      goto L2207;
    case XOR:
      goto L2457;
    case SUBREG:
    case REG:
    case MEM:
    case ADDRESSOF:
      goto L10540;
    default:
      goto L10548;
   }
 L10540: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L4;
    }
 L10548: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L1037;
    }
  goto ret0;

 L10: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[0] = x3;
      goto L11;
    }
  goto ret0;

 L11: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L12;
    }
  goto ret0;

 L12: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (ix86_match_ccmode (insn, CCGOCmode)))
    {
      return 1;
    }
  goto ret0;

 L1021: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (general_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L1022;
    }
  goto ret0;

 L1022: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L1023;
    }
  goto ret0;

 L1023: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCZmode)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)


   && ! pic_symbolic_operand (operands[2], VOIDmode))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 140;
    }
  goto ret0;

 L1054: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L1055;
    }
  goto ret0;

 L1055: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L1056;
    }
  goto ret0;

 L1056: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (ix86_match_ccmode (insn, CCGOCmode)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)


   && ! pic_symbolic_operand (operands[2], VOIDmode))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 142;
    }
  goto ret0;

 L1888: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode)
    goto L10568;
  goto ret0;

 L10568: __attribute__ ((__unused__))
  if (((enum rtx_code) (x3)->code) == ZERO_EXTRACT)
    goto L1910;
  if (nonimmediate_operand (x3, SImode))
    {
      operands[0] = x3;
      goto L1889;
    }
  goto ret0;

 L1910: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (ext_register_operand (x4, VOIDmode))
    {
      operands[0] = x4;
      goto L1911;
    }
  goto ret0;

 L1911: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L1912;
  goto ret0;

 L1912: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[2]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L1923;
  goto ret0;

 L1923: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode)
    goto L10569;
 L1913: __attribute__ ((__unused__))
  if (const_int_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L1914;
    }
  goto ret0;

 L10569: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x3)->code))
    {
    case ZERO_EXTEND:
      goto L1924;
    case ZERO_EXTRACT:
      goto L1935;
    default:
     break;
   }
  goto L1913;

 L1924: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (general_operand (x4, QImode))
    {
      operands[1] = x4;
      goto L1925;
    }
  goto L1913;

 L1925: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (!0 && ix86_match_ccmode (insn, CCNOmode)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 194;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L1913;

 L1935: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (ext_register_operand (x4, VOIDmode))
    {
      operands[1] = x4;
      goto L1936;
    }
  goto L1913;

 L1936: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L1937;
  goto L1913;

 L1937: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[2]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L1938;
  goto L1913;

 L1938: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (ix86_match_ccmode (insn, CCNOmode)))
    {
      return 195;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L1913;

 L1914: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (ix86_match_ccmode (insn, CCNOmode)))
    {
      return 193;
    }
  goto ret0;

 L1889: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L1890;
    }
  goto ret0;

 L1890: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (ix86_match_ccmode (insn, CCNOmode)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 190;
    }
  goto ret0;

 L1943: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, VOIDmode))
    {
      operands[0] = x3;
      goto L1944;
    }
  goto ret0;

 L1944: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const_int_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L1945;
    }
  goto ret0;

 L1945: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (const_int_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L1946;
    }
  goto ret0;

 L1946: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (ix86_match_ccmode (insn, CCNOmode)
   && (((enum machine_mode) (operands[0])->mode) == SImode
       || (0 && ((enum machine_mode) (operands[0])->mode) == DImode)
       || ((enum machine_mode) (operands[0])->mode) == HImode
       || ((enum machine_mode) (operands[0])->mode) == QImode)))
    {
      return 196;
    }
  goto ret0;

 L2207: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L2208;
    }
  goto ret0;

 L2208: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L2209;
    }
  goto ret0;

 L2209: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (ix86_match_ccmode (insn, CCNOmode)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 211;
    }
  goto ret0;

 L2457: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L2458;
    }
  goto ret0;

 L2458: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L2459;
    }
  goto ret0;

 L2459: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (ix86_match_ccmode (insn, CCNOmode)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 225;
    }
  goto ret0;

 L4: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const0_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L5;
    }
 L17: __attribute__ ((__unused__))
  if (general_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L18;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L10548;

 L5: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCNOmode)))
    {
      return 0;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L17;

 L18: __attribute__ ((__unused__))
  if (((((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)
    && ix86_match_ccmode (insn, CCmode)))
    {
      return 2;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L10548;

 L1037: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const_int_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L1038;
    }
  goto ret0;

 L1038: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCGCmode)
   && (((operands[2])->u.hwint[0]) & 0xffffffff) != 0x80000000)
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 141;
    }
  goto ret0;

 L10543: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case MINUS:
      goto L29;
    case NEG:
      goto L1112;
    case PLUS:
      goto L1145;
    case AND:
      goto L1895;
    case IOR:
      goto L2252;
    case XOR:
      goto L2502;
    case SUBREG:
    case REG:
    case MEM:
    case ADDRESSOF:
      goto L10542;
    default:
      goto L10551;
   }
 L10542: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L23;
    }
 L10551: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L1128;
    }
  goto ret0;

 L29: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, HImode))
    {
      operands[0] = x3;
      goto L30;
    }
  goto ret0;

 L30: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L31;
    }
  goto ret0;

 L31: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (ix86_match_ccmode (insn, CCGOCmode)))
    {
      return 4;
    }
  goto ret0;

 L1112: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (general_operand (x3, HImode))
    {
      operands[2] = x3;
      goto L1113;
    }
  goto ret0;

 L1113: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L1114;
    }
  goto ret0;

 L1114: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCZmode)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 146;
    }
  goto ret0;

 L1145: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L1146;
    }
  goto ret0;

 L1146: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, HImode))
    {
      operands[2] = x3;
      goto L1147;
    }
  goto ret0;

 L1147: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (ix86_match_ccmode (insn, CCGOCmode)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 148;
    }
  goto ret0;

 L1895: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, HImode))
    {
      operands[0] = x3;
      goto L1896;
    }
  goto ret0;

 L1896: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L1897;
    }
  goto ret0;

 L1897: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (ix86_match_ccmode (insn, CCNOmode)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 191;
    }
  goto ret0;

 L2252: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L2253;
    }
  goto ret0;

 L2253: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, HImode))
    {
      operands[2] = x3;
      goto L2254;
    }
  goto ret0;

 L2254: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (ix86_match_ccmode (insn, CCNOmode)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 214;
    }
  goto ret0;

 L2502: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L2503;
    }
  goto ret0;

 L2503: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, HImode))
    {
      operands[2] = x3;
      goto L2504;
    }
  goto ret0;

 L2504: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (ix86_match_ccmode (insn, CCNOmode)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 228;
    }
  goto ret0;

 L23: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const0_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L24;
    }
 L36: __attribute__ ((__unused__))
  if (general_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L37;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L10551;

 L24: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCNOmode)))
    {
      return 3;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L36;

 L37: __attribute__ ((__unused__))
  if (((((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)
   && ix86_match_ccmode (insn, CCmode)))
    {
      return 5;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L10551;

 L1128: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const_int_operand (x2, HImode))
    {
      operands[2] = x2;
      goto L1129;
    }
  goto ret0;

 L1129: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCGCmode)
   && (((operands[2])->u.hwint[0]) & 0xffff) != 0x8000)
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 147;
    }
  goto ret0;

 L10545: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case MINUS:
      goto L54;
    case NEG:
      goto L1219;
    case PLUS:
      goto L1252;
    case AND:
      goto L1902;
    case IOR:
      goto L2327;
    case XOR:
      goto L2662;
    case SUBREG:
    case REG:
    case MEM:
    case ADDRESSOF:
      goto L10544;
    default:
      goto L10546;
   }
 L10544: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L42;
    }
 L10546: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == SUBREG
      && (((x2)->u.fld[1]).rtint) == 0)
    goto L70;
  goto L60;

 L54: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[0] = x3;
      goto L55;
    }
  goto L60;

 L55: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L56;
    }
  goto L60;

 L56: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (ix86_match_ccmode (insn, CCGOCmode)))
    {
      return 8;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L60;

 L1219: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (general_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L1220;
    }
  goto L60;

 L1220: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L1221;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L60;

 L1221: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCZmode)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 153;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L60;

 L1252: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L1253;
    }
  goto L60;

 L1253: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L1254;
    }
  goto L60;

 L1254: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (ix86_match_ccmode (insn, CCGOCmode)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 155;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L60;

 L1902: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[0] = x3;
      goto L1903;
    }
  goto L60;

 L1903: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L1904;
    }
  goto L60;

 L1904: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (ix86_match_ccmode (insn, CCNOmode)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 192;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L60;

 L2327: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L2328;
    }
  goto L60;

 L2328: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L2329;
    }
  goto L60;

 L2329: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (ix86_match_ccmode (insn, CCNOmode)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 219;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L60;

 L2662: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L2663;
    }
  goto L60;

 L2663: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L2664;
    }
  goto L60;

 L2664: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (ix86_match_ccmode (insn, CCNOmode)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 236;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L60;

 L42: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const0_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L43;
    }
 L48: __attribute__ ((__unused__))
  if (general_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L49;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L10546;

 L43: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCNOmode)))
    {
      return 6;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L48;

 L49: __attribute__ ((__unused__))
  if (((((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)
    && ix86_match_ccmode (insn, CCmode)))
    {
      return 7;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L10546;

 L70: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == ZERO_EXTRACT)
    goto L71;
  goto L60;

 L71: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (ext_register_operand (x4, VOIDmode))
    {
      operands[0] = x4;
      goto L72;
    }
  goto L60;

 L72: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L73;
  goto L60;

 L73: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[2]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L74;
  goto L60;

 L74: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const0_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L75;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L60;

 L75: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCNOmode)))
    {
      return 10;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L60;

 L61: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == SUBREG
      && (((x2)->u.fld[1]).rtint) == 0)
    goto L62;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L79;

 L62: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == ZERO_EXTRACT)
    goto L63;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L79;

 L63: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (ext_register_operand (x4, VOIDmode))
    {
      operands[1] = x4;
      goto L64;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L79;

 L64: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L65;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L79;

 L65: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[2]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L
      && (!0 && ix86_match_ccmode (insn, CCmode)))
    {
      return 9;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L79;

 L10565: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == SUBREG
      && (((x2)->u.fld[1]).rtint) == 0)
    goto L80;
 L10566: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L1235;
    }
  goto ret0;

 L80: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == ZERO_EXTRACT)
    goto L81;
  goto L10566;

 L81: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (ext_register_operand (x4, VOIDmode))
    {
      operands[0] = x4;
      goto L82;
    }
  goto L10566;

 L82: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L83;
  goto L10566;

 L83: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[2]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L84;
  goto L10566;

 L84: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L85;
    }
 L94: __attribute__ ((__unused__))
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == SUBREG
      && (((x2)->u.fld[1]).rtint) == 0)
    goto L95;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L10566;

 L85: __attribute__ ((__unused__))
  if ((!0 && ix86_match_ccmode (insn, CCmode)))
    {
      return 11;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L94;

 L95: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == ZERO_EXTRACT)
    goto L96;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L10566;

 L96: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (ext_register_operand (x4, VOIDmode))
    {
      operands[1] = x4;
      goto L97;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L10566;

 L97: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L98;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L10566;

 L98: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[2]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L
      && (ix86_match_ccmode (insn, CCmode)))
    {
      return 12;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L10566;

 L1235: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const_int_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L1236;
    }
  goto ret0;

 L1236: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCGCmode)
   && (((operands[2])->u.hwint[0]) & 0xff) != 0x80)
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 154;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_8 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum rtx_code) (x2)->code))
    {
    case VEC_DUPLICATE:
      goto L5885;
    case PLUS:
      goto L5917;
    case MINUS:
      goto L5931;
    case MULT:
      goto L5945;
    case DIV:
      goto L5959;
    case UNSPEC:
      goto L10629;
    case SQRT:
      goto L5996;
    case VEC_SELECT:
      goto L6231;
    case SMAX:
      goto L6273;
    case SMIN:
      goto L6287;
    case SUBREG:
    case REG:
    case ADDRESSOF:
      goto L10617;
    default:
      goto ret0;
   }
 L10617: __attribute__ ((__unused__))
  if (register_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L5849;
    }
  goto ret0;

 L5885: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (memory_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L5886;
    }
  goto ret0;

 L5886: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const0_operand (x2, V4SFmode))
    {
      operands[2] = x2;
      goto L5887;
    }
  goto ret0;

 L5887: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 527;
    }
  goto ret0;

 L5917: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4SFmode))
    {
      operands[1] = x3;
      goto L5918;
    }
  goto ret0;

 L5918: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, V4SFmode))
    {
      operands[2] = x3;
      goto L5919;
    }
  goto ret0;

 L5919: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L5920;
  goto ret0;

 L5920: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 532;
    }
  goto ret0;

 L5931: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4SFmode))
    {
      operands[1] = x3;
      goto L5932;
    }
  goto ret0;

 L5932: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, V4SFmode))
    {
      operands[2] = x3;
      goto L5933;
    }
  goto ret0;

 L5933: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L5934;
  goto ret0;

 L5934: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 534;
    }
  goto ret0;

 L5945: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4SFmode))
    {
      operands[1] = x3;
      goto L5946;
    }
  goto ret0;

 L5946: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, V4SFmode))
    {
      operands[2] = x3;
      goto L5947;
    }
  goto ret0;

 L5947: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L5948;
  goto ret0;

 L5948: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 536;
    }
  goto ret0;

 L5959: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4SFmode))
    {
      operands[1] = x3;
      goto L5960;
    }
  goto ret0;

 L5960: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, V4SFmode))
    {
      operands[2] = x3;
      goto L5961;
    }
  goto ret0;

 L5961: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L5962;
  goto ret0;

 L5962: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 538;
    }
  goto ret0;

 L10629: __attribute__ ((__unused__))
  if ((((((x2)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L10631;
  goto ret0;

 L10631: __attribute__ ((__unused__))
  switch ((((x2)->u.fld[1]).rtint))
    {
    case 42L:
      goto L5972;
    case 43L:
      goto L5984;
    default:
      break;
    }
  goto ret0;

 L5972: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (nonimmediate_operand (x3, V4SFmode))
    {
      operands[1] = x3;
      goto L5973;
    }
  goto ret0;

 L5973: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, V4SFmode))
    {
      operands[2] = x2;
      goto L5974;
    }
  goto ret0;

 L5974: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 540;
    }
  goto ret0;

 L5984: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (nonimmediate_operand (x3, V4SFmode))
    {
      operands[1] = x3;
      goto L5985;
    }
  goto ret0;

 L5985: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, V4SFmode))
    {
      operands[2] = x2;
      goto L5986;
    }
  goto ret0;

 L5986: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 542;
    }
  goto ret0;

 L5996: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, V4SFmode))
    {
      operands[1] = x3;
      goto L5997;
    }
  goto ret0;

 L5997: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, V4SFmode))
    {
      operands[2] = x2;
      goto L5998;
    }
  goto ret0;

 L5998: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 544;
    }
  goto ret0;

 L6231: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4SFmode))
    {
      operands[1] = x3;
      goto L6232;
    }
  goto ret0;

 L6232: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 4)
    goto L6233;
  goto ret0;

 L6233: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT)
    goto L10633;
  goto ret0;

 L10633: __attribute__ ((__unused__))
  if ((int) ((x4)->u.hwint[0]) == ((x4)->u.hwint[0]))
    switch ((int) ((x4)->u.hwint[0]))
      {
      case 2L:
        goto L6234;
      case 0L:
        goto L6252;
      default:
        break;
      }
  goto ret0;

 L6234: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L6235;
  goto ret0;

 L6235: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L6236;
  goto ret0;

 L6236: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6237;
  goto ret0;

 L6237: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4SFmode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L6238;
  goto ret0;

 L6238: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4SFmode))
    {
      operands[2] = x3;
      goto L6239;
    }
  goto ret0;

 L6239: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 4)
    goto L6240;
  goto ret0;

 L6240: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L6241;
  goto ret0;

 L6241: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L6242;
  goto ret0;

 L6242: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6243;
  goto ret0;

 L6243: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L6244;
  goto ret0;

 L6244: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 5L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 577;
    }
  goto ret0;

 L6252: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L6253;
  goto ret0;

 L6253: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6254;
  goto ret0;

 L6254: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L6255;
  goto ret0;

 L6255: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4SFmode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L6256;
  goto ret0;

 L6256: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4SFmode))
    {
      operands[2] = x3;
      goto L6257;
    }
  goto ret0;

 L6257: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 4)
    goto L6258;
  goto ret0;

 L6258: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L6259;
  goto ret0;

 L6259: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L6260;
  goto ret0;

 L6260: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L6261;
  goto ret0;

 L6261: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6262;
  goto ret0;

 L6262: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 5L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 578;
    }
  goto ret0;

 L6273: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4SFmode))
    {
      operands[1] = x3;
      goto L6274;
    }
  goto ret0;

 L6274: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, V4SFmode))
    {
      operands[2] = x3;
      goto L6275;
    }
  goto ret0;

 L6275: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L6276;
  goto ret0;

 L6276: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 580;
    }
  goto ret0;

 L6287: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4SFmode))
    {
      operands[1] = x3;
      goto L6288;
    }
  goto ret0;

 L6288: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, V4SFmode))
    {
      operands[2] = x3;
      goto L6289;
    }
  goto ret0;

 L6289: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L6290;
  goto ret0;

 L6290: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 582;
    }
  goto ret0;

 L5849: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4SFmode)
    goto L10635;
  goto ret0;

 L10635: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case VEC_SELECT:
      goto L5850;
    case VEC_DUPLICATE:
      goto L6296;
    case SUBREG:
    case REG:
    case ADDRESSOF:
      goto L10636;
    default:
      goto ret0;
   }
 L10636: __attribute__ ((__unused__))
  if (register_operand (x2, V4SFmode))
    {
      operands[2] = x2;
      goto L5893;
    }
  goto ret0;

 L5850: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4SFmode))
    {
      operands[2] = x3;
      goto L5851;
    }
  goto ret0;

 L5851: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 4)
    goto L5852;
  goto ret0;

 L5852: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L5853;
  goto ret0;

 L5853: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L5854;
  goto ret0;

 L5854: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L5855;
  goto ret0;

 L5855: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L5856;
  goto ret0;

 L5856: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT)
    goto L10638;
  goto ret0;

 L10638: __attribute__ ((__unused__))
  if ((int) ((x2)->u.hwint[0]) == ((x2)->u.hwint[0]))
    switch ((int) ((x2)->u.hwint[0]))
      {
      case 3L:
        goto L10640;
      case 12L:
        goto L10641;
      default:
        break;
      }
  goto ret0;

 L10640: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 523;
    }
  goto ret0;

 L10641: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 524;
    }
  goto ret0;

 L6296: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x3)->mode))
    {
    case V2SFmode:
      goto L10642;
    case SFmode:
      goto L10643;
    default:
      break;
    }
  goto ret0;

 L10642: __attribute__ ((__unused__))
  if (((enum rtx_code) (x3)->code) == FLOAT)
    goto L6297;
  goto ret0;

 L6297: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, V2SImode))
    {
      operands[2] = x4;
      goto L6298;
    }
  goto ret0;

 L6298: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 12L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 583;
    }
  goto ret0;

 L10643: __attribute__ ((__unused__))
  if (((enum rtx_code) (x3)->code) == FLOAT)
    goto L6321;
  goto ret0;

 L6321: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, SImode))
    {
      operands[2] = x4;
      goto L6322;
    }
  goto ret0;

 L6322: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 14L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 586;
    }
  goto ret0;

 L5893: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 528;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_9 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((x0)->u.fld[1]).rtx);
  switch (((enum rtx_code) (x1)->code))
    {
    case PLUS:
      goto L6347;
    case SS_PLUS:
      goto L6372;
    case US_PLUS:
      goto L6384;
    case MINUS:
      goto L6396;
    case SS_MINUS:
      goto L6421;
    case US_MINUS:
      goto L6433;
    case ASHIFTRT:
      goto L6533;
    case EQ:
      goto L6592;
    case GT:
      goto L6610;
    case UMAX:
      goto L6628;
    case UMIN:
      goto L6640;
    case VEC_CONCAT:
      goto L6702;
    case VEC_MERGE:
      goto L6726;
    default:
     break;
   }
  goto ret0;

 L6347: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V8QImode))
    {
      operands[1] = x2;
      goto L6348;
    }
  goto ret0;

 L6348: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V8QImode))
    {
      operands[2] = x2;
      goto L6349;
    }
  goto ret0;

 L6349: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 590;
    }
  goto ret0;

 L6372: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V8QImode))
    {
      operands[1] = x2;
      goto L6373;
    }
  goto ret0;

 L6373: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V8QImode))
    {
      operands[2] = x2;
      goto L6374;
    }
  goto ret0;

 L6374: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 594;
    }
  goto ret0;

 L6384: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V8QImode))
    {
      operands[1] = x2;
      goto L6385;
    }
  goto ret0;

 L6385: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V8QImode))
    {
      operands[2] = x2;
      goto L6386;
    }
  goto ret0;

 L6386: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 596;
    }
  goto ret0;

 L6396: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V8QImode))
    {
      operands[1] = x2;
      goto L6397;
    }
  goto ret0;

 L6397: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V8QImode))
    {
      operands[2] = x2;
      goto L6398;
    }
  goto ret0;

 L6398: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 598;
    }
  goto ret0;

 L6421: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V8QImode))
    {
      operands[1] = x2;
      goto L6422;
    }
  goto ret0;

 L6422: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V8QImode))
    {
      operands[2] = x2;
      goto L6423;
    }
  goto ret0;

 L6423: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 602;
    }
  goto ret0;

 L6433: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V8QImode))
    {
      operands[1] = x2;
      goto L6434;
    }
  goto ret0;

 L6434: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V8QImode))
    {
      operands[2] = x2;
      goto L6435;
    }
  goto ret0;

 L6435: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 604;
    }
  goto ret0;

 L6533: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V8QImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L6534;
  goto ret0;

 L6534: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == V8QImode
      && ((enum rtx_code) (x3)->code) == PLUS)
    goto L6535;
  goto ret0;

 L6535: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, V8QImode))
    {
      operands[1] = x4;
      goto L6536;
    }
  goto ret0;

 L6536: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, V8QImode))
    {
      operands[2] = x4;
      goto L6537;
    }
  goto ret0;

 L6537: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == V8QImode
      && ((enum rtx_code) (x3)->code) == CONST_VECTOR
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 8)
    goto L6538;
  goto ret0;

 L6538: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6539;
  goto ret0;

 L6539: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6540;
  goto ret0;

 L6540: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6541;
  goto ret0;

 L6541: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6542;
  goto ret0;

 L6542: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6543;
  goto ret0;

 L6543: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6544;
  goto ret0;

 L6544: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[6]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6545;
  goto ret0;

 L6545: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[7]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6546;
  goto ret0;

 L6546: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00004000) != 0) || ((target_flags & 0x00040000) != 0)))
    {
      return 615;
    }
  goto ret0;

 L6592: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V8QImode))
    {
      operands[1] = x2;
      goto L6593;
    }
  goto ret0;

 L6593: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V8QImode))
    {
      operands[2] = x2;
      goto L6594;
    }
  goto ret0;

 L6594: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 621;
    }
  goto ret0;

 L6610: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V8QImode))
    {
      operands[1] = x2;
      goto L6611;
    }
  goto ret0;

 L6611: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V8QImode))
    {
      operands[2] = x2;
      goto L6612;
    }
  goto ret0;

 L6612: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 624;
    }
  goto ret0;

 L6628: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V8QImode))
    {
      operands[1] = x2;
      goto L6629;
    }
  goto ret0;

 L6629: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V8QImode))
    {
      operands[2] = x2;
      goto L6630;
    }
  goto ret0;

 L6630: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0) || ((target_flags & 0x00040000) != 0)))
    {
      return 627;
    }
  goto ret0;

 L6640: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V8QImode))
    {
      operands[1] = x2;
      goto L6641;
    }
  goto ret0;

 L6641: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V8QImode))
    {
      operands[2] = x2;
      goto L6642;
    }
  goto ret0;

 L6642: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0) || ((target_flags & 0x00040000) != 0)))
    {
      return 629;
    }
  goto ret0;

 L6702: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4QImode)
    goto L10670;
  goto ret0;

 L10670: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case SS_TRUNCATE:
      goto L6703;
    case US_TRUNCATE:
      goto L6719;
    default:
     break;
   }
  goto ret0;

 L6703: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4HImode))
    {
      operands[1] = x3;
      goto L6704;
    }
  goto ret0;

 L6704: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4QImode
      && ((enum rtx_code) (x2)->code) == SS_TRUNCATE)
    goto L6705;
  goto ret0;

 L6705: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4HImode))
    {
      operands[2] = x3;
      goto L6706;
    }
  goto ret0;

 L6706: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 639;
    }
  goto ret0;

 L6719: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4HImode))
    {
      operands[1] = x3;
      goto L6720;
    }
  goto ret0;

 L6720: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4QImode
      && ((enum rtx_code) (x2)->code) == US_TRUNCATE)
    goto L6721;
  goto ret0;

 L6721: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4HImode))
    {
      operands[2] = x3;
      goto L6722;
    }
  goto ret0;

 L6722: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 641;
    }
  goto ret0;

 L6726: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V8QImode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L6727;
  goto ret0;

 L6727: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V8QImode))
    {
      operands[1] = x3;
      goto L6728;
    }
  goto ret0;

 L6728: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 8)
    goto L6729;
  goto ret0;

 L6729: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT)
    goto L10672;
  goto ret0;

 L10672: __attribute__ ((__unused__))
  if ((int) ((x4)->u.hwint[0]) == ((x4)->u.hwint[0]))
    switch ((int) ((x4)->u.hwint[0]))
      {
      case 4L:
        goto L6730;
      case 0L:
        goto L6784;
      default:
        break;
      }
  goto ret0;

 L6730: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L6731;
  goto ret0;

 L6731: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 5L)
    goto L6732;
  goto ret0;

 L6732: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6733;
  goto ret0;

 L6733: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 6L)
    goto L6734;
  goto ret0;

 L6734: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L6735;
  goto ret0;

 L6735: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[6]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 7L)
    goto L6736;
  goto ret0;

 L6736: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[7]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L6737;
  goto ret0;

 L6737: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V8QImode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L6738;
  goto ret0;

 L6738: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V8QImode))
    {
      operands[2] = x3;
      goto L6739;
    }
  goto ret0;

 L6739: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 8)
    goto L6740;
  goto ret0;

 L6740: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L6741;
  goto ret0;

 L6741: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 4L)
    goto L6742;
  goto ret0;

 L6742: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6743;
  goto ret0;

 L6743: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 5L)
    goto L6744;
  goto ret0;

 L6744: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L6745;
  goto ret0;

 L6745: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 6L)
    goto L6746;
  goto ret0;

 L6746: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[6]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L6747;
  goto ret0;

 L6747: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[7]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 7L)
    goto L6748;
  goto ret0;

 L6748: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 85L
      && (((target_flags & 0x00002000) != 0)))
    {
      return 642;
    }
  goto ret0;

 L6784: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 4L)
    goto L6785;
  goto ret0;

 L6785: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6786;
  goto ret0;

 L6786: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 5L)
    goto L6787;
  goto ret0;

 L6787: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L6788;
  goto ret0;

 L6788: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 6L)
    goto L6789;
  goto ret0;

 L6789: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[6]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L6790;
  goto ret0;

 L6790: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[7]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 7L)
    goto L6791;
  goto ret0;

 L6791: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V8QImode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L6792;
  goto ret0;

 L6792: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V8QImode))
    {
      operands[2] = x3;
      goto L6793;
    }
  goto ret0;

 L6793: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 8)
    goto L6794;
  goto ret0;

 L6794: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 4L)
    goto L6795;
  goto ret0;

 L6795: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L6796;
  goto ret0;

 L6796: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 5L)
    goto L6797;
  goto ret0;

 L6797: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6798;
  goto ret0;

 L6798: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 6L)
    goto L6799;
  goto ret0;

 L6799: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L6800;
  goto ret0;

 L6800: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[6]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 7L)
    goto L6801;
  goto ret0;

 L6801: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[7]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L6802;
  goto ret0;

 L6802: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 85L
      && (((target_flags & 0x00002000) != 0)))
    {
      return 645;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_10 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((x0)->u.fld[1]).rtx);
  switch (((enum rtx_code) (x1)->code))
    {
    case PLUS:
      goto L6353;
    case SS_PLUS:
      goto L6378;
    case US_PLUS:
      goto L6390;
    case MINUS:
      goto L6402;
    case SS_MINUS:
      goto L6427;
    case US_MINUS:
      goto L6439;
    case MULT:
      goto L6445;
    case TRUNCATE:
      goto L6451;
    case ASHIFTRT:
      goto L6550;
    case VEC_MERGE:
      goto L6569;
    case UNSPEC:
      goto L10692;
    case EQ:
      goto L6598;
    case GT:
      goto L6616;
    case SMAX:
      goto L6634;
    case SMIN:
      goto L6646;
    case LSHIFTRT:
      goto L6664;
    case ASHIFT:
      goto L6683;
    case VEC_CONCAT:
      goto L6710;
    default:
     break;
   }
  goto ret0;

 L6353: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4HImode))
    {
      operands[1] = x2;
      goto L6354;
    }
  goto ret0;

 L6354: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V4HImode))
    {
      operands[2] = x2;
      goto L6355;
    }
  goto ret0;

 L6355: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 591;
    }
  goto ret0;

 L6378: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4HImode))
    {
      operands[1] = x2;
      goto L6379;
    }
  goto ret0;

 L6379: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V4HImode))
    {
      operands[2] = x2;
      goto L6380;
    }
  goto ret0;

 L6380: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 595;
    }
  goto ret0;

 L6390: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4HImode))
    {
      operands[1] = x2;
      goto L6391;
    }
  goto ret0;

 L6391: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V4HImode))
    {
      operands[2] = x2;
      goto L6392;
    }
  goto ret0;

 L6392: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 597;
    }
  goto ret0;

 L6402: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4HImode))
    {
      operands[1] = x2;
      goto L6403;
    }
  goto ret0;

 L6403: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V4HImode))
    {
      operands[2] = x2;
      goto L6404;
    }
  goto ret0;

 L6404: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 599;
    }
  goto ret0;

 L6427: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4HImode))
    {
      operands[1] = x2;
      goto L6428;
    }
  goto ret0;

 L6428: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V4HImode))
    {
      operands[2] = x2;
      goto L6429;
    }
  goto ret0;

 L6429: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 603;
    }
  goto ret0;

 L6439: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4HImode))
    {
      operands[1] = x2;
      goto L6440;
    }
  goto ret0;

 L6440: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V4HImode))
    {
      operands[2] = x2;
      goto L6441;
    }
  goto ret0;

 L6441: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 605;
    }
  goto ret0;

 L6445: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4HImode))
    {
      operands[1] = x2;
      goto L6446;
    }
  goto ret0;

 L6446: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V4HImode))
    {
      operands[2] = x2;
      goto L6447;
    }
  goto ret0;

 L6447: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 606;
    }
  goto ret0;

 L6451: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4SImode
      && ((enum rtx_code) (x2)->code) == LSHIFTRT)
    goto L6452;
  goto ret0;

 L6452: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == V4SImode
      && ((enum rtx_code) (x3)->code) == MULT)
    goto L6453;
  goto ret0;

 L6453: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == V4SImode)
    goto L10693;
  goto ret0;

 L10693: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x4)->code))
    {
    case SIGN_EXTEND:
      goto L6454;
    case ZERO_EXTEND:
      goto L6464;
    default:
     break;
   }
  goto ret0;

 L6454: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (register_operand (x5, V4HImode))
    {
      operands[1] = x5;
      goto L6455;
    }
  goto ret0;

 L6455: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum machine_mode) (x4)->mode) == V4SImode
      && ((enum rtx_code) (x4)->code) == SIGN_EXTEND)
    goto L6456;
  goto ret0;

 L6456: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (nonimmediate_operand (x5, V4HImode))
    {
      operands[2] = x5;
      goto L6457;
    }
  goto ret0;

 L6457: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 16L
      && (((target_flags & 0x00002000) != 0)))
    {
      return 607;
    }
  goto ret0;

 L6464: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (register_operand (x5, V4HImode))
    {
      operands[1] = x5;
      goto L6465;
    }
  goto ret0;

 L6465: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum machine_mode) (x4)->mode) == V4SImode
      && ((enum rtx_code) (x4)->code) == ZERO_EXTEND)
    goto L6466;
  goto ret0;

 L6466: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (nonimmediate_operand (x5, V4HImode))
    {
      operands[2] = x5;
      goto L6467;
    }
  goto ret0;

 L6467: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 16L
      && (((target_flags & 0x00004000) != 0) || ((target_flags & 0x00040000) != 0)))
    {
      return 608;
    }
  goto ret0;

 L6550: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4HImode)
    goto L10695;
  goto ret0;

 L10695: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == PLUS)
    goto L6551;
  if (register_operand (x2, V4HImode))
    {
      operands[1] = x2;
      goto L6653;
    }
  goto ret0;

 L6551: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == V4HImode
      && ((enum rtx_code) (x3)->code) == PLUS)
    goto L6552;
  goto ret0;

 L6552: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, V4HImode))
    {
      operands[1] = x4;
      goto L6553;
    }
  goto ret0;

 L6553: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, V4HImode))
    {
      operands[2] = x4;
      goto L6554;
    }
  goto ret0;

 L6554: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == V4HImode
      && ((enum rtx_code) (x3)->code) == CONST_VECTOR
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 4)
    goto L6555;
  goto ret0;

 L6555: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6556;
  goto ret0;

 L6556: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6557;
  goto ret0;

 L6557: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6558;
  goto ret0;

 L6558: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6559;
  goto ret0;

 L6559: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00004000) != 0) || ((target_flags & 0x00040000) != 0)))
    {
      return 616;
    }
  goto ret0;

 L6653: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonmemory_operand (x2, DImode))
    {
      operands[2] = x2;
      goto L6654;
    }
  goto ret0;

 L6654: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 631;
    }
  goto ret0;

 L6569: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4HImode)
    goto L10698;
  goto ret0;

 L10698: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L6753;
  if (register_operand (x2, V4HImode))
    {
      operands[1] = x2;
      goto L6570;
    }
  goto ret0;

 L6753: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4HImode))
    {
      operands[1] = x3;
      goto L6754;
    }
  goto ret0;

 L6754: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 4)
    goto L6755;
  goto ret0;

 L6755: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT)
    goto L10699;
  goto ret0;

 L10699: __attribute__ ((__unused__))
  if ((int) ((x4)->u.hwint[0]) == ((x4)->u.hwint[0]))
    switch ((int) ((x4)->u.hwint[0]))
      {
      case 0L:
        goto L6756;
      case 2L:
        goto L6810;
      default:
        break;
      }
  goto ret0;

 L6756: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L6757;
  goto ret0;

 L6757: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6758;
  goto ret0;

 L6758: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L6759;
  goto ret0;

 L6759: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4HImode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L6760;
  goto ret0;

 L6760: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4HImode))
    {
      operands[2] = x3;
      goto L6761;
    }
  goto ret0;

 L6761: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 4)
    goto L6762;
  goto ret0;

 L6762: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L6763;
  goto ret0;

 L6763: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L6764;
  goto ret0;

 L6764: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L6765;
  goto ret0;

 L6765: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6766;
  goto ret0;

 L6766: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 5L
      && (((target_flags & 0x00002000) != 0)))
    {
      return 643;
    }
  goto ret0;

 L6810: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L6811;
  goto ret0;

 L6811: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L6812;
  goto ret0;

 L6812: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6813;
  goto ret0;

 L6813: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4HImode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L6814;
  goto ret0;

 L6814: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4HImode))
    {
      operands[2] = x3;
      goto L6815;
    }
  goto ret0;

 L6815: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 4)
    goto L6816;
  goto ret0;

 L6816: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L6817;
  goto ret0;

 L6817: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L6818;
  goto ret0;

 L6818: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6819;
  goto ret0;

 L6819: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L6820;
  goto ret0;

 L6820: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 5L
      && (((target_flags & 0x00002000) != 0)))
    {
      return 646;
    }
  goto ret0;

 L6570: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4HImode
      && ((enum rtx_code) (x2)->code) == VEC_DUPLICATE)
    goto L6571;
  goto ret0;

 L6571: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == HImode
      && ((enum rtx_code) (x3)->code) == TRUNCATE)
    goto L6572;
  goto ret0;

 L6572: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, SImode))
    {
      operands[2] = x4;
      goto L6573;
    }
  goto ret0;

 L6573: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (const_0_to_15_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L6574;
    }
  goto ret0;

 L6574: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0) || ((target_flags & 0x00040000) != 0)))
    {
      return 618;
    }
  goto ret0;

 L10692: __attribute__ ((__unused__))
  if ((((((x1)->u.fld[0]).rtvec))->num_elem) == 2
      && (((x1)->u.fld[1]).rtint) == 41)
    goto L6586;
  goto ret0;

 L6586: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, V4HImode))
    {
      operands[1] = x2;
      goto L6587;
    }
  goto ret0;

 L6587: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (immediate_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L6588;
    }
  goto ret0;

 L6588: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0) || ((target_flags & 0x00040000) != 0)))
    {
      return 620;
    }
  goto ret0;

 L6598: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4HImode))
    {
      operands[1] = x2;
      goto L6599;
    }
  goto ret0;

 L6599: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V4HImode))
    {
      operands[2] = x2;
      goto L6600;
    }
  goto ret0;

 L6600: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 622;
    }
  goto ret0;

 L6616: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4HImode))
    {
      operands[1] = x2;
      goto L6617;
    }
  goto ret0;

 L6617: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V4HImode))
    {
      operands[2] = x2;
      goto L6618;
    }
  goto ret0;

 L6618: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 625;
    }
  goto ret0;

 L6634: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4HImode))
    {
      operands[1] = x2;
      goto L6635;
    }
  goto ret0;

 L6635: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V4HImode))
    {
      operands[2] = x2;
      goto L6636;
    }
  goto ret0;

 L6636: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0) || ((target_flags & 0x00040000) != 0)))
    {
      return 628;
    }
  goto ret0;

 L6646: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4HImode))
    {
      operands[1] = x2;
      goto L6647;
    }
  goto ret0;

 L6647: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V4HImode))
    {
      operands[2] = x2;
      goto L6648;
    }
  goto ret0;

 L6648: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0) || ((target_flags & 0x00040000) != 0)))
    {
      return 630;
    }
  goto ret0;

 L6664: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4HImode))
    {
      operands[1] = x2;
      goto L6665;
    }
  goto ret0;

 L6665: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonmemory_operand (x2, DImode))
    {
      operands[2] = x2;
      goto L6666;
    }
  goto ret0;

 L6666: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 633;
    }
  goto ret0;

 L6683: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4HImode))
    {
      operands[1] = x2;
      goto L6684;
    }
  goto ret0;

 L6684: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonmemory_operand (x2, DImode))
    {
      operands[2] = x2;
      goto L6685;
    }
  goto ret0;

 L6685: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 636;
    }
  goto ret0;

 L6710: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V2HImode
      && ((enum rtx_code) (x2)->code) == SS_TRUNCATE)
    goto L6711;
  goto ret0;

 L6711: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2SImode))
    {
      operands[1] = x3;
      goto L6712;
    }
  goto ret0;

 L6712: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V2HImode
      && ((enum rtx_code) (x2)->code) == SS_TRUNCATE)
    goto L6713;
  goto ret0;

 L6713: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2SImode))
    {
      operands[2] = x3;
      goto L6714;
    }
  goto ret0;

 L6714: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 640;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_11 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((x0)->u.fld[0]).rtx);
  switch (((enum rtx_code) (x1)->code))
    {
    case MEM:
      goto L10717;
    case SUBREG:
      goto L10718;
    default:
     break;
   }
 L10196: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, TImode))
    {
      operands[0] = x1;
      goto L5806;
    }
 L10204: __attribute__ ((__unused__))
  if (register_operand (x1, TImode))
    {
      operands[0] = x1;
      goto L6117;
    }
  goto ret0;

 L10717: __attribute__ ((__unused__))
  if (push_operand (x1, TImode))
    {
      operands[0] = x1;
      goto L5762;
    }
  goto L10196;

 L5762: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (register_operand (x1, TImode))
    {
      operands[1] = x1;
      goto L5763;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L5763: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 504;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L10718: __attribute__ ((__unused__))
  if ((((x1)->u.fld[1]).rtint) == 0)
    goto L6001;
  goto L10196;

 L6001: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case V4SFmode:
      goto L10719;
    case SFmode:
      goto L10720;
    case V2DFmode:
      goto L10721;
    case DFmode:
      goto L10722;
    default:
      break;
    }
  goto L10196;

 L10719: __attribute__ ((__unused__))
  if (register_operand (x2, V4SFmode))
    {
      operands[0] = x2;
      goto L6002;
    }
  goto L10196;

 L6002: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == TImode)
    goto L10723;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L10723: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case AND:
      goto L6003;
    case IOR:
      goto L6033;
    case XOR:
      goto L6047;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6003: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == TImode)
    goto L10727;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L10727: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == NOT)
    goto L6018;
  if (nonimmediate_operand (x2, TImode))
    {
      operands[1] = x2;
      goto L6004;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6018: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, TImode))
    {
      operands[1] = x3;
      goto L6019;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6019: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[2] = x2;
      goto L6020;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6020: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 547;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6004: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[2] = x2;
      goto L6005;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6005: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 545;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6033: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[1] = x2;
      goto L6034;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6034: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[2] = x2;
      goto L6035;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6035: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 549;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6047: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[1] = x2;
      goto L6048;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6048: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[2] = x2;
      goto L6049;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6049: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 551;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L10720: __attribute__ ((__unused__))
  if (register_operand (x2, SFmode))
    {
      operands[0] = x2;
      goto L6009;
    }
  goto L10196;

 L6009: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == TImode)
    goto L10728;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L10728: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case AND:
      goto L6010;
    case IOR:
      goto L6040;
    case XOR:
      goto L6054;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6010: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == TImode)
    goto L10732;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L10732: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == NOT)
    goto L6026;
  if (nonimmediate_operand (x2, TImode))
    {
      operands[1] = x2;
      goto L6011;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6026: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, TImode))
    {
      operands[1] = x3;
      goto L6027;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6027: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[2] = x2;
      goto L6028;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6028: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 548;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6011: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[2] = x2;
      goto L6012;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6012: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 546;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6040: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[1] = x2;
      goto L6041;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6041: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[2] = x2;
      goto L6042;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6042: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 550;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6054: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[1] = x2;
      goto L6055;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6055: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[2] = x2;
      goto L6056;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6056: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 552;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L10721: __attribute__ ((__unused__))
  if (register_operand (x2, V2DFmode))
    {
      operands[0] = x2;
      goto L6060;
    }
  goto L10196;

 L6060: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == TImode)
    goto L10733;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L10733: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case AND:
      goto L6061;
    case IOR:
      goto L6091;
    case XOR:
      goto L6105;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6061: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == TImode)
    goto L10737;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L10737: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == NOT)
    goto L6076;
  if (nonimmediate_operand (x2, TImode))
    {
      operands[1] = x2;
      goto L6062;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6076: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, TImode))
    {
      operands[1] = x3;
      goto L6077;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6077: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[2] = x2;
      goto L6078;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6078: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 555;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6062: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[2] = x2;
      goto L6063;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6063: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 553;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6091: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[1] = x2;
      goto L6092;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6092: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[2] = x2;
      goto L6093;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6093: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 557;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6105: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[1] = x2;
      goto L6106;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6106: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[2] = x2;
      goto L6107;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6107: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 559;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L10722: __attribute__ ((__unused__))
  if (register_operand (x2, DFmode))
    {
      operands[0] = x2;
      goto L6067;
    }
  goto L10196;

 L6067: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == TImode)
    goto L10738;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L10738: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case AND:
      goto L6068;
    case IOR:
      goto L6098;
    case XOR:
      goto L6112;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6068: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == TImode)
    goto L10742;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L10742: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == NOT)
    goto L6084;
  if (nonimmediate_operand (x2, TImode))
    {
      operands[1] = x2;
      goto L6069;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6084: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, TImode))
    {
      operands[1] = x3;
      goto L6085;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6085: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[2] = x2;
      goto L6086;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6086: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 556;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6069: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[2] = x2;
      goto L6070;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6070: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 554;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6098: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[1] = x2;
      goto L6099;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6099: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[2] = x2;
      goto L6100;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6100: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 558;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6112: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[1] = x2;
      goto L6113;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6113: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[2] = x2;
      goto L6114;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L6114: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 560;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10196;

 L5806: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (vector_move_operand (x1, TImode))
    {
      operands[1] = x1;
      goto L5807;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10204;

 L5807: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0) && !0
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 515;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10204;

 L6117: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == TImode)
    goto L10743;
  goto ret0;

 L10743: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case AND:
      goto L6118;
    case IOR:
      goto L6144;
    case XOR:
      goto L6156;
    default:
     break;
   }
  goto ret0;

 L6118: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == TImode)
    goto L10747;
  goto ret0;

 L10747: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == NOT)
    goto L6131;
  if (nonimmediate_operand (x2, TImode))
    {
      operands[1] = x2;
      goto L6119;
    }
  goto ret0;

 L6131: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, TImode))
    {
      operands[1] = x3;
      goto L6132;
    }
  goto ret0;

 L6132: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[2] = x2;
      goto L6133;
    }
  goto ret0;

 L6133: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 563;
    }
  goto ret0;

 L6119: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[2] = x2;
      goto L6120;
    }
  goto ret0;

 L6120: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 561;
    }
  goto ret0;

 L6144: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[1] = x2;
      goto L6145;
    }
  goto ret0;

 L6145: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[2] = x2;
      goto L6146;
    }
  goto ret0;

 L6146: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 565;
    }
  goto ret0;

 L6156: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[1] = x2;
      goto L6157;
    }
  goto ret0;

 L6157: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, TImode))
    {
      operands[2] = x2;
      goto L6158;
    }
  goto ret0;

 L6158: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 567;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_12 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((x0)->u.fld[1]).rtx);
  switch (((enum rtx_code) (x1)->code))
    {
    case PLUS:
      goto L6882;
    case MINUS:
      goto L6888;
    case SMAX:
      goto L6918;
    case SMIN:
      goto L6924;
    case MULT:
      goto L6930;
    case VEC_CONCAT:
      goto L6985;
    case FLOAT:
      goto L7048;
    case UNSPEC:
      goto L10786;
    case VEC_SELECT:
      goto L7126;
    default:
     break;
   }
  goto ret0;

 L6882: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2SFmode))
    {
      operands[1] = x2;
      goto L6883;
    }
  goto ret0;

 L6883: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2SFmode))
    {
      operands[2] = x2;
      goto L6884;
    }
  goto ret0;

 L6884: __attribute__ ((__unused__))
  if ((((target_flags & 0x00020000) != 0)))
    {
      return 652;
    }
  goto ret0;

 L6888: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V2SFmode)
    goto L10791;
  goto ret0;

 L10791: __attribute__ ((__unused__))
  if (register_operand (x2, V2SFmode))
    {
      operands[1] = x2;
      goto L6889;
    }
 L10792: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, V2SFmode))
    {
      operands[2] = x2;
      goto L6895;
    }
  goto ret0;

 L6889: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2SFmode))
    {
      operands[2] = x2;
      goto L6890;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L10792;

 L6890: __attribute__ ((__unused__))
  if ((((target_flags & 0x00020000) != 0)))
    {
      return 653;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L10792;

 L6895: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, V2SFmode))
    {
      operands[1] = x2;
      goto L6896;
    }
  goto ret0;

 L6896: __attribute__ ((__unused__))
  if ((((target_flags & 0x00020000) != 0)))
    {
      return 654;
    }
  goto ret0;

 L6918: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2SFmode))
    {
      operands[1] = x2;
      goto L6919;
    }
  goto ret0;

 L6919: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2SFmode))
    {
      operands[2] = x2;
      goto L6920;
    }
  goto ret0;

 L6920: __attribute__ ((__unused__))
  if ((((target_flags & 0x00020000) != 0)))
    {
      return 658;
    }
  goto ret0;

 L6924: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2SFmode))
    {
      operands[1] = x2;
      goto L6925;
    }
  goto ret0;

 L6925: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2SFmode))
    {
      operands[2] = x2;
      goto L6926;
    }
  goto ret0;

 L6926: __attribute__ ((__unused__))
  if ((((target_flags & 0x00020000) != 0)))
    {
      return 659;
    }
  goto ret0;

 L6930: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2SFmode))
    {
      operands[1] = x2;
      goto L6931;
    }
  goto ret0;

 L6931: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2SFmode))
    {
      operands[2] = x2;
      goto L6932;
    }
  goto ret0;

 L6932: __attribute__ ((__unused__))
  if ((((target_flags & 0x00020000) != 0)))
    {
      return 660;
    }
  goto ret0;

 L6985: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SFmode)
    goto L10793;
  goto ret0;

 L10793: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case PLUS:
      goto L6986;
    case MINUS:
      goto L7007;
    default:
     break;
   }
  goto ret0;

 L6986: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SFmode
      && ((enum rtx_code) (x3)->code) == VEC_SELECT)
    goto L6987;
  goto ret0;

 L6987: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, V2SFmode))
    {
      operands[1] = x4;
      goto L6988;
    }
  goto ret0;

 L6988: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == PARALLEL
      && (((((x4)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L6989;
  goto ret0;

 L6989: __attribute__ ((__unused__))
  x5 = (((((x4)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 0L)
    goto L6990;
  goto ret0;

 L6990: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == SFmode
      && ((enum rtx_code) (x3)->code) == VEC_SELECT)
    goto L6991;
  goto ret0;

 L6991: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (rtx_equal_p (x4, operands[1]))
    goto L6992;
  goto ret0;

 L6992: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == PARALLEL
      && (((((x4)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L6993;
  goto ret0;

 L6993: __attribute__ ((__unused__))
  x5 = (((((x4)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 1L)
    goto L6994;
  goto ret0;

 L6994: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SFmode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L6995;
  goto ret0;

 L6995: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SFmode
      && ((enum rtx_code) (x3)->code) == VEC_SELECT)
    goto L6996;
  goto ret0;

 L6996: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, V2SFmode))
    {
      operands[2] = x4;
      goto L6997;
    }
  goto ret0;

 L6997: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == PARALLEL
      && (((((x4)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L6998;
  goto ret0;

 L6998: __attribute__ ((__unused__))
  x5 = (((((x4)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 0L)
    goto L6999;
  goto ret0;

 L6999: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == SFmode
      && ((enum rtx_code) (x3)->code) == VEC_SELECT)
    goto L7000;
  goto ret0;

 L7000: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (rtx_equal_p (x4, operands[2]))
    goto L7001;
  goto ret0;

 L7001: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == PARALLEL
      && (((((x4)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L7002;
  goto ret0;

 L7002: __attribute__ ((__unused__))
  x5 = (((((x4)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 1L
      && (((target_flags & 0x00020000) != 0)))
    {
      return 664;
    }
  goto ret0;

 L7007: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SFmode
      && ((enum rtx_code) (x3)->code) == VEC_SELECT)
    goto L7008;
  goto ret0;

 L7008: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, V2SFmode))
    {
      operands[1] = x4;
      goto L7009;
    }
  goto ret0;

 L7009: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == PARALLEL
      && (((((x4)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L7010;
  goto ret0;

 L7010: __attribute__ ((__unused__))
  x5 = (((((x4)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 0L)
    goto L7011;
  goto ret0;

 L7011: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == SFmode
      && ((enum rtx_code) (x3)->code) == VEC_SELECT)
    goto L7012;
  goto ret0;

 L7012: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (rtx_equal_p (x4, operands[1]))
    goto L7013;
  goto ret0;

 L7013: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == PARALLEL
      && (((((x4)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L7014;
  goto ret0;

 L7014: __attribute__ ((__unused__))
  x5 = (((((x4)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 1L)
    goto L7015;
  goto ret0;

 L7015: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SFmode)
    goto L10795;
  goto ret0;

 L10795: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case MINUS:
      goto L7016;
    case PLUS:
      goto L7037;
    default:
     break;
   }
  goto ret0;

 L7016: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SFmode
      && ((enum rtx_code) (x3)->code) == VEC_SELECT)
    goto L7017;
  goto ret0;

 L7017: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, V2SFmode))
    {
      operands[2] = x4;
      goto L7018;
    }
  goto ret0;

 L7018: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == PARALLEL
      && (((((x4)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L7019;
  goto ret0;

 L7019: __attribute__ ((__unused__))
  x5 = (((((x4)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 0L)
    goto L7020;
  goto ret0;

 L7020: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == SFmode
      && ((enum rtx_code) (x3)->code) == VEC_SELECT)
    goto L7021;
  goto ret0;

 L7021: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (rtx_equal_p (x4, operands[2]))
    goto L7022;
  goto ret0;

 L7022: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == PARALLEL
      && (((((x4)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L7023;
  goto ret0;

 L7023: __attribute__ ((__unused__))
  x5 = (((((x4)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 1L
      && (((target_flags & 0x00040000) != 0)))
    {
      return 665;
    }
  goto ret0;

 L7037: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SFmode
      && ((enum rtx_code) (x3)->code) == VEC_SELECT)
    goto L7038;
  goto ret0;

 L7038: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, V2SFmode))
    {
      operands[2] = x4;
      goto L7039;
    }
  goto ret0;

 L7039: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == PARALLEL
      && (((((x4)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L7040;
  goto ret0;

 L7040: __attribute__ ((__unused__))
  x5 = (((((x4)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 0L)
    goto L7041;
  goto ret0;

 L7041: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == SFmode
      && ((enum rtx_code) (x3)->code) == VEC_SELECT)
    goto L7042;
  goto ret0;

 L7042: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (rtx_equal_p (x4, operands[2]))
    goto L7043;
  goto ret0;

 L7043: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == PARALLEL
      && (((((x4)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L7044;
  goto ret0;

 L7044: __attribute__ ((__unused__))
  x5 = (((((x4)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 1L
      && (((target_flags & 0x00040000) != 0)))
    {
      return 666;
    }
  goto ret0;

 L7048: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V2SImode)
    goto L10797;
  goto ret0;

 L10797: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == VEC_CONCAT)
    goto L7049;
  if (nonimmediate_operand (x2, V2SImode))
    {
      operands[1] = x2;
      goto L7065;
    }
  goto ret0;

 L7049: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == SIGN_EXTEND)
    goto L7050;
  goto ret0;

 L7050: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == HImode
      && ((enum rtx_code) (x4)->code) == TRUNCATE)
    goto L7051;
  goto ret0;

 L7051: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (((enum machine_mode) (x5)->mode) == SImode
      && ((enum rtx_code) (x5)->code) == VEC_SELECT)
    goto L7052;
  goto ret0;

 L7052: __attribute__ ((__unused__))
  x6 = (((x5)->u.fld[0]).rtx);
  if (nonimmediate_operand (x6, V2SImode))
    {
      operands[1] = x6;
      goto L7053;
    }
  goto ret0;

 L7053: __attribute__ ((__unused__))
  x6 = (((x5)->u.fld[1]).rtx);
  if (((enum rtx_code) (x6)->code) == PARALLEL
      && (((((x6)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L7054;
  goto ret0;

 L7054: __attribute__ ((__unused__))
  x7 = (((((x6)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x7)->code) == CONST_INT
      && ((x7)->u.hwint[0]) == 0L)
    goto L7055;
  goto ret0;

 L7055: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == SIGN_EXTEND)
    goto L7056;
  goto ret0;

 L7056: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == HImode
      && ((enum rtx_code) (x4)->code) == TRUNCATE)
    goto L7057;
  goto ret0;

 L7057: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (((enum machine_mode) (x5)->mode) == SImode
      && ((enum rtx_code) (x5)->code) == VEC_SELECT)
    goto L7058;
  goto ret0;

 L7058: __attribute__ ((__unused__))
  x6 = (((x5)->u.fld[0]).rtx);
  if (rtx_equal_p (x6, operands[1]))
    goto L7059;
  goto ret0;

 L7059: __attribute__ ((__unused__))
  x6 = (((x5)->u.fld[1]).rtx);
  if (((enum rtx_code) (x6)->code) == PARALLEL
      && (((((x6)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L7060;
  goto ret0;

 L7060: __attribute__ ((__unused__))
  x7 = (((((x6)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x7)->code) == CONST_INT
      && ((x7)->u.hwint[0]) == 1L
      && (((target_flags & 0x00040000) != 0)))
    {
      return 667;
    }
  goto ret0;

 L7065: __attribute__ ((__unused__))
  if ((((target_flags & 0x00020000) != 0)))
    {
      return 668;
    }
  goto ret0;

 L10786: __attribute__ ((__unused__))
  switch ((((((x1)->u.fld[0]).rtvec))->num_elem))
    {
    case 1:
      goto L10799;
    case 2:
      goto L10800;
    default:
      break;
    }
  goto ret0;

 L10799: __attribute__ ((__unused__))
  switch ((((x1)->u.fld[1]).rtint))
    {
    case 50L:
      goto L7075;
    case 53L:
      goto L7092;
    default:
      break;
    }
  goto ret0;

 L7075: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (nonimmediate_operand (x2, V2SFmode))
    {
      operands[1] = x2;
      goto L7076;
    }
  goto ret0;

 L7076: __attribute__ ((__unused__))
  if ((((target_flags & 0x00020000) != 0)))
    {
      return 670;
    }
  goto ret0;

 L7092: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (nonimmediate_operand (x2, V2SFmode))
    {
      operands[1] = x2;
      goto L7093;
    }
  goto ret0;

 L7093: __attribute__ ((__unused__))
  if ((((target_flags & 0x00020000) != 0)))
    {
      return 673;
    }
  goto ret0;

 L10800: __attribute__ ((__unused__))
  switch ((((x1)->u.fld[1]).rtint))
    {
    case 51L:
      goto L7080;
    case 52L:
      goto L7086;
    case 54L:
      goto L7097;
    default:
      break;
    }
  goto ret0;

 L7080: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, V2SFmode))
    {
      operands[1] = x2;
      goto L7081;
    }
  goto ret0;

 L7081: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (nonimmediate_operand (x2, V2SFmode))
    {
      operands[2] = x2;
      goto L7082;
    }
  goto ret0;

 L7082: __attribute__ ((__unused__))
  if ((((target_flags & 0x00020000) != 0)))
    {
      return 671;
    }
  goto ret0;

 L7086: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, V2SFmode))
    {
      operands[1] = x2;
      goto L7087;
    }
  goto ret0;

 L7087: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (nonimmediate_operand (x2, V2SFmode))
    {
      operands[2] = x2;
      goto L7088;
    }
  goto ret0;

 L7088: __attribute__ ((__unused__))
  if ((((target_flags & 0x00020000) != 0)))
    {
      return 672;
    }
  goto ret0;

 L7097: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, V2SFmode))
    {
      operands[1] = x2;
      goto L7098;
    }
  goto ret0;

 L7098: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (nonimmediate_operand (x2, V2SFmode))
    {
      operands[2] = x2;
      goto L7099;
    }
  goto ret0;

 L7099: __attribute__ ((__unused__))
  if ((((target_flags & 0x00020000) != 0)))
    {
      return 674;
    }
  goto ret0;

 L7126: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, V2SFmode))
    {
      operands[1] = x2;
      goto L7127;
    }
  goto ret0;

 L7127: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == PARALLEL
      && (((((x2)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L7128;
  goto ret0;

 L7128: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 1L)
    goto L7129;
  goto ret0;

 L7129: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L
      && (((target_flags & 0x00040000) != 0)))
    {
      return 677;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_13 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((x0)->u.fld[1]).rtx);
  switch (((enum rtx_code) (x1)->code))
    {
    case PLUS:
      goto L7142;
    case VEC_MERGE:
      goto L7148;
    case MINUS:
      goto L7156;
    case MULT:
      goto L7170;
    case DIV:
      goto L7184;
    case SMAX:
      goto L7198;
    case SMIN:
      goto L7212;
    case SQRT:
      goto L7226;
    case FLOAT:
      goto L7346;
    case FLOAT_EXTEND:
      goto L7436;
    case VEC_CONCAT:
      goto L7897;
    case UNSPEC:
      goto L10826;
    default:
     break;
   }
  goto ret0;

 L7142: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2DFmode))
    {
      operands[1] = x2;
      goto L7143;
    }
  goto ret0;

 L7143: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2DFmode))
    {
      operands[2] = x2;
      goto L7144;
    }
  goto ret0;

 L7144: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 680;
    }
  goto ret0;

 L7148: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V2DFmode)
    goto L10827;
  goto ret0;

 L10827: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case PLUS:
      goto L7149;
    case MINUS:
      goto L7163;
    case MULT:
      goto L7177;
    case DIV:
      goto L7191;
    case SMAX:
      goto L7205;
    case SMIN:
      goto L7219;
    case SQRT:
      goto L7232;
    case VEC_DUPLICATE:
      goto L8198;
    case SUBREG:
    case REG:
    case ADDRESSOF:
      goto L10834;
    default:
      goto ret0;
   }
 L10834: __attribute__ ((__unused__))
  if (register_operand (x2, V2DFmode))
    {
      operands[1] = x2;
      goto L7400;
    }
  goto ret0;

 L7149: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2DFmode))
    {
      operands[1] = x3;
      goto L7150;
    }
  goto ret0;

 L7150: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, V2DFmode))
    {
      operands[2] = x3;
      goto L7151;
    }
  goto ret0;

 L7151: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L7152;
  goto ret0;

 L7152: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 681;
    }
  goto ret0;

 L7163: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2DFmode))
    {
      operands[1] = x3;
      goto L7164;
    }
  goto ret0;

 L7164: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, V2DFmode))
    {
      operands[2] = x3;
      goto L7165;
    }
  goto ret0;

 L7165: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L7166;
  goto ret0;

 L7166: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 683;
    }
  goto ret0;

 L7177: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2DFmode))
    {
      operands[1] = x3;
      goto L7178;
    }
  goto ret0;

 L7178: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, V2DFmode))
    {
      operands[2] = x3;
      goto L7179;
    }
  goto ret0;

 L7179: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L7180;
  goto ret0;

 L7180: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 685;
    }
  goto ret0;

 L7191: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2DFmode))
    {
      operands[1] = x3;
      goto L7192;
    }
  goto ret0;

 L7192: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, V2DFmode))
    {
      operands[2] = x3;
      goto L7193;
    }
  goto ret0;

 L7193: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L7194;
  goto ret0;

 L7194: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 687;
    }
  goto ret0;

 L7205: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2DFmode))
    {
      operands[1] = x3;
      goto L7206;
    }
  goto ret0;

 L7206: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, V2DFmode))
    {
      operands[2] = x3;
      goto L7207;
    }
  goto ret0;

 L7207: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L7208;
  goto ret0;

 L7208: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 689;
    }
  goto ret0;

 L7219: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2DFmode))
    {
      operands[1] = x3;
      goto L7220;
    }
  goto ret0;

 L7220: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, V2DFmode))
    {
      operands[2] = x3;
      goto L7221;
    }
  goto ret0;

 L7221: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L7222;
  goto ret0;

 L7222: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 691;
    }
  goto ret0;

 L7232: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2DFmode))
    {
      operands[1] = x3;
      goto L7233;
    }
  goto ret0;

 L7233: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, V2DFmode))
    {
      operands[2] = x2;
      goto L7234;
    }
  goto ret0;

 L7234: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 693;
    }
  goto ret0;

 L8198: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (memory_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L8199;
    }
  goto ret0;

 L8199: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const0_operand (x2, V2DFmode))
    {
      operands[2] = x2;
      goto L8200;
    }
  goto ret0;

 L8200: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 805;
    }
  goto ret0;

 L7400: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V2DFmode)
    goto L10836;
  goto ret0;

 L10836: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case VEC_DUPLICATE:
      goto L7401;
    case FLOAT_EXTEND:
      goto L7417;
    default:
     break;
   }
  goto ret0;

 L7401: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == DFmode
      && ((enum rtx_code) (x3)->code) == FLOAT)
    goto L7402;
  goto ret0;

 L7402: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, SImode))
    {
      operands[2] = x4;
      goto L7403;
    }
  goto ret0;

 L7403: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 2L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 718;
    }
  goto ret0;

 L7417: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == V2SFmode
      && ((enum rtx_code) (x3)->code) == VEC_SELECT)
    goto L7418;
  goto ret0;

 L7418: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, V4SFmode))
    {
      operands[2] = x4;
      goto L7419;
    }
  goto ret0;

 L7419: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == PARALLEL
      && (((((x4)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L7420;
  goto ret0;

 L7420: __attribute__ ((__unused__))
  x5 = (((((x4)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 0L)
    goto L7421;
  goto ret0;

 L7421: __attribute__ ((__unused__))
  x5 = (((((x4)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 1L)
    goto L7422;
  goto ret0;

 L7422: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 2L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 720;
    }
  goto ret0;

 L7156: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2DFmode))
    {
      operands[1] = x2;
      goto L7157;
    }
  goto ret0;

 L7157: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2DFmode))
    {
      operands[2] = x2;
      goto L7158;
    }
  goto ret0;

 L7158: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 682;
    }
  goto ret0;

 L7170: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2DFmode))
    {
      operands[1] = x2;
      goto L7171;
    }
  goto ret0;

 L7171: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2DFmode))
    {
      operands[2] = x2;
      goto L7172;
    }
  goto ret0;

 L7172: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 684;
    }
  goto ret0;

 L7184: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2DFmode))
    {
      operands[1] = x2;
      goto L7185;
    }
  goto ret0;

 L7185: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2DFmode))
    {
      operands[2] = x2;
      goto L7186;
    }
  goto ret0;

 L7186: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 686;
    }
  goto ret0;

 L7198: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2DFmode))
    {
      operands[1] = x2;
      goto L7199;
    }
  goto ret0;

 L7199: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2DFmode))
    {
      operands[2] = x2;
      goto L7200;
    }
  goto ret0;

 L7200: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 688;
    }
  goto ret0;

 L7212: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2DFmode))
    {
      operands[1] = x2;
      goto L7213;
    }
  goto ret0;

 L7213: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2DFmode))
    {
      operands[2] = x2;
      goto L7214;
    }
  goto ret0;

 L7214: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 690;
    }
  goto ret0;

 L7226: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2DFmode))
    {
      operands[1] = x2;
      goto L7227;
    }
  goto ret0;

 L7227: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 692;
    }
  goto ret0;

 L7346: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V2SImode)
    goto L10838;
  goto ret0;

 L10838: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L7347;
  if (nonimmediate_operand (x2, V2SImode))
    {
      operands[1] = x2;
      goto L7381;
    }
  goto ret0;

 L7347: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, V4SImode))
    {
      operands[1] = x3;
      goto L7348;
    }
  goto ret0;

 L7348: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L7349;
  goto ret0;

 L7349: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L7350;
  goto ret0;

 L7350: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 710;
    }
  goto ret0;

 L7381: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 715;
    }
  goto ret0;

 L7436: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V2SFmode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L7437;
  goto ret0;

 L7437: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, V4SFmode))
    {
      operands[1] = x3;
      goto L7438;
    }
  goto ret0;

 L7438: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L7439;
  goto ret0;

 L7439: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L7440;
  goto ret0;

 L7440: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 722;
    }
  goto ret0;

 L7897: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L7898;
  goto ret0;

 L7898: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2DFmode))
    {
      operands[1] = x3;
      goto L7899;
    }
  goto ret0;

 L7899: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L7900;
  goto ret0;

 L7900: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT)
    goto L10840;
  goto ret0;

 L10840: __attribute__ ((__unused__))
  if ((int) ((x4)->u.hwint[0]) == ((x4)->u.hwint[0]))
    switch ((int) ((x4)->u.hwint[0]))
      {
      case 1L:
        goto L7901;
      case 0L:
        goto L7912;
      default:
        break;
      }
  goto ret0;

 L7901: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L7902;
  goto ret0;

 L7902: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2DFmode))
    {
      operands[2] = x3;
      goto L7903;
    }
  goto ret0;

 L7903: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L7904;
  goto ret0;

 L7904: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 782;
    }
  goto ret0;

 L7912: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L7913;
  goto ret0;

 L7913: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2DFmode))
    {
      operands[2] = x3;
      goto L7914;
    }
  goto ret0;

 L7914: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L7915;
  goto ret0;

 L7915: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 783;
    }
  goto ret0;

 L10826: __attribute__ ((__unused__))
  if ((((((x1)->u.fld[0]).rtvec))->num_elem) == 3
      && (((x1)->u.fld[1]).rtint) == 41)
    goto L8216;
  goto ret0;

 L8216: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, V2DFmode))
    {
      operands[1] = x2;
      goto L8217;
    }
  goto ret0;

 L8217: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (nonimmediate_operand (x2, V2DFmode))
    {
      operands[2] = x2;
      goto L8218;
    }
  goto ret0;

 L8218: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[2]);
  if (immediate_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L8219;
    }
  goto ret0;

 L8219: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 808;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_14 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((x0)->u.fld[1]).rtx);
  switch (((enum rtx_code) (x1)->code))
    {
    case PLUS:
      goto L7444;
    case SS_PLUS:
      goto L7468;
    case US_PLUS:
      goto L7480;
    case MINUS:
      goto L7492;
    case SS_MINUS:
      goto L7516;
    case US_MINUS:
      goto L7528;
    case ASHIFTRT:
      goto L7634;
    case EQ:
      goto L7717;
    case GT:
      goto L7735;
    case UMAX:
      goto L7753;
    case UMIN:
      goto L7765;
    case VEC_CONCAT:
      goto L7919;
    case VEC_MERGE:
      goto L7943;
    default:
     break;
   }
  goto ret0;

 L7444: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V16QImode))
    {
      operands[1] = x2;
      goto L7445;
    }
  goto ret0;

 L7445: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V16QImode))
    {
      operands[2] = x2;
      goto L7446;
    }
  goto ret0;

 L7446: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 723;
    }
  goto ret0;

 L7468: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V16QImode))
    {
      operands[1] = x2;
      goto L7469;
    }
  goto ret0;

 L7469: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V16QImode))
    {
      operands[2] = x2;
      goto L7470;
    }
  goto ret0;

 L7470: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 727;
    }
  goto ret0;

 L7480: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V16QImode))
    {
      operands[1] = x2;
      goto L7481;
    }
  goto ret0;

 L7481: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V16QImode))
    {
      operands[2] = x2;
      goto L7482;
    }
  goto ret0;

 L7482: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 729;
    }
  goto ret0;

 L7492: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V16QImode))
    {
      operands[1] = x2;
      goto L7493;
    }
  goto ret0;

 L7493: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V16QImode))
    {
      operands[2] = x2;
      goto L7494;
    }
  goto ret0;

 L7494: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 731;
    }
  goto ret0;

 L7516: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V16QImode))
    {
      operands[1] = x2;
      goto L7517;
    }
  goto ret0;

 L7517: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V16QImode))
    {
      operands[2] = x2;
      goto L7518;
    }
  goto ret0;

 L7518: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 735;
    }
  goto ret0;

 L7528: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V16QImode))
    {
      operands[1] = x2;
      goto L7529;
    }
  goto ret0;

 L7529: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V16QImode))
    {
      operands[2] = x2;
      goto L7530;
    }
  goto ret0;

 L7530: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 737;
    }
  goto ret0;

 L7634: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V16QImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L7635;
  goto ret0;

 L7635: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == V16QImode
      && ((enum rtx_code) (x3)->code) == PLUS)
    goto L7636;
  goto ret0;

 L7636: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, V16QImode))
    {
      operands[1] = x4;
      goto L7637;
    }
  goto ret0;

 L7637: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, V16QImode))
    {
      operands[2] = x4;
      goto L7638;
    }
  goto ret0;

 L7638: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == V16QImode
      && ((enum rtx_code) (x3)->code) == CONST_VECTOR
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 16)
    goto L7639;
  goto ret0;

 L7639: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7640;
  goto ret0;

 L7640: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7641;
  goto ret0;

 L7641: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7642;
  goto ret0;

 L7642: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7643;
  goto ret0;

 L7643: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7644;
  goto ret0;

 L7644: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7645;
  goto ret0;

 L7645: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[6]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7646;
  goto ret0;

 L7646: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[7]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7647;
  goto ret0;

 L7647: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[8]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7648;
  goto ret0;

 L7648: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[9]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7649;
  goto ret0;

 L7649: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[10]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7650;
  goto ret0;

 L7650: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[11]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7651;
  goto ret0;

 L7651: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[12]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7652;
  goto ret0;

 L7652: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[13]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7653;
  goto ret0;

 L7653: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[14]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7654;
  goto ret0;

 L7654: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[15]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7655;
  goto ret0;

 L7655: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 746;
    }
  goto ret0;

 L7717: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V16QImode))
    {
      operands[1] = x2;
      goto L7718;
    }
  goto ret0;

 L7718: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V16QImode))
    {
      operands[2] = x2;
      goto L7719;
    }
  goto ret0;

 L7719: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 754;
    }
  goto ret0;

 L7735: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V16QImode))
    {
      operands[1] = x2;
      goto L7736;
    }
  goto ret0;

 L7736: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V16QImode))
    {
      operands[2] = x2;
      goto L7737;
    }
  goto ret0;

 L7737: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 757;
    }
  goto ret0;

 L7753: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V16QImode))
    {
      operands[1] = x2;
      goto L7754;
    }
  goto ret0;

 L7754: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V16QImode))
    {
      operands[2] = x2;
      goto L7755;
    }
  goto ret0;

 L7755: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 760;
    }
  goto ret0;

 L7765: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V16QImode))
    {
      operands[1] = x2;
      goto L7766;
    }
  goto ret0;

 L7766: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V16QImode))
    {
      operands[2] = x2;
      goto L7767;
    }
  goto ret0;

 L7767: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 762;
    }
  goto ret0;

 L7919: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V8QImode)
    goto L10895;
  goto ret0;

 L10895: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case SS_TRUNCATE:
      goto L7920;
    case US_TRUNCATE:
      goto L7936;
    default:
     break;
   }
  goto ret0;

 L7920: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V8HImode))
    {
      operands[1] = x3;
      goto L7921;
    }
  goto ret0;

 L7921: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V8QImode
      && ((enum rtx_code) (x2)->code) == SS_TRUNCATE)
    goto L7922;
  goto ret0;

 L7922: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V8HImode))
    {
      operands[2] = x3;
      goto L7923;
    }
  goto ret0;

 L7923: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 784;
    }
  goto ret0;

 L7936: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V8HImode))
    {
      operands[1] = x3;
      goto L7937;
    }
  goto ret0;

 L7937: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V8QImode
      && ((enum rtx_code) (x2)->code) == US_TRUNCATE)
    goto L7938;
  goto ret0;

 L7938: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V8HImode))
    {
      operands[2] = x3;
      goto L7939;
    }
  goto ret0;

 L7939: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 786;
    }
  goto ret0;

 L7943: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V16QImode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L7944;
  goto ret0;

 L7944: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V16QImode))
    {
      operands[1] = x3;
      goto L7945;
    }
  goto ret0;

 L7945: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 16)
    goto L7946;
  goto ret0;

 L7946: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT)
    goto L10897;
  goto ret0;

 L10897: __attribute__ ((__unused__))
  if ((int) ((x4)->u.hwint[0]) == ((x4)->u.hwint[0]))
    switch ((int) ((x4)->u.hwint[0]))
      {
      case 8L:
        goto L7947;
      case 0L:
        goto L8033;
      default:
        break;
      }
  goto ret0;

 L7947: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L7948;
  goto ret0;

 L7948: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 9L)
    goto L7949;
  goto ret0;

 L7949: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7950;
  goto ret0;

 L7950: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 10L)
    goto L7951;
  goto ret0;

 L7951: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L7952;
  goto ret0;

 L7952: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[6]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 11L)
    goto L7953;
  goto ret0;

 L7953: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[7]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L7954;
  goto ret0;

 L7954: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[8]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 12L)
    goto L7955;
  goto ret0;

 L7955: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[9]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 4L)
    goto L7956;
  goto ret0;

 L7956: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[10]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 13L)
    goto L7957;
  goto ret0;

 L7957: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[11]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 5L)
    goto L7958;
  goto ret0;

 L7958: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[12]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 14L)
    goto L7959;
  goto ret0;

 L7959: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[13]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 6L)
    goto L7960;
  goto ret0;

 L7960: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[14]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 15L)
    goto L7961;
  goto ret0;

 L7961: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[15]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 7L)
    goto L7962;
  goto ret0;

 L7962: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V16QImode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L7963;
  goto ret0;

 L7963: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V16QImode))
    {
      operands[2] = x3;
      goto L7964;
    }
  goto ret0;

 L7964: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 16)
    goto L7965;
  goto ret0;

 L7965: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L7966;
  goto ret0;

 L7966: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L7967;
  goto ret0;

 L7967: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7968;
  goto ret0;

 L7968: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 9L)
    goto L7969;
  goto ret0;

 L7969: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L7970;
  goto ret0;

 L7970: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 10L)
    goto L7971;
  goto ret0;

 L7971: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[6]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L7972;
  goto ret0;

 L7972: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[7]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 11L)
    goto L7973;
  goto ret0;

 L7973: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[8]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 4L)
    goto L7974;
  goto ret0;

 L7974: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[9]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 12L)
    goto L7975;
  goto ret0;

 L7975: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[10]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 5L)
    goto L7976;
  goto ret0;

 L7976: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[11]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 13L)
    goto L7977;
  goto ret0;

 L7977: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[12]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 6L)
    goto L7978;
  goto ret0;

 L7978: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[13]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 14L)
    goto L7979;
  goto ret0;

 L7979: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[14]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 7L)
    goto L7980;
  goto ret0;

 L7980: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[15]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 15L)
    goto L7981;
  goto ret0;

 L7981: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 21845L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 787;
    }
  goto ret0;

 L8033: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L8034;
  goto ret0;

 L8034: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L8035;
  goto ret0;

 L8035: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 9L)
    goto L8036;
  goto ret0;

 L8036: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L8037;
  goto ret0;

 L8037: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 10L)
    goto L8038;
  goto ret0;

 L8038: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[6]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L8039;
  goto ret0;

 L8039: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[7]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 11L)
    goto L8040;
  goto ret0;

 L8040: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[8]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 4L)
    goto L8041;
  goto ret0;

 L8041: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[9]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 12L)
    goto L8042;
  goto ret0;

 L8042: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[10]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 5L)
    goto L8043;
  goto ret0;

 L8043: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[11]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 13L)
    goto L8044;
  goto ret0;

 L8044: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[12]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 6L)
    goto L8045;
  goto ret0;

 L8045: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[13]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 14L)
    goto L8046;
  goto ret0;

 L8046: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[14]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 7L)
    goto L8047;
  goto ret0;

 L8047: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[15]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 15L)
    goto L8048;
  goto ret0;

 L8048: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V16QImode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L8049;
  goto ret0;

 L8049: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V16QImode))
    {
      operands[2] = x3;
      goto L8050;
    }
  goto ret0;

 L8050: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 16)
    goto L8051;
  goto ret0;

 L8051: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L8052;
  goto ret0;

 L8052: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L8053;
  goto ret0;

 L8053: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 9L)
    goto L8054;
  goto ret0;

 L8054: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L8055;
  goto ret0;

 L8055: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 10L)
    goto L8056;
  goto ret0;

 L8056: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L8057;
  goto ret0;

 L8057: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[6]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 11L)
    goto L8058;
  goto ret0;

 L8058: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[7]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L8059;
  goto ret0;

 L8059: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[8]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 12L)
    goto L8060;
  goto ret0;

 L8060: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[9]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 4L)
    goto L8061;
  goto ret0;

 L8061: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[10]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 13L)
    goto L8062;
  goto ret0;

 L8062: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[11]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 5L)
    goto L8063;
  goto ret0;

 L8063: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[12]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 14L)
    goto L8064;
  goto ret0;

 L8064: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[13]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 6L)
    goto L8065;
  goto ret0;

 L8065: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[14]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 15L)
    goto L8066;
  goto ret0;

 L8066: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[15]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 7L)
    goto L8067;
  goto ret0;

 L8067: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 21845L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 790;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_15 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((x0)->u.fld[1]).rtx);
  switch (((enum rtx_code) (x1)->code))
    {
    case FIX:
      goto L7336;
    case UNSPEC:
      goto L10921;
    case VEC_CONCAT:
      goto L7354;
    case PLUS:
      goto L7456;
    case MINUS:
      goto L7504;
    case EQ:
      goto L7729;
    case GT:
      goto L7747;
    case ASHIFTRT:
      goto L7783;
    case LSHIFTRT:
      goto L7795;
    case ASHIFT:
      goto L7813;
    case VEC_MERGE:
      goto L8011;
    default:
     break;
   }
  goto ret0;

 L7336: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L7337;
    }
  goto ret0;

 L7337: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 708;
    }
  goto ret0;

 L10921: __attribute__ ((__unused__))
  switch ((((((x1)->u.fld[0]).rtvec))->num_elem))
    {
    case 1:
      goto L10923;
    case 2:
      goto L10924;
    default:
      break;
    }
  goto ret0;

 L10923: __attribute__ ((__unused__))
  if ((((x1)->u.fld[1]).rtint) == 30)
    goto L7341;
  goto ret0;

 L7341: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L7342;
    }
  goto ret0;

 L7342: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 709;
    }
  goto ret0;

 L10924: __attribute__ ((__unused__))
  if ((((x1)->u.fld[1]).rtint) == 41)
    goto L7699;
  goto ret0;

 L7699: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, V4SImode))
    {
      operands[1] = x2;
      goto L7700;
    }
  goto ret0;

 L7700: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (immediate_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L7701;
    }
  goto ret0;

 L7701: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 751;
    }
  goto ret0;

 L7354: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V2SImode)
    goto L10925;
  goto ret0;

 L10925: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case FIX:
      goto L7355;
    case UNSPEC:
      goto L10927;
    default:
     break;
   }
  goto ret0;

 L7355: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, V2DFmode))
    {
      operands[1] = x3;
      goto L7356;
    }
  goto ret0;

 L7356: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V2SImode
      && ((enum rtx_code) (x2)->code) == CONST_VECTOR
      && (((((x2)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L7357;
  goto ret0;

 L7357: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L7358;
  goto ret0;

 L7358: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 711;
    }
  goto ret0;

 L10927: __attribute__ ((__unused__))
  if ((((((x2)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x2)->u.fld[1]).rtint) == 30)
    goto L7363;
  goto ret0;

 L7363: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (nonimmediate_operand (x3, V2DFmode))
    {
      operands[1] = x3;
      goto L7364;
    }
  goto ret0;

 L7364: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V2SImode
      && ((enum rtx_code) (x2)->code) == CONST_VECTOR
      && (((((x2)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L7365;
  goto ret0;

 L7365: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L7366;
  goto ret0;

 L7366: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 712;
    }
  goto ret0;

 L7456: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4SImode)
    goto L10929;
  goto ret0;

 L10929: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == MULT)
    goto L7595;
  if (register_operand (x2, V4SImode))
    {
      operands[1] = x2;
      goto L7457;
    }
  goto ret0;

 L7595: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == V4SImode
      && ((enum rtx_code) (x3)->code) == SIGN_EXTEND)
    goto L7596;
  goto ret0;

 L7596: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == V4HImode
      && ((enum rtx_code) (x4)->code) == VEC_SELECT)
    goto L7597;
  goto ret0;

 L7597: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (register_operand (x5, V8HImode))
    {
      operands[1] = x5;
      goto L7598;
    }
  goto ret0;

 L7598: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[1]).rtx);
  if (((enum rtx_code) (x5)->code) == PARALLEL
      && (((((x5)->u.fld[0]).rtvec))->num_elem) == 4)
    goto L7599;
  goto ret0;

 L7599: __attribute__ ((__unused__))
  x6 = (((((x5)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x6)->code) == CONST_INT
      && ((x6)->u.hwint[0]) == 0L)
    goto L7600;
  goto ret0;

 L7600: __attribute__ ((__unused__))
  x6 = (((((x5)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x6)->code) == CONST_INT
      && ((x6)->u.hwint[0]) == 2L)
    goto L7601;
  goto ret0;

 L7601: __attribute__ ((__unused__))
  x6 = (((((x5)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x6)->code) == CONST_INT
      && ((x6)->u.hwint[0]) == 4L)
    goto L7602;
  goto ret0;

 L7602: __attribute__ ((__unused__))
  x6 = (((((x5)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x6)->code) == CONST_INT
      && ((x6)->u.hwint[0]) == 6L)
    goto L7603;
  goto ret0;

 L7603: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == V4SImode
      && ((enum rtx_code) (x3)->code) == SIGN_EXTEND)
    goto L7604;
  goto ret0;

 L7604: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == V4HImode
      && ((enum rtx_code) (x4)->code) == VEC_SELECT)
    goto L7605;
  goto ret0;

 L7605: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (nonimmediate_operand (x5, V8HImode))
    {
      operands[2] = x5;
      goto L7606;
    }
  goto ret0;

 L7606: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[1]).rtx);
  if (((enum rtx_code) (x5)->code) == PARALLEL
      && (((((x5)->u.fld[0]).rtvec))->num_elem) == 4)
    goto L7607;
  goto ret0;

 L7607: __attribute__ ((__unused__))
  x6 = (((((x5)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x6)->code) == CONST_INT
      && ((x6)->u.hwint[0]) == 0L)
    goto L7608;
  goto ret0;

 L7608: __attribute__ ((__unused__))
  x6 = (((((x5)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x6)->code) == CONST_INT
      && ((x6)->u.hwint[0]) == 2L)
    goto L7609;
  goto ret0;

 L7609: __attribute__ ((__unused__))
  x6 = (((((x5)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x6)->code) == CONST_INT
      && ((x6)->u.hwint[0]) == 4L)
    goto L7610;
  goto ret0;

 L7610: __attribute__ ((__unused__))
  x6 = (((((x5)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x6)->code) == CONST_INT
      && ((x6)->u.hwint[0]) == 6L)
    goto L7611;
  goto ret0;

 L7611: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4SImode
      && ((enum rtx_code) (x2)->code) == MULT)
    goto L7612;
  goto ret0;

 L7612: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == V4SImode
      && ((enum rtx_code) (x3)->code) == SIGN_EXTEND)
    goto L7613;
  goto ret0;

 L7613: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == V4HImode
      && ((enum rtx_code) (x4)->code) == VEC_SELECT)
    goto L7614;
  goto ret0;

 L7614: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (rtx_equal_p (x5, operands[1]))
    goto L7615;
  goto ret0;

 L7615: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[1]).rtx);
  if (((enum rtx_code) (x5)->code) == PARALLEL
      && (((((x5)->u.fld[0]).rtvec))->num_elem) == 4)
    goto L7616;
  goto ret0;

 L7616: __attribute__ ((__unused__))
  x6 = (((((x5)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x6)->code) == CONST_INT
      && ((x6)->u.hwint[0]) == 1L)
    goto L7617;
  goto ret0;

 L7617: __attribute__ ((__unused__))
  x6 = (((((x5)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x6)->code) == CONST_INT
      && ((x6)->u.hwint[0]) == 3L)
    goto L7618;
  goto ret0;

 L7618: __attribute__ ((__unused__))
  x6 = (((((x5)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x6)->code) == CONST_INT
      && ((x6)->u.hwint[0]) == 5L)
    goto L7619;
  goto ret0;

 L7619: __attribute__ ((__unused__))
  x6 = (((((x5)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x6)->code) == CONST_INT
      && ((x6)->u.hwint[0]) == 7L)
    goto L7620;
  goto ret0;

 L7620: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == V4SImode
      && ((enum rtx_code) (x3)->code) == SIGN_EXTEND)
    goto L7621;
  goto ret0;

 L7621: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == V4HImode
      && ((enum rtx_code) (x4)->code) == VEC_SELECT)
    goto L7622;
  goto ret0;

 L7622: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (rtx_equal_p (x5, operands[2]))
    goto L7623;
  goto ret0;

 L7623: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[1]).rtx);
  if (((enum rtx_code) (x5)->code) == PARALLEL
      && (((((x5)->u.fld[0]).rtvec))->num_elem) == 4)
    goto L7624;
  goto ret0;

 L7624: __attribute__ ((__unused__))
  x6 = (((((x5)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x6)->code) == CONST_INT
      && ((x6)->u.hwint[0]) == 1L)
    goto L7625;
  goto ret0;

 L7625: __attribute__ ((__unused__))
  x6 = (((((x5)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x6)->code) == CONST_INT
      && ((x6)->u.hwint[0]) == 3L)
    goto L7626;
  goto ret0;

 L7626: __attribute__ ((__unused__))
  x6 = (((((x5)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x6)->code) == CONST_INT
      && ((x6)->u.hwint[0]) == 5L)
    goto L7627;
  goto ret0;

 L7627: __attribute__ ((__unused__))
  x6 = (((((x5)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x6)->code) == CONST_INT
      && ((x6)->u.hwint[0]) == 7L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 744;
    }
  goto ret0;

 L7457: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V4SImode))
    {
      operands[2] = x2;
      goto L7458;
    }
  goto ret0;

 L7458: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 725;
    }
  goto ret0;

 L7504: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4SImode))
    {
      operands[1] = x2;
      goto L7505;
    }
  goto ret0;

 L7505: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V4SImode))
    {
      operands[2] = x2;
      goto L7506;
    }
  goto ret0;

 L7506: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 733;
    }
  goto ret0;

 L7729: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4SImode))
    {
      operands[1] = x2;
      goto L7730;
    }
  goto ret0;

 L7730: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V4SImode))
    {
      operands[2] = x2;
      goto L7731;
    }
  goto ret0;

 L7731: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 756;
    }
  goto ret0;

 L7747: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4SImode))
    {
      operands[1] = x2;
      goto L7748;
    }
  goto ret0;

 L7748: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V4SImode))
    {
      operands[2] = x2;
      goto L7749;
    }
  goto ret0;

 L7749: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 759;
    }
  goto ret0;

 L7783: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4SImode))
    {
      operands[1] = x2;
      goto L7784;
    }
  goto ret0;

 L7784: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonmemory_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L7785;
    }
 L7833: __attribute__ ((__unused__))
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == SUBREG
      && (((x2)->u.fld[1]).rtint) == 0)
    goto L7834;
  goto ret0;

 L7785: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 765;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L7833;

 L7834: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonmemory_operand (x3, V2DImode))
    {
      operands[2] = x3;
      goto L7835;
    }
  goto ret0;

 L7835: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 773;
    }
  goto ret0;

 L7795: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4SImode))
    {
      operands[1] = x2;
      goto L7796;
    }
  goto ret0;

 L7796: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonmemory_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L7797;
    }
 L7847: __attribute__ ((__unused__))
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == SUBREG
      && (((x2)->u.fld[1]).rtint) == 0)
    goto L7848;
  goto ret0;

 L7797: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 767;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L7847;

 L7848: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonmemory_operand (x3, V2DImode))
    {
      operands[2] = x3;
      goto L7849;
    }
  goto ret0;

 L7849: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 775;
    }
  goto ret0;

 L7813: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4SImode))
    {
      operands[1] = x2;
      goto L7814;
    }
  goto ret0;

 L7814: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonmemory_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L7815;
    }
 L7868: __attribute__ ((__unused__))
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == SUBREG
      && (((x2)->u.fld[1]).rtint) == 0)
    goto L7869;
  goto ret0;

 L7815: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 770;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L7868;

 L7869: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonmemory_operand (x3, V2DImode))
    {
      operands[2] = x3;
      goto L7870;
    }
  goto ret0;

 L7870: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 778;
    }
  goto ret0;

 L8011: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4SImode)
    goto L10930;
  goto ret0;

 L10930: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case VEC_SELECT:
      goto L8012;
    case VEC_DUPLICATE:
      goto L8175;
    default:
     break;
   }
  goto ret0;

 L8012: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4SImode))
    {
      operands[1] = x3;
      goto L8013;
    }
  goto ret0;

 L8013: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 4)
    goto L8014;
  goto ret0;

 L8014: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT)
    goto L10932;
  goto ret0;

 L10932: __attribute__ ((__unused__))
  if ((int) ((x4)->u.hwint[0]) == ((x4)->u.hwint[0]))
    switch ((int) ((x4)->u.hwint[0]))
      {
      case 2L:
        goto L8015;
      case 0L:
        goto L8101;
      default:
        break;
      }
  goto ret0;

 L8015: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L8016;
  goto ret0;

 L8016: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L8017;
  goto ret0;

 L8017: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L8018;
  goto ret0;

 L8018: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4SImode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L8019;
  goto ret0;

 L8019: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4SImode))
    {
      operands[2] = x3;
      goto L8020;
    }
  goto ret0;

 L8020: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 4)
    goto L8021;
  goto ret0;

 L8021: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L8022;
  goto ret0;

 L8022: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L8023;
  goto ret0;

 L8023: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L8024;
  goto ret0;

 L8024: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L8025;
  goto ret0;

 L8025: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 5L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 789;
    }
  goto ret0;

 L8101: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L8102;
  goto ret0;

 L8102: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L8103;
  goto ret0;

 L8103: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L8104;
  goto ret0;

 L8104: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4SImode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L8105;
  goto ret0;

 L8105: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4SImode))
    {
      operands[2] = x3;
      goto L8106;
    }
  goto ret0;

 L8106: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 4)
    goto L8107;
  goto ret0;

 L8107: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L8108;
  goto ret0;

 L8108: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L8109;
  goto ret0;

 L8109: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L8110;
  goto ret0;

 L8110: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L8111;
  goto ret0;

 L8111: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 5L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 792;
    }
  goto ret0;

 L8175: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L8176;
    }
  goto ret0;

 L8176: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4SImode
      && ((enum rtx_code) (x2)->code) == CONST_VECTOR
      && (((((x2)->u.fld[0]).rtvec))->num_elem) == 4)
    goto L8177;
  goto ret0;

 L8177: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L8178;
  goto ret0;

 L8178: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L8179;
  goto ret0;

 L8179: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L8180;
  goto ret0;

 L8180: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L8181;
  goto ret0;

 L8181: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 802;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_16 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((x0)->u.fld[1]).rtx);
  switch (((enum rtx_code) (x1)->code))
    {
    case PLUS:
      goto L7450;
    case SS_PLUS:
      goto L7474;
    case US_PLUS:
      goto L7486;
    case MINUS:
      goto L7498;
    case SS_MINUS:
      goto L7522;
    case US_MINUS:
      goto L7534;
    case MULT:
      goto L7540;
    case TRUNCATE:
      goto L7546;
    case ASHIFTRT:
      goto L7659;
    case VEC_MERGE:
      goto L7682;
    case UNSPEC:
      goto L10953;
    case EQ:
      goto L7723;
    case GT:
      goto L7741;
    case SMAX:
      goto L7759;
    case SMIN:
      goto L7771;
    case LSHIFTRT:
      goto L7789;
    case ASHIFT:
      goto L7807;
    case VEC_CONCAT:
      goto L7927;
    default:
     break;
   }
  goto ret0;

 L7450: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V8HImode))
    {
      operands[1] = x2;
      goto L7451;
    }
  goto ret0;

 L7451: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V8HImode))
    {
      operands[2] = x2;
      goto L7452;
    }
  goto ret0;

 L7452: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 724;
    }
  goto ret0;

 L7474: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V8HImode))
    {
      operands[1] = x2;
      goto L7475;
    }
  goto ret0;

 L7475: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V8HImode))
    {
      operands[2] = x2;
      goto L7476;
    }
  goto ret0;

 L7476: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 728;
    }
  goto ret0;

 L7486: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V8HImode))
    {
      operands[1] = x2;
      goto L7487;
    }
  goto ret0;

 L7487: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V8HImode))
    {
      operands[2] = x2;
      goto L7488;
    }
  goto ret0;

 L7488: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 730;
    }
  goto ret0;

 L7498: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V8HImode))
    {
      operands[1] = x2;
      goto L7499;
    }
  goto ret0;

 L7499: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V8HImode))
    {
      operands[2] = x2;
      goto L7500;
    }
  goto ret0;

 L7500: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 732;
    }
  goto ret0;

 L7522: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V8HImode))
    {
      operands[1] = x2;
      goto L7523;
    }
  goto ret0;

 L7523: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V8HImode))
    {
      operands[2] = x2;
      goto L7524;
    }
  goto ret0;

 L7524: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 736;
    }
  goto ret0;

 L7534: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V8HImode))
    {
      operands[1] = x2;
      goto L7535;
    }
  goto ret0;

 L7535: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V8HImode))
    {
      operands[2] = x2;
      goto L7536;
    }
  goto ret0;

 L7536: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 738;
    }
  goto ret0;

 L7540: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V8HImode))
    {
      operands[1] = x2;
      goto L7541;
    }
  goto ret0;

 L7541: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V8HImode))
    {
      operands[2] = x2;
      goto L7542;
    }
  goto ret0;

 L7542: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 739;
    }
  goto ret0;

 L7546: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V8SImode
      && ((enum rtx_code) (x2)->code) == LSHIFTRT)
    goto L7547;
  goto ret0;

 L7547: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == V8SImode
      && ((enum rtx_code) (x3)->code) == MULT)
    goto L7548;
  goto ret0;

 L7548: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == V8SImode)
    goto L10955;
  goto ret0;

 L10955: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x4)->code))
    {
    case SIGN_EXTEND:
      goto L7549;
    case ZERO_EXTEND:
      goto L7559;
    default:
     break;
   }
  goto ret0;

 L7549: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (register_operand (x5, V8HImode))
    {
      operands[1] = x5;
      goto L7550;
    }
  goto ret0;

 L7550: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum machine_mode) (x4)->mode) == V8SImode
      && ((enum rtx_code) (x4)->code) == SIGN_EXTEND)
    goto L7551;
  goto ret0;

 L7551: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (nonimmediate_operand (x5, V8HImode))
    {
      operands[2] = x5;
      goto L7552;
    }
  goto ret0;

 L7552: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 16L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 740;
    }
  goto ret0;

 L7559: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (register_operand (x5, V8HImode))
    {
      operands[1] = x5;
      goto L7560;
    }
  goto ret0;

 L7560: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum machine_mode) (x4)->mode) == V8SImode
      && ((enum rtx_code) (x4)->code) == ZERO_EXTEND)
    goto L7561;
  goto ret0;

 L7561: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (nonimmediate_operand (x5, V8HImode))
    {
      operands[2] = x5;
      goto L7562;
    }
  goto ret0;

 L7562: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 16L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 741;
    }
  goto ret0;

 L7659: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V8HImode)
    goto L10957;
  goto ret0;

 L10957: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == PLUS)
    goto L7660;
  if (register_operand (x2, V8HImode))
    {
      operands[1] = x2;
      goto L7778;
    }
  goto ret0;

 L7660: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == V8HImode
      && ((enum rtx_code) (x3)->code) == PLUS)
    goto L7661;
  goto ret0;

 L7661: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, V8HImode))
    {
      operands[1] = x4;
      goto L7662;
    }
  goto ret0;

 L7662: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, V8HImode))
    {
      operands[2] = x4;
      goto L7663;
    }
  goto ret0;

 L7663: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == V8HImode
      && ((enum rtx_code) (x3)->code) == CONST_VECTOR
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 8)
    goto L7664;
  goto ret0;

 L7664: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7665;
  goto ret0;

 L7665: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7666;
  goto ret0;

 L7666: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7667;
  goto ret0;

 L7667: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7668;
  goto ret0;

 L7668: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7669;
  goto ret0;

 L7669: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7670;
  goto ret0;

 L7670: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[6]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7671;
  goto ret0;

 L7671: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[7]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7672;
  goto ret0;

 L7672: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 747;
    }
  goto ret0;

 L7778: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonmemory_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L7779;
    }
 L7826: __attribute__ ((__unused__))
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == SUBREG
      && (((x2)->u.fld[1]).rtint) == 0)
    goto L7827;
  goto ret0;

 L7779: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 764;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L7826;

 L7827: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonmemory_operand (x3, V2DImode))
    {
      operands[2] = x3;
      goto L7828;
    }
  goto ret0;

 L7828: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 772;
    }
  goto ret0;

 L7682: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V8HImode)
    goto L10960;
  goto ret0;

 L10960: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L7986;
  if (register_operand (x2, V8HImode))
    {
      operands[1] = x2;
      goto L7683;
    }
  goto ret0;

 L7986: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V8HImode))
    {
      operands[1] = x3;
      goto L7987;
    }
  goto ret0;

 L7987: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 8)
    goto L7988;
  goto ret0;

 L7988: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT)
    goto L10961;
  goto ret0;

 L10961: __attribute__ ((__unused__))
  if ((int) ((x4)->u.hwint[0]) == ((x4)->u.hwint[0]))
    switch ((int) ((x4)->u.hwint[0]))
      {
      case 4L:
        goto L7989;
      case 0L:
        goto L8075;
      default:
        break;
      }
  goto ret0;

 L7989: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L7990;
  goto ret0;

 L7990: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 5L)
    goto L7991;
  goto ret0;

 L7991: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L7992;
  goto ret0;

 L7992: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 6L)
    goto L7993;
  goto ret0;

 L7993: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L7994;
  goto ret0;

 L7994: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[6]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 7L)
    goto L7995;
  goto ret0;

 L7995: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[7]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L7996;
  goto ret0;

 L7996: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V8HImode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L7997;
  goto ret0;

 L7997: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V8HImode))
    {
      operands[2] = x3;
      goto L7998;
    }
  goto ret0;

 L7998: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 8)
    goto L7999;
  goto ret0;

 L7999: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L8000;
  goto ret0;

 L8000: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 4L)
    goto L8001;
  goto ret0;

 L8001: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L8002;
  goto ret0;

 L8002: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 5L)
    goto L8003;
  goto ret0;

 L8003: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L8004;
  goto ret0;

 L8004: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 6L)
    goto L8005;
  goto ret0;

 L8005: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[6]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L8006;
  goto ret0;

 L8006: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[7]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 7L)
    goto L8007;
  goto ret0;

 L8007: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 85L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 788;
    }
  goto ret0;

 L8075: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 4L)
    goto L8076;
  goto ret0;

 L8076: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L8077;
  goto ret0;

 L8077: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 5L)
    goto L8078;
  goto ret0;

 L8078: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L8079;
  goto ret0;

 L8079: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 6L)
    goto L8080;
  goto ret0;

 L8080: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[6]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L8081;
  goto ret0;

 L8081: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[7]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 7L)
    goto L8082;
  goto ret0;

 L8082: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V8HImode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L8083;
  goto ret0;

 L8083: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V8HImode))
    {
      operands[2] = x3;
      goto L8084;
    }
  goto ret0;

 L8084: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 8)
    goto L8085;
  goto ret0;

 L8085: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 4L)
    goto L8086;
  goto ret0;

 L8086: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L8087;
  goto ret0;

 L8087: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 5L)
    goto L8088;
  goto ret0;

 L8088: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L8089;
  goto ret0;

 L8089: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 6L)
    goto L8090;
  goto ret0;

 L8090: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L8091;
  goto ret0;

 L8091: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[6]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 7L)
    goto L8092;
  goto ret0;

 L8092: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[7]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 3L)
    goto L8093;
  goto ret0;

 L8093: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 85L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 791;
    }
  goto ret0;

 L7683: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V8HImode
      && ((enum rtx_code) (x2)->code) == VEC_DUPLICATE)
    goto L7684;
  goto ret0;

 L7684: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == HImode
      && ((enum rtx_code) (x3)->code) == TRUNCATE)
    goto L7685;
  goto ret0;

 L7685: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, SImode))
    {
      operands[2] = x4;
      goto L7686;
    }
  goto ret0;

 L7686: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (const_0_to_255_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L7687;
    }
  goto ret0;

 L7687: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 749;
    }
  goto ret0;

 L10953: __attribute__ ((__unused__))
  if ((((((x1)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L10963;
  goto ret0;

 L10963: __attribute__ ((__unused__))
  switch ((((x1)->u.fld[1]).rtint))
    {
    case 55L:
      goto L7705;
    case 56L:
      goto L7711;
    default:
      break;
    }
  goto ret0;

 L7705: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, V8HImode))
    {
      operands[1] = x2;
      goto L7706;
    }
  goto ret0;

 L7706: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (immediate_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L7707;
    }
  goto ret0;

 L7707: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 752;
    }
  goto ret0;

 L7711: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, V8HImode))
    {
      operands[1] = x2;
      goto L7712;
    }
  goto ret0;

 L7712: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (immediate_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L7713;
    }
  goto ret0;

 L7713: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 753;
    }
  goto ret0;

 L7723: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V8HImode))
    {
      operands[1] = x2;
      goto L7724;
    }
  goto ret0;

 L7724: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V8HImode))
    {
      operands[2] = x2;
      goto L7725;
    }
  goto ret0;

 L7725: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 755;
    }
  goto ret0;

 L7741: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V8HImode))
    {
      operands[1] = x2;
      goto L7742;
    }
  goto ret0;

 L7742: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V8HImode))
    {
      operands[2] = x2;
      goto L7743;
    }
  goto ret0;

 L7743: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 758;
    }
  goto ret0;

 L7759: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V8HImode))
    {
      operands[1] = x2;
      goto L7760;
    }
  goto ret0;

 L7760: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V8HImode))
    {
      operands[2] = x2;
      goto L7761;
    }
  goto ret0;

 L7761: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 761;
    }
  goto ret0;

 L7771: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V8HImode))
    {
      operands[1] = x2;
      goto L7772;
    }
  goto ret0;

 L7772: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V8HImode))
    {
      operands[2] = x2;
      goto L7773;
    }
  goto ret0;

 L7773: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 763;
    }
  goto ret0;

 L7789: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V8HImode))
    {
      operands[1] = x2;
      goto L7790;
    }
  goto ret0;

 L7790: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonmemory_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L7791;
    }
 L7840: __attribute__ ((__unused__))
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == SUBREG
      && (((x2)->u.fld[1]).rtint) == 0)
    goto L7841;
  goto ret0;

 L7791: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 766;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L7840;

 L7841: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonmemory_operand (x3, V2DImode))
    {
      operands[2] = x3;
      goto L7842;
    }
  goto ret0;

 L7842: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 774;
    }
  goto ret0;

 L7807: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V8HImode))
    {
      operands[1] = x2;
      goto L7808;
    }
  goto ret0;

 L7808: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonmemory_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L7809;
    }
 L7861: __attribute__ ((__unused__))
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == SUBREG
      && (((x2)->u.fld[1]).rtint) == 0)
    goto L7862;
  goto ret0;

 L7809: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 769;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L7861;

 L7862: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonmemory_operand (x3, V2DImode))
    {
      operands[2] = x3;
      goto L7863;
    }
  goto ret0;

 L7863: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 777;
    }
  goto ret0;

 L7927: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4HImode
      && ((enum rtx_code) (x2)->code) == SS_TRUNCATE)
    goto L7928;
  goto ret0;

 L7928: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4SImode))
    {
      operands[1] = x3;
      goto L7929;
    }
  goto ret0;

 L7929: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4HImode
      && ((enum rtx_code) (x2)->code) == SS_TRUNCATE)
    goto L7930;
  goto ret0;

 L7930: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4SImode))
    {
      operands[2] = x3;
      goto L7931;
    }
  goto ret0;

 L7931: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 785;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_17 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((x0)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x1)->mode))
    {
    case HImode:
      goto L10144;
    case CCFPmode:
      goto L10138;
    case CCFPUmode:
      goto L10139;
    case CCmode:
      goto L10140;
    case SImode:
      goto L10141;
    case QImode:
      goto L10146;
    case DImode:
      goto L10149;
    case SFmode:
      goto L10151;
    case DFmode:
      goto L10153;
    case XFmode:
      goto L10155;
    default:
      break;
    }
 L1: __attribute__ ((__unused__))
  if (((enum rtx_code) (x1)->code) == REG
      && (((x1)->u.fld[0]).rtint) == 17)
    goto L2;
 L167: __attribute__ ((__unused__))
  switch (((enum machine_mode) (x1)->mode))
    {
    case CCFPmode:
      goto L10173;
    case CCFPUmode:
      goto L10174;
    default:
      break;
    }
 L292: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case STRICT_LOW_PART:
      goto L293;
    case PC:
      goto L4247;
    case SUBREG:
    case REG:
    case ADDRESSOF:
      goto L955;
    default:
      goto L5693;
   }
 L955: __attribute__ ((__unused__))
  if (register_operand (x1, VOIDmode))
    {
      operands[0] = x1;
      goto L956;
    }
 L5693: __attribute__ ((__unused__))
  operands[0] = x1;
  goto L5694;
 L5721: __attribute__ ((__unused__))
  switch (((enum machine_mode) (x1)->mode))
    {
    case V4SFmode:
      goto L10175;
    case V4SImode:
      goto L10176;
    case V2DImode:
      goto L10177;
    case V8QImode:
      goto L10198;
    case V4HImode:
      goto L10179;
    case V2SImode:
      goto L10180;
    case V2SFmode:
      goto L10181;
    case V2DFmode:
      goto L10182;
    case V8HImode:
      goto L10183;
    case V16QImode:
      goto L10184;
    case TImode:
      goto L10185;
    case SImode:
      goto L10197;
    case DImode:
      goto L10200;
    case SFmode:
      goto L10202;
    case CCFPmode:
      goto L10208;
    case CCFPUmode:
      goto L10209;
    default:
      break;
    }
 L6876: __attribute__ ((__unused__))
  operands[0] = x1;
  goto L6877;
 L6880: __attribute__ ((__unused__))
  switch (((enum machine_mode) (x1)->mode))
    {
    case V2SFmode:
      goto L10215;
    case V2SImode:
      goto L10216;
    case V8QImode:
      goto L10217;
    case V4HImode:
      goto L10218;
    case V2DFmode:
      goto L10219;
    case V2DImode:
      goto L10220;
    case CCFPmode:
      goto L10221;
    case CCFPUmode:
      goto L10222;
    case SImode:
      goto L10223;
    case V16QImode:
      goto L10224;
    case V4SFmode:
      goto L10228;
    case V4SImode:
      goto L10229;
    case V8HImode:
      goto L10231;
    case DImode:
      goto L10232;
    case TImode:
      goto L10233;
    case DFmode:
      goto L10238;
    default:
      break;
    }
 L8224: __attribute__ ((__unused__))
  operands[0] = x1;
  goto L8225;
 L8241: __attribute__ ((__unused__))
  switch (((enum machine_mode) (x1)->mode))
    {
    case V4SFmode:
      goto L10239;
    case V2DFmode:
      goto L10240;
    case V16QImode:
      goto L10241;
    default:
      break;
    }
  goto ret0;

 L10144: __attribute__ ((__unused__))
  tem = recog_1 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  goto L1;

 L10138: __attribute__ ((__unused__))
  if (((enum rtx_code) (x1)->code) == REG
      && (((x1)->u.fld[0]).rtint) == 18)
    goto L108;
  goto L1;

 L108: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == CCFPmode
      && ((enum rtx_code) (x1)->code) == COMPARE)
    goto L109;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L109: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case SFmode:
      goto L10274;
    case DFmode:
      goto L10275;
    case XFmode:
      goto L10276;
    default:
      break;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L10274: __attribute__ ((__unused__))
  if (register_operand (x2, SFmode))
    {
      operands[0] = x2;
      goto L110;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L110: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, SFmode))
    {
      operands[1] = x2;
      goto L111;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L111: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return 14;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L10275: __attribute__ ((__unused__))
  if (register_operand (x2, DFmode))
    {
      operands[0] = x2;
      goto L123;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L123: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L124;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L124: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return 16;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L10276: __attribute__ ((__unused__))
  if (register_operand (x2, XFmode))
    {
      operands[0] = x2;
      goto L136;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L136: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, XFmode))
    {
      operands[1] = x2;
      goto L137;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L137: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return 18;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L10139: __attribute__ ((__unused__))
  if (((enum rtx_code) (x1)->code) == REG
      && (((x1)->u.fld[0]).rtint) == 18)
    goto L147;
  goto L1;

 L147: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == CCFPUmode
      && ((enum rtx_code) (x1)->code) == COMPARE)
    goto L148;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L148: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[0] = x2;
      goto L149;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L149: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L150;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L150: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)
   && (mode_class[((enum machine_mode) (operands[0])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[0])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[0])->mode)] == MODE_VECTOR_FLOAT)
   && ((enum machine_mode) (operands[0])->mode) == ((enum machine_mode) (operands[1])->mode)))
    {
      return 20;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L10140: __attribute__ ((__unused__))
  if (((enum rtx_code) (x1)->code) == REG
      && (((x1)->u.fld[0]).rtint) == 17)
    goto L164;
  goto L1;

 L164: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == CCmode
      && ((enum rtx_code) (x1)->code) == UNSPEC
      && (((((x1)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x1)->u.fld[1]).rtint) == 25)
    goto L165;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L165: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, HImode))
    {
      operands[0] = x2;
      return 23;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L10141: __attribute__ ((__unused__))
  tem = recog_2 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  goto L1;

 L10146: __attribute__ ((__unused__))
  tem = recog_3 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  goto L1;

 L10149: __attribute__ ((__unused__))
  if (push_operand (x1, DImode))
    {
      operands[0] = x1;
      goto L386;
    }
 L10150: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, DImode))
    {
      operands[0] = x1;
      goto L539;
    }
 L10167: __attribute__ ((__unused__))
  if (register_operand (x1, DImode))
    {
      operands[0] = x1;
      goto L1600;
    }
  goto L1;

 L386: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (general_no_elim_operand (x1, DImode))
    {
      operands[1] = x1;
      return 57;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10150;

 L539: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == DImode)
    goto L10368;
 L389: __attribute__ ((__unused__))
  if (general_operand (x1, DImode))
    {
      operands[1] = x1;
      goto L390;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10167;

 L10368: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case ZERO_EXTEND:
      goto L540;
    case SIGN_EXTEND:
      goto L566;
    case FIX:
      goto L678;
    case PLUS:
      goto L872;
    case MINUS:
      goto L1323;
    case NEG:
      goto L2697;
    default:
     break;
   }
  goto L389;

 L540: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L541;
    }
  goto L389;

 L541: __attribute__ ((__unused__))
  if ((!0 && !(x86_inter_unit_moves & (1 << ix86_tune)))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 81;
    }
 L553: __attribute__ ((__unused__))
  if ((!0 && (x86_inter_unit_moves & (1 << ix86_tune)))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 82;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L389;

 L566: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L567;
    }
  goto L389;

 L567: __attribute__ ((__unused__))
  if (pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 2;
      return 83;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L389;

 L678: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L679;
    }
  goto L389;

 L679: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_VECTOR_FLOAT)
   && !reload_completed && !reload_in_progress
   && (!((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode)) || !0)))
    {
      return 103;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L389;

 L872: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, DImode))
    {
      operands[1] = x2;
      goto L873;
    }
  goto L389;

 L873: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, DImode))
    {
      operands[2] = x2;
      goto L874;
    }
  goto L389;

 L874: __attribute__ ((__unused__))
  if ((!0 && ix86_binary_operator_ok (PLUS, DImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 128;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L389;

 L1323: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, DImode))
    {
      operands[1] = x2;
      goto L1324;
    }
  goto L389;

 L1324: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, DImode))
    {
      operands[2] = x2;
      goto L1325;
    }
  goto L389;

 L1325: __attribute__ ((__unused__))
  if ((!0 && ix86_binary_operator_ok (MINUS, DImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 158;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L389;

 L2697: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (general_operand (x2, DImode))
    {
      operands[1] = x2;
      goto L2698;
    }
  goto L389;

 L2698: __attribute__ ((__unused__))
  if ((!0
   && ix86_unary_operator_ok (NEG, DImode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 238;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L389;

 L390: __attribute__ ((__unused__))
  if ((!0
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 58;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10167;

 L1600: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == DImode)
    goto L10374;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L10374: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case MULT:
      goto L1601;
    case ASHIFT:
      goto L3083;
    case ASHIFTRT:
      goto L3247;
    case LSHIFTRT:
      goto L3510;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L1601: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode)
    goto L10378;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L10378: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case ZERO_EXTEND:
      goto L1602;
    case SIGN_EXTEND:
      goto L1620;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L1602: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L1603;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L1603: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == ZERO_EXTEND)
    goto L1604;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L1604: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L1605;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L1605: __attribute__ ((__unused__))
  if ((!0
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 177;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L1620: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L1621;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L1621: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == SIGN_EXTEND)
    goto L1622;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L1622: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L1623;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L1623: __attribute__ ((__unused__))
  if ((!0
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 178;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L3083: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, DImode))
    {
      operands[1] = x2;
      goto L3084;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L3084: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonmemory_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3085;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L3085: __attribute__ ((__unused__))
  if ((!0 && ((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0)))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 2;
      return 277;
    }
 L3099: __attribute__ ((__unused__))
  if (pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 278;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L3247: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, DImode))
    {
      operands[1] = x2;
      goto L3248;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L3248: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonmemory_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3249;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L3249: __attribute__ ((__unused__))
  if ((!0 && ((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0)))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 2;
      return 288;
    }
 L3263: __attribute__ ((__unused__))
  if (pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 289;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L3510: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, DImode))
    {
      operands[1] = x2;
      goto L3511;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L3511: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonmemory_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L3512;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L3512: __attribute__ ((__unused__))
  if ((!0 && ((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0)))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 2;
      return 306;
    }
 L3526: __attribute__ ((__unused__))
  if (pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 307;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L10151: __attribute__ ((__unused__))
  if (push_operand (x1, SFmode))
    {
      operands[0] = x1;
      goto L393;
    }
 L10152: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, SFmode))
    {
      operands[0] = x1;
      goto L626;
    }
 L10158: __attribute__ ((__unused__))
  if (memory_operand (x1, SFmode))
    {
      operands[0] = x1;
      goto L636;
    }
 L10159: __attribute__ ((__unused__))
  if (register_operand (x1, SFmode))
    {
      operands[0] = x1;
      goto L641;
    }
 L10168: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, SFmode))
    {
      operands[0] = x1;
      goto L2806;
    }
 L10170: __attribute__ ((__unused__))
  if (register_operand (x1, SFmode))
    {
      operands[0] = x1;
      goto L2864;
    }
  goto L1;

 L393: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (general_no_elim_operand (x1, SFmode))
    {
      operands[1] = x1;
      return 59;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10152;

 L626: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == SFmode
      && ((enum rtx_code) (x1)->code) == FLOAT_TRUNCATE)
    goto L627;
  if (general_operand (x1, SFmode))
    {
      operands[1] = x1;
      goto L397;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10158;

 L627: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L628;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10158;

 L628: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && ((target_flags & 0x00008000) != 0) && !(x86_sse_partial_regs_for_cvtsd2ss & (1 << ix86_tune))
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 94;
    }
 L633: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && ((target_flags & 0x00008000) != 0) && (x86_sse_partial_regs_for_cvtsd2ss & (1 << ix86_tune))
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 95;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10158;

 L397: __attribute__ ((__unused__))
  if ((((x86_inter_unit_moves & (1 << ix86_tune)) || optimize_size)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)
   && (reload_in_progress || reload_completed
       || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)
       || ((enum rtx_code) (operands[1])->code) != CONST_DOUBLE
       || memory_operand (operands[0], SFmode))))
    {
      return 60;
    }
 L401: __attribute__ ((__unused__))
  if (((!(x86_inter_unit_moves & (1 << ix86_tune)) && !optimize_size)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)
   && (reload_in_progress || reload_completed
       || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)
       || ((enum rtx_code) (operands[1])->code) != CONST_DOUBLE
       || memory_operand (operands[0], SFmode))))
    {
      return 61;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10158;

 L636: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == SFmode)
    goto L10380;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10159;

 L10380: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case FLOAT_TRUNCATE:
      goto L637;
    case NEG:
      goto L2778;
    case ABS:
      goto L2905;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10159;

 L637: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case DFmode:
      goto L10383;
    case XFmode:
      goto L10384;
    default:
      break;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10159;

 L10383: __attribute__ ((__unused__))
  if (register_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L638;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10159;

 L638: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return 96;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10159;

 L10384: __attribute__ ((__unused__))
  if (register_operand (x2, XFmode))
    {
      operands[1] = x2;
      goto L661;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10159;

 L661: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return 100;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10159;

 L2778: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, SFmode))
    {
      operands[1] = x2;
      goto L2779;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10159;

 L2779: __attribute__ ((__unused__))
  if ((ix86_unary_operator_ok (NEG, SFmode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 245;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10159;

 L2905: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, SFmode))
    {
      operands[1] = x2;
      goto L2906;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10159;

 L2906: __attribute__ ((__unused__))
  if ((ix86_unary_operator_ok (ABS, SFmode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 258;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10159;

 L641: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == SFmode)
    goto L10385;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10168;

 L10385: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case FLOAT_TRUNCATE:
      goto L642;
    case FLOAT:
      goto L804;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10168;

 L642: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L643;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10168;

 L643: __attribute__ ((__unused__))
  if ((!(target_flags & 0x00000001) && ((target_flags & 0x00008000) != 0) && !(x86_sse_partial_regs_for_cvtsd2ss & (1 << ix86_tune))))
    {
      return 97;
    }
 L648: __attribute__ ((__unused__))
  if ((!(target_flags & 0x00000001) && ((target_flags & 0x00008000) != 0) && (x86_sse_partial_regs_for_cvtsd2ss & (1 << ix86_tune))))
    {
      return 98;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10168;

 L804: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case HImode:
      goto L10387;
    case SImode:
      goto L10388;
    case DImode:
      goto L10389;
    default:
      break;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10168;

 L10387: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L805;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10168;

 L805: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (!((target_flags & 0x00004000) != 0) || !((ix86_fpmath & FPMATH_SSE) != 0))))
    {
      return 116;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10168;

 L10388: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L810;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10168;

 L810: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (!((target_flags & 0x00004000) != 0) || ((ix86_fpmath & FPMATH_SSE) && (ix86_fpmath & FPMATH_387)))))
    {
      return 117;
    }
 L815: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 118;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10168;

 L10389: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, DImode))
    {
      operands[1] = x2;
      goto L820;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10168;

 L820: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (!((target_flags & 0x00004000) != 0) || !0 || ((ix86_fpmath & FPMATH_SSE) && (ix86_fpmath & FPMATH_387)))))
    {
      return 119;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10168;

 L2806: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == SFmode)
    goto L10390;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10170;

 L10390: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case NEG:
      goto L2807;
    case ABS:
      goto L2934;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10170;

 L2807: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SFmode))
    {
      operands[1] = x2;
      goto L2808;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10170;

 L2808: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && !((target_flags & 0x00004000) != 0)
   && ix86_unary_operator_ok (NEG, SFmode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 247;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10170;

 L2934: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SFmode))
    {
      operands[1] = x2;
      goto L2935;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10170;

 L2935: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && ix86_unary_operator_ok (ABS, SFmode, operands) && !((target_flags & 0x00004000) != 0))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 260;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10170;

 L2864: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == SFmode)
    goto L10392;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L10392: __attribute__ ((__unused__))
  tem = recog_4 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L10153: __attribute__ ((__unused__))
  if (push_operand (x1, DFmode))
    {
      operands[0] = x1;
      goto L411;
    }
 L10154: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, DFmode))
    {
      operands[0] = x1;
      goto L582;
    }
 L10157: __attribute__ ((__unused__))
  if (register_operand (x1, DFmode))
    {
      operands[0] = x1;
      goto L587;
    }
 L10160: __attribute__ ((__unused__))
  if (memory_operand (x1, DFmode))
    {
      operands[0] = x1;
      goto L672;
    }
 L10169: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, DFmode))
    {
      operands[0] = x1;
      goto L2847;
    }
 L10171: __attribute__ ((__unused__))
  if (register_operand (x1, DFmode))
    {
      operands[0] = x1;
      goto L2869;
    }
  goto L1;

 L411: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (general_no_elim_operand (x1, DFmode))
    {
      operands[1] = x1;
      goto L412;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10154;

 L412: __attribute__ ((__unused__))
  if ((!0 && !(x86_integer_DFmode_moves & (1 << ix86_tune))))
    {
      return 63;
    }
 L416: __attribute__ ((__unused__))
  if ((0 || (x86_integer_DFmode_moves & (1 << ix86_tune))))
    {
      return 64;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10154;

 L582: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == DFmode
      && ((enum rtx_code) (x1)->code) == FLOAT_EXTEND)
    goto L583;
  if (general_operand (x1, DFmode))
    {
      operands[1] = x1;
      goto L420;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10157;

 L583: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SFmode))
    {
      operands[1] = x2;
      goto L584;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10157;

 L584: __attribute__ ((__unused__))
  if ((((target_flags & 0x00000001) || ((target_flags & 0x00008000) != 0))
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 87;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10157;

 L420: __attribute__ ((__unused__))
  if (((((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)
   && ((optimize_size || !(x86_integer_DFmode_moves & (1 << ix86_tune))) && !0)
   && (reload_in_progress || reload_completed
       || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)
       || ((enum rtx_code) (operands[1])->code) != CONST_DOUBLE
       || memory_operand (operands[0], DFmode))))
    {
      return 65;
    }
 L424: __attribute__ ((__unused__))
  if (((((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)
   && ((!optimize_size && (x86_integer_DFmode_moves & (1 << ix86_tune))) || 0)
   && (reload_in_progress || reload_completed
       || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)
       || ((enum rtx_code) (operands[1])->code) != CONST_DOUBLE
       || memory_operand (operands[0], DFmode))))
    {
      return 66;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10157;

 L587: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == DFmode)
    goto L10428;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10160;

 L10428: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case FLOAT_EXTEND:
      goto L588;
    case FLOAT:
      goto L824;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10160;

 L588: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SFmode))
    {
      operands[1] = x2;
      goto L589;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10160;

 L589: __attribute__ ((__unused__))
  if ((!(target_flags & 0x00000001) && ((target_flags & 0x00008000) != 0)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 88;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10160;

 L824: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case HImode:
      goto L10430;
    case SImode:
      goto L10431;
    case DImode:
      goto L10432;
    default:
      break;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10160;

 L10430: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L825;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10160;

 L825: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (!((target_flags & 0x00008000) != 0) || !((ix86_fpmath & FPMATH_SSE) != 0))))
    {
      return 120;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10160;

 L10431: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L830;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10160;

 L830: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (!((target_flags & 0x00008000) != 0) || ((ix86_fpmath & FPMATH_SSE) && (ix86_fpmath & FPMATH_387)))))
    {
      return 121;
    }
 L835: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 122;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10160;

 L10432: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, DImode))
    {
      operands[1] = x2;
      goto L840;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10160;

 L840: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (!((target_flags & 0x00008000) != 0) || !0)))
    {
      return 123;
    }
 L845: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 124;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10160;

 L672: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == DFmode)
    goto L10433;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10169;

 L10433: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case FLOAT_TRUNCATE:
      goto L673;
    case NEG:
      goto L2819;
    case ABS:
      goto L2946;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10169;

 L673: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, XFmode))
    {
      operands[1] = x2;
      goto L674;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10169;

 L674: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return 102;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10169;

 L2819: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L2820;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10169;

 L2820: __attribute__ ((__unused__))
  if ((ix86_unary_operator_ok (NEG, DFmode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 248;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10169;

 L2946: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L2947;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10169;

 L2947: __attribute__ ((__unused__))
  if ((ix86_unary_operator_ok (ABS, DFmode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 261;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10169;

 L2847: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == DFmode)
    goto L10436;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10171;

 L10436: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case NEG:
      goto L2848;
    case ABS:
      goto L2975;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10171;

 L2848: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L2849;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10171;

 L2849: __attribute__ ((__unused__))
  if ((!0 && (target_flags & 0x00000001)
   && ix86_unary_operator_ok (NEG, DFmode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 250;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10171;

 L2975: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L2976;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10171;

 L2976: __attribute__ ((__unused__))
  if ((!0 && (target_flags & 0x00000001)
   && ix86_unary_operator_ok (ABS, DFmode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 263;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10171;

 L2869: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == DFmode)
    goto L10438;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L10438: __attribute__ ((__unused__))
  tem = recog_5 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L10155: __attribute__ ((__unused__))
  if (push_operand (x1, XFmode))
    {
      operands[0] = x1;
      goto L434;
    }
 L10156: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, XFmode))
    {
      operands[0] = x1;
      goto L592;
    }
 L10164: __attribute__ ((__unused__))
  if (register_operand (x1, XFmode))
    {
      operands[0] = x1;
      goto L848;
    }
  goto L1;

 L434: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (general_no_elim_operand (x1, XFmode))
    {
      operands[1] = x1;
      goto L435;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10156;

 L435: __attribute__ ((__unused__))
  if ((optimize_size))
    {
      return 68;
    }
 L439: __attribute__ ((__unused__))
  if ((!optimize_size))
    {
      return 69;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10156;

 L592: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == XFmode)
    goto L10487;
 L442: __attribute__ ((__unused__))
  if (general_operand (x1, XFmode))
    {
      operands[1] = x1;
      goto L443;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10164;

 L10487: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case FLOAT_EXTEND:
      goto L593;
    case NEG:
      goto L2860;
    case ABS:
      goto L2987;
    default:
     break;
   }
  goto L442;

 L593: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case SFmode:
      goto L10490;
    case DFmode:
      goto L10491;
    default:
      break;
    }
  goto L442;

 L10490: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, SFmode))
    {
      operands[1] = x2;
      goto L594;
    }
  goto L442;

 L594: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 89;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L442;

 L10491: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L599;
    }
  goto L442;

 L599: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 90;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L442;

 L2860: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, XFmode))
    {
      operands[1] = x2;
      goto L2861;
    }
  goto L442;

 L2861: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)
   && ix86_unary_operator_ok (NEG, XFmode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 251;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L442;

 L2987: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, XFmode))
    {
      operands[1] = x2;
      goto L2988;
    }
  goto L442;

 L2988: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)
   && ix86_unary_operator_ok (ABS, XFmode, operands))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 264;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L442;

 L443: __attribute__ ((__unused__))
  if ((optimize_size
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)
   && (reload_in_progress || reload_completed
       || ((enum rtx_code) (operands[1])->code) != CONST_DOUBLE
       || memory_operand (operands[0], XFmode))))
    {
      return 70;
    }
 L447: __attribute__ ((__unused__))
  if ((!optimize_size
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)
   && (reload_in_progress || reload_completed
       || ((enum rtx_code) (operands[1])->code) != CONST_DOUBLE
       || memory_operand (operands[0], XFmode))))
    {
      return 71;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10164;

 L848: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == XFmode)
    goto L10492;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L10492: __attribute__ ((__unused__))
  tem = recog_6 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L1;

 L2: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum rtx_code) (x1)->code) == COMPARE)
    goto L3;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L167;

 L3: __attribute__ ((__unused__))
  tem = recog_7 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L167;

 L10173: __attribute__ ((__unused__))
  if (((enum rtx_code) (x1)->code) == REG
      && (((x1)->u.fld[0]).rtint) == 17)
    goto L168;
  goto L292;

 L168: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == CCFPmode
      && ((enum rtx_code) (x1)->code) == COMPARE)
    goto L169;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L292;

 L169: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[0] = x2;
      goto L170;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L292;

 L170: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L171;
    }
 L176: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L177;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L292;

 L171: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && ((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0))
   && !((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[0])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[0])->mode)) == DFmode))
   && (mode_class[((enum machine_mode) (operands[0])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[0])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[0])->mode)] == MODE_VECTOR_FLOAT)
   && ((enum machine_mode) (operands[0])->mode) == ((enum machine_mode) (operands[0])->mode)))
    {
      return 24;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L176;

 L177: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)
   && ((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[0])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[0])->mode)) == DFmode))
   && ((enum machine_mode) (operands[0])->mode) == ((enum machine_mode) (operands[0])->mode)))
    {
      return 25;
    }
 L183: __attribute__ ((__unused__))
  if ((((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[0])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[0])->mode)) == DFmode))
   && ((enum machine_mode) (operands[0])->mode) == ((enum machine_mode) (operands[0])->mode)))
    {
      return 26;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L292;

 L10174: __attribute__ ((__unused__))
  if (((enum rtx_code) (x1)->code) == REG
      && (((x1)->u.fld[0]).rtint) == 17)
    goto L186;
  goto L292;

 L186: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == CCFPUmode
      && ((enum rtx_code) (x1)->code) == COMPARE)
    goto L187;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L292;

 L187: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[0] = x2;
      goto L188;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L292;

 L188: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L189;
    }
 L194: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L195;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L292;

 L189: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && ((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0))
   && !((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[0])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[0])->mode)) == DFmode))
   && (mode_class[((enum machine_mode) (operands[0])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[0])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[0])->mode)] == MODE_VECTOR_FLOAT)
   && ((enum machine_mode) (operands[0])->mode) == ((enum machine_mode) (operands[1])->mode)))
    {
      return 27;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L194;

 L195: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)
   && ((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[0])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[0])->mode)) == DFmode))
   && ((enum machine_mode) (operands[0])->mode) == ((enum machine_mode) (operands[1])->mode)))
    {
      return 28;
    }
 L201: __attribute__ ((__unused__))
  if ((((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[0])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[0])->mode)) == DFmode))
   && ((enum machine_mode) (operands[0])->mode) == ((enum machine_mode) (operands[1])->mode)))
    {
      return 29;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L292;

 L293: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case HImode:
      goto L10571;
    case QImode:
      goto L10573;
    default:
      break;
    }
  goto L5693;

 L10571: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L294;
    }
 L10572: __attribute__ ((__unused__))
  if (register_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L306;
    }
  goto L5693;

 L294: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (general_operand (x1, HImode))
    {
      operands[1] = x1;
      goto L295;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L10572;

 L295: __attribute__ ((__unused__))
  if (((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 43;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L10572;

 L306: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (const0_operand (x1, HImode))
    {
      operands[1] = x1;
      goto L307;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L307: __attribute__ ((__unused__))
  if ((reload_completed
   && ((!(x86_use_mov0 & (1 << ix86_tune)) && !(x86_partial_reg_stall & (1 << ix86_tune))) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 44;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L10573: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L1188;
    }
 L10574: __attribute__ ((__unused__))
  if (q_regs_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L337;
    }
  goto L5693;

 L1188: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == QImode)
    goto L10575;
 L325: __attribute__ ((__unused__))
  if (general_operand (x1, QImode))
    {
      operands[1] = x1;
      goto L326;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L10574;

 L10575: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case PLUS:
      goto L1189;
    case MINUS:
      goto L1483;
    case AND:
      goto L2028;
    case IOR:
      goto L2282;
    case XOR:
      goto L2532;
    case ASHIFTRT:
      goto L3438;
    case LSHIFTRT:
      goto L3662;
    case ROTATE:
      goto L3790;
    case ROTATERT:
      goto L3920;
    case EQ:
    case NE:
    case LE:
    case LT:
    case GE:
    case GT:
    case LEU:
    case LTU:
    case GEU:
    case GTU:
    case UNORDERED:
    case ORDERED:
    case UNLE:
    case UNLT:
    case UNGE:
    case UNGT:
    case LTGT:
    case UNEQ:
      goto L10584;
    default:
      goto L325;
   }
 L10584: __attribute__ ((__unused__))
  if (ix86_comparison_operator (x1, QImode))
    {
      operands[1] = x1;
      goto L3962;
    }
  goto L325;

 L1189: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[0]))
    goto L1190;
  goto L325;

 L1190: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L1191;
    }
  goto L325;

 L1191: __attribute__ ((__unused__))
  if (((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 151;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L325;

 L1483: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[0]))
    goto L1484;
  goto L325;

 L1484: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L1485;
    }
  goto L325;

 L1485: __attribute__ ((__unused__))
  if (((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 169;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L325;

 L2028: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[0]))
    goto L2029;
  goto L325;

 L2029: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L2030;
    }
  goto L325;

 L2030: __attribute__ ((__unused__))
  if (((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 202;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L325;

 L2282: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[0]))
    goto L2283;
  goto L325;

 L2283: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L2284;
    }
  goto L325;

 L2284: __attribute__ ((__unused__))
  if (((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 216;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L325;

 L2532: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[0]))
    goto L2533;
  goto L325;

 L2533: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L2534;
    }
  goto L325;

 L2534: __attribute__ ((__unused__))
  if (((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 230;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L325;

 L3438: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[0]))
    goto L3439;
  goto L325;

 L3439: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const1_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L3440;
    }
 L3469: __attribute__ ((__unused__))
  if (nonmemory_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L3470;
    }
  goto L325;

 L3440: __attribute__ ((__unused__))
  if ((ix86_binary_operator_ok (ASHIFTRT, QImode, operands)
   && (! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 301;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L3469;

 L3470: __attribute__ ((__unused__))
  if (((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 303;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L325;

 L3662: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[0]))
    goto L3663;
  goto L325;

 L3663: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const1_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L3664;
    }
 L3693: __attribute__ ((__unused__))
  if (nonmemory_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L3694;
    }
  goto L325;

 L3664: __attribute__ ((__unused__))
  if (((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 317;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L3693;

 L3694: __attribute__ ((__unused__))
  if (((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 319;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L325;

 L3790: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[0]))
    goto L3791;
  goto L325;

 L3791: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const1_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L3792;
    }
 L3821: __attribute__ ((__unused__))
  if (nonmemory_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L3822;
    }
  goto L325;

 L3792: __attribute__ ((__unused__))
  if (((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 326;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L3821;

 L3822: __attribute__ ((__unused__))
  if (((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 328;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L325;

 L3920: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[0]))
    goto L3921;
  goto L325;

 L3921: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const1_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L3922;
    }
 L3951: __attribute__ ((__unused__))
  if (nonmemory_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L3952;
    }
  goto L325;

 L3922: __attribute__ ((__unused__))
  if (((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 335;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L3951;

 L3952: __attribute__ ((__unused__))
  if (((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 337;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L325;

 L3962: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L3963;
  goto L325;

 L3963: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L)
    {
      return 339;
    }
  goto L325;

 L326: __attribute__ ((__unused__))
  if (((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 48;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L10574;

 L337: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (const0_operand (x1, QImode))
    {
      operands[1] = x1;
      goto L338;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L338: __attribute__ ((__unused__))
  if ((reload_completed && (!(x86_use_mov0 & (1 << ix86_tune)) || optimize_size))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 49;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L4247: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (nonimmediate_operand (x1, SImode))
    {
      operands[0] = x1;
      return 355;
    }
  switch (((enum rtx_code) (x1)->code))
    {
    case IF_THEN_ELSE:
      goto L3979;
    case LABEL_REF:
      goto L4244;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L3979: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (ix86_comparison_operator (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L3980;
    }
 L4011: __attribute__ ((__unused__))
  if (comparison_operator (x2, VOIDmode))
    {
      operands[0] = x2;
      goto L4012;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L3980: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 17)
    goto L3981;
  goto L4011;

 L3981: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L3982;
  goto L4011;

 L3982: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  switch (((enum rtx_code) (x2)->code))
    {
    case LABEL_REF:
      goto L3983;
    case PC:
      goto L3992;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4011;

 L3983: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  operands[0] = x3;
  goto L3984;

 L3984: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == PC)
    {
      return 342;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4011;

 L3992: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == LABEL_REF)
    goto L3993;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4011;

 L3993: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  operands[0] = x3;
  return 343;

 L4012: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L4013;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L4013: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L4014;
    }
 L4036: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L4037;
    }
 L4210: __attribute__ ((__unused__))
  if (register_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L4211;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L4014: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  switch (((enum rtx_code) (x2)->code))
    {
    case LABEL_REF:
      goto L4015;
    case PC:
      goto L4084;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L4036;

 L4015: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  operands[3] = x3;
  goto L4016;

 L4016: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == PC
      && (((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0)) && (target_flags & 0x00000001)
   && !((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode))
   && (mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_VECTOR_FLOAT)
   && ((enum machine_mode) (operands[1])->mode) == ((enum machine_mode) (operands[2])->mode)
   && ix86_fp_jump_nontrivial_p (((enum rtx_code) (operands[0])->code)))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 2;
      return 344;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L4036;

 L4084: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == LABEL_REF)
    goto L4085;
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L4036;

 L4085: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  operands[3] = x3;
  goto L4086;

 L4086: __attribute__ ((__unused__))
  if ((((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0)) && (target_flags & 0x00000001)
   && !((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode))
   && (mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_VECTOR_FLOAT)
   && ((enum machine_mode) (operands[1])->mode) == ((enum machine_mode) (operands[2])->mode)
   && ix86_fp_jump_nontrivial_p (((enum rtx_code) (operands[0])->code)))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 2;
      return 347;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L4036;

 L4037: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  switch (((enum rtx_code) (x2)->code))
    {
    case LABEL_REF:
      goto L4038;
    case PC:
      goto L4108;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L4210;

 L4038: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  operands[3] = x3;
  goto L4039;

 L4039: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == PC)
    goto L10585;
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L4210;

 L10585: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)
   && ((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode))
   && ((enum machine_mode) (operands[1])->mode) == ((enum machine_mode) (operands[2])->mode)
   && ix86_fp_jump_nontrivial_p (((enum rtx_code) (operands[0])->code)))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 2;
      return 345;
    }
 L10586: __attribute__ ((__unused__))
  if ((((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode))
   && ((enum machine_mode) (operands[1])->mode) == ((enum machine_mode) (operands[2])->mode)
   && ix86_fp_jump_nontrivial_p (((enum rtx_code) (operands[0])->code)))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 2;
      return 346;
    }
 L10587: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)
   && (((enum machine_mode) (operands[1])->mode) == SFmode || ((enum machine_mode) (operands[1])->mode) == DFmode)
   && ((enum machine_mode) (operands[1])->mode) == ((enum machine_mode) (operands[2])->mode)
   && !ix86_use_fcomi_compare (((enum rtx_code) (operands[0])->code))
   && ix86_cc_mode ((((enum rtx_code) (operands[0])->code)), (operands[1]), (operands[2])) == CCFPmode

   && ix86_fp_jump_nontrivial_p (((enum rtx_code) (operands[0])->code)))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 3;
      return 350;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L4210;

 L4108: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == LABEL_REF)
    goto L4109;
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L4210;

 L4109: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  operands[3] = x3;
  goto L4110;

 L4110: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)
   && ((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode))
   && ((enum machine_mode) (operands[1])->mode) == ((enum machine_mode) (operands[2])->mode)
   && ix86_fp_jump_nontrivial_p (((enum rtx_code) (operands[0])->code)))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 2;
      return 348;
    }
 L4134: __attribute__ ((__unused__))
  if ((((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode))
   && ((enum machine_mode) (operands[1])->mode) == ((enum machine_mode) (operands[2])->mode)
   && ix86_fp_jump_nontrivial_p (((enum rtx_code) (operands[0])->code)))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 2;
      return 349;
    }
 L4187: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)
   && (((enum machine_mode) (operands[1])->mode) == SFmode || ((enum machine_mode) (operands[1])->mode) == DFmode)
   && ((enum machine_mode) (operands[1])->mode) == ((enum machine_mode) (operands[2])->mode)
   && !ix86_use_fcomi_compare (((enum rtx_code) (operands[0])->code))
   && ix86_cc_mode ((((enum rtx_code) (operands[0])->code)), (operands[1]), (operands[2])) == CCFPmode

   && ix86_fp_jump_nontrivial_p (((enum rtx_code) (operands[0])->code)))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 3;
      return 351;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L4210;

 L4211: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  switch (((enum rtx_code) (x2)->code))
    {
    case LABEL_REF:
      goto L4212;
    case PC:
      goto L4238;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L4212: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  operands[3] = x3;
  goto L4213;

 L4213: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == PC
      && ((target_flags & 0x00000001)
   && (mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_VECTOR_FLOAT)
   && ((enum machine_mode) (operands[1])->mode) == ((enum machine_mode) (operands[2])->mode)
   && ix86_fp_jump_nontrivial_p (((enum rtx_code) (operands[0])->code)))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 3;
      return 352;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L4238: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == LABEL_REF)
    goto L4239;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L4239: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  operands[3] = x3;
  goto L4240;

 L4240: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)
   && (mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_VECTOR_FLOAT)
   && ((enum machine_mode) (operands[1])->mode) == ((enum machine_mode) (operands[2])->mode)
   && ix86_fp_jump_nontrivial_p (((enum rtx_code) (operands[0])->code)))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 3;
      return 353;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L4244: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  operands[0] = x2;
  return 354;

 L956: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum rtx_code) (x1)->code) == PLUS)
    goto L957;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L957: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum rtx_code) (x2)->code))
    {
    case PLUS:
      goto L974;
    case MULT:
      goto L966;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L974: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == MULT)
    goto L975;
  if (index_register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L959;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L975: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (index_register_operand (x4, VOIDmode))
    {
      operands[1] = x4;
      goto L976;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L976: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (const248_operand (x4, VOIDmode))
    {
      operands[2] = x4;
      goto L977;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L977: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[3] = x3;
      goto L978;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L978: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (immediate_operand (x2, VOIDmode))
    {
      operands[4] = x2;
      goto L979;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L979: __attribute__ ((__unused__))
  if (((((enum machine_mode) (operands[0])->mode) == QImode || ((enum machine_mode) (operands[0])->mode) == HImode
    || (0 && ((enum machine_mode) (operands[0])->mode) == SImode))
   && (!(x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && ((enum machine_mode) (operands[0])->mode) == ((enum machine_mode) (operands[1])->mode)
   && ((enum machine_mode) (operands[0])->mode) == ((enum machine_mode) (operands[3])->mode)))
    {
      return 137;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L959: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L960;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L960: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (immediate_operand (x2, VOIDmode))
    {
      operands[3] = x2;
      goto L961;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L961: __attribute__ ((__unused__))
  if (((((enum machine_mode) (operands[0])->mode) == QImode || ((enum machine_mode) (operands[0])->mode) == HImode
    || (0 && ((enum machine_mode) (operands[0])->mode) == SImode))
   && (!(x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && ((enum machine_mode) (operands[0])->mode) == ((enum machine_mode) (operands[1])->mode)
   && ((enum machine_mode) (operands[0])->mode) == ((enum machine_mode) (operands[2])->mode)
   && (((enum machine_mode) (operands[0])->mode) == ((enum machine_mode) (operands[3])->mode)
       || ((enum machine_mode) (operands[3])->mode) == VOIDmode)))
    {
      return 135;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L966: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (index_register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L967;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L967: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const248_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L968;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L968: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonmemory_operand (x2, VOIDmode))
    {
      operands[3] = x2;
      goto L969;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L969: __attribute__ ((__unused__))
  if (((((enum machine_mode) (operands[0])->mode) == QImode || ((enum machine_mode) (operands[0])->mode) == HImode
    || (0 && ((enum machine_mode) (operands[0])->mode) == SImode))
   && (!(x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && ((enum machine_mode) (operands[0])->mode) == ((enum machine_mode) (operands[1])->mode)
   && (((enum machine_mode) (operands[0])->mode) == ((enum machine_mode) (operands[3])->mode)
       || ((enum machine_mode) (operands[3])->mode) == VOIDmode)))
    {
      return 136;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5693;

 L5694: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum rtx_code) (x1)->code) == CALL)
    goto L5695;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5721;

 L5695: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L5696;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5721;

 L5696: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode)
    goto L10588;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5721;

 L10588: __attribute__ ((__unused__))
  if (constant_call_address_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L5697;
    }
 L10589: __attribute__ ((__unused__))
  if (call_insn_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L5703;
    }
 L10590: __attribute__ ((__unused__))
  if (sibcall_insn_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L5710;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5721;

 L5697: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  operands[2] = x2;
  return 489;

 L5703: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  operands[2] = x2;
  goto L5704;

 L5704: __attribute__ ((__unused__))
  if ((!(((insn))->jump) && !0))
    {
      return 490;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L10590;

 L5710: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  operands[2] = x2;
  goto L5711;

 L5711: __attribute__ ((__unused__))
  if (((((insn))->jump) && !0))
    {
      return 491;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L5721;

 L10175: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, V4SFmode))
    {
      operands[0] = x1;
      goto L5722;
    }
 L10190: __attribute__ ((__unused__))
  if (push_operand (x1, V4SFmode))
    {
      operands[0] = x1;
      goto L5782;
    }
 L10199: __attribute__ ((__unused__))
  if (memory_operand (x1, V4SFmode))
    {
      operands[0] = x1;
      goto L5837;
    }
 L10201: __attribute__ ((__unused__))
  if (register_operand (x1, V4SFmode))
    {
      operands[0] = x1;
      goto L5847;
    }
  goto L6876;

 L5722: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V4SFmode)
    goto L10592;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10190;

 L10592: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case UNSPEC:
      goto L10595;
    case VEC_MERGE:
      goto L5872;
    case CONST_VECTOR:
    case SUBREG:
    case REG:
    case MEM:
      goto L10591;
    default:
      x1 = (((x0)->u.fld[0]).rtx);
      goto L10190;
   }
 L10591: __attribute__ ((__unused__))
  if (vector_move_operand (x1, V4SFmode))
    {
      operands[1] = x1;
      goto L5723;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10190;

 L10595: __attribute__ ((__unused__))
  if ((((((x1)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L10597;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10190;

 L10597: __attribute__ ((__unused__))
  switch ((((x1)->u.fld[1]).rtint))
    {
    case 38L:
      goto L5811;
    case 39L:
      goto L5816;
    default:
      break;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10190;

 L5811: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L5812;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10190;

 L5812: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 516;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10190;

 L5816: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L5817;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10190;

 L5817: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 517;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10190;

 L5872: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L5873;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10190;

 L5873: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[2] = x2;
      goto L5874;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10190;

 L5874: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT)
    goto L10599;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10190;

 L10599: __attribute__ ((__unused__))
  if ((int) ((x2)->u.hwint[0]) == ((x2)->u.hwint[0]))
    switch ((int) ((x2)->u.hwint[0]))
      {
      case 12L:
        goto L10601;
      case 3L:
        goto L10602;
      default:
        break;
      }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10190;

 L10601: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)
   && (((enum rtx_code) (operands[1])->code) == MEM || ((enum rtx_code) (operands[2])->code) == MEM)))
    {
      return 525;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10190;

 L10602: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)
   && (((enum rtx_code) (operands[1])->code) == MEM || ((enum rtx_code) (operands[2])->code) == MEM)))
    {
      return 526;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10190;

 L5723: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 494;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10190;

 L5782: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (register_operand (x1, V4SFmode))
    {
      operands[1] = x1;
      goto L5783;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10199;

 L5783: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 509;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10199;

 L5837: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V4SFmode
      && ((enum rtx_code) (x1)->code) == UNSPEC
      && (((((x1)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x1)->u.fld[1]).rtint) == 34)
    goto L5838;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10201;

 L5838: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L5839;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10201;

 L5839: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 521;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10201;

 L5847: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V4SFmode)
    goto L10603;
 L6167: __attribute__ ((__unused__))
  if (const0_operand (x1, V4SFmode))
    {
      operands[1] = x1;
      goto L6168;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10603: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case VEC_MERGE:
      goto L5848;
    case UNSPEC:
      goto L10614;
    case PLUS:
      goto L5910;
    case MINUS:
      goto L5924;
    case MULT:
      goto L5938;
    case DIV:
      goto L5952;
    case SQRT:
      goto L5990;
    case SMAX:
      goto L6266;
    case SMIN:
      goto L6280;
    default:
     break;
   }
  goto L6167;

 L5848: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4SFmode)
    goto L10618;
  goto L6167;

 L10618: __attribute__ ((__unused__))
  tem = recog_8 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  goto L6167;

 L10614: __attribute__ ((__unused__))
  switch ((((((x1)->u.fld[0]).rtvec))->num_elem))
    {
    case 3:
      goto L10644;
    case 1:
      goto L10645;
    default:
      break;
    }
  goto L6167;

 L10644: __attribute__ ((__unused__))
  if ((((x1)->u.fld[1]).rtint) == 41)
    goto L5903;
  goto L6167;

 L5903: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L5904;
    }
  goto L6167;

 L5904: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[2] = x2;
      goto L5905;
    }
  goto L6167;

 L5905: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[2]);
  if (immediate_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L5906;
    }
  goto L6167;

 L5906: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 530;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L6167;

 L10645: __attribute__ ((__unused__))
  switch ((((x1)->u.fld[1]).rtint))
    {
    case 42L:
      goto L5966;
    case 43L:
      goto L5978;
    default:
      break;
    }
  goto L6167;

 L5966: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L5967;
    }
  goto L6167;

 L5967: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 539;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L6167;

 L5978: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L5979;
    }
  goto L6167;

 L5979: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 541;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L6167;

 L5910: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L5911;
    }
  goto L6167;

 L5911: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[2] = x2;
      goto L5912;
    }
  goto L6167;

 L5912: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 531;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L6167;

 L5924: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L5925;
    }
  goto L6167;

 L5925: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[2] = x2;
      goto L5926;
    }
  goto L6167;

 L5926: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 533;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L6167;

 L5938: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L5939;
    }
  goto L6167;

 L5939: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[2] = x2;
      goto L5940;
    }
  goto L6167;

 L5940: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 535;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L6167;

 L5952: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L5953;
    }
  goto L6167;

 L5953: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[2] = x2;
      goto L5954;
    }
  goto L6167;

 L5954: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 537;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L6167;

 L5990: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L5991;
    }
  goto L6167;

 L5991: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 543;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L6167;

 L6266: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L6267;
    }
  goto L6167;

 L6267: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[2] = x2;
      goto L6268;
    }
  goto L6167;

 L6268: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 579;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L6167;

 L6280: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L6281;
    }
  goto L6167;

 L6281: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[2] = x2;
      goto L6282;
    }
  goto L6167;

 L6282: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 581;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L6167;

 L6168: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 569;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10176: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, V4SImode))
    {
      operands[0] = x1;
      goto L5726;
    }
 L10191: __attribute__ ((__unused__))
  if (push_operand (x1, V4SImode))
    {
      operands[0] = x1;
      goto L5786;
    }
  if (register_operand (x1, V4SImode))
    {
      operands[0] = x1;
      goto L6175;
    }
  goto L6876;

 L5726: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (vector_move_operand (x1, V4SImode))
    {
      operands[1] = x1;
      goto L5727;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10191;

 L5727: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 495;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10191;

 L5786: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (register_operand (x1, V4SImode))
    {
      operands[1] = x1;
      goto L5787;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L5787: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 510;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6175: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V4SImode)
    goto L10648;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10648: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case NOT:
      goto L6182;
    case VEC_MERGE:
      goto L6189;
    case EQ:
    case LT:
    case LE:
    case UNORDERED:
    case NE:
    case UNGE:
    case UNGT:
    case ORDERED:
    case UNEQ:
    case UNLT:
    case UNLE:
    case LTGT:
    case GE:
    case GT:
      goto L10647;
    default:
      x1 = (((x0)->u.fld[0]).rtx);
      goto L6876;
   }
 L10647: __attribute__ ((__unused__))
  if (sse_comparison_operator (x1, V4SImode))
    {
      operands[3] = x1;
      goto L6176;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6182: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (sse_comparison_operator (x2, V4SImode))
    {
      operands[3] = x2;
      goto L6183;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6183: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4SFmode))
    {
      operands[1] = x3;
      goto L6184;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6184: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, V4SFmode))
    {
      operands[2] = x3;
      goto L6185;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6185: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 572;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6189: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4SImode)
    goto L10651;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10651: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == NOT)
    goto L6199;
  if (sse_comparison_operator (x2, V4SImode))
    {
      operands[3] = x2;
      goto L6190;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6199: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (sse_comparison_operator (x3, V4SImode))
    {
      operands[3] = x3;
      goto L6200;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6200: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, V4SFmode))
    {
      operands[1] = x4;
      goto L6201;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6201: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (register_operand (x4, V4SFmode))
    {
      operands[2] = x4;
      goto L6202;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6202: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4SImode
      && ((enum rtx_code) (x2)->code) == SUBREG
      && (((x2)->u.fld[1]).rtint) == 0)
    goto L6203;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6203: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L6204;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6204: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 574;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6190: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4SFmode))
    {
      operands[1] = x3;
      goto L6191;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6191: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, V4SFmode))
    {
      operands[2] = x3;
      goto L6192;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6192: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4SImode
      && ((enum rtx_code) (x2)->code) == SUBREG
      && (((x2)->u.fld[1]).rtint) == 0)
    goto L6193;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6193: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L6194;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6194: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 573;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6176: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L6177;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6177: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, V4SFmode))
    {
      operands[2] = x2;
      goto L6178;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6178: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 571;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10177: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, V2DImode))
    {
      operands[0] = x1;
      goto L5730;
    }
 L10187: __attribute__ ((__unused__))
  if (push_operand (x1, V2DImode))
    {
      operands[0] = x1;
      goto L5770;
    }
  if (register_operand (x1, V2DImode))
    {
      operands[0] = x1;
      goto L6123;
    }
  goto L6876;

 L5730: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (vector_move_operand (x1, V2DImode))
    {
      operands[1] = x1;
      goto L5731;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10187;

 L5731: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 496;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10187;

 L5770: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (register_operand (x1, V2DImode))
    {
      operands[1] = x1;
      goto L5771;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L5771: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 506;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6123: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V2DImode)
    goto L10652;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10652: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case AND:
      goto L6124;
    case IOR:
      goto L6150;
    case XOR:
      goto L6162;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6124: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V2DImode)
    goto L10656;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10656: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == NOT)
    goto L6138;
  if (nonimmediate_operand (x2, V2DImode))
    {
      operands[1] = x2;
      goto L6125;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6138: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2DImode))
    {
      operands[1] = x3;
      goto L6139;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6139: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2DImode))
    {
      operands[2] = x2;
      goto L6140;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6140: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 564;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6125: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2DImode))
    {
      operands[2] = x2;
      goto L6126;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6126: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 562;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6150: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, V2DImode))
    {
      operands[1] = x2;
      goto L6151;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6151: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2DImode))
    {
      operands[2] = x2;
      goto L6152;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6152: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 566;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6162: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, V2DImode))
    {
      operands[1] = x2;
      goto L6163;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6163: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2DImode))
    {
      operands[2] = x2;
      goto L6164;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6164: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 568;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10198: __attribute__ ((__unused__))
  if (((enum rtx_code) (x1)->code) == MEM)
    goto L5830;
 L10178: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, V8QImode))
    {
      operands[0] = x1;
      goto L5734;
    }
 L10194: __attribute__ ((__unused__))
  if (push_operand (x1, V8QImode))
    {
      operands[0] = x1;
      goto L5798;
    }
  if (register_operand (x1, V8QImode))
    {
      operands[0] = x1;
      goto L6346;
    }
  goto L6876;

 L5830: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L5831;
    }
  goto L10178;

 L5831: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V8QImode
      && ((enum rtx_code) (x1)->code) == UNSPEC
      && (((((x1)->u.fld[0]).rtvec))->num_elem) == 2
      && (((x1)->u.fld[1]).rtint) == 32)
    goto L5832;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10178;

 L5832: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, V8QImode))
    {
      operands[1] = x2;
      goto L5833;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10178;

 L5833: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x2, V8QImode))
    {
      operands[2] = x2;
      goto L5834;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10178;

 L5834: __attribute__ ((__unused__))
  if (((((target_flags & 0x00004000) != 0) || ((target_flags & 0x00040000) != 0)) && !0))
    {
      return 520;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10178;

 L5734: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (vector_move_operand (x1, V8QImode))
    {
      operands[1] = x1;
      goto L5735;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10194;

 L5735: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 497;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10194;

 L5798: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (register_operand (x1, V8QImode))
    {
      operands[1] = x1;
      goto L5799;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L5799: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 513;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6346: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V8QImode)
    goto L10657;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10657: __attribute__ ((__unused__))
  tem = recog_9 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10179: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, V4HImode))
    {
      operands[0] = x1;
      goto L5738;
    }
 L10193: __attribute__ ((__unused__))
  if (push_operand (x1, V4HImode))
    {
      operands[0] = x1;
      goto L5794;
    }
  if (register_operand (x1, V4HImode))
    {
      operands[0] = x1;
      goto L6352;
    }
  goto L6876;

 L5738: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (vector_move_operand (x1, V4HImode))
    {
      operands[1] = x1;
      goto L5739;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10193;

 L5739: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 498;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10193;

 L5794: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (register_operand (x1, V4HImode))
    {
      operands[1] = x1;
      goto L5795;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L5795: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 512;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6352: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V4HImode)
    goto L10674;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10674: __attribute__ ((__unused__))
  tem = recog_10 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10180: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, V2SImode))
    {
      operands[0] = x1;
      goto L5742;
    }
 L10192: __attribute__ ((__unused__))
  if (push_operand (x1, V2SImode))
    {
      operands[0] = x1;
      goto L5790;
    }
  if (register_operand (x1, V2SImode))
    {
      operands[0] = x1;
      goto L6301;
    }
  goto L6876;

 L5742: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (vector_move_operand (x1, V2SImode))
    {
      operands[1] = x1;
      goto L5743;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10192;

 L5743: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 499;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10192;

 L5790: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (register_operand (x1, V2SImode))
    {
      operands[1] = x1;
      goto L5791;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L5791: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 511;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6301: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V2SImode)
    goto L10701;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10701: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case VEC_SELECT:
      goto L6302;
    case PLUS:
      goto L6359;
    case MINUS:
      goto L6408;
    case EQ:
      goto L6604;
    case GT:
      goto L6622;
    case ASHIFTRT:
      goto L6658;
    case LSHIFTRT:
      goto L6670;
    case ASHIFT:
      goto L6689;
    case VEC_MERGE:
      goto L6770;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6302: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4SImode)
    goto L10710;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10710: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case FIX:
      goto L6303;
    case UNSPEC:
      goto L10712;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6303: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, V4SFmode))
    {
      operands[1] = x3;
      goto L6304;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6304: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == PARALLEL
      && (((((x2)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L6305;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6305: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L6306;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6306: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 1L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 584;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10712: __attribute__ ((__unused__))
  if ((((((x2)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x2)->u.fld[1]).rtint) == 30)
    goto L6311;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6311: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (nonimmediate_operand (x3, V4SFmode))
    {
      operands[1] = x3;
      goto L6312;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6312: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == PARALLEL
      && (((((x2)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L6313;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6313: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L6314;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6314: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 1L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 585;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6359: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V2SImode)
    goto L10714;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10714: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == MULT)
    goto L6472;
  if (register_operand (x2, V2SImode))
    {
      operands[1] = x2;
      goto L6360;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6472: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == V2SImode
      && ((enum rtx_code) (x3)->code) == SIGN_EXTEND)
    goto L6473;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6473: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == V2HImode
      && ((enum rtx_code) (x4)->code) == VEC_SELECT)
    goto L6474;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6474: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (register_operand (x5, V4HImode))
    {
      operands[1] = x5;
      goto L6475;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6475: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[1]).rtx);
  if (((enum rtx_code) (x5)->code) == PARALLEL
      && (((((x5)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L6476;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6476: __attribute__ ((__unused__))
  x6 = (((((x5)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x6)->code) == CONST_INT
      && ((x6)->u.hwint[0]) == 0L)
    goto L6477;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6477: __attribute__ ((__unused__))
  x6 = (((((x5)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x6)->code) == CONST_INT
      && ((x6)->u.hwint[0]) == 2L)
    goto L6478;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6478: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == V2SImode
      && ((enum rtx_code) (x3)->code) == SIGN_EXTEND)
    goto L6479;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6479: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == V2HImode
      && ((enum rtx_code) (x4)->code) == VEC_SELECT)
    goto L6480;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6480: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (nonimmediate_operand (x5, V4HImode))
    {
      operands[2] = x5;
      goto L6481;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6481: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[1]).rtx);
  if (((enum rtx_code) (x5)->code) == PARALLEL
      && (((((x5)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L6482;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6482: __attribute__ ((__unused__))
  x6 = (((((x5)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x6)->code) == CONST_INT
      && ((x6)->u.hwint[0]) == 0L)
    goto L6483;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6483: __attribute__ ((__unused__))
  x6 = (((((x5)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x6)->code) == CONST_INT
      && ((x6)->u.hwint[0]) == 2L)
    goto L6484;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6484: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V2SImode
      && ((enum rtx_code) (x2)->code) == MULT)
    goto L6485;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6485: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == V2SImode
      && ((enum rtx_code) (x3)->code) == SIGN_EXTEND)
    goto L6486;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6486: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == V2HImode
      && ((enum rtx_code) (x4)->code) == VEC_SELECT)
    goto L6487;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6487: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (rtx_equal_p (x5, operands[1]))
    goto L6488;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6488: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[1]).rtx);
  if (((enum rtx_code) (x5)->code) == PARALLEL
      && (((((x5)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L6489;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6489: __attribute__ ((__unused__))
  x6 = (((((x5)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x6)->code) == CONST_INT
      && ((x6)->u.hwint[0]) == 1L)
    goto L6490;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6490: __attribute__ ((__unused__))
  x6 = (((((x5)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x6)->code) == CONST_INT
      && ((x6)->u.hwint[0]) == 3L)
    goto L6491;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6491: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == V2SImode
      && ((enum rtx_code) (x3)->code) == SIGN_EXTEND)
    goto L6492;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6492: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == V2HImode
      && ((enum rtx_code) (x4)->code) == VEC_SELECT)
    goto L6493;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6493: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (rtx_equal_p (x5, operands[2]))
    goto L6494;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6494: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[1]).rtx);
  if (((enum rtx_code) (x5)->code) == PARALLEL
      && (((((x5)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L6495;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6495: __attribute__ ((__unused__))
  x6 = (((((x5)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x6)->code) == CONST_INT
      && ((x6)->u.hwint[0]) == 1L)
    goto L6496;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6496: __attribute__ ((__unused__))
  x6 = (((((x5)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x6)->code) == CONST_INT
      && ((x6)->u.hwint[0]) == 3L
      && (((target_flags & 0x00002000) != 0)))
    {
      return 609;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6360: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2SImode))
    {
      operands[2] = x2;
      goto L6361;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6361: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 592;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6408: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2SImode))
    {
      operands[1] = x2;
      goto L6409;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6409: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2SImode))
    {
      operands[2] = x2;
      goto L6410;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6410: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 600;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6604: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2SImode))
    {
      operands[1] = x2;
      goto L6605;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6605: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2SImode))
    {
      operands[2] = x2;
      goto L6606;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6606: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 623;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6622: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2SImode))
    {
      operands[1] = x2;
      goto L6623;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6623: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2SImode))
    {
      operands[2] = x2;
      goto L6624;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6624: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 626;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6658: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2SImode))
    {
      operands[1] = x2;
      goto L6659;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6659: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonmemory_operand (x2, DImode))
    {
      operands[2] = x2;
      goto L6660;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6660: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 632;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6670: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2SImode))
    {
      operands[1] = x2;
      goto L6671;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6671: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonmemory_operand (x2, DImode))
    {
      operands[2] = x2;
      goto L6672;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6672: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 634;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6689: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2SImode))
    {
      operands[1] = x2;
      goto L6690;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6690: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonmemory_operand (x2, DImode))
    {
      operands[2] = x2;
      goto L6691;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6691: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 637;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6770: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V2SImode)
    goto L10716;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10716: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L6825;
  if (register_operand (x2, V2SImode))
    {
      operands[1] = x2;
      goto L6771;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6825: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2SImode))
    {
      operands[1] = x3;
      goto L6826;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6826: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L6827;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6827: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6828;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6828: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L6829;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6829: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, V2SImode))
    {
      operands[2] = x2;
      goto L6830;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6830: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00002000) != 0)))
    {
      return 647;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6771: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V2SImode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L6772;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6772: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2SImode))
    {
      operands[2] = x3;
      goto L6773;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6773: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L6774;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6774: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L6775;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6775: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L6776;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6776: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00002000) != 0)))
    {
      return 644;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10181: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, V2SFmode))
    {
      operands[0] = x1;
      goto L5746;
    }
 L10195: __attribute__ ((__unused__))
  if (push_operand (x1, V2SFmode))
    {
      operands[0] = x1;
      goto L5802;
    }
  goto L6876;

 L5746: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (vector_move_operand (x1, V2SFmode))
    {
      operands[1] = x1;
      goto L5747;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10195;

 L5747: __attribute__ ((__unused__))
  if ((((target_flags & 0x00020000) != 0)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 500;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10195;

 L5802: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (register_operand (x1, V2SFmode))
    {
      operands[1] = x1;
      goto L5803;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L5803: __attribute__ ((__unused__))
  if ((((target_flags & 0x00020000) != 0)))
    {
      return 514;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10182: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, V2DFmode))
    {
      operands[0] = x1;
      goto L5750;
    }
 L10186: __attribute__ ((__unused__))
  if (push_operand (x1, V2DFmode))
    {
      operands[0] = x1;
      goto L5766;
    }
  if (register_operand (x1, V2DFmode))
    {
      operands[0] = x1;
      goto L6171;
    }
  goto L6876;

 L5750: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (vector_move_operand (x1, V2DFmode))
    {
      operands[1] = x1;
      goto L5751;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10186;

 L5751: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 501;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10186;

 L5766: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (register_operand (x1, V2DFmode))
    {
      operands[1] = x1;
      goto L5767;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L5767: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 505;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6171: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V2DFmode
      && ((enum rtx_code) (x1)->code) == UNSPEC
      && (((((x1)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x1)->u.fld[1]).rtint) == 45)
    goto L6172;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6172: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 570;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10183: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, V8HImode))
    {
      operands[0] = x1;
      goto L5754;
    }
 L10188: __attribute__ ((__unused__))
  if (push_operand (x1, V8HImode))
    {
      operands[0] = x1;
      goto L5774;
    }
  goto L6876;

 L5754: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (vector_move_operand (x1, V8HImode))
    {
      operands[1] = x1;
      goto L5755;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10188;

 L5755: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 502;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10188;

 L5774: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (register_operand (x1, V8HImode))
    {
      operands[1] = x1;
      goto L5775;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L5775: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 507;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10184: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, V16QImode))
    {
      operands[0] = x1;
      goto L5758;
    }
 L10189: __attribute__ ((__unused__))
  if (push_operand (x1, V16QImode))
    {
      operands[0] = x1;
      goto L5778;
    }
  goto L6876;

 L5758: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (nonimmediate_operand (x1, V16QImode))
    {
      operands[1] = x1;
      goto L5759;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10189;

 L5759: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 503;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10189;

 L5778: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (register_operand (x1, V16QImode))
    {
      operands[1] = x1;
      goto L5779;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L5779: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 508;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10185: __attribute__ ((__unused__))
  tem = recog_11 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  goto L6876;

 L10197: __attribute__ ((__unused__))
  if (register_operand (x1, SImode))
    {
      operands[0] = x1;
      goto L5820;
    }
 L10214: __attribute__ ((__unused__))
  if (memory_operand (x1, SImode))
    {
      operands[0] = x1;
      goto L6873;
    }
  goto L6876;

 L5820: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == SImode)
    goto L10748;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10214;

 L10748: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case UNSPEC:
      goto L10751;
    case VEC_SELECT:
      goto L6326;
    case ZERO_EXTEND:
      goto L6578;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10214;

 L10751: __attribute__ ((__unused__))
  if ((((((x1)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x1)->u.fld[1]).rtint) == 33)
    goto L5821;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10214;

 L5821: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  switch (((enum machine_mode) (x2)->mode))
    {
    case V4SFmode:
      goto L10752;
    case V8QImode:
      goto L10753;
    default:
      break;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10214;

 L10752: __attribute__ ((__unused__))
  if (register_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L5822;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10214;

 L5822: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 518;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10214;

 L10753: __attribute__ ((__unused__))
  if (register_operand (x2, V8QImode))
    {
      operands[1] = x2;
      goto L5827;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10214;

 L5827: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0) || ((target_flags & 0x00040000) != 0)))
    {
      return 519;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10214;

 L6326: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4SImode)
    goto L10754;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10214;

 L10754: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case FIX:
      goto L6327;
    case UNSPEC:
      goto L10756;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10214;

 L6327: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, V4SFmode))
    {
      operands[1] = x3;
      goto L6328;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10214;

 L6328: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == PARALLEL
      && (((((x2)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L6329;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10214;

 L6329: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 587;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10214;

 L10756: __attribute__ ((__unused__))
  if ((((((x2)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x2)->u.fld[1]).rtint) == 30)
    goto L6341;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10214;

 L6341: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (nonimmediate_operand (x3, V4SFmode))
    {
      operands[1] = x3;
      goto L6342;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10214;

 L6342: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == PARALLEL
      && (((((x2)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L6343;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10214;

 L6343: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 589;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10214;

 L6578: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L6579;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10214;

 L6579: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4HImode))
    {
      operands[1] = x3;
      goto L6580;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10214;

 L6580: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L6581;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10214;

 L6581: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (const_0_to_3_operand (x4, SImode))
    {
      operands[2] = x4;
      goto L6582;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10214;

 L6582: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0) || ((target_flags & 0x00040000) != 0)))
    {
      return 619;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10214;

 L6873: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == SImode
      && ((enum rtx_code) (x1)->code) == UNSPEC_VOLATILE
      && (((((x1)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x1)->u.fld[1]).rtint) == 40)
    goto L6874;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6874: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 650;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10200: __attribute__ ((__unused__))
  if (memory_operand (x1, DImode))
    {
      operands[0] = x1;
      goto L5842;
    }
 L10211: __attribute__ ((__unused__))
  if (register_operand (x1, DImode))
    {
      operands[0] = x1;
      goto L6332;
    }
  goto L6876;

 L5842: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == DImode
      && ((enum rtx_code) (x1)->code) == UNSPEC
      && (((((x1)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x1)->u.fld[1]).rtint) == 34)
    goto L5843;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10211;

 L5843: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, DImode))
    {
      operands[1] = x2;
      goto L5844;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10211;

 L5844: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0) || ((target_flags & 0x00040000) != 0)))
    {
      return 522;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10211;

 L6332: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == DImode)
    goto L10757;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10757: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case VEC_SELECT:
      goto L6333;
    case UNSPEC:
      goto L10760;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6333: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4DImode
      && ((enum rtx_code) (x2)->code) == FIX)
    goto L6334;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6334: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, V4SFmode))
    {
      operands[1] = x3;
      goto L6335;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6335: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == PARALLEL
      && (((((x2)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L6336;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6336: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 588;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10760: __attribute__ ((__unused__))
  switch ((((((x1)->u.fld[0]).rtvec))->num_elem))
    {
    case 1:
      goto L10762;
    case 2:
      goto L10763;
    default:
      break;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10762: __attribute__ ((__unused__))
  if ((((x1)->u.fld[1]).rtint) == 45)
    goto L6365;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6365: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (((enum machine_mode) (x2)->mode) == DImode)
    goto L10764;
 L6514: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (((target_flags & 0x00002000) != 0)))
    {
      return 612;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10764: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case PLUS:
      goto L6366;
    case MINUS:
      goto L6415;
    case IOR:
      goto L6501;
    case XOR:
      goto L6508;
    case AND:
      goto L6519;
    case LSHIFTRT:
      goto L6677;
    case ASHIFT:
      goto L6696;
    default:
     break;
   }
  goto L6514;

 L6366: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L6367;
    }
  goto L6514;

 L6367: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, DImode))
    {
      operands[2] = x3;
      goto L6368;
    }
  goto L6514;

 L6368: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 593;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  goto L6514;

 L6415: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L6416;
    }
  goto L6514;

 L6416: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, DImode))
    {
      operands[2] = x3;
      goto L6417;
    }
  goto L6514;

 L6417: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 601;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  goto L6514;

 L6501: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L6502;
    }
  goto L6514;

 L6502: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, DImode))
    {
      operands[2] = x3;
      goto L6503;
    }
  goto L6514;

 L6503: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 610;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  goto L6514;

 L6508: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L6509;
    }
  goto L6514;

 L6509: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, DImode))
    {
      operands[2] = x3;
      goto L6510;
    }
  goto L6514;

 L6510: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 611;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  goto L6514;

 L6519: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == DImode)
    goto L10772;
  goto L6514;

 L10772: __attribute__ ((__unused__))
  if (((enum rtx_code) (x3)->code) == NOT)
    goto L6527;
  if (register_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L6520;
    }
  goto L6514;

 L6527: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, DImode))
    {
      operands[1] = x4;
      goto L6528;
    }
  goto L6514;

 L6528: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, DImode))
    {
      operands[2] = x3;
      goto L6529;
    }
  goto L6514;

 L6529: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 614;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  goto L6514;

 L6520: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, DImode))
    {
      operands[2] = x3;
      goto L6521;
    }
  goto L6514;

 L6521: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 613;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  goto L6514;

 L6677: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L6678;
    }
  goto L6514;

 L6678: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonmemory_operand (x3, DImode))
    {
      operands[2] = x3;
      goto L6679;
    }
  goto L6514;

 L6679: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 635;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  goto L6514;

 L6696: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L6697;
    }
  goto L6514;

 L6697: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonmemory_operand (x3, DImode))
    {
      operands[2] = x3;
      goto L6698;
    }
  goto L6514;

 L6698: __attribute__ ((__unused__))
  if ((((target_flags & 0x00002000) != 0)))
    {
      return 638;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  goto L6514;

 L10763: __attribute__ ((__unused__))
  if ((((x1)->u.fld[1]).rtint) == 61)
    goto L6563;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6563: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, V8QImode))
    {
      operands[1] = x2;
      goto L6564;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6564: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (nonimmediate_operand (x2, V8QImode))
    {
      operands[2] = x2;
      goto L6565;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6565: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0) || ((target_flags & 0x00040000) != 0)))
    {
      return 617;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10202: __attribute__ ((__unused__))
  if (memory_operand (x1, SFmode))
    {
      operands[0] = x1;
      goto L5896;
    }
  goto L6876;

 L5896: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == SFmode
      && ((enum rtx_code) (x1)->code) == VEC_SELECT)
    goto L5897;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L5897: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L5898;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L5898: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == PARALLEL
      && (((((x2)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L5899;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L5899: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 529;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10208: __attribute__ ((__unused__))
  if (((enum rtx_code) (x1)->code) == REG
      && (((x1)->u.fld[0]).rtint) == 17)
    goto L6207;
  goto L6876;

 L6207: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == CCFPmode
      && ((enum rtx_code) (x1)->code) == COMPARE)
    goto L6208;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6208: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SFmode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L6209;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6209: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4SFmode))
    {
      operands[0] = x3;
      goto L6210;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6210: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L6211;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6211: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L6212;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6212: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SFmode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L6213;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6213: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4SFmode))
    {
      operands[1] = x3;
      goto L6214;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6214: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L6215;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6215: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 575;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L10209: __attribute__ ((__unused__))
  if (((enum rtx_code) (x1)->code) == REG
      && (((x1)->u.fld[0]).rtint) == 17)
    goto L6218;
  goto L6876;

 L6218: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == CCFPUmode
      && ((enum rtx_code) (x1)->code) == COMPARE)
    goto L6219;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6219: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SFmode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L6220;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6220: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4SFmode))
    {
      operands[0] = x3;
      goto L6221;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6221: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L6222;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6222: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L6223;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6223: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SFmode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L6224;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6224: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V4SFmode))
    {
      operands[1] = x3;
      goto L6225;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6225: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L6226;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6226: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L
      && (((target_flags & 0x00004000) != 0)))
    {
      return 576;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6876;

 L6877: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == BLKmode
      && ((enum rtx_code) (x1)->code) == UNSPEC
      && (((((x1)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x1)->u.fld[1]).rtint) == 44)
    goto L6878;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6880;

 L6878: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (rtx_equal_p (x2, operands[0])
      && (((target_flags & 0x00004000) != 0) || ((target_flags & 0x00040000) != 0)))
    {
      return 651;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L6880;

 L10215: __attribute__ ((__unused__))
  if (register_operand (x1, V2SFmode))
    {
      operands[0] = x1;
      goto L6881;
    }
  goto L8224;

 L6881: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V2SFmode)
    goto L10773;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10773: __attribute__ ((__unused__))
  tem = recog_12 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10216: __attribute__ ((__unused__))
  if (register_operand (x1, V2SImode))
    {
      operands[0] = x1;
      goto L6899;
    }
  goto L8224;

 L6899: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V2SImode)
    goto L10804;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10804: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case GT:
      goto L6900;
    case GE:
      goto L6906;
    case EQ:
      goto L6912;
    case FIX:
      goto L6973;
    case SIGN_EXTEND:
      goto L6978;
    case VEC_SELECT:
      goto L7119;
    case UNSPEC:
      goto L10811;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L6900: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2SFmode))
    {
      operands[1] = x2;
      goto L6901;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L6901: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2SFmode))
    {
      operands[2] = x2;
      goto L6902;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L6902: __attribute__ ((__unused__))
  if ((((target_flags & 0x00020000) != 0)))
    {
      return 655;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L6906: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2SFmode))
    {
      operands[1] = x2;
      goto L6907;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L6907: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2SFmode))
    {
      operands[2] = x2;
      goto L6908;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L6908: __attribute__ ((__unused__))
  if ((((target_flags & 0x00020000) != 0)))
    {
      return 656;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L6912: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2SFmode))
    {
      operands[1] = x2;
      goto L6913;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L6913: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2SFmode))
    {
      operands[2] = x2;
      goto L6914;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L6914: __attribute__ ((__unused__))
  if ((((target_flags & 0x00020000) != 0)))
    {
      return 657;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L6973: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case V2SFmode:
      goto L10812;
    case V2DFmode:
      goto L10813;
    default:
      break;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10812: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, V2SFmode))
    {
      operands[1] = x2;
      goto L6974;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L6974: __attribute__ ((__unused__))
  if ((((target_flags & 0x00020000) != 0)))
    {
      return 662;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10813: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, V2DFmode))
    {
      operands[1] = x2;
      goto L7371;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7371: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 713;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L6978: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V2HImode
      && ((enum rtx_code) (x2)->code) == SS_TRUNCATE)
    goto L6979;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L6979: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == V2SImode
      && ((enum rtx_code) (x3)->code) == FIX)
    goto L6980;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L6980: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, V2SFmode))
    {
      operands[1] = x4;
      goto L6981;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L6981: __attribute__ ((__unused__))
  if ((((target_flags & 0x00040000) != 0)))
    {
      return 663;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7119: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, V2SImode))
    {
      operands[1] = x2;
      goto L7120;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7120: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == PARALLEL
      && (((((x2)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L7121;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7121: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 1L)
    goto L7122;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7122: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L
      && (((target_flags & 0x00040000) != 0)))
    {
      return 676;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10811: __attribute__ ((__unused__))
  if ((((((x1)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x1)->u.fld[1]).rtint) == 30)
    goto L7375;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7375: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (nonimmediate_operand (x2, V2DFmode))
    {
      operands[1] = x2;
      goto L7376;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7376: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 714;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10217: __attribute__ ((__unused__))
  if (register_operand (x1, V8QImode))
    {
      operands[0] = x1;
      goto L7068;
    }
  goto L8224;

 L7068: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V8QImode
      && ((enum rtx_code) (x1)->code) == UNSPEC
      && (((((x1)->u.fld[0]).rtvec))->num_elem) == 2
      && (((x1)->u.fld[1]).rtint) == 49)
    goto L7069;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7069: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, V8QImode))
    {
      operands[1] = x2;
      goto L7070;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7070: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (nonimmediate_operand (x2, V8QImode))
    {
      operands[2] = x2;
      goto L7071;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7071: __attribute__ ((__unused__))
  if ((((target_flags & 0x00020000) != 0)))
    {
      return 669;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10218: __attribute__ ((__unused__))
  if (register_operand (x1, V4HImode))
    {
      operands[0] = x1;
      goto L7102;
    }
  goto L8224;

 L7102: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V4HImode
      && ((enum rtx_code) (x1)->code) == TRUNCATE)
    goto L7103;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7103: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4SImode
      && ((enum rtx_code) (x2)->code) == LSHIFTRT)
    goto L7104;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7104: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == V4SImode
      && ((enum rtx_code) (x3)->code) == PLUS)
    goto L7105;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7105: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == V4SImode
      && ((enum rtx_code) (x4)->code) == MULT)
    goto L7106;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7106: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (((enum machine_mode) (x5)->mode) == V4SImode
      && ((enum rtx_code) (x5)->code) == SIGN_EXTEND)
    goto L7107;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7107: __attribute__ ((__unused__))
  x6 = (((x5)->u.fld[0]).rtx);
  if (register_operand (x6, V4HImode))
    {
      operands[1] = x6;
      goto L7108;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7108: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[1]).rtx);
  if (((enum machine_mode) (x5)->mode) == V4SImode
      && ((enum rtx_code) (x5)->code) == SIGN_EXTEND)
    goto L7109;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7109: __attribute__ ((__unused__))
  x6 = (((x5)->u.fld[0]).rtx);
  if (nonimmediate_operand (x6, V4HImode))
    {
      operands[2] = x6;
      goto L7110;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7110: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum machine_mode) (x4)->mode) == V4SImode
      && ((enum rtx_code) (x4)->code) == CONST_VECTOR
      && (((((x4)->u.fld[0]).rtvec))->num_elem) == 4)
    goto L7111;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7111: __attribute__ ((__unused__))
  x5 = (((((x4)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 32768L)
    goto L7112;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7112: __attribute__ ((__unused__))
  x5 = (((((x4)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 32768L)
    goto L7113;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7113: __attribute__ ((__unused__))
  x5 = (((((x4)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 32768L)
    goto L7114;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7114: __attribute__ ((__unused__))
  x5 = (((((x4)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 32768L)
    goto L7115;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7115: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 16L
      && (((target_flags & 0x00020000) != 0)))
    {
      return 675;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10219: __attribute__ ((__unused__))
  if (register_operand (x1, V2DFmode))
    {
      operands[0] = x1;
      goto L7141;
    }
 L10225: __attribute__ ((__unused__))
  if (memory_operand (x1, V2DFmode))
    {
      operands[0] = x1;
      goto L7315;
    }
 L10234: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, V2DFmode))
    {
      operands[0] = x1;
      goto L8134;
    }
  goto L8224;

 L7141: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V2DFmode)
    goto L10814;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10225;

 L10814: __attribute__ ((__unused__))
  tem = recog_13 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10225;

 L7315: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V2DFmode
      && ((enum rtx_code) (x1)->code) == UNSPEC
      && (((((x1)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x1)->u.fld[1]).rtint) == 34)
    goto L7316;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10234;

 L7316: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, V2DFmode))
    {
      operands[1] = x2;
      goto L7317;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10234;

 L7317: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 704;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10234;

 L8134: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V2DFmode)
    goto L10842;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10842: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case UNSPEC:
      goto L10845;
    case VEC_MERGE:
      goto L8191;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10845: __attribute__ ((__unused__))
  if ((((((x1)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L10847;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10847: __attribute__ ((__unused__))
  switch ((((x1)->u.fld[1]).rtint))
    {
    case 38L:
      goto L8135;
    case 39L:
      goto L8140;
    default:
      break;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L8135: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (nonimmediate_operand (x2, V2DFmode))
    {
      operands[1] = x2;
      goto L8136;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L8136: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 795;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L8140: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (nonimmediate_operand (x2, V2DFmode))
    {
      operands[1] = x2;
      goto L8141;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L8141: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 796;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L8191: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, V2DFmode))
    {
      operands[1] = x2;
      goto L8192;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L8192: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2DFmode))
    {
      operands[2] = x2;
      goto L8193;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L8193: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT)
    goto L10849;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10849: __attribute__ ((__unused__))
  if ((int) ((x2)->u.hwint[0]) == ((x2)->u.hwint[0]))
    switch ((int) ((x2)->u.hwint[0]))
      {
      case 2L:
        goto L10851;
      case 1L:
        goto L10852;
      default:
        break;
      }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10851: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0) && (((enum rtx_code) (operands[1])->code) == MEM || ((enum rtx_code) (operands[2])->code) == MEM)))
    {
      return 804;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10852: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0) && ix86_binary_operator_ok (UNKNOWN, V2DFmode, operands)))
    {
      return 806;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10220: __attribute__ ((__unused__))
  if (register_operand (x1, V2DImode))
    {
      operands[0] = x1;
      goto L7237;
    }
 L10226: __attribute__ ((__unused__))
  if (memory_operand (x1, V2DImode))
    {
      operands[0] = x1;
      goto L7320;
    }
  goto L8224;

 L7237: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V2DImode)
    goto L10854;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L10854: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case NOT:
      goto L7244;
    case VEC_MERGE:
      goto L7251;
    case PLUS:
      goto L7462;
    case MINUS:
      goto L7510;
    case MULT:
      goto L7579;
    case UNSPEC:
      goto L10863;
    case LSHIFTRT:
      goto L7801;
    case ASHIFT:
      goto L7819;
    case VEC_CONCAT:
      goto L8161;
    case EQ:
    case LT:
    case LE:
    case UNORDERED:
    case NE:
    case UNGE:
    case UNGT:
    case ORDERED:
    case UNEQ:
    case UNLT:
    case UNLE:
    case LTGT:
    case GE:
    case GT:
      goto L10853;
    default:
      x1 = (((x0)->u.fld[0]).rtx);
      goto L10226;
   }
 L10853: __attribute__ ((__unused__))
  if (sse_comparison_operator (x1, V2DImode))
    {
      operands[3] = x1;
      goto L7238;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7244: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (sse_comparison_operator (x2, V2DImode))
    {
      operands[3] = x2;
      goto L7245;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7245: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2DFmode))
    {
      operands[1] = x3;
      goto L7246;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7246: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, V2DFmode))
    {
      operands[2] = x3;
      goto L7247;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7247: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 695;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7251: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V2DImode)
    goto L10865;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L10865: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case NOT:
      goto L7261;
    case VEC_SELECT:
      goto L8116;
    case EQ:
    case LT:
    case LE:
    case UNORDERED:
    case NE:
    case UNGE:
    case UNGT:
    case ORDERED:
    case UNEQ:
    case UNLT:
    case UNLE:
    case LTGT:
    case GE:
    case GT:
      goto L10864;
    case SUBREG:
    case REG:
    case ADDRESSOF:
      goto L10867;
    default:
      x1 = (((x0)->u.fld[0]).rtx);
      goto L10226;
   }
 L10864: __attribute__ ((__unused__))
  if (sse_comparison_operator (x2, V2DImode))
    {
      operands[3] = x2;
      goto L7252;
    }
 L10867: __attribute__ ((__unused__))
  if (register_operand (x2, V2DImode))
    {
      operands[1] = x2;
      goto L8126;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7261: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (sse_comparison_operator (x3, V2DImode))
    {
      operands[3] = x3;
      goto L7262;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7262: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, V2DFmode))
    {
      operands[1] = x4;
      goto L7263;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7263: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, V2DFmode))
    {
      operands[2] = x4;
      goto L7264;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7264: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V2DImode
      && ((enum rtx_code) (x2)->code) == SUBREG
      && (((x2)->u.fld[1]).rtint) == 0)
    goto L7265;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7265: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L7266;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7266: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 697;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L8116: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2DImode))
    {
      operands[2] = x3;
      goto L8117;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L8117: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L8118;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L8118: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L8119;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L8119: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L8120;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L8120: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, V2DImode))
    {
      operands[1] = x2;
      goto L8121;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L8121: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 793;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7252: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2DFmode))
    {
      operands[1] = x3;
      goto L7253;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7253: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, V2DFmode))
    {
      operands[2] = x3;
      goto L7254;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7254: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V2DImode
      && ((enum rtx_code) (x2)->code) == SUBREG
      && (((x2)->u.fld[1]).rtint) == 0)
    goto L7255;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7255: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L7256;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7256: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 696;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L8126: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V2DImode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L8127;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L8127: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2DImode))
    {
      operands[2] = x3;
      goto L8128;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L8128: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L8129;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L8129: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L8130;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L8130: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L8131;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L8131: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 1L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 794;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7462: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2DImode))
    {
      operands[1] = x2;
      goto L7463;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7463: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2DImode))
    {
      operands[2] = x2;
      goto L7464;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7464: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 726;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7510: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2DImode))
    {
      operands[1] = x2;
      goto L7511;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7511: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2DImode))
    {
      operands[2] = x2;
      goto L7512;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7512: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 734;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7579: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V2DImode
      && ((enum rtx_code) (x2)->code) == ZERO_EXTEND)
    goto L7580;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7580: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == V2SImode
      && ((enum rtx_code) (x3)->code) == VEC_SELECT)
    goto L7581;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7581: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, V4SImode))
    {
      operands[1] = x4;
      goto L7582;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7582: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == PARALLEL
      && (((((x4)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L7583;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7583: __attribute__ ((__unused__))
  x5 = (((((x4)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 0L)
    goto L7584;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7584: __attribute__ ((__unused__))
  x5 = (((((x4)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 2L)
    goto L7585;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7585: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V2DImode
      && ((enum rtx_code) (x2)->code) == ZERO_EXTEND)
    goto L7586;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7586: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == V2SImode
      && ((enum rtx_code) (x3)->code) == VEC_SELECT)
    goto L7587;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7587: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, V4SImode))
    {
      operands[2] = x4;
      goto L7588;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7588: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == PARALLEL
      && (((((x4)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L7589;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7589: __attribute__ ((__unused__))
  x5 = (((((x4)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 0L)
    goto L7590;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7590: __attribute__ ((__unused__))
  x5 = (((((x4)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 2L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 743;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L10863: __attribute__ ((__unused__))
  if ((((((x1)->u.fld[0]).rtvec))->num_elem) == 2
      && (((x1)->u.fld[1]).rtint) == 61)
    goto L7676;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7676: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, V16QImode))
    {
      operands[1] = x2;
      goto L7677;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7677: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (nonimmediate_operand (x2, V16QImode))
    {
      operands[2] = x2;
      goto L7678;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7678: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 748;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7801: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2DImode))
    {
      operands[1] = x2;
      goto L7802;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7802: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonmemory_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L7803;
    }
 L7854: __attribute__ ((__unused__))
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == SUBREG
      && (((x2)->u.fld[1]).rtint) == 0)
    goto L7855;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7803: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 768;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L7854;

 L7855: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonmemory_operand (x3, V2DImode))
    {
      operands[2] = x3;
      goto L7856;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7856: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 776;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7819: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2DImode))
    {
      operands[1] = x2;
      goto L7820;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7820: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonmemory_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L7821;
    }
 L7875: __attribute__ ((__unused__))
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == SUBREG
      && (((x2)->u.fld[1]).rtint) == 0)
    goto L7876;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7821: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 771;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L7875;

 L7876: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonmemory_operand (x3, V2DImode))
    {
      operands[2] = x3;
      goto L7877;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7877: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 779;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L8161: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode)
    goto L10869;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L10869: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L8167;
  if (nonimmediate_operand (x2, DImode))
    {
      operands[1] = x2;
      goto L8162;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L8167: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, V2DImode))
    {
      operands[1] = x3;
      goto L8168;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L8168: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L8169;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L8169: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L8170;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L8170: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 801;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L8162: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (((target_flags & 0x00008000) != 0) && !0))
    {
      return 800;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7238: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2DFmode))
    {
      operands[1] = x2;
      goto L7239;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7239: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, V2DFmode))
    {
      operands[2] = x2;
      goto L7240;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7240: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 694;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10226;

 L7320: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V2DImode
      && ((enum rtx_code) (x1)->code) == UNSPEC
      && (((((x1)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x1)->u.fld[1]).rtint) == 34)
    goto L7321;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7321: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, V2DImode))
    {
      operands[1] = x2;
      goto L7322;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7322: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 705;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10221: __attribute__ ((__unused__))
  if (((enum rtx_code) (x1)->code) == REG
      && (((x1)->u.fld[0]).rtint) == 17)
    goto L7269;
  goto L8224;

 L7269: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == CCFPmode
      && ((enum rtx_code) (x1)->code) == COMPARE)
    goto L7270;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7270: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L7271;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7271: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2DFmode))
    {
      operands[0] = x3;
      goto L7272;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7272: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L7273;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7273: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L7274;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7274: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L7275;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7275: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2DFmode))
    {
      operands[1] = x3;
      goto L7276;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7276: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L7277;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7277: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 698;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10222: __attribute__ ((__unused__))
  if (((enum rtx_code) (x1)->code) == REG
      && (((x1)->u.fld[0]).rtint) == 17)
    goto L7280;
  goto L8224;

 L7280: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == CCFPUmode
      && ((enum rtx_code) (x1)->code) == COMPARE)
    goto L7281;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7281: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L7282;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7282: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2DFmode))
    {
      operands[0] = x3;
      goto L7283;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7283: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L7284;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7284: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L7285;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7285: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L7286;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7286: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2DFmode))
    {
      operands[1] = x3;
      goto L7287;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7287: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L7288;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7288: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 699;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10223: __attribute__ ((__unused__))
  if (register_operand (x1, SImode))
    {
      operands[0] = x1;
      goto L7291;
    }
 L10227: __attribute__ ((__unused__))
  if (memory_operand (x1, SImode))
    {
      operands[0] = x1;
      goto L7325;
    }
 L10237: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, SImode))
    {
      operands[0] = x1;
      goto L8184;
    }
  goto L8224;

 L7291: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == SImode)
    goto L10870;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10227;

 L10870: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case UNSPEC:
      goto L10874;
    case FIX:
      goto L7385;
    case ZERO_EXTEND:
      goto L7691;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10227;

 L10874: __attribute__ ((__unused__))
  if ((((((x1)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L10876;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10227;

 L10876: __attribute__ ((__unused__))
  switch ((((x1)->u.fld[1]).rtint))
    {
    case 33L:
      goto L7292;
    case 30L:
      goto L7392;
    default:
      break;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10227;

 L7292: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  switch (((enum machine_mode) (x2)->mode))
    {
    case V2DFmode:
      goto L10878;
    case V16QImode:
      goto L10879;
    default:
      break;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10227;

 L10878: __attribute__ ((__unused__))
  if (register_operand (x2, V2DFmode))
    {
      operands[1] = x2;
      goto L7293;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10227;

 L7293: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 700;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10227;

 L10879: __attribute__ ((__unused__))
  if (register_operand (x2, V16QImode))
    {
      operands[1] = x2;
      goto L7298;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10227;

 L7298: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 701;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10227;

 L7392: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (((enum machine_mode) (x2)->mode) == DFmode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L7393;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10227;

 L7393: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2DFmode))
    {
      operands[1] = x3;
      goto L7394;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10227;

 L7394: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L7395;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10227;

 L7395: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 717;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10227;

 L7385: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L7386;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10227;

 L7386: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2DFmode))
    {
      operands[1] = x3;
      goto L7387;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10227;

 L7387: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L7388;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10227;

 L7388: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 716;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10227;

 L7691: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L7692;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10227;

 L7692: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V8HImode))
    {
      operands[1] = x3;
      goto L7693;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10227;

 L7693: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L7694;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10227;

 L7694: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (const_0_to_7_operand (x4, SImode))
    {
      operands[2] = x4;
      goto L7695;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10227;

 L7695: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 750;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10227;

 L7325: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == SImode
      && ((enum rtx_code) (x1)->code) == UNSPEC
      && (((((x1)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x1)->u.fld[1]).rtint) == 34)
    goto L7326;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10237;

 L7326: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L7327;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10237;

 L7327: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 706;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10237;

 L8184: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == SImode
      && ((enum rtx_code) (x1)->code) == VEC_SELECT)
    goto L8185;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L8185: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4SImode))
    {
      operands[1] = x2;
      goto L8186;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L8186: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == PARALLEL
      && (((((x2)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L8187;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L8187: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 803;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10224: __attribute__ ((__unused__))
  if (((enum rtx_code) (x1)->code) == MEM)
    goto L7301;
  if (register_operand (x1, V16QImode))
    {
      operands[0] = x1;
      goto L7443;
    }
 L10235: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, V16QImode))
    {
      operands[0] = x1;
      goto L8144;
    }
  goto L8224;

 L7301: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case SImode:
      goto L10880;
    case DImode:
      goto L10881;
    default:
      break;
    }
  goto L10235;

 L10880: __attribute__ ((__unused__))
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L7302;
    }
  goto L10235;

 L7302: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V16QImode
      && ((enum rtx_code) (x1)->code) == UNSPEC
      && (((((x1)->u.fld[0]).rtvec))->num_elem) == 2
      && (((x1)->u.fld[1]).rtint) == 32)
    goto L7303;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10235;

 L7303: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, V16QImode))
    {
      operands[1] = x2;
      goto L7304;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10235;

 L7304: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x2, V16QImode))
    {
      operands[2] = x2;
      goto L7305;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10235;

 L7305: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 702;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10235;

 L10881: __attribute__ ((__unused__))
  if (register_operand (x2, DImode))
    {
      operands[0] = x2;
      goto L7309;
    }
  goto L10235;

 L7309: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V16QImode
      && ((enum rtx_code) (x1)->code) == UNSPEC
      && (((((x1)->u.fld[0]).rtvec))->num_elem) == 2
      && (((x1)->u.fld[1]).rtint) == 32)
    goto L7310;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10235;

 L7310: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, V16QImode))
    {
      operands[1] = x2;
      goto L7311;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10235;

 L7311: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x2, V16QImode))
    {
      operands[2] = x2;
      goto L7312;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10235;

 L7312: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 703;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10235;

 L7443: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V16QImode)
    goto L10882;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10235;

 L10882: __attribute__ ((__unused__))
  tem = recog_14 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10235;

 L8144: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V16QImode)
    goto L10899;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10899: __attribute__ ((__unused__))
  if (((enum rtx_code) (x1)->code) == UNSPEC)
    goto L10901;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10901: __attribute__ ((__unused__))
  if ((((((x1)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L10903;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10903: __attribute__ ((__unused__))
  switch ((((x1)->u.fld[1]).rtint))
    {
    case 38L:
      goto L8145;
    case 39L:
      goto L8150;
    default:
      break;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L8145: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (nonimmediate_operand (x2, V16QImode))
    {
      operands[1] = x2;
      goto L8146;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L8146: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 797;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L8150: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (nonimmediate_operand (x2, V16QImode))
    {
      operands[1] = x2;
      goto L8151;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L8151: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 798;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10228: __attribute__ ((__unused__))
  if (register_operand (x1, V4SFmode))
    {
      operands[0] = x1;
      goto L7330;
    }
  goto L8224;

 L7330: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V4SFmode)
    goto L10905;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10905: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case FLOAT:
      goto L7331;
    case VEC_MERGE:
      goto L7407;
    case SUBREG:
      goto L10908;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7331: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, V4SImode))
    {
      operands[1] = x2;
      goto L7332;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7332: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 707;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7407: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L7408;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7408: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4SFmode
      && ((enum rtx_code) (x2)->code) == VEC_DUPLICATE)
    goto L7409;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7409: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == V2SFmode
      && ((enum rtx_code) (x3)->code) == FLOAT_TRUNCATE)
    goto L7410;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7410: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, V2DFmode))
    {
      operands[2] = x4;
      goto L7411;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7411: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 14L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 719;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10908: __attribute__ ((__unused__))
  if ((((x1)->u.fld[1]).rtint) == 0)
    goto L7426;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7426: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == V4SImode
      && ((enum rtx_code) (x2)->code) == VEC_CONCAT)
    goto L7427;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7427: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == V2SImode
      && ((enum rtx_code) (x3)->code) == SUBREG
      && (((x3)->u.fld[1]).rtint) == 0)
    goto L7428;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7428: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == V2SFmode
      && ((enum rtx_code) (x4)->code) == FLOAT_TRUNCATE)
    goto L7429;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7429: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (nonimmediate_operand (x5, V2DFmode))
    {
      operands[1] = x5;
      goto L7430;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7430: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == V2SImode
      && ((enum rtx_code) (x3)->code) == CONST_VECTOR
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L7431;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7431: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L7432;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7432: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 721;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10229: __attribute__ ((__unused__))
  if (register_operand (x1, V4SImode))
    {
      operands[0] = x1;
      goto L7335;
    }
  goto L8224;

 L7335: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V4SImode)
    goto L10909;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10909: __attribute__ ((__unused__))
  tem = recog_15 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10231: __attribute__ ((__unused__))
  if (register_operand (x1, V8HImode))
    {
      operands[0] = x1;
      goto L7449;
    }
  goto L8224;

 L7449: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V8HImode)
    goto L10934;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10934: __attribute__ ((__unused__))
  tem = recog_16 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10232: __attribute__ ((__unused__))
  if (register_operand (x1, DImode))
    {
      operands[0] = x1;
      goto L7565;
    }
 L10236: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, DImode))
    {
      operands[0] = x1;
      goto L8154;
    }
  goto L8224;

 L7565: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == DImode
      && ((enum rtx_code) (x1)->code) == MULT)
    goto L7566;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10236;

 L7566: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == ZERO_EXTEND)
    goto L7567;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10236;

 L7567: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == VEC_SELECT)
    goto L7568;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10236;

 L7568: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, V2SImode))
    {
      operands[1] = x4;
      goto L7569;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10236;

 L7569: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == PARALLEL
      && (((((x4)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L7570;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10236;

 L7570: __attribute__ ((__unused__))
  x5 = (((((x4)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 0L)
    goto L7571;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10236;

 L7571: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == ZERO_EXTEND)
    goto L7572;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10236;

 L7572: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == VEC_SELECT)
    goto L7573;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10236;

 L7573: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, V2SImode))
    {
      operands[2] = x4;
      goto L7574;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10236;

 L7574: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == PARALLEL
      && (((((x4)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L7575;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10236;

 L7575: __attribute__ ((__unused__))
  x5 = (((((x4)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 0L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 742;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10236;

 L8154: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == DImode
      && ((enum rtx_code) (x1)->code) == VEC_SELECT)
    goto L8155;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L8155: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2DImode))
    {
      operands[1] = x2;
      goto L8156;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L8156: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == PARALLEL
      && (((((x2)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L8157;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L8157: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L
      && (((target_flags & 0x00008000) != 0) && !0))
    {
      return 799;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10233: __attribute__ ((__unused__))
  if (register_operand (x1, TImode))
    {
      operands[0] = x1;
      goto L7880;
    }
  goto L8224;

 L7880: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == TImode
      && ((enum rtx_code) (x1)->code) == UNSPEC
      && (((((x1)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x1)->u.fld[1]).rtint) == 45)
    goto L7881;
  if (((enum rtx_code) (x1)->code) == CONST_INT
      && ((x1)->u.hwint[0]) == 0L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 745;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7881: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (((enum machine_mode) (x2)->mode) == TImode)
    goto L10965;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10965: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case ASHIFT:
      goto L7882;
    case LSHIFTRT:
      goto L7890;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7882: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, TImode))
    {
      operands[1] = x3;
      goto L7883;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7883: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == MULT)
    goto L7884;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7884: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (immediate_operand (x4, SImode))
    {
      operands[2] = x4;
      goto L7885;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7885: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 780;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7890: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, TImode))
    {
      operands[1] = x3;
      goto L7891;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7891: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == MULT)
    goto L7892;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7892: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (immediate_operand (x4, SImode))
    {
      operands[2] = x4;
      goto L7893;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L7893: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 781;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L10238: __attribute__ ((__unused__))
  if (memory_operand (x1, DFmode))
    {
      operands[0] = x1;
      goto L8209;
    }
  goto L8224;

 L8209: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == DFmode
      && ((enum rtx_code) (x1)->code) == VEC_SELECT)
    goto L8210;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L8210: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, V2DFmode))
    {
      operands[1] = x2;
      goto L8211;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L8211: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == PARALLEL
      && (((((x2)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L8212;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L8212: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L
      && (((target_flags & 0x00008000) != 0)))
    {
      return 807;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8224;

 L8225: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == BLKmode)
    goto L10967;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8241;

 L10967: __attribute__ ((__unused__))
  if (((enum rtx_code) (x1)->code) == UNSPEC)
    goto L10969;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8241;

 L10969: __attribute__ ((__unused__))
  if ((((((x1)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L10971;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8241;

 L10971: __attribute__ ((__unused__))
  switch ((((x1)->u.fld[1]).rtint))
    {
    case 59L:
      goto L8226;
    case 60L:
      goto L8230;
    default:
      break;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8241;

 L8226: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (rtx_equal_p (x2, operands[0])
      && (((target_flags & 0x00008000) != 0)))
    {
      return 810;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8241;

 L8230: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (rtx_equal_p (x2, operands[0])
      && (((target_flags & 0x00008000) != 0)))
    {
      return 811;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8241;

 L10239: __attribute__ ((__unused__))
  if (register_operand (x1, V4SFmode))
    {
      operands[0] = x1;
      goto L8242;
    }
  goto ret0;

 L8242: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V4SFmode)
    goto L10973;
  goto ret0;

 L10973: __attribute__ ((__unused__))
  if (((enum rtx_code) (x1)->code) == UNSPEC)
    goto L10978;
  goto ret0;

 L10978: __attribute__ ((__unused__))
  switch ((((((x1)->u.fld[0]).rtvec))->num_elem))
    {
    case 2:
      goto L10983;
    case 1:
      goto L10986;
    default:
      break;
    }
  goto ret0;

 L10983: __attribute__ ((__unused__))
  switch ((((x1)->u.fld[1]).rtint))
    {
    case 71L:
      goto L8243;
    case 72L:
      goto L8255;
    case 73L:
      goto L8267;
    default:
      break;
    }
  goto ret0;

 L8243: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L8244;
    }
  goto ret0;

 L8244: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[2] = x2;
      goto L8245;
    }
  goto ret0;

 L8245: __attribute__ ((__unused__))
  if ((((target_flags & 0x00010000) != 0)))
    {
      return 814;
    }
  goto ret0;

 L8255: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L8256;
    }
  goto ret0;

 L8256: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[2] = x2;
      goto L8257;
    }
  goto ret0;

 L8257: __attribute__ ((__unused__))
  if ((((target_flags & 0x00010000) != 0)))
    {
      return 816;
    }
  goto ret0;

 L8267: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L8268;
    }
  goto ret0;

 L8268: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[2] = x2;
      goto L8269;
    }
  goto ret0;

 L8269: __attribute__ ((__unused__))
  if ((((target_flags & 0x00010000) != 0)))
    {
      return 818;
    }
  goto ret0;

 L10986: __attribute__ ((__unused__))
  switch ((((x1)->u.fld[1]).rtint))
    {
    case 74L:
      goto L8279;
    case 75L:
      goto L8284;
    default:
      break;
    }
  goto ret0;

 L8279: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L8280;
    }
  goto ret0;

 L8280: __attribute__ ((__unused__))
  if ((((target_flags & 0x00010000) != 0)))
    {
      return 820;
    }
  goto ret0;

 L8284: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[1] = x2;
      goto L8285;
    }
  goto ret0;

 L8285: __attribute__ ((__unused__))
  if ((((target_flags & 0x00010000) != 0)))
    {
      return 821;
    }
  goto ret0;

 L10240: __attribute__ ((__unused__))
  if (register_operand (x1, V2DFmode))
    {
      operands[0] = x1;
      goto L8248;
    }
  goto ret0;

 L8248: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V2DFmode)
    goto L10988;
  goto ret0;

 L10988: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case UNSPEC:
      goto L10992;
    case VEC_DUPLICATE:
      goto L8294;
    default:
     break;
   }
  goto ret0;

 L10992: __attribute__ ((__unused__))
  if ((((((x1)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L10995;
  goto ret0;

 L10995: __attribute__ ((__unused__))
  switch ((((x1)->u.fld[1]).rtint))
    {
    case 71L:
      goto L8249;
    case 72L:
      goto L8261;
    case 73L:
      goto L8273;
    default:
      break;
    }
  goto ret0;

 L8249: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, V2DFmode))
    {
      operands[1] = x2;
      goto L8250;
    }
  goto ret0;

 L8250: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (nonimmediate_operand (x2, V2DFmode))
    {
      operands[2] = x2;
      goto L8251;
    }
  goto ret0;

 L8251: __attribute__ ((__unused__))
  if ((((target_flags & 0x00010000) != 0)))
    {
      return 815;
    }
  goto ret0;

 L8261: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, V2DFmode))
    {
      operands[1] = x2;
      goto L8262;
    }
  goto ret0;

 L8262: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (nonimmediate_operand (x2, V2DFmode))
    {
      operands[2] = x2;
      goto L8263;
    }
  goto ret0;

 L8263: __attribute__ ((__unused__))
  if ((((target_flags & 0x00010000) != 0)))
    {
      return 817;
    }
  goto ret0;

 L8273: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, V2DFmode))
    {
      operands[1] = x2;
      goto L8274;
    }
  goto ret0;

 L8274: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (nonimmediate_operand (x2, V2DFmode))
    {
      operands[2] = x2;
      goto L8275;
    }
  goto ret0;

 L8275: __attribute__ ((__unused__))
  if ((((target_flags & 0x00010000) != 0)))
    {
      return 819;
    }
  goto ret0;

 L8294: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode)
    goto L10999;
  goto ret0;

 L10999: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == VEC_SELECT)
    goto L8300;
  if (memory_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L8295;
    }
  goto ret0;

 L8300: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, V2DFmode))
    {
      operands[1] = x3;
      goto L8301;
    }
  goto ret0;

 L8301: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == PARALLEL
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L8302;
  goto ret0;

 L8302: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L
      && (((target_flags & 0x00010000) != 0)))
    {
      return 824;
    }
  goto ret0;

 L8295: __attribute__ ((__unused__))
  if ((((target_flags & 0x00010000) != 0)))
    {
      return 823;
    }
  goto ret0;

 L10241: __attribute__ ((__unused__))
  if (register_operand (x1, V16QImode))
    {
      operands[0] = x1;
      goto L8288;
    }
  goto ret0;

 L8288: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == V16QImode
      && ((enum rtx_code) (x1)->code) == UNSPEC
      && (((((x1)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x1)->u.fld[1]).rtint) == 76)
    goto L8289;
  goto ret0;

 L8289: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (memory_operand (x2, V16QImode))
    {
      operands[1] = x2;
      goto L8290;
    }
  goto ret0;

 L8290: __attribute__ ((__unused__))
  if ((((target_flags & 0x00010000) != 0)))
    {
      return 822;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_18 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  switch (((enum rtx_code) (x2)->code))
    {
    case MEM:
      goto L229;
    case PLUS:
      goto L915;
    case MINUS:
      goto L1366;
    case AND:
      goto L1951;
    case IOR:
      goto L2169;
    case XOR:
      goto L2419;
    case NEG:
      goto L2703;
    case ASHIFT:
      goto L3129;
    case ASHIFTRT:
      goto L3293;
    case LSHIFTRT:
      goto L3531;
    case ROTATE:
      goto L3725;
    case ROTATERT:
      goto L3841;
    default:
     break;
   }
  goto ret0;

 L229: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 7)
    goto L230;
  goto ret0;

 L230: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L231;
  goto ret0;

 L231: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 7)
    goto L232;
  goto ret0;

 L232: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L233;
  goto ret0;

 L233: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 7)
    goto L234;
  goto ret0;

 L234: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 4L)
    {
      return 33;
    }
  goto ret0;

 L915: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode)
    goto L11046;
  goto ret0;

 L11046: __attribute__ ((__unused__))
  if (((enum rtx_code) (x3)->code) == PLUS)
    goto L916;
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L985;
    }
  goto ret0;

 L916: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (ix86_carry_flag_operator (x4, SImode))
    {
      operands[3] = x4;
      goto L917;
    }
  goto ret0;

 L917: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L918;
    }
  goto ret0;

 L918: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L919;
    }
  goto ret0;

 L919: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L920;
  goto ret0;

 L920: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (PLUS, SImode, operands)))
    {
      return 131;
    }
  goto ret0;

 L985: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L986;
    }
  goto ret0;

 L986: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L987;
  goto ret0;

 L987: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (PLUS, SImode, operands)))
    {
      return 138;
    }
  goto ret0;

 L1366: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L1367;
    }
  goto ret0;

 L1367: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == PLUS)
    goto L1368;
  if (general_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L1386;
    }
  goto ret0;

 L1368: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (ix86_carry_flag_operator (x4, SImode))
    {
      operands[3] = x4;
      goto L1369;
    }
  goto ret0;

 L1369: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (general_operand (x4, SImode))
    {
      operands[2] = x4;
      goto L1370;
    }
  goto ret0;

 L1370: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1371;
  goto ret0;

 L1371: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (MINUS, SImode, operands)))
    {
      return 161;
    }
  goto ret0;

 L1386: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1387;
  goto ret0;

 L1387: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (MINUS, SImode, operands)))
    {
      return 162;
    }
  goto ret0;

 L1951: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L1952;
    }
  goto ret0;

 L1952: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L1953;
    }
  goto ret0;

 L1953: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1954;
  goto ret0;

 L1954: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (AND, SImode, operands)))
    {
      return 197;
    }
  goto ret0;

 L2169: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode)
    goto L11049;
  goto ret0;

 L11049: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x3)->code))
    {
    case ASHIFT:
      goto L3105;
    case ASHIFTRT:
      goto L3269;
    case SUBREG:
    case REG:
    case MEM:
    case ADDRESSOF:
      goto L11048;
    default:
      goto ret0;
   }
 L11048: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L2170;
    }
  goto ret0;

 L3105: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (rtx_equal_p (x4, operands[0]))
    goto L3106;
  goto ret0;

 L3106: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonmemory_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L3107;
    }
  goto ret0;

 L3107: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == LSHIFTRT)
    goto L3108;
  goto ret0;

 L3108: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L3109;
    }
  goto ret0;

 L3109: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum machine_mode) (x4)->mode) == QImode
      && ((enum rtx_code) (x4)->code) == MINUS)
    goto L3110;
  goto ret0;

 L3110: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 32L)
    goto L3111;
  goto ret0;

 L3111: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[1]).rtx);
  if (rtx_equal_p (x5, operands[2]))
    goto L3112;
  goto ret0;

 L3112: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3113;
  goto ret0;

 L3113: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return 279;
    }
  goto ret0;

 L3269: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (rtx_equal_p (x4, operands[0]))
    goto L3270;
  goto ret0;

 L3270: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonmemory_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L3271;
    }
  goto ret0;

 L3271: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == ASHIFT)
    goto L3272;
  goto ret0;

 L3272: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L3273;
    }
  goto ret0;

 L3273: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum machine_mode) (x4)->mode) == QImode
      && ((enum rtx_code) (x4)->code) == MINUS)
    goto L3274;
  goto ret0;

 L3274: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 32L)
    goto L3275;
  goto ret0;

 L3275: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[1]).rtx);
  if (rtx_equal_p (x5, operands[2]))
    goto L3276;
  goto ret0;

 L3276: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3277;
  goto ret0;

 L3277: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return 290;
    }
  goto ret0;

 L2170: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L2171;
    }
  goto ret0;

 L2171: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2172;
  goto ret0;

 L2172: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (IOR, SImode, operands)))
    {
      return 209;
    }
  goto ret0;

 L2419: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L2420;
    }
  goto ret0;

 L2420: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L2421;
    }
  goto ret0;

 L2421: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2422;
  goto ret0;

 L2422: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (XOR, SImode, operands)))
    {
      return 223;
    }
  goto ret0;

 L2703: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L2704;
    }
  goto ret0;

 L2704: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2705;
  goto ret0;

 L2705: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_unary_operator_ok (NEG, SImode, operands)))
    {
      return 239;
    }
  goto ret0;

 L3129: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L3130;
    }
  goto ret0;

 L3130: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3131;
    }
  goto ret0;

 L3131: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3132;
  goto ret0;

 L3132: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (ASHIFT, SImode, operands)))
    {
      return 280;
    }
  goto ret0;

 L3293: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L3294;
    }
  goto ret0;

 L3294: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT)
    goto L11051;
 L3322: __attribute__ ((__unused__))
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3323;
    }
  goto ret0;

 L11051: __attribute__ ((__unused__))
  if (const_int_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L3295;
    }
 L11052: __attribute__ ((__unused__))
  if (const1_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3309;
    }
  goto L3322;

 L3295: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3296;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L11052;

 L3296: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((operands[2])->u.hwint[0]) == 31 && ((x86_use_cltd & (1 << ix86_tune)) || optimize_size)
   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)))
    {
      return 291;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L11052;

 L3309: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3310;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3322;

 L3310: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (ASHIFTRT, SImode, operands)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size)))
    {
      return 292;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3322;

 L3323: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3324;
  goto ret0;

 L3324: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (ASHIFTRT, SImode, operands)))
    {
      return 293;
    }
  goto ret0;

 L3531: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L3532;
    }
  goto ret0;

 L3532: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const1_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3533;
    }
 L3546: __attribute__ ((__unused__))
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3547;
    }
  goto ret0;

 L3533: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3534;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3546;

 L3534: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (LSHIFTRT, HImode, operands)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size)))
    {
      return 308;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3546;

 L3547: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3548;
  goto ret0;

 L3548: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (LSHIFTRT, HImode, operands)))
    {
      return 309;
    }
  goto ret0;

 L3725: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L3726;
    }
  goto ret0;

 L3726: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const1_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3727;
    }
 L3740: __attribute__ ((__unused__))
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3741;
    }
  goto ret0;

 L3727: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3728;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3740;

 L3728: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (ROTATE, SImode, operands)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size)))
    {
      return 322;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3740;

 L3741: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3742;
  goto ret0;

 L3742: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (ROTATE, SImode, operands)))
    {
      return 323;
    }
  goto ret0;

 L3841: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L3842;
    }
  goto ret0;

 L3842: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const1_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3843;
    }
 L3856: __attribute__ ((__unused__))
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3857;
    }
  goto ret0;

 L3843: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3844;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3856;

 L3844: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (ROTATERT, SImode, operands)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size)))
    {
      return 330;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3856;

 L3857: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3858;
  goto ret0;

 L3858: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (ROTATERT, SImode, operands)))
    {
      return 331;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_19 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum rtx_code) (x2)->code))
    {
    case MEM:
      goto L11023;
    case ZERO_EXTRACT:
      goto L1258;
    default:
     break;
   }
 L11001: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L228;
    }
 L11002: __attribute__ ((__unused__))
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L266;
    }
  goto ret0;

 L11023: __attribute__ ((__unused__))
  if (push_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L208;
    }
  goto L11001;

 L208: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (general_no_elim_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L209;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11001;

 L209: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L210;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11001;

 L210: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == BLKmode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L211;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11001;

 L211: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == SCRATCH)
    {
      return 31;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11001;

 L1258: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (ext_register_operand (x3, VOIDmode))
    {
      operands[0] = x3;
      goto L1259;
    }
  goto ret0;

 L1259: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 8L)
    goto L1260;
  goto ret0;

 L1260: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 8L)
    goto L1261;
  goto ret0;

 L1261: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode)
    goto L11024;
  goto ret0;

 L11024: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case PLUS:
      goto L1262;
    case AND:
      goto L2065;
    case IOR:
      goto L2337;
    case XOR:
      goto L2542;
    default:
     break;
   }
  goto ret0;

 L1262: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == ZERO_EXTRACT)
    goto L1263;
  goto ret0;

 L1263: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (ext_register_operand (x4, VOIDmode))
    {
      operands[1] = x4;
      goto L1264;
    }
  goto ret0;

 L1264: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L1265;
  goto ret0;

 L1265: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[2]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L1292;
  goto ret0;

 L1292: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == ZERO_EXTRACT)
    goto L1293;
  if (general_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L1267;
    }
  goto ret0;

 L1293: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (ext_register_operand (x4, VOIDmode))
    {
      operands[2] = x4;
      goto L1294;
    }
  goto ret0;

 L1294: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L1295;
  goto ret0;

 L1295: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[2]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L1296;
  goto ret0;

 L1296: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1297;
  goto ret0;

 L1297: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return 157;
    }
  goto ret0;

 L1267: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1268;
  goto ret0;

 L1268: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return 156;
    }
  goto ret0;

 L2065: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == ZERO_EXTRACT)
    goto L2066;
  goto ret0;

 L2066: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (ext_register_operand (x4, VOIDmode))
    {
      operands[1] = x4;
      goto L2067;
    }
  goto ret0;

 L2067: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L2068;
  goto ret0;

 L2068: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[2]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L2117;
  goto ret0;

 L2117: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode)
    goto L11028;
 L2069: __attribute__ ((__unused__))
  if (const_int_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L2070;
    }
  goto ret0;

 L11028: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x3)->code))
    {
    case ZERO_EXTEND:
      goto L2118;
    case ZERO_EXTRACT:
      goto L2146;
    default:
     break;
   }
  goto L2069;

 L2118: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (general_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L2119;
    }
  goto L2069;

 L2119: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2120;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L2069;

 L2120: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return 207;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L2069;

 L2146: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (ext_register_operand (x4, VOIDmode))
    {
      operands[2] = x4;
      goto L2147;
    }
  goto L2069;

 L2147: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L2148;
  goto L2069;

 L2148: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[2]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L2149;
  goto L2069;

 L2149: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2150;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L2069;

 L2150: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return 208;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L2069;

 L2070: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2071;
  goto ret0;

 L2071: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return 205;
    }
  goto ret0;

 L2337: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == ZERO_EXTRACT)
    goto L2338;
  goto ret0;

 L2338: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (ext_register_operand (x4, VOIDmode))
    {
      operands[1] = x4;
      goto L2339;
    }
  goto ret0;

 L2339: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L2340;
  goto ret0;

 L2340: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[2]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L2367;
  goto ret0;

 L2367: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode)
    goto L11030;
 L2341: __attribute__ ((__unused__))
  if (const_int_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L2342;
    }
  goto ret0;

 L11030: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x3)->code))
    {
    case ZERO_EXTEND:
      goto L2368;
    case ZERO_EXTRACT:
      goto L2396;
    default:
     break;
   }
  goto L2341;

 L2368: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (general_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L2369;
    }
  goto L2341;

 L2369: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2370;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L2341;

 L2370: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0
   && (!(x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)))
    {
      return 221;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L2341;

 L2396: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (ext_register_operand (x4, VOIDmode))
    {
      operands[2] = x4;
      goto L2397;
    }
  goto L2341;

 L2397: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L2398;
  goto L2341;

 L2398: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[2]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L2399;
  goto L2341;

 L2399: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2400;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L2341;

 L2400: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((!(x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)))
    {
      return 222;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L2341;

 L2342: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2343;
  goto ret0;

 L2343: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((!(x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)))
    {
      return 220;
    }
  goto ret0;

 L2542: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == ZERO_EXTRACT)
    goto L2543;
  goto ret0;

 L2543: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (ext_register_operand (x4, VOIDmode))
    {
      operands[1] = x4;
      goto L2544;
    }
  goto ret0;

 L2544: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L2545;
  goto ret0;

 L2545: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[2]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L2572;
  goto ret0;

 L2572: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode)
    goto L11032;
 L2546: __attribute__ ((__unused__))
  if (const_int_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L2547;
    }
  goto ret0;

 L11032: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x3)->code))
    {
    case ZERO_EXTEND:
      goto L2573;
    case ZERO_EXTRACT:
      goto L2601;
    default:
     break;
   }
  goto L2546;

 L2573: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (general_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L2574;
    }
  goto L2546;

 L2574: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2575;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L2546;

 L2575: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0
   && (!(x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)))
    {
      return 232;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L2546;

 L2601: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (ext_register_operand (x4, VOIDmode))
    {
      operands[2] = x4;
      goto L2602;
    }
  goto L2546;

 L2602: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L2603;
  goto L2546;

 L2603: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[2]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L2604;
  goto L2546;

 L2604: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2605;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L2546;

 L2605: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((!(x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)))
    {
      return 233;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L2546;

 L2547: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2548;
  goto ret0;

 L2548: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((!(x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)))
    {
      return 231;
    }
  goto ret0;

 L228: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode)
    goto L11034;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11002;

 L11034: __attribute__ ((__unused__))
  tem = recog_18 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11002;

 L266: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode)
    goto L11054;
 L238: __attribute__ ((__unused__))
  if (const0_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L239;
    }
 L248: __attribute__ ((__unused__))
  if (immediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L249;
    }
  goto ret0;

 L11054: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case ZERO_EXTEND:
      goto L459;
    case MULT:
      goto L1514;
    case DIV:
      goto L1719;
    case UDIV:
      goto L1820;
    case UNSPEC:
      goto L11063;
    case CTZ:
      goto L4411;
    case MINUS:
      goto L4423;
    case PLUS:
      goto L4545;
    case IF_THEN_ELSE:
      goto L5228;
    case SUBREG:
    case REG:
    case ADDRESSOF:
      goto L11053;
    default:
      goto L238;
   }
 L11053: __attribute__ ((__unused__))
  if (register_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L267;
    }
  goto L238;

 L459: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x3)->mode))
    {
    case HImode:
      goto L11064;
    case QImode:
      goto L11065;
    default:
      break;
    }
  goto L238;

 L11064: __attribute__ ((__unused__))
  if (register_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L460;
    }
  goto L238;

 L460: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L461;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L461: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((x86_zero_extend_with_and & (1 << ix86_tune)) && !optimize_size))
    {
      return 73;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L11065: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L506;
    }
  goto L238;

 L506: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L507;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L507: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode)
    goto L11066;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L11066: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG)
    goto L11068;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L11068: __attribute__ ((__unused__))
  if ((((x2)->u.fld[0]).rtint) == 17)
    goto L11070;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L11070: __attribute__ ((__unused__))
  if (((x86_zero_extend_with_and & (1 << ix86_tune)) && !optimize_size))
    {
      return 78;
    }
 L11071: __attribute__ ((__unused__))
  if ((!(x86_zero_extend_with_and & (1 << ix86_tune)) || optimize_size))
    {
      return 79;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L1514: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L1515;
    }
  goto L238;

 L1515: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L1516;
    }
  goto L238;

 L1516: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1517;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L1517: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM))
    {
      return 172;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L1719: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L1720;
    }
  goto L238;

 L1720: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[3] = x3;
      goto L1721;
    }
  goto L238;

 L1721: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L1722;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L1722: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L1723;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L1723: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == MOD)
    goto L1724;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L1724: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[2]))
    goto L1725;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L1725: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[3])
      && (!optimize_size && !(x86_use_cltd & (1 << ix86_tune)))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 183;
    }
 L1749: __attribute__ ((__unused__))
  if (rtx_equal_p (x3, operands[3])
      && (optimize_size || (x86_use_cltd & (1 << ix86_tune)))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 184;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L1820: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L1821;
    }
  goto L238;

 L1821: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L1822;
    }
  goto L238;

 L1822: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L1823;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L1823: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L1824;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L1824: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == UMOD)
    goto L1825;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L1825: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L1826;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L1826: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 187;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L11063: __attribute__ ((__unused__))
  if ((((((x2)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x2)->u.fld[1]).rtint) == 12)
    goto L4347;
  goto L238;

 L4347: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L4348;
  goto L238;

 L4348: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4349;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L4349: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return 370;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L4411: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L4412;
    }
  goto L238;

 L4412: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4413;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L4413: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return 376;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L4423: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 31L)
    goto L4424;
  goto L238;

 L4424: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == CLZ)
    goto L4425;
  goto L238;

 L4425: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L4426;
    }
  goto L238;

 L4426: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4427;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L4427: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return 377;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L4545: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == UNSPEC
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x3)->u.fld[1]).rtint) == 15)
    goto L4546;
  goto L238;

 L4546: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L4547;
  goto L238;

 L4547: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L4548;
    }
  goto L238;

 L4548: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4549;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L4549: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return 384;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L5228: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (ix86_carry_flag_operator (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L5229;
    }
  goto L238;

 L5229: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == -1L)
    goto L5230;
  goto L238;

 L5230: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L5231;
  goto L238;

 L5231: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5232;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L5232: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return 454;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L267: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L268;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L268: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L269;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L269: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[0]))
    {
      return 38;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L238;

 L239: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L240;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L248;

 L240: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed && (!(x86_use_mov0 & (1 << ix86_tune)) || optimize_size)))
    {
      return 34;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L248;

 L249: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L250;
  goto ret0;

 L250: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed
   && operands[1] == (const_int_rtx[64 -1])
   && ((ix86_tune == PROCESSOR_PENTIUM) || optimize_size)))
    {
      return 35;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_20 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L280;
    }
 L11012: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L896;
    }
  goto ret0;

 L280: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode)
    goto L11073;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L11073: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case ZERO_EXTEND:
      goto L476;
    case MULT:
      goto L1528;
    case DIV:
      goto L1796;
    case SUBREG:
    case REG:
    case ADDRESSOF:
      goto L11072;
    default:
      x2 = (((x1)->u.fld[0]).rtx);
      goto L11012;
   }
 L11072: __attribute__ ((__unused__))
  if (register_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L281;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L476: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L477;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L477: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L478;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L478: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode)
    goto L11076;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L11076: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG)
    goto L11078;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L11078: __attribute__ ((__unused__))
  if ((((x2)->u.fld[0]).rtint) == 17)
    goto L11080;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L11080: __attribute__ ((__unused__))
  if (((x86_zero_extend_with_and & (1 << ix86_tune)) && !optimize_size))
    {
      return 75;
    }
 L11081: __attribute__ ((__unused__))
  if ((!(x86_zero_extend_with_and & (1 << ix86_tune)) || optimize_size))
    {
      return 76;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L1528: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == HImode)
    goto L11083;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L11083: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x3)->code))
    {
    case ZERO_EXTEND:
      goto L1557;
    case SIGN_EXTEND:
      goto L1575;
    case SUBREG:
    case REG:
    case MEM:
    case ADDRESSOF:
      goto L11082;
    default:
      x2 = (((x1)->u.fld[0]).rtx);
      goto L11012;
   }
 L11082: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L1529;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L1557: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, QImode))
    {
      operands[1] = x4;
      goto L1558;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L1558: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == HImode
      && ((enum rtx_code) (x3)->code) == ZERO_EXTEND)
    goto L1559;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L1559: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L1560;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L1560: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1561;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L1561: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((x86_qimode_math & (1 << ix86_tune))
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 175;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L1575: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, QImode))
    {
      operands[1] = x4;
      goto L1576;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L1576: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == HImode
      && ((enum rtx_code) (x3)->code) == SIGN_EXTEND)
    goto L1577;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L1577: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L1578;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L1578: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1579;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L1579: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((x86_qimode_math & (1 << ix86_tune))
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 176;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L1529: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, HImode))
    {
      operands[2] = x3;
      goto L1530;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L1530: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1531;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L1531: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM))
    {
      return 173;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L1796: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L1797;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L1797: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, HImode))
    {
      operands[2] = x3;
      goto L1798;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L1798: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L1799;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L1799: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, HImode))
    {
      operands[3] = x2;
      goto L1800;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L1800: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == MOD)
    goto L1801;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L1801: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L1802;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L1802: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && ((x86_himode_math & (1 << ix86_tune)))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 186;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L281: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L282;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L282: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L283;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L283: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[0])
      && ((x86_partial_reg_stall & (1 << ix86_tune))))
    {
      return 41;
    }
 L290: __attribute__ ((__unused__))
  if (rtx_equal_p (x2, operands[0])
      && (! (x86_partial_reg_stall & (1 << ix86_tune))))
    {
      return 42;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11012;

 L896: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode)
    goto L11085;
  goto ret0;

 L11085: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case PLUS:
      goto L897;
    case MINUS:
      goto L1348;
    case AND:
      goto L1978;
    case IOR:
      goto L2214;
    case XOR:
      goto L2464;
    case NEG:
      goto L2726;
    case ASHIFT:
      goto L3156;
    case ASHIFTRT:
      goto L3361;
    case LSHIFTRT:
      goto L3585;
    case ROTATE:
      goto L3753;
    case ROTATERT:
      goto L3869;
    default:
     break;
   }
  goto ret0;

 L897: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == HImode)
    goto L11096;
  goto ret0;

 L11096: __attribute__ ((__unused__))
  if (((enum rtx_code) (x3)->code) == PLUS)
    goto L898;
  if (nonimmediate_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L1062;
    }
  goto ret0;

 L898: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (ix86_carry_flag_operator (x4, HImode))
    {
      operands[3] = x4;
      goto L899;
    }
  goto ret0;

 L899: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, HImode))
    {
      operands[1] = x4;
      goto L900;
    }
  goto ret0;

 L900: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, HImode))
    {
      operands[2] = x3;
      goto L901;
    }
  goto ret0;

 L901: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L902;
  goto ret0;

 L902: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (PLUS, HImode, operands)))
    {
      return 130;
    }
  goto ret0;

 L1062: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, HImode))
    {
      operands[2] = x3;
      goto L1063;
    }
  goto ret0;

 L1063: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1064;
  goto ret0;

 L1064: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode)
    goto L11098;
  goto ret0;

 L11098: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG)
    goto L11100;
  goto ret0;

 L11100: __attribute__ ((__unused__))
  if ((((x2)->u.fld[0]).rtint) == 17)
    goto L11102;
  goto ret0;

 L11102: __attribute__ ((__unused__))
  if ((!(x86_partial_reg_stall & (1 << ix86_tune))
   && ix86_binary_operator_ok (PLUS, HImode, operands)))
    {
      return 143;
    }
 L11103: __attribute__ ((__unused__))
  if (((x86_partial_reg_stall & (1 << ix86_tune))
   && ix86_binary_operator_ok (PLUS, HImode, operands)))
    {
      return 144;
    }
  goto ret0;

 L1348: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L1349;
    }
  goto ret0;

 L1349: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == HImode
      && ((enum rtx_code) (x3)->code) == PLUS)
    goto L1350;
  if (general_operand (x3, HImode))
    {
      operands[2] = x3;
      goto L1424;
    }
  goto ret0;

 L1350: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (ix86_carry_flag_operator (x4, HImode))
    {
      operands[3] = x4;
      goto L1351;
    }
  goto ret0;

 L1351: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (general_operand (x4, HImode))
    {
      operands[2] = x4;
      goto L1352;
    }
  goto ret0;

 L1352: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1353;
  goto ret0;

 L1353: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (MINUS, HImode, operands)))
    {
      return 160;
    }
  goto ret0;

 L1424: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1425;
  goto ret0;

 L1425: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (MINUS, HImode, operands)))
    {
      return 165;
    }
  goto ret0;

 L1978: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L1979;
    }
  goto ret0;

 L1979: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, HImode))
    {
      operands[2] = x3;
      goto L1980;
    }
  goto ret0;

 L1980: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1981;
  goto ret0;

 L1981: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (AND, HImode, operands)))
    {
      return 199;
    }
  goto ret0;

 L2214: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L2215;
    }
  goto ret0;

 L2215: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, HImode))
    {
      operands[2] = x3;
      goto L2216;
    }
  goto ret0;

 L2216: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2217;
  goto ret0;

 L2217: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (IOR, HImode, operands)))
    {
      return 212;
    }
  goto ret0;

 L2464: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L2465;
    }
  goto ret0;

 L2465: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, HImode))
    {
      operands[2] = x3;
      goto L2466;
    }
  goto ret0;

 L2466: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2467;
  goto ret0;

 L2467: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (XOR, HImode, operands)))
    {
      return 226;
    }
  goto ret0;

 L2726: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L2727;
    }
  goto ret0;

 L2727: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2728;
  goto ret0;

 L2728: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_unary_operator_ok (NEG, HImode, operands)))
    {
      return 241;
    }
  goto ret0;

 L3156: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L3157;
    }
  goto ret0;

 L3157: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3158;
    }
  goto ret0;

 L3158: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3159;
  goto ret0;

 L3159: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode)
    goto L11104;
  goto ret0;

 L11104: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG)
    goto L11106;
  goto ret0;

 L11106: __attribute__ ((__unused__))
  if ((((x2)->u.fld[0]).rtint) == 17)
    goto L11108;
  goto ret0;

 L11108: __attribute__ ((__unused__))
  if ((!(x86_partial_reg_stall & (1 << ix86_tune))
   && ix86_binary_operator_ok (ASHIFT, HImode, operands)))
    {
      return 282;
    }
 L11109: __attribute__ ((__unused__))
  if (((x86_partial_reg_stall & (1 << ix86_tune))
   && ix86_binary_operator_ok (ASHIFT, HImode, operands)))
    {
      return 283;
    }
  goto ret0;

 L3361: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L3362;
    }
  goto ret0;

 L3362: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const1_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3363;
    }
 L3376: __attribute__ ((__unused__))
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3377;
    }
  goto ret0;

 L3363: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3364;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3376;

 L3364: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (ASHIFTRT, HImode, operands)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size)))
    {
      return 296;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3376;

 L3377: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3378;
  goto ret0;

 L3378: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (ASHIFTRT, HImode, operands)))
    {
      return 297;
    }
  goto ret0;

 L3585: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L3586;
    }
  goto ret0;

 L3586: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const1_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3587;
    }
 L3600: __attribute__ ((__unused__))
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3601;
    }
  goto ret0;

 L3587: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3588;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3600;

 L3588: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (LSHIFTRT, HImode, operands)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size)))
    {
      return 312;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3600;

 L3601: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3602;
  goto ret0;

 L3602: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (LSHIFTRT, HImode, operands)))
    {
      return 313;
    }
  goto ret0;

 L3753: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L3754;
    }
  goto ret0;

 L3754: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const1_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3755;
    }
 L3768: __attribute__ ((__unused__))
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3769;
    }
  goto ret0;

 L3755: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3756;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3768;

 L3756: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (ROTATE, HImode, operands)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size)))
    {
      return 324;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3768;

 L3769: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3770;
  goto ret0;

 L3770: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (ROTATE, HImode, operands)))
    {
      return 325;
    }
  goto ret0;

 L3869: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L3870;
    }
  goto ret0;

 L3870: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const1_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3871;
    }
 L3884: __attribute__ ((__unused__))
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3885;
    }
  goto ret0;

 L3871: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3872;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3884;

 L3872: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (ROTATERT, HImode, operands)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size)))
    {
      return 332;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3884;

 L3885: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3886;
  goto ret0;

 L3886: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (ROTATERT, HImode, operands)))
    {
      return 333;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_21 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L318;
    }
 L11011: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L878;
    }
  goto ret0;

 L318: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode)
    goto L11111;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11011;

 L11111: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case MULT:
      goto L1542;
    case DIV:
      goto L1678;
    case UDIV:
      goto L1692;
    case SUBREG:
    case REG:
    case ADDRESSOF:
      goto L11110;
    default:
      x2 = (((x1)->u.fld[0]).rtx);
      goto L11011;
   }
 L11110: __attribute__ ((__unused__))
  if (register_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L319;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11011;

 L1542: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L1543;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11011;

 L1543: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L1544;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11011;

 L1544: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1545;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11011;

 L1545: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((x86_qimode_math & (1 << ix86_tune))
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 174;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11011;

 L1678: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L1679;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11011;

 L1679: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L1680;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11011;

 L1680: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1681;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11011;

 L1681: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((x86_qimode_math & (1 << ix86_tune))))
    {
      return 181;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11011;

 L1692: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L1693;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11011;

 L1693: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L1694;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11011;

 L1694: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1695;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11011;

 L1695: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((x86_qimode_math & (1 << ix86_tune))))
    {
      return 182;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11011;

 L319: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L320;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11011;

 L320: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L321;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11011;

 L321: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[0]))
    {
      return 47;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11011;

 L878: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode)
    goto L11114;
  goto ret0;

 L11114: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case PLUS:
      goto L879;
    case MINUS:
      goto L1330;
    case AND:
      goto L2005;
    case IOR:
      goto L2259;
    case XOR:
      goto L2509;
    case NEG:
      goto L2749;
    case ASHIFT:
      goto L3197;
    case ASHIFTRT:
      goto L3415;
    case LSHIFTRT:
      goto L3639;
    case ROTATE:
      goto L3797;
    case ROTATERT:
      goto L3897;
    default:
     break;
   }
  goto ret0;

 L879: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == QImode)
    goto L11125;
  goto ret0;

 L11125: __attribute__ ((__unused__))
  if (((enum rtx_code) (x3)->code) == PLUS)
    goto L880;
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L1153;
    }
  goto ret0;

 L880: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (ix86_carry_flag_operator (x4, QImode))
    {
      operands[3] = x4;
      goto L881;
    }
  goto ret0;

 L881: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, QImode))
    {
      operands[1] = x4;
      goto L882;
    }
  goto ret0;

 L882: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L883;
    }
  goto ret0;

 L883: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L884;
  goto ret0;

 L884: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (PLUS, QImode, operands)))
    {
      return 129;
    }
  goto ret0;

 L1153: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L1154;
    }
  goto ret0;

 L1154: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1155;
  goto ret0;

 L1155: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode)
    goto L11127;
  goto ret0;

 L11127: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG)
    goto L11129;
  goto ret0;

 L11129: __attribute__ ((__unused__))
  if ((((x2)->u.fld[0]).rtint) == 17)
    goto L11131;
  goto ret0;

 L11131: __attribute__ ((__unused__))
  if ((!(x86_partial_reg_stall & (1 << ix86_tune))
   && ix86_binary_operator_ok (PLUS, QImode, operands)))
    {
      return 149;
    }
 L11132: __attribute__ ((__unused__))
  if (((x86_partial_reg_stall & (1 << ix86_tune))
   && ix86_binary_operator_ok (PLUS, QImode, operands)))
    {
      return 150;
    }
  goto ret0;

 L1330: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L1331;
    }
  goto ret0;

 L1331: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == QImode
      && ((enum rtx_code) (x3)->code) == PLUS)
    goto L1332;
  if (general_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L1462;
    }
  goto ret0;

 L1332: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (ix86_carry_flag_operator (x4, QImode))
    {
      operands[3] = x4;
      goto L1333;
    }
  goto ret0;

 L1333: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (general_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L1334;
    }
  goto ret0;

 L1334: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1335;
  goto ret0;

 L1335: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (MINUS, QImode, operands)))
    {
      return 159;
    }
  goto ret0;

 L1462: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1463;
  goto ret0;

 L1463: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (MINUS, QImode, operands)))
    {
      return 168;
    }
  goto ret0;

 L2005: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L2006;
    }
  goto ret0;

 L2006: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L2007;
    }
  goto ret0;

 L2007: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2008;
  goto ret0;

 L2008: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (AND, QImode, operands)))
    {
      return 201;
    }
  goto ret0;

 L2259: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L2260;
    }
  goto ret0;

 L2260: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L2261;
    }
  goto ret0;

 L2261: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2262;
  goto ret0;

 L2262: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (IOR, QImode, operands)))
    {
      return 215;
    }
  goto ret0;

 L2509: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L2510;
    }
  goto ret0;

 L2510: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L2511;
    }
  goto ret0;

 L2511: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2512;
  goto ret0;

 L2512: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (XOR, QImode, operands)))
    {
      return 229;
    }
  goto ret0;

 L2749: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L2750;
    }
  goto ret0;

 L2750: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2751;
  goto ret0;

 L2751: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_unary_operator_ok (NEG, QImode, operands)))
    {
      return 243;
    }
  goto ret0;

 L3197: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L3198;
    }
  goto ret0;

 L3198: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3199;
    }
  goto ret0;

 L3199: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3200;
  goto ret0;

 L3200: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode)
    goto L11133;
  goto ret0;

 L11133: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG)
    goto L11135;
  goto ret0;

 L11135: __attribute__ ((__unused__))
  if ((((x2)->u.fld[0]).rtint) == 17)
    goto L11137;
  goto ret0;

 L11137: __attribute__ ((__unused__))
  if ((!(x86_partial_reg_stall & (1 << ix86_tune))
   && ix86_binary_operator_ok (ASHIFT, QImode, operands)))
    {
      return 285;
    }
 L11138: __attribute__ ((__unused__))
  if (((x86_partial_reg_stall & (1 << ix86_tune))
   && ix86_binary_operator_ok (ASHIFT, QImode, operands)))
    {
      return 286;
    }
  goto ret0;

 L3415: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L3416;
    }
  goto ret0;

 L3416: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const1_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3417;
    }
 L3446: __attribute__ ((__unused__))
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3447;
    }
  goto ret0;

 L3417: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3418;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3446;

 L3418: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (ASHIFTRT, QImode, operands)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size)))
    {
      return 300;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3446;

 L3447: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3448;
  goto ret0;

 L3448: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (ASHIFTRT, QImode, operands)))
    {
      return 302;
    }
  goto ret0;

 L3639: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L3640;
    }
  goto ret0;

 L3640: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const1_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3641;
    }
 L3670: __attribute__ ((__unused__))
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3671;
    }
  goto ret0;

 L3641: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3642;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3670;

 L3642: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (LSHIFTRT, QImode, operands)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size)))
    {
      return 316;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3670;

 L3671: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3672;
  goto ret0;

 L3672: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (LSHIFTRT, QImode, operands)))
    {
      return 318;
    }
  goto ret0;

 L3797: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L3798;
    }
  goto ret0;

 L3798: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const1_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3799;
    }
 L3828: __attribute__ ((__unused__))
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3829;
    }
  goto ret0;

 L3799: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3800;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3828;

 L3800: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (ROTATE, QImode, operands)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size)))
    {
      return 327;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3828;

 L3829: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3830;
  goto ret0;

 L3830: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (ROTATE, QImode, operands)))
    {
      return 329;
    }
  goto ret0;

 L3897: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L3898;
    }
  goto ret0;

 L3898: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const1_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3899;
    }
 L3928: __attribute__ ((__unused__))
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3929;
    }
  goto ret0;

 L3899: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3900;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3928;

 L3900: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (ROTATERT, QImode, operands)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size)))
    {
      return 334;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3928;

 L3929: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3930;
  goto ret0;

 L3930: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (ROTATERT, QImode, operands)))
    {
      return 336;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_22 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SFmode))
    {
      operands[0] = x2;
      goto L405;
    }
 L11009: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, SFmode))
    {
      operands[0] = x2;
      goto L603;
    }
 L11017: __attribute__ ((__unused__))
  if (memory_operand (x2, SFmode))
    {
      operands[0] = x2;
      goto L2771;
    }
 L11018: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, SFmode))
    {
      operands[0] = x2;
      goto L2800;
    }
  goto ret0;

 L405: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SFmode)
    goto L11140;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L11140: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case UNSPEC:
      goto L11144;
    case IF_THEN_ELSE:
      goto L5297;
    case SUBREG:
    case REG:
    case ADDRESSOF:
      goto L11139;
    default:
      x2 = (((x1)->u.fld[0]).rtx);
      goto L11009;
   }
 L11139: __attribute__ ((__unused__))
  if (register_operand (x2, SFmode))
    {
      operands[1] = x2;
      goto L406;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L11144: __attribute__ ((__unused__))
  if ((((((x2)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L11147;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L11147: __attribute__ ((__unused__))
  switch ((((x2)->u.fld[1]).rtint))
    {
    case 65L:
      goto L4841;
    case 66L:
      goto L4871;
    case 67L:
      goto L4916;
    default:
      break;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L4841: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x3, SFmode))
    {
      operands[2] = x3;
      goto L4842;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L4842: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L4843;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L4843: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4844;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L4844: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SFmode))
    {
      operands[3] = x2;
      goto L4845;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L4845: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations))
    {
      return 430;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L4871: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x3, SFmode))
    {
      operands[2] = x3;
      goto L4872;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L4872: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x3, XFmode))
    {
      operands[1] = x3;
      goto L4873;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L4873: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4874;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L4874: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SFmode))
    {
      operands[3] = x2;
      goto L4875;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L4875: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations))
    {
      return 432;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L4916: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x3, XFmode))
    {
      operands[2] = x3;
      goto L4917;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L4917: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x3, XFmode))
    {
      operands[1] = x3;
      goto L4918;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L4918: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4919;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L4919: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SFmode))
    {
      operands[3] = x2;
      goto L4920;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L4920: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations))
    {
      return 435;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L5297: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  switch (((enum rtx_code) (x3)->code))
    {
    case LT:
      goto L5298;
    case GT:
      goto L5390;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L5298: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == SFmode)
    goto L11150;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L11150: __attribute__ ((__unused__))
  if (register_operand (x4, SFmode))
    {
      operands[1] = x4;
      goto L5299;
    }
 L11151: __attribute__ ((__unused__))
  if (nonimmediate_operand (x4, SFmode))
    {
      operands[1] = x4;
      goto L5318;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L5299: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, SFmode))
    {
      operands[2] = x4;
      goto L5300;
    }
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11151;

 L5300: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L5301;
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11151;

 L5301: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (rtx_equal_p (x3, operands[2]))
    goto L5302;
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11151;

 L5302: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5303;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11151;

 L5303: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((target_flags & 0x00004000) != 0) && (target_flags & 0x00000010)))
    {
      return 461;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11151;

 L5318: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, SFmode))
    {
      operands[2] = x4;
      goto L5319;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L5319: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L5320;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L5320: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (rtx_equal_p (x3, operands[2]))
    goto L5321;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L5321: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5322;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L5322: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((target_flags & 0x00004000) != 0) && !(target_flags & 0x00000010)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 462;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L5390: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == SFmode)
    goto L11152;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L11152: __attribute__ ((__unused__))
  if (register_operand (x4, SFmode))
    {
      operands[1] = x4;
      goto L5391;
    }
 L11153: __attribute__ ((__unused__))
  if (nonimmediate_operand (x4, SFmode))
    {
      operands[1] = x4;
      goto L5410;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L5391: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, SFmode))
    {
      operands[2] = x4;
      goto L5392;
    }
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11153;

 L5392: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L5393;
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11153;

 L5393: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (rtx_equal_p (x3, operands[2]))
    goto L5394;
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11153;

 L5394: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5395;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11153;

 L5395: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((target_flags & 0x00004000) != 0) && (target_flags & 0x00000010)))
    {
      return 467;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11153;

 L5410: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, SFmode))
    {
      operands[2] = x4;
      goto L5411;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L5411: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L5412;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L5412: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (rtx_equal_p (x3, operands[2]))
    goto L5413;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L5413: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5414;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L5414: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((target_flags & 0x00004000) != 0) && !(target_flags & 0x00000010)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 468;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L406: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L407;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L407: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L408;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L408: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[0])
      && (reload_completed || !((target_flags & 0x00004000) != 0)))
    {
      return 62;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11009;

 L603: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SFmode)
    goto L11154;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11017;

 L11154: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case FLOAT_TRUNCATE:
      goto L604;
    case NEG:
      goto L2793;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11017;

 L604: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x3)->mode))
    {
    case DFmode:
      goto L11156;
    case XFmode:
      goto L11158;
    default:
      break;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11017;

 L11156: __attribute__ ((__unused__))
  if (register_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L605;
    }
 L11157: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L613;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11017;

 L605: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L606;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11157;

 L606: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, SFmode))
    {
      operands[2] = x2;
      goto L607;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11157;

 L607: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && !((target_flags & 0x00008000) != 0)))
    {
      return 91;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11157;

 L613: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L614;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11017;

 L614: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, SFmode))
    {
      operands[2] = x2;
      goto L615;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11017;

 L615: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && ((target_flags & 0x00008000) != 0) && !(x86_sse_partial_regs_for_cvtsd2ss & (1 << ix86_tune))))
    {
      return 92;
    }
 L623: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && ((target_flags & 0x00008000) != 0) && (x86_sse_partial_regs_for_cvtsd2ss & (1 << ix86_tune))))
    {
      return 93;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11017;

 L11158: __attribute__ ((__unused__))
  if (register_operand (x3, XFmode))
    {
      operands[1] = x3;
      goto L654;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11017;

 L654: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L655;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11017;

 L655: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, SFmode))
    {
      operands[2] = x2;
      goto L656;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11017;

 L656: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return 99;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11017;

 L2793: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L2794;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11017;

 L2794: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L2795;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11017;

 L2795: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[2] = x2;
      goto L2796;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11017;

 L2796: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)
   && (reload_in_progress || reload_completed
       || (register_operand (operands[0], VOIDmode)
    && register_operand (operands[1], VOIDmode))))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 246;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11017;

 L2771: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SFmode)
    goto L11159;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11018;

 L11159: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case NEG:
      goto L2772;
    case ABS:
      goto L2899;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11018;

 L2772: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (memory_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L2773;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11018;

 L2773: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2774;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11018;

 L2774: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_unary_operator_ok (NEG, SFmode, operands)))
    {
      return 245;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11018;

 L2899: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (memory_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L2900;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11018;

 L2900: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2901;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11018;

 L2901: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_unary_operator_ok (ABS, SFmode, operands)))
    {
      return 258;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11018;

 L2800: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SFmode)
    goto L11161;
  goto ret0;

 L11161: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case NEG:
      goto L2801;
    case ABS:
      goto L2920;
    default:
     break;
   }
  goto ret0;

 L2801: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L2802;
    }
  goto ret0;

 L2802: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2803;
  goto ret0;

 L2803: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((target_flags & 0x00000001) && !((target_flags & 0x00004000) != 0)
   && ix86_unary_operator_ok (NEG, SFmode, operands)))
    {
      return 247;
    }
  goto ret0;

 L2920: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L2921;
    }
  goto ret0;

 L2921: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  switch (((enum rtx_code) (x1)->code))
    {
    case USE:
      goto L2922;
    case CLOBBER:
      goto L2930;
    default:
     break;
   }
  goto ret0;

 L2922: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[2] = x2;
      goto L2923;
    }
  goto ret0;

 L2923: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)
   && (reload_in_progress || reload_completed
       || (register_operand (operands[0], VOIDmode)
     && register_operand (operands[1], VOIDmode))))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 259;
    }
  goto ret0;

 L2930: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((target_flags & 0x00000001) && ix86_unary_operator_ok (ABS, SFmode, operands) && !((target_flags & 0x00004000) != 0)))
    {
      return 260;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_23 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  switch (((enum rtx_code) (x3)->code))
    {
    case PLUS:
      goto L999;
    case NEG:
      goto L1012;
    case MINUS:
      goto L1399;
    case AND:
      goto L1966;
    case IOR:
      goto L2184;
    case XOR:
      goto L2434;
    case NOT:
      goto L3032;
    case ASHIFT:
      goto L3144;
    case ASHIFTRT:
      goto L3336;
    case LSHIFTRT:
      goto L3560;
    case SUBREG:
    case REG:
    case MEM:
    case ADDRESSOF:
      goto L11232;
    default:
      goto ret0;
   }
 L11232: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L1029;
    }
  goto ret0;

 L999: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L1000;
    }
  goto ret0;

 L1000: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (general_operand (x4, SImode))
    {
      operands[2] = x4;
      goto L1001;
    }
  goto ret0;

 L1001: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L1002;
  goto ret0;

 L1002: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  switch (((enum rtx_code) (x1)->code))
    {
    case SET:
      goto L1003;
    case CLOBBER:
      goto L1048;
    default:
     break;
   }
  goto ret0;

 L1003: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L1004;
    }
  goto ret0;

 L1004: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L1005;
  goto ret0;

 L1005: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L1006;
  goto ret0;

 L1006: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCGOCmode)
   && ix86_binary_operator_ok (PLUS, SImode, operands)


   && ! pic_symbolic_operand (operands[2], VOIDmode)))
    {
      return 139;
    }
  goto ret0;

 L1048: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L1049;
    }
  goto ret0;

 L1049: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCGOCmode)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)


   && ! pic_symbolic_operand (operands[2], VOIDmode)))
    {
      return 142;
    }
  goto ret0;

 L1012: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (general_operand (x4, SImode))
    {
      operands[2] = x4;
      goto L1013;
    }
  goto ret0;

 L1013: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L1014;
    }
  goto ret0;

 L1014: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1015;
  goto ret0;

 L1015: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L1016;
    }
  goto ret0;

 L1016: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCZmode)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)


   && ! pic_symbolic_operand (operands[2], VOIDmode)))
    {
      return 140;
    }
  goto ret0;

 L1399: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L1400;
    }
  goto ret0;

 L1400: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (general_operand (x4, SImode))
    {
      operands[2] = x4;
      goto L1401;
    }
  goto ret0;

 L1401: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L1402;
  goto ret0;

 L1402: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L1403;
  goto ret0;

 L1403: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L1404;
    }
  goto ret0;

 L1404: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == MINUS)
    goto L1405;
  goto ret0;

 L1405: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L1406;
  goto ret0;

 L1406: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCGOCmode)
   && ix86_binary_operator_ok (MINUS, SImode, operands)))
    {
      return 163;
    }
  goto ret0;

 L1966: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == SImode)
    goto L11264;
  goto ret0;

 L11264: __attribute__ ((__unused__))
  if (((enum rtx_code) (x4)->code) == ZERO_EXTRACT)
    goto L2090;
  if (nonimmediate_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L1967;
    }
  goto ret0;

 L2090: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (ext_register_operand (x5, VOIDmode))
    {
      operands[1] = x5;
      goto L2091;
    }
  goto ret0;

 L2091: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[1]).rtx);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 8L)
    goto L2092;
  goto ret0;

 L2092: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[2]).rtx);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 8L)
    goto L2093;
  goto ret0;

 L2093: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (const_int_operand (x4, VOIDmode))
    {
      operands[2] = x4;
      goto L2094;
    }
  goto ret0;

 L2094: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L2095;
  goto ret0;

 L2095: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L2096;
  goto ret0;

 L2096: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == ZERO_EXTRACT)
    goto L2097;
  goto ret0;

 L2097: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (ext_register_operand (x3, VOIDmode))
    {
      operands[0] = x3;
      goto L2098;
    }
  goto ret0;

 L2098: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 8L)
    goto L2099;
  goto ret0;

 L2099: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 8L)
    goto L2100;
  goto ret0;

 L2100: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == AND)
    goto L2101;
  goto ret0;

 L2101: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == ZERO_EXTRACT)
    goto L2102;
  goto ret0;

 L2102: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (rtx_equal_p (x4, operands[1]))
    goto L2103;
  goto ret0;

 L2103: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L2104;
  goto ret0;

 L2104: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[2]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L2105;
  goto ret0;

 L2105: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCNOmode)))
    {
      return 206;
    }
  goto ret0;

 L1967: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (general_operand (x4, SImode))
    {
      operands[2] = x4;
      goto L1968;
    }
  goto ret0;

 L1968: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L1969;
  goto ret0;

 L1969: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L1970;
  goto ret0;

 L1970: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L1971;
    }
  goto ret0;

 L1971: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == AND)
    goto L1972;
  goto ret0;

 L1972: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L1973;
  goto ret0;

 L1973: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCNOmode)
   && ix86_binary_operator_ok (AND, SImode, operands)))
    {
      return 198;
    }
  goto ret0;

 L2184: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L2185;
    }
  goto ret0;

 L2185: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (general_operand (x4, SImode))
    {
      operands[2] = x4;
      goto L2186;
    }
  goto ret0;

 L2186: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L2187;
  goto ret0;

 L2187: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  switch (((enum rtx_code) (x1)->code))
    {
    case SET:
      goto L2188;
    case CLOBBER:
      goto L2201;
    default:
     break;
   }
  goto ret0;

 L2188: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L2189;
    }
  goto ret0;

 L2189: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == IOR)
    goto L2190;
  goto ret0;

 L2190: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L2191;
  goto ret0;

 L2191: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCNOmode)
   && ix86_binary_operator_ok (IOR, SImode, operands)))
    {
      return 210;
    }
  goto ret0;

 L2201: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L2202;
    }
  goto ret0;

 L2202: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCNOmode)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 211;
    }
  goto ret0;

 L2434: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == SImode)
    goto L11266;
  goto ret0;

 L11266: __attribute__ ((__unused__))
  if (((enum rtx_code) (x4)->code) == ZERO_EXTRACT)
    goto L2671;
  if (nonimmediate_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L2435;
    }
  goto ret0;

 L2671: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (ext_register_operand (x5, VOIDmode))
    {
      operands[1] = x5;
      goto L2672;
    }
  goto ret0;

 L2672: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[1]).rtx);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 8L)
    goto L2673;
  goto ret0;

 L2673: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[2]).rtx);
  if (((enum rtx_code) (x5)->code) == CONST_INT
      && ((x5)->u.hwint[0]) == 8L)
    goto L2674;
  goto ret0;

 L2674: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (general_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L2675;
    }
  goto ret0;

 L2675: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L2676;
  goto ret0;

 L2676: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L2677;
  goto ret0;

 L2677: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == ZERO_EXTRACT)
    goto L2678;
  goto ret0;

 L2678: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (ext_register_operand (x3, VOIDmode))
    {
      operands[0] = x3;
      goto L2679;
    }
  goto ret0;

 L2679: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 8L)
    goto L2680;
  goto ret0;

 L2680: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 8L)
    goto L2681;
  goto ret0;

 L2681: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == XOR)
    goto L2682;
  goto ret0;

 L2682: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == ZERO_EXTRACT)
    goto L2683;
  goto ret0;

 L2683: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (rtx_equal_p (x4, operands[1]))
    goto L2684;
  goto ret0;

 L2684: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L2685;
  goto ret0;

 L2685: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[2]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L2686;
  goto ret0;

 L2686: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (!0 && ix86_match_ccmode (insn, CCNOmode)))
    {
      return 237;
    }
  goto ret0;

 L2435: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (general_operand (x4, SImode))
    {
      operands[2] = x4;
      goto L2436;
    }
  goto ret0;

 L2436: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L2437;
  goto ret0;

 L2437: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  switch (((enum rtx_code) (x1)->code))
    {
    case SET:
      goto L2438;
    case CLOBBER:
      goto L2451;
    default:
     break;
   }
  goto ret0;

 L2438: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L2439;
    }
  goto ret0;

 L2439: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == XOR)
    goto L2440;
  goto ret0;

 L2440: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L2441;
  goto ret0;

 L2441: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCNOmode)
   && ix86_binary_operator_ok (XOR, SImode, operands)))
    {
      return 224;
    }
  goto ret0;

 L2451: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L2452;
    }
  goto ret0;

 L2452: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCNOmode)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 225;
    }
  goto ret0;

 L3032: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L3033;
    }
  goto ret0;

 L3033: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L3034;
  goto ret0;

 L3034: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L3035;
  goto ret0;

 L3035: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L3036;
    }
  goto ret0;

 L3036: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == NOT)
    goto L3037;
  goto ret0;

 L3037: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1])
      && (ix86_match_ccmode (insn, CCNOmode)
   && ix86_unary_operator_ok (NOT, SImode, operands)))
    {
      return 272;
    }
  goto ret0;

 L3144: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L3145;
    }
  goto ret0;

 L3145: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (const_int_1_31_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L3146;
    }
  goto ret0;

 L3146: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L3147;
  goto ret0;

 L3147: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L3148;
  goto ret0;

 L3148: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L3149;
    }
  goto ret0;

 L3149: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == ASHIFT)
    goto L3150;
  goto ret0;

 L3150: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L3151;
  goto ret0;

 L3151: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCGOCmode)
   && ix86_binary_operator_ok (ASHIFT, SImode, operands)))
    {
      return 281;
    }
  goto ret0;

 L3336: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L3337;
    }
  goto ret0;

 L3337: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT)
    goto L11267;
  goto ret0;

 L11267: __attribute__ ((__unused__))
  if (const1_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L3338;
    }
 L11268: __attribute__ ((__unused__))
  if (const_int_1_31_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L3351;
    }
  goto ret0;

 L3338: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L3339;
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11268;

 L3339: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L3340;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11268;

 L3340: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L3341;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11268;

 L3341: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == ASHIFTRT)
    goto L3342;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11268;

 L3342: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L3343;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11268;

 L3343: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCGOCmode)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size)
   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)))
    {
      return 294;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11268;

 L3351: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L3352;
  goto ret0;

 L3352: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L3353;
  goto ret0;

 L3353: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L3354;
    }
  goto ret0;

 L3354: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == ASHIFTRT)
    goto L3355;
  goto ret0;

 L3355: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L3356;
  goto ret0;

 L3356: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCGOCmode)
   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)))
    {
      return 295;
    }
  goto ret0;

 L3560: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L3561;
    }
  goto ret0;

 L3561: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT)
    goto L11269;
  goto ret0;

 L11269: __attribute__ ((__unused__))
  if (const1_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L3562;
    }
 L11270: __attribute__ ((__unused__))
  if (const_int_1_31_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L3575;
    }
  goto ret0;

 L3562: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L3563;
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11270;

 L3563: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L3564;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11270;

 L3564: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L3565;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11270;

 L3565: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == LSHIFTRT)
    goto L3566;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11270;

 L3566: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L3567;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11270;

 L3567: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCGOCmode)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size)
   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)))
    {
      return 310;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11270;

 L3575: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L3576;
  goto ret0;

 L3576: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L3577;
  goto ret0;

 L3577: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L3578;
    }
  goto ret0;

 L3578: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == LSHIFTRT)
    goto L3579;
  goto ret0;

 L3579: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L3580;
  goto ret0;

 L3580: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCGOCmode)
   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)))
    {
      return 311;
    }
  goto ret0;

 L1029: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const_int_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L1030;
    }
 L1412: __attribute__ ((__unused__))
  if (general_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L1413;
    }
  goto ret0;

 L1030: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1031;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L1412;

 L1031: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L1032;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L1412;

 L1032: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCGCmode)
   && (((operands[2])->u.hwint[0]) & 0xffffffff) != 0x80000000))
    {
      return 141;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L1412;

 L1413: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L1414;
  goto ret0;

 L1414: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L1415;
    }
  goto ret0;

 L1415: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == MINUS)
    goto L1416;
  goto ret0;

 L1416: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L1417;
  goto ret0;

 L1417: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCmode)
   && ix86_binary_operator_ok (MINUS, SImode, operands)))
    {
      return 164;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_24 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  switch (((enum rtx_code) (x3)->code))
    {
    case PLUS:
      goto L1090;
    case NEG:
      goto L1103;
    case MINUS:
      goto L1437;
    case AND:
      goto L1993;
    case IOR:
      goto L2229;
    case XOR:
      goto L2479;
    case NOT:
      goto L3048;
    case ASHIFT:
      goto L3185;
    case ASHIFTRT:
      goto L3390;
    case LSHIFTRT:
      goto L3614;
    case SUBREG:
    case REG:
    case MEM:
    case ADDRESSOF:
      goto L11235;
    default:
      goto ret0;
   }
 L11235: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L1120;
    }
  goto ret0;

 L1090: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, HImode))
    {
      operands[1] = x4;
      goto L1091;
    }
  goto ret0;

 L1091: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (general_operand (x4, HImode))
    {
      operands[2] = x4;
      goto L1092;
    }
  goto ret0;

 L1092: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L1093;
  goto ret0;

 L1093: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  switch (((enum rtx_code) (x1)->code))
    {
    case SET:
      goto L1094;
    case CLOBBER:
      goto L1139;
    default:
     break;
   }
  goto ret0;

 L1094: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L1095;
    }
  goto ret0;

 L1095: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L1096;
  goto ret0;

 L1096: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L1097;
  goto ret0;

 L1097: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCGOCmode)
   && ix86_binary_operator_ok (PLUS, HImode, operands)))
    {
      return 145;
    }
  goto ret0;

 L1139: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L1140;
    }
  goto ret0;

 L1140: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCGOCmode)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 148;
    }
  goto ret0;

 L1103: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (general_operand (x4, HImode))
    {
      operands[2] = x4;
      goto L1104;
    }
  goto ret0;

 L1104: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L1105;
    }
  goto ret0;

 L1105: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1106;
  goto ret0;

 L1106: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L1107;
    }
  goto ret0;

 L1107: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCZmode)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 146;
    }
  goto ret0;

 L1437: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, HImode))
    {
      operands[1] = x4;
      goto L1438;
    }
  goto ret0;

 L1438: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (general_operand (x4, HImode))
    {
      operands[2] = x4;
      goto L1439;
    }
  goto ret0;

 L1439: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L1440;
  goto ret0;

 L1440: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L1441;
  goto ret0;

 L1441: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L1442;
    }
  goto ret0;

 L1442: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == MINUS)
    goto L1443;
  goto ret0;

 L1443: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L1444;
  goto ret0;

 L1444: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCGOCmode)
   && ix86_binary_operator_ok (MINUS, HImode, operands)))
    {
      return 166;
    }
  goto ret0;

 L1993: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, HImode))
    {
      operands[1] = x4;
      goto L1994;
    }
  goto ret0;

 L1994: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (general_operand (x4, HImode))
    {
      operands[2] = x4;
      goto L1995;
    }
  goto ret0;

 L1995: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L1996;
  goto ret0;

 L1996: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L1997;
  goto ret0;

 L1997: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L1998;
    }
  goto ret0;

 L1998: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == AND)
    goto L1999;
  goto ret0;

 L1999: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L2000;
  goto ret0;

 L2000: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCNOmode)
   && ix86_binary_operator_ok (AND, HImode, operands)))
    {
      return 200;
    }
  goto ret0;

 L2229: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, HImode))
    {
      operands[1] = x4;
      goto L2230;
    }
  goto ret0;

 L2230: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (general_operand (x4, HImode))
    {
      operands[2] = x4;
      goto L2231;
    }
  goto ret0;

 L2231: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L2232;
  goto ret0;

 L2232: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  switch (((enum rtx_code) (x1)->code))
    {
    case SET:
      goto L2233;
    case CLOBBER:
      goto L2246;
    default:
     break;
   }
  goto ret0;

 L2233: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L2234;
    }
  goto ret0;

 L2234: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == IOR)
    goto L2235;
  goto ret0;

 L2235: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L2236;
  goto ret0;

 L2236: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCNOmode)
   && ix86_binary_operator_ok (IOR, HImode, operands)))
    {
      return 213;
    }
  goto ret0;

 L2246: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L2247;
    }
  goto ret0;

 L2247: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCNOmode)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 214;
    }
  goto ret0;

 L2479: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, HImode))
    {
      operands[1] = x4;
      goto L2480;
    }
  goto ret0;

 L2480: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (general_operand (x4, HImode))
    {
      operands[2] = x4;
      goto L2481;
    }
  goto ret0;

 L2481: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L2482;
  goto ret0;

 L2482: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  switch (((enum rtx_code) (x1)->code))
    {
    case SET:
      goto L2483;
    case CLOBBER:
      goto L2496;
    default:
     break;
   }
  goto ret0;

 L2483: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L2484;
    }
  goto ret0;

 L2484: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == XOR)
    goto L2485;
  goto ret0;

 L2485: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L2486;
  goto ret0;

 L2486: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCNOmode)
   && ix86_binary_operator_ok (XOR, HImode, operands)))
    {
      return 227;
    }
  goto ret0;

 L2496: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L2497;
    }
  goto ret0;

 L2497: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCNOmode)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 228;
    }
  goto ret0;

 L3048: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, HImode))
    {
      operands[1] = x4;
      goto L3049;
    }
  goto ret0;

 L3049: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L3050;
  goto ret0;

 L3050: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L3051;
  goto ret0;

 L3051: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L3052;
    }
  goto ret0;

 L3052: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == NOT)
    goto L3053;
  goto ret0;

 L3053: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1])
      && (ix86_match_ccmode (insn, CCNOmode)
   && ix86_unary_operator_ok (NEG, HImode, operands)))
    {
      return 274;
    }
  goto ret0;

 L3185: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, HImode))
    {
      operands[1] = x4;
      goto L3186;
    }
  goto ret0;

 L3186: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (const_int_1_31_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L3187;
    }
  goto ret0;

 L3187: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L3188;
  goto ret0;

 L3188: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L3189;
  goto ret0;

 L3189: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L3190;
    }
  goto ret0;

 L3190: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == ASHIFT)
    goto L3191;
  goto ret0;

 L3191: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L3192;
  goto ret0;

 L3192: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCGOCmode)
   && ix86_binary_operator_ok (ASHIFT, HImode, operands)))
    {
      return 284;
    }
  goto ret0;

 L3390: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, HImode))
    {
      operands[1] = x4;
      goto L3391;
    }
  goto ret0;

 L3391: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT)
    goto L11271;
  goto ret0;

 L11271: __attribute__ ((__unused__))
  if (const1_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L3392;
    }
 L11272: __attribute__ ((__unused__))
  if (const_int_1_31_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L3405;
    }
  goto ret0;

 L3392: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L3393;
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11272;

 L3393: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L3394;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11272;

 L3394: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L3395;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11272;

 L3395: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == ASHIFTRT)
    goto L3396;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11272;

 L3396: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L3397;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11272;

 L3397: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCGOCmode)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size)
   && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)))
    {
      return 298;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11272;

 L3405: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L3406;
  goto ret0;

 L3406: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L3407;
  goto ret0;

 L3407: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L3408;
    }
  goto ret0;

 L3408: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == ASHIFTRT)
    goto L3409;
  goto ret0;

 L3409: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L3410;
  goto ret0;

 L3410: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCGOCmode)
   && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)))
    {
      return 299;
    }
  goto ret0;

 L3614: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, HImode))
    {
      operands[1] = x4;
      goto L3615;
    }
  goto ret0;

 L3615: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT)
    goto L11273;
  goto ret0;

 L11273: __attribute__ ((__unused__))
  if (const1_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L3616;
    }
 L11274: __attribute__ ((__unused__))
  if (const_int_1_31_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L3629;
    }
  goto ret0;

 L3616: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L3617;
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11274;

 L3617: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L3618;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11274;

 L3618: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L3619;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11274;

 L3619: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == LSHIFTRT)
    goto L3620;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11274;

 L3620: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L3621;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11274;

 L3621: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCGOCmode)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size)
   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)))
    {
      return 314;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11274;

 L3629: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L3630;
  goto ret0;

 L3630: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L3631;
  goto ret0;

 L3631: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L3632;
    }
  goto ret0;

 L3632: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == LSHIFTRT)
    goto L3633;
  goto ret0;

 L3633: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L3634;
  goto ret0;

 L3634: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCGOCmode)
   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)))
    {
      return 315;
    }
  goto ret0;

 L1120: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const_int_operand (x3, HImode))
    {
      operands[2] = x3;
      goto L1121;
    }
 L1450: __attribute__ ((__unused__))
  if (general_operand (x3, HImode))
    {
      operands[2] = x3;
      goto L1451;
    }
  goto ret0;

 L1121: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1122;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L1450;

 L1122: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L1123;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L1450;

 L1123: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCGCmode)
   && (((operands[2])->u.hwint[0]) & 0xffff) != 0x8000))
    {
      return 147;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L1450;

 L1451: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L1452;
  goto ret0;

 L1452: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L1453;
    }
  goto ret0;

 L1453: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == MINUS)
    goto L1454;
  goto ret0;

 L1454: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L1455;
  goto ret0;

 L1455: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCmode)
   && ix86_binary_operator_ok (MINUS, HImode, operands)))
    {
      return 167;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_25 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  switch (((enum rtx_code) (x3)->code))
    {
    case PLUS:
      goto L1197;
    case NEG:
      goto L1210;
    case MINUS:
      goto L1491;
    case AND:
      goto L2036;
    case IOR:
      goto L2290;
    case XOR:
      goto L2625;
    case NOT:
      goto L3064;
    case ASHIFT:
      goto L3226;
    case ASHIFTRT:
      goto L3476;
    case LSHIFTRT:
      goto L3700;
    case SUBREG:
    case REG:
    case MEM:
    case ADDRESSOF:
      goto L11238;
    default:
      goto ret0;
   }
 L11238: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L1227;
    }
  goto ret0;

 L1197: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, QImode))
    {
      operands[1] = x4;
      goto L1198;
    }
  goto ret0;

 L1198: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (general_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L1199;
    }
  goto ret0;

 L1199: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L1200;
  goto ret0;

 L1200: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  switch (((enum rtx_code) (x1)->code))
    {
    case SET:
      goto L1201;
    case CLOBBER:
      goto L1246;
    default:
     break;
   }
  goto ret0;

 L1201: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L1202;
    }
  goto ret0;

 L1202: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L1203;
  goto ret0;

 L1203: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L1204;
  goto ret0;

 L1204: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCGOCmode)
   && ix86_binary_operator_ok (PLUS, QImode, operands)))
    {
      return 152;
    }
  goto ret0;

 L1246: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L1247;
    }
  goto ret0;

 L1247: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCGOCmode)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 155;
    }
  goto ret0;

 L1210: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (general_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L1211;
    }
  goto ret0;

 L1211: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L1212;
    }
  goto ret0;

 L1212: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1213;
  goto ret0;

 L1213: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L1214;
    }
  goto ret0;

 L1214: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCZmode)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 153;
    }
  goto ret0;

 L1491: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, QImode))
    {
      operands[1] = x4;
      goto L1492;
    }
  goto ret0;

 L1492: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (general_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L1493;
    }
  goto ret0;

 L1493: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L1494;
  goto ret0;

 L1494: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L1495;
  goto ret0;

 L1495: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L1496;
    }
  goto ret0;

 L1496: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == MINUS)
    goto L1497;
  goto ret0;

 L1497: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L1498;
  goto ret0;

 L1498: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCGOCmode)
   && ix86_binary_operator_ok (MINUS, QImode, operands)))
    {
      return 170;
    }
  goto ret0;

 L2036: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == QImode)
    goto L11275;
  goto ret0;

 L11275: __attribute__ ((__unused__))
  if (nonimmediate_operand (x4, QImode))
    {
      operands[1] = x4;
      goto L2037;
    }
 L11276: __attribute__ ((__unused__))
  if (nonimmediate_operand (x4, QImode))
    {
      operands[0] = x4;
      goto L2050;
    }
  goto ret0;

 L2037: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (general_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L2038;
    }
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11276;

 L2038: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L2039;
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11276;

 L2039: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L2040;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11276;

 L2040: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L2041;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11276;

 L2041: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == AND)
    goto L2042;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11276;

 L2042: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L2043;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11276;

 L2043: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCNOmode)
   && ix86_binary_operator_ok (AND, QImode, operands)))
    {
      return 203;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11276;

 L2050: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, QImode))
    {
      operands[1] = x4;
      goto L2051;
    }
  goto ret0;

 L2051: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L2052;
  goto ret0;

 L2052: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L2053;
  goto ret0;

 L2053: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum rtx_code) (x2)->code) == STRICT_LOW_PART)
    goto L2054;
  goto ret0;

 L2054: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[0]))
    goto L2055;
  goto ret0;

 L2055: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == AND)
    goto L2056;
  goto ret0;

 L2056: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[0]))
    goto L2057;
  goto ret0;

 L2057: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[1])
      && ((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && ix86_match_ccmode (insn, CCNOmode)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 204;
    }
  goto ret0;

 L2290: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == QImode)
    goto L11277;
  goto ret0;

 L11277: __attribute__ ((__unused__))
  if (nonimmediate_operand (x4, QImode))
    {
      operands[1] = x4;
      goto L2291;
    }
 L11278: __attribute__ ((__unused__))
  if (nonimmediate_operand (x4, QImode))
    {
      operands[0] = x4;
      goto L2304;
    }
  goto ret0;

 L2291: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (general_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L2292;
    }
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11278;

 L2292: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L2293;
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11278;

 L2293: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  switch (((enum rtx_code) (x1)->code))
    {
    case SET:
      goto L2294;
    case CLOBBER:
      goto L2321;
    default:
     break;
   }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11278;

 L2294: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L2295;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11278;

 L2295: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == IOR)
    goto L2296;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11278;

 L2296: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L2297;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11278;

 L2297: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCNOmode)
   && ix86_binary_operator_ok (IOR, QImode, operands)))
    {
      return 217;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11278;

 L2321: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L2322;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11278;

 L2322: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCNOmode)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 219;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11278;

 L2304: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (general_operand (x4, QImode))
    {
      operands[1] = x4;
      goto L2305;
    }
  goto ret0;

 L2305: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L2306;
  goto ret0;

 L2306: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L2307;
  goto ret0;

 L2307: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum rtx_code) (x2)->code) == STRICT_LOW_PART)
    goto L2308;
  goto ret0;

 L2308: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[0]))
    goto L2309;
  goto ret0;

 L2309: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == IOR)
    goto L2310;
  goto ret0;

 L2310: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[0]))
    goto L2311;
  goto ret0;

 L2311: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[1])
      && ((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && ix86_match_ccmode (insn, CCNOmode)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 218;
    }
  goto ret0;

 L2625: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == QImode)
    goto L11279;
  goto ret0;

 L11279: __attribute__ ((__unused__))
  if (nonimmediate_operand (x4, QImode))
    {
      operands[1] = x4;
      goto L2626;
    }
 L11280: __attribute__ ((__unused__))
  if (nonimmediate_operand (x4, QImode))
    {
      operands[0] = x4;
      goto L2639;
    }
  goto ret0;

 L2626: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (general_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L2627;
    }
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11280;

 L2627: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L2628;
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11280;

 L2628: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  switch (((enum rtx_code) (x1)->code))
    {
    case SET:
      goto L2629;
    case CLOBBER:
      goto L2656;
    default:
     break;
   }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11280;

 L2629: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L2630;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11280;

 L2630: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == XOR)
    goto L2631;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11280;

 L2631: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L2632;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11280;

 L2632: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCNOmode)
   && ix86_binary_operator_ok (XOR, QImode, operands)))
    {
      return 234;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11280;

 L2656: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L2657;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11280;

 L2657: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCNOmode)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 236;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11280;

 L2639: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (general_operand (x4, QImode))
    {
      operands[1] = x4;
      goto L2640;
    }
  goto ret0;

 L2640: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L2641;
  goto ret0;

 L2641: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L2642;
  goto ret0;

 L2642: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum rtx_code) (x2)->code) == STRICT_LOW_PART)
    goto L2643;
  goto ret0;

 L2643: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[0]))
    goto L2644;
  goto ret0;

 L2644: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == XOR)
    goto L2645;
  goto ret0;

 L2645: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[0]))
    goto L2646;
  goto ret0;

 L2646: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[1])
      && ((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && ix86_match_ccmode (insn, CCNOmode)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 235;
    }
  goto ret0;

 L3064: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, QImode))
    {
      operands[1] = x4;
      goto L3065;
    }
  goto ret0;

 L3065: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L3066;
  goto ret0;

 L3066: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L3067;
  goto ret0;

 L3067: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L3068;
    }
  goto ret0;

 L3068: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == NOT)
    goto L3069;
  goto ret0;

 L3069: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1])
      && (ix86_match_ccmode (insn, CCNOmode)
   && ix86_unary_operator_ok (NOT, QImode, operands)))
    {
      return 276;
    }
  goto ret0;

 L3226: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, QImode))
    {
      operands[1] = x4;
      goto L3227;
    }
  goto ret0;

 L3227: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (const_int_1_31_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L3228;
    }
  goto ret0;

 L3228: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L3229;
  goto ret0;

 L3229: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L3230;
  goto ret0;

 L3230: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L3231;
    }
  goto ret0;

 L3231: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == ASHIFT)
    goto L3232;
  goto ret0;

 L3232: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L3233;
  goto ret0;

 L3233: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCGOCmode)
   && ix86_binary_operator_ok (ASHIFT, QImode, operands)))
    {
      return 287;
    }
  goto ret0;

 L3476: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, QImode))
    {
      operands[1] = x4;
      goto L3477;
    }
  goto ret0;

 L3477: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT)
    goto L11281;
  goto ret0;

 L11281: __attribute__ ((__unused__))
  if (const1_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L3478;
    }
 L11282: __attribute__ ((__unused__))
  if (const_int_1_31_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L3491;
    }
  goto ret0;

 L3478: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L3479;
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11282;

 L3479: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L3480;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11282;

 L3480: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L3481;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11282;

 L3481: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == ASHIFTRT)
    goto L3482;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11282;

 L3482: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L3483;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11282;

 L3483: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCGOCmode)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size)
   && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)))
    {
      return 304;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11282;

 L3491: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L3492;
  goto ret0;

 L3492: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L3493;
  goto ret0;

 L3493: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L3494;
    }
  goto ret0;

 L3494: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == ASHIFTRT)
    goto L3495;
  goto ret0;

 L3495: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L3496;
  goto ret0;

 L3496: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCGOCmode)
   && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)))
    {
      return 305;
    }
  goto ret0;

 L3700: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, QImode))
    {
      operands[1] = x4;
      goto L3701;
    }
  goto ret0;

 L3701: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT)
    goto L11283;
  goto ret0;

 L11283: __attribute__ ((__unused__))
  if (const1_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L3702;
    }
 L11284: __attribute__ ((__unused__))
  if (const_int_1_31_operand (x4, QImode))
    {
      operands[2] = x4;
      goto L3715;
    }
  goto ret0;

 L3702: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L3703;
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11284;

 L3703: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L3704;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11284;

 L3704: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L3705;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11284;

 L3705: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == LSHIFTRT)
    goto L3706;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11284;

 L3706: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L3707;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11284;

 L3707: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCGOCmode)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size)
   && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)))
    {
      return 320;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L11284;

 L3715: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L3716;
  goto ret0;

 L3716: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L3717;
  goto ret0;

 L3717: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L3718;
    }
  goto ret0;

 L3718: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == LSHIFTRT)
    goto L3719;
  goto ret0;

 L3719: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L3720;
  goto ret0;

 L3720: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCGOCmode)
   && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)))
    {
      return 321;
    }
  goto ret0;

 L1227: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const_int_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L1228;
    }
 L1504: __attribute__ ((__unused__))
  if (general_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L1505;
    }
  goto ret0;

 L1228: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1229;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L1504;

 L1229: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L1230;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L1504;

 L1230: __attribute__ ((__unused__))
  if ((ix86_match_ccmode (insn, CCGCmode)
   && (((operands[2])->u.hwint[0]) & 0xff) != 0x80))
    {
      return 154;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L1504;

 L1505: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L1506;
  goto ret0;

 L1506: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L1507;
    }
  goto ret0;

 L1507: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == MINUS)
    goto L1508;
  goto ret0;

 L1508: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L1509;
  goto ret0;

 L1509: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_match_ccmode (insn, CCmode)
   && ix86_binary_operator_ok (MINUS, QImode, operands)))
    {
      return 171;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_26 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case SImode:
      goto L11000;
    case HImode:
      goto L11003;
    case QImode:
      goto L11004;
    case SFmode:
      goto L11005;
    case DFmode:
      goto L11006;
    case XFmode:
      goto L11007;
    case DImode:
      goto L11008;
    case CCmode:
      goto L11013;
    case CCZmode:
      goto L11016;
    default:
      break;
    }
 L298: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case STRICT_LOW_PART:
      goto L299;
    case REG:
      goto L11022;
    case PC:
      goto L4251;
    default:
     break;
   }
 L5670: __attribute__ ((__unused__))
  operands[0] = x2;
  goto L5671;

 L11000: __attribute__ ((__unused__))
  tem = recog_19 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  goto L298;

 L11003: __attribute__ ((__unused__))
  tem = recog_20 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  goto L298;

 L11004: __attribute__ ((__unused__))
  tem = recog_21 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  goto L298;

 L11005: __attribute__ ((__unused__))
  tem = recog_22 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  goto L298;

 L11006: __attribute__ ((__unused__))
  if (register_operand (x2, DFmode))
    {
      operands[0] = x2;
      goto L428;
    }
 L11010: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, DFmode))
    {
      operands[0] = x2;
      goto L665;
    }
 L11019: __attribute__ ((__unused__))
  if (memory_operand (x2, DFmode))
    {
      operands[0] = x2;
      goto L2812;
    }
 L11020: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, DFmode))
    {
      operands[0] = x2;
      goto L2841;
    }
  goto L298;

 L428: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode)
    goto L11164;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L11164: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case UNSPEC:
      goto L11168;
    case IF_THEN_ELSE:
      goto L5343;
    case SUBREG:
    case REG:
    case ADDRESSOF:
      goto L11163;
    default:
      x2 = (((x1)->u.fld[0]).rtx);
      goto L11010;
   }
 L11163: __attribute__ ((__unused__))
  if (register_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L429;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L11168: __attribute__ ((__unused__))
  if ((((((x2)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L11171;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L11171: __attribute__ ((__unused__))
  switch ((((x2)->u.fld[1]).rtint))
    {
    case 65L:
      goto L4826;
    case 66L:
      goto L4886;
    case 67L:
      goto L4931;
    default:
      break;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L4826: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x3, DFmode))
    {
      operands[2] = x3;
      goto L4827;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L4827: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L4828;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L4828: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4829;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L4829: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, DFmode))
    {
      operands[3] = x2;
      goto L4830;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L4830: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations))
    {
      return 429;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L4886: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x3, DFmode))
    {
      operands[2] = x3;
      goto L4887;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L4887: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x3, XFmode))
    {
      operands[1] = x3;
      goto L4888;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L4888: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4889;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L4889: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, DFmode))
    {
      operands[3] = x2;
      goto L4890;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L4890: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations))
    {
      return 433;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L4931: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x3, XFmode))
    {
      operands[2] = x3;
      goto L4932;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L4932: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x3, XFmode))
    {
      operands[1] = x3;
      goto L4933;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L4933: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4934;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L4934: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, DFmode))
    {
      operands[3] = x2;
      goto L4935;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L4935: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations))
    {
      return 436;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L5343: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  switch (((enum rtx_code) (x3)->code))
    {
    case LT:
      goto L5344;
    case GT:
      goto L5436;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L5344: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == DFmode)
    goto L11174;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L11174: __attribute__ ((__unused__))
  if (register_operand (x4, DFmode))
    {
      operands[1] = x4;
      goto L5345;
    }
 L11175: __attribute__ ((__unused__))
  if (nonimmediate_operand (x4, DFmode))
    {
      operands[1] = x4;
      goto L5364;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L5345: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, DFmode))
    {
      operands[2] = x4;
      goto L5346;
    }
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11175;

 L5346: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L5347;
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11175;

 L5347: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (rtx_equal_p (x3, operands[2]))
    goto L5348;
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11175;

 L5348: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5349;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11175;

 L5349: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((target_flags & 0x00008000) != 0) && (target_flags & 0x00000010) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    {
      return 464;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11175;

 L5364: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, DFmode))
    {
      operands[2] = x4;
      goto L5365;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L5365: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L5366;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L5366: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (rtx_equal_p (x3, operands[2]))
    goto L5367;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L5367: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5368;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L5368: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((target_flags & 0x00008000) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0) && !(target_flags & 0x00000010)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 465;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L5436: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == DFmode)
    goto L11176;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L11176: __attribute__ ((__unused__))
  if (register_operand (x4, DFmode))
    {
      operands[1] = x4;
      goto L5437;
    }
 L11177: __attribute__ ((__unused__))
  if (nonimmediate_operand (x4, DFmode))
    {
      operands[1] = x4;
      goto L5456;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L5437: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, DFmode))
    {
      operands[2] = x4;
      goto L5438;
    }
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11177;

 L5438: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L5439;
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11177;

 L5439: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (rtx_equal_p (x3, operands[2]))
    goto L5440;
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11177;

 L5440: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5441;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11177;

 L5441: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((target_flags & 0x00008000) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0) && (target_flags & 0x00000010)))
    {
      return 470;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11177;

 L5456: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, DFmode))
    {
      operands[2] = x4;
      goto L5457;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L5457: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L5458;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L5458: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (rtx_equal_p (x3, operands[2]))
    goto L5459;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L5459: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5460;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L5460: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((target_flags & 0x00008000) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0) && !(target_flags & 0x00000010)
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 471;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L429: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L430;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L430: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L431;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L431: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[0])
      && (reload_completed || !((target_flags & 0x00008000) != 0)))
    {
      return 67;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11010;

 L665: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode)
    goto L11178;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11019;

 L11178: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case FLOAT_TRUNCATE:
      goto L666;
    case NEG:
      goto L2834;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11019;

 L666: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, XFmode))
    {
      operands[1] = x3;
      goto L667;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11019;

 L667: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L668;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11019;

 L668: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, DFmode))
    {
      operands[2] = x2;
      goto L669;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11019;

 L669: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return 101;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11019;

 L2834: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L2835;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11019;

 L2835: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L2836;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11019;

 L2836: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, V2DFmode))
    {
      operands[2] = x2;
      goto L2837;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11019;

 L2837: __attribute__ ((__unused__))
  if ((!0 && ((target_flags & 0x00008000) != 0)
   && (reload_in_progress || reload_completed
       || (register_operand (operands[0], VOIDmode)
    && register_operand (operands[1], VOIDmode))))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 249;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11019;

 L2812: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode)
    goto L11180;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11020;

 L11180: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case NEG:
      goto L2813;
    case ABS:
      goto L2940;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11020;

 L2813: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (memory_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L2814;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11020;

 L2814: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2815;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11020;

 L2815: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_unary_operator_ok (NEG, DFmode, operands)))
    {
      return 248;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11020;

 L2940: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (memory_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L2941;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11020;

 L2941: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2942;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11020;

 L2942: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_unary_operator_ok (ABS, DFmode, operands)))
    {
      return 261;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11020;

 L2841: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode)
    goto L11182;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L11182: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case NEG:
      goto L2842;
    case ABS:
      goto L2961;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2842: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L2843;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2843: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2844;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2844: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && (target_flags & 0x00000001)
   && ix86_unary_operator_ok (NEG, DFmode, operands)))
    {
      return 250;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2961: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L2962;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2962: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  switch (((enum rtx_code) (x1)->code))
    {
    case USE:
      goto L2963;
    case CLOBBER:
      goto L2971;
    default:
     break;
   }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2963: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, V2DFmode))
    {
      operands[2] = x2;
      goto L2964;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2964: __attribute__ ((__unused__))
  if ((!0 && ((target_flags & 0x00008000) != 0)
   && (reload_in_progress || reload_completed
       || (register_operand (operands[0], VOIDmode)
    && register_operand (operands[1], VOIDmode))))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 262;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2971: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && (target_flags & 0x00000001)
   && ix86_unary_operator_ok (ABS, DFmode, operands)))
    {
      return 263;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L11007: __attribute__ ((__unused__))
  if (register_operand (x2, XFmode))
    {
      operands[0] = x2;
      goto L451;
    }
 L11021: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, XFmode))
    {
      operands[0] = x2;
      goto L2853;
    }
  goto L298;

 L451: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode)
    goto L11185;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11021;

 L11185: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == UNSPEC)
    goto L11188;
  if (register_operand (x2, XFmode))
    {
      operands[1] = x2;
      goto L452;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11021;

 L11188: __attribute__ ((__unused__))
  if ((((((x2)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L11191;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11021;

 L11191: __attribute__ ((__unused__))
  switch ((((x2)->u.fld[1]).rtint))
    {
    case 65L:
      goto L4856;
    case 66L:
      goto L4901;
    case 67L:
      goto L4946;
    default:
      break;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11021;

 L4856: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x3, XFmode))
    {
      operands[2] = x3;
      goto L4857;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11021;

 L4857: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x3, XFmode))
    {
      operands[1] = x3;
      goto L4858;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11021;

 L4858: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4859;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11021;

 L4859: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, XFmode))
    {
      operands[3] = x2;
      goto L4860;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11021;

 L4860: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations))
    {
      return 431;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11021;

 L4901: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x3, XFmode))
    {
      operands[2] = x3;
      goto L4902;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11021;

 L4902: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x3, XFmode))
    {
      operands[1] = x3;
      goto L4903;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11021;

 L4903: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4904;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11021;

 L4904: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, XFmode))
    {
      operands[3] = x2;
      goto L4905;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11021;

 L4905: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations))
    {
      return 434;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11021;

 L4946: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x3, XFmode))
    {
      operands[2] = x3;
      goto L4947;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11021;

 L4947: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x3, XFmode))
    {
      operands[1] = x3;
      goto L4948;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11021;

 L4948: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4949;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11021;

 L4949: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, XFmode))
    {
      operands[3] = x2;
      goto L4950;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11021;

 L4950: __attribute__ ((__unused__))
  if ((! (target_flags & 0x00000040) && (target_flags & 0x00000001)
   && flag_unsafe_math_optimizations))
    {
      return 437;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11021;

 L452: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L453;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11021;

 L453: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L454;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11021;

 L454: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (rtx_equal_p (x2, operands[0]))
    {
      return 72;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11021;

 L2853: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode)
    goto L11194;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L11194: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case NEG:
      goto L2854;
    case ABS:
      goto L2981;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2854: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, XFmode))
    {
      operands[1] = x3;
      goto L2855;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2855: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2856;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2856: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((target_flags & 0x00000001)
   && ix86_unary_operator_ok (NEG, XFmode, operands)))
    {
      return 251;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2981: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, XFmode))
    {
      operands[1] = x3;
      goto L2982;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2982: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2983;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2983: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((target_flags & 0x00000001)
   && ix86_unary_operator_ok (ABS, XFmode, operands)))
    {
      return 264;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L11008: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, DImode))
    {
      operands[0] = x2;
      goto L533;
    }
 L11015: __attribute__ ((__unused__))
  if (register_operand (x2, DImode))
    {
      operands[0] = x2;
      goto L1591;
    }
  goto L298;

 L533: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode)
    goto L11196;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11015;

 L11196: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case ZERO_EXTEND:
      goto L534;
    case PLUS:
      goto L865;
    case MINUS:
      goto L1316;
    case NEG:
      goto L2691;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11015;

 L534: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L535;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11015;

 L535: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L536;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11015;

 L536: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode)
    goto L11200;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11015;

 L11200: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG)
    goto L11202;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11015;

 L11202: __attribute__ ((__unused__))
  if ((((x2)->u.fld[0]).rtint) == 17)
    goto L11204;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11015;

 L11204: __attribute__ ((__unused__))
  if ((!0 && !(x86_inter_unit_moves & (1 << ix86_tune))))
    {
      return 81;
    }
 L11205: __attribute__ ((__unused__))
  if ((!0 && (x86_inter_unit_moves & (1 << ix86_tune))))
    {
      return 82;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11015;

 L865: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L866;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11015;

 L866: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, DImode))
    {
      operands[2] = x3;
      goto L867;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11015;

 L867: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L868;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11015;

 L868: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && ix86_binary_operator_ok (PLUS, DImode, operands)))
    {
      return 128;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11015;

 L1316: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L1317;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11015;

 L1317: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, DImode))
    {
      operands[2] = x3;
      goto L1318;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11015;

 L1318: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1319;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11015;

 L1319: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && ix86_binary_operator_ok (MINUS, DImode, operands)))
    {
      return 158;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11015;

 L2691: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (general_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L2692;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11015;

 L2692: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2693;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11015;

 L2693: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0
   && ix86_unary_operator_ok (NEG, DImode, operands)))
    {
      return 238;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11015;

 L1591: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode)
    goto L11206;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L11206: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case MULT:
      goto L1592;
    case ASHIFT:
      goto L3090;
    case ASHIFTRT:
      goto L3254;
    case LSHIFTRT:
      goto L3517;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L1592: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == DImode)
    goto L11210;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L11210: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x3)->code))
    {
    case ZERO_EXTEND:
      goto L1593;
    case SIGN_EXTEND:
      goto L1611;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L1593: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L1594;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L1594: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == DImode
      && ((enum rtx_code) (x3)->code) == ZERO_EXTEND)
    goto L1595;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L1595: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, SImode))
    {
      operands[2] = x4;
      goto L1596;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L1596: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1597;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L1597: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 177;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L1611: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L1612;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L1612: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == DImode
      && ((enum rtx_code) (x3)->code) == SIGN_EXTEND)
    goto L1613;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L1613: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, SImode))
    {
      operands[2] = x4;
      goto L1614;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L1614: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1615;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L1615: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0
   && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM)))
    {
      return 178;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L3090: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L3091;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L3091: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3092;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L3092: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3093;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L3093: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return 278;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L3254: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L3255;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L3255: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3256;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L3256: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3257;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L3257: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return 289;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L3517: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L3518;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L3518: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3519;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L3519: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3520;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L3520: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return 307;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L11013: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L932;
  goto L298;

 L932: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == UNSPEC
      && (((((x2)->u.fld[0]).rtvec))->num_elem) == 2
      && (((x2)->u.fld[1]).rtint) == 27)
    goto L933;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L933: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  switch (((enum machine_mode) (x3)->mode))
    {
    case SImode:
      goto L11212;
    case QImode:
      goto L11213;
    default:
      break;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L11212: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L934;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L934: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[1]);
  if (general_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L935;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L935: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L936;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L936: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L937;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L937: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L938;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L938: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L939;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L939: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_binary_operator_ok (PLUS, SImode, operands)))
    {
      return 132;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L11213: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L945;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L945: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[1]);
  if (general_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L946;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L946: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L947;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L947: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L948;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L948: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L949;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L949: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L950;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L950: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (ix86_binary_operator_ok (PLUS, QImode, operands)))
    {
      return 133;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L11016: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L2714;
  goto L298;

 L2714: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCZmode
      && ((enum rtx_code) (x2)->code) == COMPARE)
    goto L2715;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2715: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x3)->mode))
    {
    case SImode:
      goto L11214;
    case HImode:
      goto L11215;
    case QImode:
      goto L11216;
    default:
      break;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L11214: __attribute__ ((__unused__))
  if (((enum rtx_code) (x3)->code) == NEG)
    goto L2716;
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L4402;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2716: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L2717;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2717: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L2718;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2718: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L2719;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2719: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L2720;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2720: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == NEG)
    goto L2721;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2721: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1])
      && (ix86_unary_operator_ok (NEG, SImode, operands)))
    {
      return 240;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L4402: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L4403;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L4403: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L4404;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L4404: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L4405;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L4405: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == CTZ)
    goto L4406;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L4406: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    {
      return 375;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L11215: __attribute__ ((__unused__))
  if (((enum rtx_code) (x3)->code) == NEG)
    goto L2739;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2739: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, HImode))
    {
      operands[1] = x4;
      goto L2740;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2740: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L2741;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2741: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L2742;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2742: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L2743;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2743: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == NEG)
    goto L2744;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2744: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1])
      && (ix86_unary_operator_ok (NEG, HImode, operands)))
    {
      return 242;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L11216: __attribute__ ((__unused__))
  if (((enum rtx_code) (x3)->code) == NEG)
    goto L2762;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2762: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, QImode))
    {
      operands[1] = x4;
      goto L2763;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2763: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L2764;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2764: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L2765;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2765: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L2766;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2766: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == NEG)
    goto L2767;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L2767: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1])
      && (ix86_unary_operator_ok (NEG, QImode, operands)))
    {
      return 244;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L298;

 L299: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x3)->mode))
    {
    case HImode:
      goto L11218;
    case QImode:
      goto L11219;
    default:
      break;
    }
  goto L5670;

 L11218: __attribute__ ((__unused__))
  if (register_operand (x3, HImode))
    {
      operands[0] = x3;
      goto L300;
    }
  goto L5670;

 L300: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const0_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L301;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L301: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L302;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L302: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed
   && ((!(x86_use_mov0 & (1 << ix86_tune)) && !(x86_partial_reg_stall & (1 << ix86_tune))) || optimize_size)))
    {
      return 44;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L11219: __attribute__ ((__unused__))
  if (q_regs_operand (x3, QImode))
    {
      operands[0] = x3;
      goto L331;
    }
 L11220: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, QImode))
    {
      operands[0] = x3;
      goto L1180;
    }
  goto L5670;

 L331: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const0_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L332;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11220;

 L332: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L333;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11220;

 L333: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed && (!(x86_use_mov0 & (1 << ix86_tune)) || optimize_size)))
    {
      return 49;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11220;

 L1180: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode)
    goto L11221;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L11221: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case PLUS:
      goto L1181;
    case MINUS:
      goto L1475;
    case AND:
      goto L2020;
    case IOR:
      goto L2274;
    case XOR:
      goto L2524;
    case ASHIFTRT:
      goto L3430;
    case LSHIFTRT:
      goto L3654;
    case ROTATE:
      goto L3782;
    case ROTATERT:
      goto L3912;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L1181: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[0]))
    goto L1182;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L1182: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L1183;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L1183: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1184;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L1184: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 151;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L1475: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[0]))
    goto L1476;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L1476: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L1477;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L1477: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1478;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L1478: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 169;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L2020: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[0]))
    goto L2021;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L2021: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L2022;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L2022: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2023;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L2023: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 202;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L2274: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[0]))
    goto L2275;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L2275: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L2276;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L2276: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2277;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L2277: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 216;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L2524: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[0]))
    goto L2525;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L2525: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L2526;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L2526: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2527;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L2527: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 230;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L3430: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[0]))
    goto L3431;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L3431: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const1_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L3432;
    }
 L3461: __attribute__ ((__unused__))
  if (nonmemory_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L3462;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L3432: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3433;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3461;

 L3433: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (ix86_binary_operator_ok (ASHIFTRT, QImode, operands)
   && (! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size)))
    {
      return 301;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3461;

 L3462: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3463;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L3463: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 303;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L3654: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[0]))
    goto L3655;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L3655: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const1_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L3656;
    }
 L3685: __attribute__ ((__unused__))
  if (nonmemory_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L3686;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L3656: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3657;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3685;

 L3657: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size)))
    {
      return 317;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3685;

 L3686: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3687;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L3687: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 319;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L3782: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[0]))
    goto L3783;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L3783: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const1_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L3784;
    }
 L3813: __attribute__ ((__unused__))
  if (nonmemory_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L3814;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L3784: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3785;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3813;

 L3785: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size)))
    {
      return 326;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3813;

 L3814: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3815;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L3815: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 328;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L3912: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[0]))
    goto L3913;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L3913: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const1_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L3914;
    }
 L3943: __attribute__ ((__unused__))
  if (nonmemory_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L3944;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L3914: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3915;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3943;

 L3915: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && ((x86_shift1 & (1 << ix86_tune)) || optimize_size)))
    {
      return 335;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[1]).rtx);
  goto L3943;

 L3944: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3945;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L3945: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((! (x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)))
    {
      return 337;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L11022: __attribute__ ((__unused__))
  if ((((x2)->u.fld[0]).rtint) == 17)
    goto L997;
  goto L5670;

 L997: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == COMPARE)
    goto L998;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L998: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x3)->mode))
    {
    case SImode:
      goto L11230;
    case HImode:
      goto L11233;
    case QImode:
      goto L11236;
    default:
      break;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L11230: __attribute__ ((__unused__))
  tem = recog_23 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L11233: __attribute__ ((__unused__))
  tem = recog_24 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L11236: __attribute__ ((__unused__))
  tem = recog_25 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L4251: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L4252;
    }
  if (((enum rtx_code) (x2)->code) == IF_THEN_ELSE)
    goto L4278;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L4252: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L4253;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L4253: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum rtx_code) (x2)->code) == LABEL_REF)
    goto L4254;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L4254: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  operands[1] = x3;
  return 356;

 L4278: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == NE)
    goto L4279;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L4279: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L4280;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L4280: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L4281;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L4281: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == LABEL_REF)
    goto L4282;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L4282: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  operands[0] = x4;
  goto L4283;

 L4283: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == PC)
    goto L4284;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L4284: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L4285;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L4285: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L4286;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L4286: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L4287;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L4287: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L4288;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L4288: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == -1L
      && (!0 && (x86_use_loop & (1 << ix86_tune)))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 2;
      return 357;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L5670;

 L5671: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CALL)
    goto L5672;
  goto ret0;

 L5672: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == QImode
      && ((enum rtx_code) (x3)->code) == MEM)
    goto L5673;
  goto ret0;

 L5673: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == SImode)
    goto L11285;
  goto ret0;

 L11285: __attribute__ ((__unused__))
  if (constant_call_address_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L5674;
    }
 L11286: __attribute__ ((__unused__))
  if (call_insn_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L5686;
    }
  goto ret0;

 L5674: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  operands[2] = x3;
  goto L5675;

 L5675: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L5676;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11286;

 L5676: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 7)
    goto L5677;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11286;

 L5677: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L5678;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11286;

 L5678: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 7)
    goto L5679;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11286;

 L5679: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (immediate_operand (x3, SImode))
    {
      operands[3] = x3;
      return 487;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11286;

 L5686: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  operands[2] = x3;
  goto L5687;

 L5687: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L5688;
  goto ret0;

 L5688: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 7)
    goto L5689;
  goto ret0;

 L5689: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L5690;
  goto ret0;

 L5690: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 7)
    goto L5691;
  goto ret0;

 L5691: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (immediate_operand (x3, SImode))
    {
      operands[3] = x3;
      return 488;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_27 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum rtx_code) (x2)->code))
    {
    case REG:
      goto L11307;
    case MEM:
      goto L5077;
    default:
     break;
   }
 L11290: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L215;
    }
 L11293: __attribute__ ((__unused__))
  if (memory_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L748;
    }
 L11295: __attribute__ ((__unused__))
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L1627;
    }
 L11301: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L4386;
    }
  goto ret0;

 L11307: __attribute__ ((__unused__))
  if ((((x2)->u.fld[0]).rtint) == 7)
    goto L4359;
  goto L11290;

 L4359: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L4360;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11290;

 L4360: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 6)
    goto L4361;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11290;

 L4361: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 4L)
    goto L4362;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11290;

 L4362: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L4363;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11290;

 L4363: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 6)
    goto L4364;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11290;

 L4364: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L4365;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11290;

 L4365: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 6)
    goto L4366;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11290;

 L4366: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4367;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11290;

 L4367: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == BLKmode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L4368;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11290;

 L4368: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == SCRATCH)
    {
      return 372;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11290;

 L5077: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L5078;
    }
  goto L11290;

 L5078: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L5079;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11290;

 L5079: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L5080;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11290;

 L5080: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L5081;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11290;

 L5081: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L5082;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11290;

 L5082: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L5083;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11290;

 L5083: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 4L)
    goto L5084;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11290;

 L5084: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L5085;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11290;

 L5085: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 19
      && (!0 && ((x86_single_stringop & (1 << ix86_tune)) || optimize_size)))
    {
      return 446;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11290;

 L215: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L216;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11293;

 L216: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 7)
    goto L217;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11293;

 L217: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L218;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11293;

 L218: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 7)
    goto L219;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11293;

 L219: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L220;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11293;

 L220: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 7)
    goto L221;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11293;

 L221: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 4L)
    goto L222;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11293;

 L222: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L223;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11293;

 L223: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == BLKmode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L224;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11293;

 L224: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == SCRATCH)
    {
      return 32;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11293;

 L748: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == FIX)
    goto L749;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11295;

 L749: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L750;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11295;

 L750: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L751;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11295;

 L751: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[2] = x2;
      goto L752;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11295;

 L752: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L753;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11295;

 L753: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[3] = x2;
      goto L754;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11295;

 L754: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_VECTOR_FLOAT)
   && !((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode))))
    {
      return 108;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11295;

 L1627: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode)
    goto L11308;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L11308: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case TRUNCATE:
      goto L1628;
    case DIV:
      goto L1706;
    case UDIV:
      goto L1807;
    case FFS:
      goto L4373;
    case UNSPEC:
      goto L11314;
    case PLUS:
      goto L5481;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1628: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == DImode
      && ((enum rtx_code) (x3)->code) == LSHIFTRT)
    goto L1629;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1629: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == DImode
      && ((enum rtx_code) (x4)->code) == MULT)
    goto L1630;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1630: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (((enum machine_mode) (x5)->mode) == DImode)
    goto L11315;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L11315: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x5)->code))
    {
    case ZERO_EXTEND:
      goto L1631;
    case SIGN_EXTEND:
      goto L1656;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1631: __attribute__ ((__unused__))
  x6 = (((x5)->u.fld[0]).rtx);
  if (nonimmediate_operand (x6, SImode))
    {
      operands[1] = x6;
      goto L1632;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1632: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[1]).rtx);
  if (((enum machine_mode) (x5)->mode) == DImode
      && ((enum rtx_code) (x5)->code) == ZERO_EXTEND)
    goto L1633;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1633: __attribute__ ((__unused__))
  x6 = (((x5)->u.fld[0]).rtx);
  if (nonimmediate_operand (x6, SImode))
    {
      operands[2] = x6;
      goto L1634;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1634: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 32L)
    goto L1635;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1635: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1636;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1636: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L1637;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1637: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1638;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1638: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM))
    {
      return 179;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1656: __attribute__ ((__unused__))
  x6 = (((x5)->u.fld[0]).rtx);
  if (nonimmediate_operand (x6, SImode))
    {
      operands[1] = x6;
      goto L1657;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1657: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[1]).rtx);
  if (((enum machine_mode) (x5)->mode) == DImode
      && ((enum rtx_code) (x5)->code) == SIGN_EXTEND)
    goto L1658;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1658: __attribute__ ((__unused__))
  x6 = (((x5)->u.fld[0]).rtx);
  if (nonimmediate_operand (x6, SImode))
    {
      operands[2] = x6;
      goto L1659;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1659: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 32L)
    goto L1660;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1660: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1661;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1661: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L1662;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1662: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1663;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1663: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((enum rtx_code) (operands[1])->code) != MEM || ((enum rtx_code) (operands[2])->code) != MEM))
    {
      return 180;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1706: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode)
    goto L11317;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L11317: __attribute__ ((__unused__))
  if (register_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L1707;
    }
 L11318: __attribute__ ((__unused__))
  if (register_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L1770;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1707: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[3] = x3;
      goto L1708;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11318;

 L1708: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L1709;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11318;

 L1709: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L1710;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11318;

 L1710: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == MOD)
    goto L1711;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11318;

 L1711: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[2]))
    goto L1712;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11318;

 L1712: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[3]))
    goto L1713;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11318;

 L1713: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1714;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11318;

 L1714: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode)
    goto L11319;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11318;

 L11319: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG)
    goto L11321;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11318;

 L11321: __attribute__ ((__unused__))
  if ((((x2)->u.fld[0]).rtint) == 17)
    goto L11323;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11318;

 L11323: __attribute__ ((__unused__))
  if ((!optimize_size && !(x86_use_cltd & (1 << ix86_tune))))
    {
      return 183;
    }
 L11324: __attribute__ ((__unused__))
  if ((optimize_size || (x86_use_cltd & (1 << ix86_tune))))
    {
      return 184;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11318;

 L1770: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L1771;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1771: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L1772;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1772: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L1773;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1773: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == MOD)
    goto L1774;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1774: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L1775;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1775: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2]))
    goto L1776;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1776: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L1777;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1777: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[4] = x2;
      goto L1778;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1778: __attribute__ ((__unused__))
  if (pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 185;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1807: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L1808;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1808: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L1809;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1809: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L1810;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1810: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L1811;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1811: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == UMOD)
    goto L1812;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1812: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L1813;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1813: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2]))
    goto L1814;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1814: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  switch (((enum rtx_code) (x1)->code))
    {
    case CLOBBER:
      goto L1815;
    case USE:
      goto L1854;
    default:
     break;
   }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1815: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return 187;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L1854: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[3])
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 188;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L4373: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L4374;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L4374: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4375;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L4375: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L4376;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L4376: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4377;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L4377: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0))))
    {
      return 373;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L11314: __attribute__ ((__unused__))
  if ((((((x2)->u.fld[0]).rtvec))->num_elem) == 4
      && (((x2)->u.fld[1]).rtint) == 20)
    goto L5214;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L5214: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (((enum machine_mode) (x3)->mode) == BLKmode
      && ((enum rtx_code) (x3)->code) == MEM)
    goto L5215;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L5215: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, SImode))
    {
      operands[5] = x4;
      goto L5216;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L5216: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L5217;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L5217: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[2]);
  if (immediate_operand (x3, SImode))
    {
      operands[3] = x3;
      goto L5218;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L5218: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[3]);
  if (register_operand (x3, SImode))
    {
      operands[4] = x3;
      goto L5219;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L5219: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L5220;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L5220: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 19)
    goto L5221;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L5221: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5222;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L5222: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L5223;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L5223: __attribute__ ((__unused__))
  if (pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 453;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L5481: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L5482;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L5482: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (immediate_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L5483;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L5483: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5484;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L5484: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L5485;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L5485: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5486;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L5486: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == BLKmode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L5487;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L5487: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == SCRATCH)
    {
      return 473;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11301;

 L4386: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == FFS)
    goto L4387;
  goto ret0;

 L4387: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L4388;
    }
  goto ret0;

 L4388: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4389;
  goto ret0;

 L4389: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L4390;
    }
  goto ret0;

 L4390: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4391;
  goto ret0;

 L4391: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return 374;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_28 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case SImode:
      goto L11300;
    case DImode:
      goto L11291;
    case HImode:
      goto L11303;
    case SFmode:
      goto L11297;
    case DFmode:
      goto L11298;
    case QImode:
      goto L11304;
    default:
      break;
    }
 L3996: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == PC)
    goto L3997;
  goto ret0;

 L11300: __attribute__ ((__unused__))
  tem = recog_27 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  goto L3996;

 L11291: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, DImode))
    {
      operands[0] = x2;
      goto L557;
    }
 L11292: __attribute__ ((__unused__))
  if (memory_operand (x2, DImode))
    {
      operands[0] = x2;
      goto L721;
    }
 L11299: __attribute__ ((__unused__))
  if (register_operand (x2, DImode))
    {
      operands[0] = x2;
      goto L3073;
    }
  goto L3996;

 L557: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == SIGN_EXTEND)
    goto L558;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11292;

 L558: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L559;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11292;

 L559: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L560;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11292;

 L560: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L561;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11292;

 L561: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L562;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11292;

 L562: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[2] = x2;
      return 83;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11292;

 L721: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == FIX)
    goto L722;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11299;

 L722: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L723;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11299;

 L723: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L724;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11299;

 L724: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[2] = x2;
      goto L725;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11299;

 L725: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L726;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11299;

 L726: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[3] = x2;
      goto L727;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11299;

 L727: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_VECTOR_FLOAT)
   && (!((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode)) || !0))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 105;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11299;

 L3073: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode)
    goto L11325;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L11325: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case ASHIFT:
      goto L3074;
    case ASHIFTRT:
      goto L3238;
    case LSHIFTRT:
      goto L3501;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L3074: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L3075;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L3075: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3076;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L3076: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3077;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L3077: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L3078;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L3078: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3079;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L3079: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && ((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0))))
    {
      return 277;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L3238: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L3239;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L3239: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3240;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L3240: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3241;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L3241: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L3242;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L3242: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3243;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L3243: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && ((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0))))
    {
      return 288;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L3501: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L3502;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L3502: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L3503;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L3503: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3504;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L3504: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L3505;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L3505: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L3506;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L3506: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && ((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0))))
    {
      return 306;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L11303: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == MEM)
    goto L5089;
 L11294: __attribute__ ((__unused__))
  if (memory_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L785;
    }
 L11296: __attribute__ ((__unused__))
  if (register_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L1782;
    }
  goto L3996;

 L5089: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L5090;
    }
  goto L11294;

 L5090: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, HImode))
    {
      operands[2] = x2;
      goto L5091;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11294;

 L5091: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L5092;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11294;

 L5092: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L5093;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11294;

 L5093: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L5094;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11294;

 L5094: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L5095;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11294;

 L5095: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 2L)
    goto L5096;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11294;

 L5096: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L5097;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11294;

 L5097: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 19
      && (!0 && ((x86_single_stringop & (1 << ix86_tune)) || optimize_size)))
    {
      return 447;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11294;

 L785: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == FIX)
    goto L786;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11296;

 L786: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L787;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11296;

 L787: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L788;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11296;

 L788: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[2] = x2;
      goto L789;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11296;

 L789: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L790;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11296;

 L790: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[3] = x2;
      goto L791;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11296;

 L791: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_VECTOR_FLOAT)
   && !((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode))))
    {
      return 113;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11296;

 L1782: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode)
    goto L11328;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L11328: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case DIV:
      goto L1783;
    case UDIV:
      goto L1874;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L1783: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L1784;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L1784: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, HImode))
    {
      operands[2] = x3;
      goto L1785;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L1785: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L1786;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L1786: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, HImode))
    {
      operands[3] = x2;
      goto L1787;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L1787: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == MOD)
    goto L1788;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L1788: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L1789;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L1789: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2]))
    goto L1790;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L1790: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1791;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L1791: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((x86_himode_math & (1 << ix86_tune))))
    {
      return 186;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L1874: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L1875;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L1875: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, HImode))
    {
      operands[2] = x3;
      goto L1876;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L1876: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L1877;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L1877: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, HImode))
    {
      operands[3] = x2;
      goto L1878;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L1878: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == UMOD)
    goto L1879;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L1879: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L1880;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L1880: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2]))
    goto L1881;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L1881: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L1882;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L1882: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, HImode))
    {
      operands[4] = x2;
      goto L1883;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L1883: __attribute__ ((__unused__))
  if (pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 189;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L11297: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, SFmode))
    {
      operands[0] = x2;
      goto L2783;
    }
 L11305: __attribute__ ((__unused__))
  if (register_operand (x2, SFmode))
    {
      operands[0] = x2;
      goto L5491;
    }
  goto L3996;

 L2783: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SFmode)
    goto L11330;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11305;

 L11330: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case NEG:
      goto L2784;
    case ABS:
      goto L2911;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11305;

 L2784: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L2785;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11305;

 L2785: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L2786;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11305;

 L2786: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[2] = x2;
      goto L2787;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11305;

 L2787: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2788;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11305;

 L2788: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((target_flags & 0x00004000) != 0)
   && (reload_in_progress || reload_completed
       || (register_operand (operands[0], VOIDmode)
    && register_operand (operands[1], VOIDmode)))))
    {
      return 246;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11305;

 L2911: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L2912;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11305;

 L2912: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L2913;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11305;

 L2913: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[2] = x2;
      goto L2914;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11305;

 L2914: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2915;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11305;

 L2915: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((target_flags & 0x00004000) != 0)
   && (reload_in_progress || reload_completed
       || (register_operand (operands[0], VOIDmode)
     && register_operand (operands[1], VOIDmode)))))
    {
      return 259;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11305;

 L5491: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SFmode
      && ((enum rtx_code) (x2)->code) == IF_THEN_ELSE)
    goto L5492;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5492: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (sse_comparison_operator (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L5493;
    }
 L5514: __attribute__ ((__unused__))
  if (((enum rtx_code) (x3)->code) == EQ)
    goto L5515;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5493: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, SFmode))
    {
      operands[4] = x4;
      goto L5494;
    }
  goto L5514;

 L5494: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, SFmode))
    {
      operands[5] = x4;
      goto L5495;
    }
  goto L5514;

 L5495: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[2] = x3;
      goto L5496;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L5514;

 L5496: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[3] = x3;
      goto L5497;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L5514;

 L5497: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5498;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L5514;

 L5498: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SFmode))
    {
      operands[6] = x2;
      goto L5499;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L5514;

 L5499: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5500;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L5514;

 L5500: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((target_flags & 0x00004000) != 0)
   && (((enum rtx_code) (operands[2])->code) != MEM || ((enum rtx_code) (operands[3])->code) != MEM)


   && ((((enum rtx_code) (operands[1])->code) != LT && ((enum rtx_code) (operands[1])->code) != GT
 && ((enum rtx_code) (operands[1])->code) != UNLE && ((enum rtx_code) (operands[1])->code) != UNGE)
       || !rtx_equal_p (operands[4], operands[2])
       || !rtx_equal_p (operands[5], operands[3]))
   && (!(target_flags & 0x00000010)
       || (((enum rtx_code) (operands[1])->code) != EQ && ((enum rtx_code) (operands[1])->code) != NE))))
    {
      return 474;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L5514;

 L5515: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, SFmode))
    {
      operands[3] = x4;
      goto L5516;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5516: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, SFmode))
    {
      operands[4] = x4;
      goto L5517;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5517: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L5518;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5518: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[2] = x3;
      goto L5519;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5519: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5520;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5520: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SFmode))
    {
      operands[5] = x2;
      goto L5521;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5521: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5522;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5522: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((target_flags & 0x00004000) != 0)
   && (((enum rtx_code) (operands[2])->code) != MEM || ((enum rtx_code) (operands[3])->code) != MEM)))
    {
      return 475;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L11298: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, DFmode))
    {
      operands[0] = x2;
      goto L2824;
    }
 L11306: __attribute__ ((__unused__))
  if (register_operand (x2, DFmode))
    {
      operands[0] = x2;
      goto L5535;
    }
  goto L3996;

 L2824: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode)
    goto L11332;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11306;

 L11332: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case NEG:
      goto L2825;
    case ABS:
      goto L2952;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11306;

 L2825: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L2826;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11306;

 L2826: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L2827;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11306;

 L2827: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, V2DFmode))
    {
      operands[2] = x2;
      goto L2828;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11306;

 L2828: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2829;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11306;

 L2829: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && ((target_flags & 0x00008000) != 0)
   && (reload_in_progress || reload_completed
       || (register_operand (operands[0], VOIDmode)
    && register_operand (operands[1], VOIDmode)))))
    {
      return 249;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11306;

 L2952: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L2953;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11306;

 L2953: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L2954;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11306;

 L2954: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, V2DFmode))
    {
      operands[2] = x2;
      goto L2955;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11306;

 L2955: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L2956;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11306;

 L2956: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && ((target_flags & 0x00008000) != 0)
   && (reload_in_progress || reload_completed
       || (register_operand (operands[0], VOIDmode)
    && register_operand (operands[1], VOIDmode)))))
    {
      return 262;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11306;

 L5535: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode
      && ((enum rtx_code) (x2)->code) == IF_THEN_ELSE)
    goto L5536;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5536: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (sse_comparison_operator (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L5537;
    }
 L5558: __attribute__ ((__unused__))
  if (((enum rtx_code) (x3)->code) == EQ)
    goto L5559;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5537: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, DFmode))
    {
      operands[4] = x4;
      goto L5538;
    }
  goto L5558;

 L5538: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, DFmode))
    {
      operands[5] = x4;
      goto L5539;
    }
  goto L5558;

 L5539: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[2] = x3;
      goto L5540;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L5558;

 L5540: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[3] = x3;
      goto L5541;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L5558;

 L5541: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5542;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L5558;

 L5542: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, DFmode))
    {
      operands[6] = x2;
      goto L5543;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L5558;

 L5543: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5544;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L5558;

 L5544: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((target_flags & 0x00008000) != 0)
   && (((enum rtx_code) (operands[2])->code) != MEM || ((enum rtx_code) (operands[3])->code) != MEM)


   && ((((enum rtx_code) (operands[1])->code) != LT && ((enum rtx_code) (operands[1])->code) != GT
 && ((enum rtx_code) (operands[1])->code) != UNLE && ((enum rtx_code) (operands[1])->code) != UNGE)
       || !rtx_equal_p (operands[4], operands[2])
       || !rtx_equal_p (operands[5], operands[3]))
   && (!(target_flags & 0x00000010)
       || (((enum rtx_code) (operands[1])->code) != EQ && ((enum rtx_code) (operands[1])->code) != NE))))
    {
      return 476;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L5558;

 L5559: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, DFmode))
    {
      operands[3] = x4;
      goto L5560;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5560: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, DFmode))
    {
      operands[4] = x4;
      goto L5561;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5561: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L5562;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5562: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[2] = x3;
      goto L5563;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5563: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5564;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5564: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, DFmode))
    {
      operands[5] = x2;
      goto L5565;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5565: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5566;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5566: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((target_flags & 0x00004000) != 0)
   && (((enum rtx_code) (operands[2])->code) != MEM || ((enum rtx_code) (operands[3])->code) != MEM)))
    {
      return 477;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L11304: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == MEM)
    goto L5101;
  goto L3996;

 L5101: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L5102;
    }
  goto L3996;

 L5102: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L5103;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5103: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L5104;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5104: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L5105;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5105: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L5106;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5106: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L5107;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5107: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 1L)
    goto L5108;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5108: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L5109;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L5109: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 19
      && (!0 && ((x86_single_stringop & (1 << ix86_tune)) || optimize_size)))
    {
      return 448;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L3996;

 L3997: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == IF_THEN_ELSE)
    goto L3998;
  goto ret0;

 L3998: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (comparison_operator (x3, VOIDmode))
    {
      operands[0] = x3;
      goto L3999;
    }
  goto ret0;

 L3999: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, VOIDmode))
    {
      operands[1] = x4;
      goto L4000;
    }
  goto ret0;

 L4000: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (register_operand (x4, VOIDmode))
    {
      operands[2] = x4;
      goto L4001;
    }
 L4023: __attribute__ ((__unused__))
  if (nonimmediate_operand (x4, VOIDmode))
    {
      operands[2] = x4;
      goto L4024;
    }
  goto ret0;

 L4001: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  switch (((enum rtx_code) (x3)->code))
    {
    case LABEL_REF:
      goto L4002;
    case PC:
      goto L4071;
    default:
     break;
   }
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4023;

 L4002: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  operands[3] = x4;
  goto L4003;

 L4003: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == PC)
    goto L4004;
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4023;

 L4004: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4005;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4023;

 L4005: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCFPmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 18)
    goto L4006;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4023;

 L4006: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4007;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4023;

 L4007: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCFPmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0)) && (target_flags & 0x00000001)
   && !((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode))
   && (mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_VECTOR_FLOAT)
   && ((enum machine_mode) (operands[1])->mode) == ((enum machine_mode) (operands[2])->mode)
   && ix86_fp_jump_nontrivial_p (((enum rtx_code) (operands[0])->code))))
    {
      return 344;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4023;

 L4071: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == LABEL_REF)
    goto L4072;
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4023;

 L4072: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  operands[3] = x4;
  goto L4073;

 L4073: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4074;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4023;

 L4074: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCFPmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 18)
    goto L4075;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4023;

 L4075: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4076;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4023;

 L4076: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCFPmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0)) && (target_flags & 0x00000001)
   && !((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode))
   && (mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_VECTOR_FLOAT)
   && ((enum machine_mode) (operands[1])->mode) == ((enum machine_mode) (operands[2])->mode)
   && ix86_fp_jump_nontrivial_p (((enum rtx_code) (operands[0])->code))))
    {
      return 347;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4023;

 L4024: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  switch (((enum rtx_code) (x3)->code))
    {
    case LABEL_REF:
      goto L4025;
    case PC:
      goto L4095;
    default:
     break;
   }
  goto ret0;

 L4025: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  operands[3] = x4;
  goto L4026;

 L4026: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == PC)
    goto L4027;
  goto ret0;

 L4027: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4028;
  goto ret0;

 L4028: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCFPmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 18)
    goto L4029;
  goto ret0;

 L4029: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4030;
  goto ret0;

 L4030: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCFPmode)
    goto L11334;
  goto ret0;

 L11334: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG)
    goto L11336;
  goto ret0;

 L11336: __attribute__ ((__unused__))
  if ((((x2)->u.fld[0]).rtint) == 17)
    goto L11338;
  goto ret0;

 L11338: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)
   && ((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode))
   && ((enum machine_mode) (operands[1])->mode) == ((enum machine_mode) (operands[2])->mode)
   && ix86_fp_jump_nontrivial_p (((enum rtx_code) (operands[0])->code))))
    {
      return 345;
    }
 L11339: __attribute__ ((__unused__))
  if ((((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode))
   && ((enum machine_mode) (operands[1])->mode) == ((enum machine_mode) (operands[2])->mode)
   && ix86_fp_jump_nontrivial_p (((enum rtx_code) (operands[0])->code))))
    {
      return 346;
    }
  goto ret0;

 L4095: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == LABEL_REF)
    goto L4096;
  goto ret0;

 L4096: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  operands[3] = x4;
  goto L4097;

 L4097: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4098;
  goto ret0;

 L4098: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCFPmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 18)
    goto L4099;
  goto ret0;

 L4099: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4100;
  goto ret0;

 L4100: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCFPmode)
    goto L11340;
  goto ret0;

 L11340: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG)
    goto L11342;
  goto ret0;

 L11342: __attribute__ ((__unused__))
  if ((((x2)->u.fld[0]).rtint) == 17)
    goto L11344;
  goto ret0;

 L11344: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)
   && ((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode))
   && ((enum machine_mode) (operands[1])->mode) == ((enum machine_mode) (operands[2])->mode)
   && ix86_fp_jump_nontrivial_p (((enum rtx_code) (operands[0])->code))))
    {
      return 348;
    }
 L11345: __attribute__ ((__unused__))
  if ((((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode))
   && ((enum machine_mode) (operands[1])->mode) == ((enum machine_mode) (operands[2])->mode)
   && ix86_fp_jump_nontrivial_p (((enum rtx_code) (operands[0])->code))))
    {
      return 349;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_29 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum rtx_code) (x2)->code) == MEM)
    goto L4973;
 L11348: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L736;
    }
 L11350: __attribute__ ((__unused__))
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L1753;
    }
  goto ret0;

 L4973: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L4974;
    }
  goto L11348;

 L4974: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L4975;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11348;

 L4975: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[3] = x3;
      goto L4976;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11348;

 L4976: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L4977;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11348;

 L4977: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L4978;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11348;

 L4978: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L4979;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11348;

 L4979: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[2]))
    goto L4980;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11348;

 L4980: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 4L)
    goto L4981;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11348;

 L4981: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L4982;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11348;

 L4982: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L4983;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11348;

 L4983: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L4984;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11348;

 L4984: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[3]))
    goto L4985;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11348;

 L4985: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 4L)
    goto L4986;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11348;

 L4986: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L4987;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11348;

 L4987: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 19
      && (!0 && ((x86_single_stringop & (1 << ix86_tune)) || optimize_size)))
    {
      return 441;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11348;

 L736: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == FIX)
    goto L737;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11350;

 L737: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L738;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11350;

 L738: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L739;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11350;

 L739: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[2] = x2;
      goto L740;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11350;

 L740: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L741;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11350;

 L741: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[3] = x2;
      goto L742;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11350;

 L742: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L743;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11350;

 L743: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, SImode))
    {
      operands[4] = x2;
      goto L744;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11350;

 L744: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_VECTOR_FLOAT)
   && !((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode))))
    {
      return 107;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11350;

 L1753: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode)
    goto L11355;
  goto ret0;

 L11355: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case DIV:
      goto L1754;
    case UDIV:
      goto L1831;
    case UNSPEC:
      goto L11361;
    case PLUS:
      goto L4515;
    default:
     break;
   }
  goto ret0;

 L1754: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L1755;
    }
  goto ret0;

 L1755: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L1756;
    }
  goto ret0;

 L1756: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L1757;
  goto ret0;

 L1757: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L1758;
    }
  goto ret0;

 L1758: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == MOD)
    goto L1759;
  goto ret0;

 L1759: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L1760;
  goto ret0;

 L1760: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2]))
    goto L1761;
  goto ret0;

 L1761: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L1762;
  goto ret0;

 L1762: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[4] = x2;
      goto L1763;
    }
  goto ret0;

 L1763: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1764;
  goto ret0;

 L1764: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return 185;
    }
  goto ret0;

 L1831: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L1832;
    }
  goto ret0;

 L1832: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L1833;
    }
  goto ret0;

 L1833: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L1834;
  goto ret0;

 L1834: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L1835;
    }
  goto ret0;

 L1835: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == UMOD)
    goto L1836;
  goto ret0;

 L1836: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L1837;
  goto ret0;

 L1837: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2]))
    goto L1838;
  goto ret0;

 L1838: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L1839;
  goto ret0;

 L1839: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[3]))
    goto L1840;
  goto ret0;

 L1840: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1841;
  goto ret0;

 L1841: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return 188;
    }
  goto ret0;

 L11361: __attribute__ ((__unused__))
  switch ((((((x2)->u.fld[0]).rtvec))->num_elem))
    {
    case 3:
      goto L11364;
    case 2:
      goto L11365;
    case 4:
      goto L11366;
    default:
      break;
    }
  goto ret0;

 L11364: __attribute__ ((__unused__))
  if ((((x2)->u.fld[1]).rtint) == 16)
    goto L4439;
  goto ret0;

 L4439: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L4440;
    }
  goto ret0;

 L4440: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[1]);
  if (tls_symbolic_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L4441;
    }
  goto ret0;

 L4441: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[2]);
  if (call_insn_operand (x3, SImode))
    {
      operands[3] = x3;
      goto L4442;
    }
  goto ret0;

 L4442: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4443;
  goto ret0;

 L4443: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[4] = x2;
      goto L4444;
    }
  goto ret0;

 L4444: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4445;
  goto ret0;

 L4445: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[5] = x2;
      goto L4446;
    }
  goto ret0;

 L4446: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4447;
  goto ret0;

 L4447: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode)
    goto L11367;
  goto ret0;

 L11367: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG)
    goto L11369;
  goto ret0;

 L11369: __attribute__ ((__unused__))
  if ((((x2)->u.fld[0]).rtint) == 17)
    goto L11371;
  goto ret0;

 L11371: __attribute__ ((__unused__))
  if ((!0 && (ix86_tls_dialect == TLS_DIALECT_GNU)))
    {
      return 378;
    }
 L11372: __attribute__ ((__unused__))
  if ((!0 && (ix86_tls_dialect == TLS_DIALECT_SUN)))
    {
      return 379;
    }
  goto ret0;

 L11365: __attribute__ ((__unused__))
  if ((((x2)->u.fld[1]).rtint) == 17)
    goto L4479;
  goto ret0;

 L4479: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L4480;
    }
  goto ret0;

 L4480: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[1]);
  if (call_insn_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L4481;
    }
  goto ret0;

 L4481: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4482;
  goto ret0;

 L4482: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L4483;
    }
  goto ret0;

 L4483: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4484;
  goto ret0;

 L4484: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[4] = x2;
      goto L4485;
    }
  goto ret0;

 L4485: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4486;
  goto ret0;

 L4486: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode)
    goto L11373;
  goto ret0;

 L11373: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG)
    goto L11375;
  goto ret0;

 L11375: __attribute__ ((__unused__))
  if ((((x2)->u.fld[0]).rtint) == 17)
    goto L11377;
  goto ret0;

 L11377: __attribute__ ((__unused__))
  if ((!0 && (ix86_tls_dialect == TLS_DIALECT_GNU)))
    {
      return 380;
    }
 L11378: __attribute__ ((__unused__))
  if ((!0 && (ix86_tls_dialect == TLS_DIALECT_SUN)))
    {
      return 381;
    }
  goto ret0;

 L11366: __attribute__ ((__unused__))
  if ((((x2)->u.fld[1]).rtint) == 20)
    goto L5199;
  goto ret0;

 L5199: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[0]);
  if (((enum machine_mode) (x3)->mode) == BLKmode
      && ((enum rtx_code) (x3)->code) == MEM)
    goto L5200;
  goto ret0;

 L5200: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, SImode))
    {
      operands[5] = x4;
      goto L5201;
    }
  goto ret0;

 L5201: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L5202;
    }
  goto ret0;

 L5202: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[2]);
  if (immediate_operand (x3, SImode))
    {
      operands[3] = x3;
      goto L5203;
    }
  goto ret0;

 L5203: __attribute__ ((__unused__))
  x3 = (((((x2)->u.fld[0]).rtvec))->elem[3]);
  if (register_operand (x3, SImode))
    {
      operands[4] = x3;
      goto L5204;
    }
  goto ret0;

 L5204: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L5205;
  goto ret0;

 L5205: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 19)
    goto L5206;
  goto ret0;

 L5206: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5207;
  goto ret0;

 L5207: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L5208;
    }
  goto ret0;

 L5208: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5209;
  goto ret0;

 L5209: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return 453;
    }
  goto ret0;

 L4515: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == UNSPEC
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 2
      && (((x3)->u.fld[1]).rtint) == 17)
    goto L4516;
  goto ret0;

 L4516: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L4517;
    }
  goto ret0;

 L4517: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (call_insn_operand (x4, SImode))
    {
      operands[2] = x4;
      goto L4518;
    }
  goto ret0;

 L4518: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == CONST)
    goto L4519;
  goto ret0;

 L4519: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == SImode
      && ((enum rtx_code) (x4)->code) == UNSPEC
      && (((((x4)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x4)->u.fld[1]).rtint) == 6)
    goto L4520;
  goto ret0;

 L4520: __attribute__ ((__unused__))
  x5 = (((((x4)->u.fld[0]).rtvec))->elem[0]);
  if (tls_symbolic_operand (x5, SImode))
    {
      operands[3] = x5;
      goto L4521;
    }
  goto ret0;

 L4521: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4522;
  goto ret0;

 L4522: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[4] = x2;
      goto L4523;
    }
  goto ret0;

 L4523: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4524;
  goto ret0;

 L4524: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[5] = x2;
      goto L4525;
    }
  goto ret0;

 L4525: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4526;
  goto ret0;

 L4526: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return 382;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_30 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case DImode:
      goto L11346;
    case SImode:
      goto L11352;
    case HImode:
      goto L11353;
    case QImode:
      goto L11354;
    default:
      break;
    }
 L4137: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == PC)
    goto L4138;
  goto ret0;

 L11346: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, DImode))
    {
      operands[0] = x2;
      goto L697;
    }
 L11347: __attribute__ ((__unused__))
  if (memory_operand (x2, DImode))
    {
      operands[0] = x2;
      goto L709;
    }
  goto L4137;

 L697: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == FIX)
    goto L698;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11347;

 L698: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L699;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11347;

 L699: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L700;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11347;

 L700: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[2] = x2;
      goto L701;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11347;

 L701: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L702;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11347;

 L702: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[3] = x2;
      goto L703;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11347;

 L703: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L704;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11347;

 L704: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, DImode))
    {
      operands[4] = x2;
      goto L705;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11347;

 L705: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_VECTOR_FLOAT)
   && (!((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode)) || !0))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 1;
      return 104;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11347;

 L709: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == FIX)
    goto L710;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L710: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L711;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L711: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L712;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L712: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[2] = x2;
      goto L713;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L713: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L714;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L714: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[3] = x2;
      goto L715;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L715: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L716;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L716: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, DFmode))
    {
      operands[4] = x2;
      goto L717;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L717: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_VECTOR_FLOAT)
   && (!((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode)) || !0)))
    {
      return 105;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L11352: __attribute__ ((__unused__))
  tem = recog_29 (x0, insn, pnum_clobbers);
  if (tem >= 0)
    return tem;
  goto L4137;

 L11353: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == MEM)
    goto L4991;
 L11349: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L773;
    }
 L11351: __attribute__ ((__unused__))
  if (register_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L1858;
    }
  goto L4137;

 L4991: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L4992;
    }
  goto L11349;

 L4992: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L4993;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11349;

 L4993: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[3] = x3;
      goto L4994;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11349;

 L4994: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L4995;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11349;

 L4995: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L4996;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11349;

 L4996: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L4997;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11349;

 L4997: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[2]))
    goto L4998;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11349;

 L4998: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 2L)
    goto L4999;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11349;

 L4999: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L5000;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11349;

 L5000: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L5001;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11349;

 L5001: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L5002;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11349;

 L5002: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[3]))
    goto L5003;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11349;

 L5003: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 2L)
    goto L5004;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11349;

 L5004: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L5005;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11349;

 L5005: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 19
      && (!0 && ((x86_single_stringop & (1 << ix86_tune)) || optimize_size)))
    {
      return 442;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11349;

 L773: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == FIX)
    goto L774;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11351;

 L774: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L775;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11351;

 L775: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L776;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11351;

 L776: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[2] = x2;
      goto L777;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11351;

 L777: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L778;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11351;

 L778: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[3] = x2;
      goto L779;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11351;

 L779: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L780;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11351;

 L780: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[4] = x2;
      goto L781;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11351;

 L781: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_VECTOR_FLOAT)
   && !((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode))))
    {
      return 112;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11351;

 L1858: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == UDIV)
    goto L1859;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L1859: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L1860;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L1860: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, HImode))
    {
      operands[2] = x3;
      goto L1861;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L1861: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L1862;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L1862: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, HImode))
    {
      operands[3] = x2;
      goto L1863;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L1863: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == UMOD)
    goto L1864;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L1864: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L1865;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L1865: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2]))
    goto L1866;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L1866: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L1867;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L1867: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, HImode))
    {
      operands[4] = x2;
      goto L1868;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L1868: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L1869;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L1869: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return 189;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L11354: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == MEM)
    goto L5009;
  goto L4137;

 L5009: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L5010;
    }
  goto L4137;

 L5010: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L5011;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L5011: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[3] = x3;
      goto L5012;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L5012: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L5013;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L5013: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L5014;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L5014: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L5015;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L5015: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[2]))
    goto L5016;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L5016: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 1L)
    goto L5017;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L5017: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L5018;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L5018: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L5019;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L5019: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L5020;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L5020: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[3]))
    goto L5021;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L5021: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 1L)
    goto L5022;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L5022: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L5023;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L5023: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 19
      && (!0 && ((x86_single_stringop & (1 << ix86_tune)) || optimize_size)))
    {
      return 443;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L4137;

 L4138: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == IF_THEN_ELSE)
    goto L4259;
  goto ret0;

 L4259: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == NE)
    goto L4260;
 L4139: __attribute__ ((__unused__))
  if (comparison_operator (x3, VOIDmode))
    {
      operands[0] = x3;
      goto L4140;
    }
  goto ret0;

 L4260: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L4261;
    }
  goto L4139;

 L4261: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L4262;
  goto L4139;

 L4262: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == LABEL_REF)
    goto L4263;
  x3 = (((x2)->u.fld[0]).rtx);
  goto L4139;

 L4263: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  operands[0] = x4;
  goto L4264;

 L4264: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == PC)
    goto L4265;
  x3 = (((x2)->u.fld[0]).rtx);
  goto L4139;

 L4265: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L4266;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L4139;

 L4266: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L4267;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L4139;

 L4267: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L4268;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L4139;

 L4268: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L4269;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L4139;

 L4269: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == -1L)
    goto L4270;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L4139;

 L4270: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4271;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L4139;

 L4271: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L4272;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L4139;

 L4272: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4273;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L4139;

 L4273: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && (x86_use_loop & (1 << ix86_tune))))
    {
      return 357;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L4139;

 L4140: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, VOIDmode))
    {
      operands[1] = x4;
      goto L4141;
    }
  goto ret0;

 L4141: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, VOIDmode))
    {
      operands[2] = x4;
      goto L4142;
    }
 L4194: __attribute__ ((__unused__))
  if (register_operand (x4, VOIDmode))
    {
      operands[2] = x4;
      goto L4195;
    }
  goto ret0;

 L4142: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  switch (((enum rtx_code) (x3)->code))
    {
    case LABEL_REF:
      goto L4143;
    case PC:
      goto L4169;
    default:
     break;
   }
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4194;

 L4143: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  operands[3] = x4;
  goto L4144;

 L4144: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == PC)
    goto L4145;
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4194;

 L4145: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4146;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4194;

 L4146: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCFPmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 18)
    goto L4147;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4194;

 L4147: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4148;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4194;

 L4148: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCFPmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L4149;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4194;

 L4149: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4150;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4194;

 L4150: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, HImode))
    {
      operands[4] = x2;
      goto L4151;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4194;

 L4151: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)
   && (((enum machine_mode) (operands[1])->mode) == SFmode || ((enum machine_mode) (operands[1])->mode) == DFmode)
   && ((enum machine_mode) (operands[1])->mode) == ((enum machine_mode) (operands[2])->mode)
   && !ix86_use_fcomi_compare (((enum rtx_code) (operands[0])->code))
   && ix86_cc_mode ((((enum rtx_code) (operands[0])->code)), (operands[1]), (operands[2])) == CCFPmode

   && ix86_fp_jump_nontrivial_p (((enum rtx_code) (operands[0])->code))))
    {
      return 350;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4194;

 L4169: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == LABEL_REF)
    goto L4170;
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4194;

 L4170: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  operands[3] = x4;
  goto L4171;

 L4171: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4172;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4194;

 L4172: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCFPmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 18)
    goto L4173;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4194;

 L4173: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4174;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4194;

 L4174: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCFPmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L4175;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4194;

 L4175: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4176;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4194;

 L4176: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, HImode))
    {
      operands[4] = x2;
      goto L4177;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4194;

 L4177: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)
   && (((enum machine_mode) (operands[1])->mode) == SFmode || ((enum machine_mode) (operands[1])->mode) == DFmode)
   && ((enum machine_mode) (operands[1])->mode) == ((enum machine_mode) (operands[2])->mode)
   && !ix86_use_fcomi_compare (((enum rtx_code) (operands[0])->code))
   && ix86_cc_mode ((((enum rtx_code) (operands[0])->code)), (operands[1]), (operands[2])) == CCFPmode

   && ix86_fp_jump_nontrivial_p (((enum rtx_code) (operands[0])->code))))
    {
      return 351;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[1]).rtx);
  goto L4194;

 L4195: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  switch (((enum rtx_code) (x3)->code))
    {
    case LABEL_REF:
      goto L4196;
    case PC:
      goto L4222;
    default:
     break;
   }
  goto ret0;

 L4196: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  operands[3] = x4;
  goto L4197;

 L4197: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == PC)
    goto L4198;
  goto ret0;

 L4198: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4199;
  goto ret0;

 L4199: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCFPmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 18)
    goto L4200;
  goto ret0;

 L4200: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4201;
  goto ret0;

 L4201: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCFPmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L4202;
  goto ret0;

 L4202: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4203;
  goto ret0;

 L4203: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, HImode))
    {
      operands[4] = x2;
      goto L4204;
    }
  goto ret0;

 L4204: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)
   && (mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_VECTOR_FLOAT)
   && ((enum machine_mode) (operands[1])->mode) == ((enum machine_mode) (operands[2])->mode)
   && ix86_fp_jump_nontrivial_p (((enum rtx_code) (operands[0])->code))))
    {
      return 352;
    }
  goto ret0;

 L4222: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == LABEL_REF)
    goto L4223;
  goto ret0;

 L4223: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  operands[3] = x4;
  goto L4224;

 L4224: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4225;
  goto ret0;

 L4225: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCFPmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 18)
    goto L4226;
  goto ret0;

 L4226: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4227;
  goto ret0;

 L4227: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCFPmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L4228;
  goto ret0;

 L4228: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L4229;
  goto ret0;

 L4229: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, HImode))
    {
      operands[4] = x2;
      goto L4230;
    }
  goto ret0;

 L4230: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)
   && (mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_VECTOR_FLOAT)
   && ((enum machine_mode) (operands[1])->mode) == ((enum machine_mode) (operands[2])->mode)
   && ix86_fp_jump_nontrivial_p (((enum rtx_code) (operands[0])->code))))
    {
      return 353;
    }
  goto ret0;
 ret0:
  return -1;
}

static int
recog_31 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));

  switch ((((((x0)->u.fld[0]).rtvec))->num_elem))
    {
    case 2:
      goto L5661;
    case 3:
      goto L213;
    case 5:
      goto L681;
    case 4:
      goto L5649;
    case 6:
      goto L5025;
    case 7:
      goto L5151;
    case 17:
      goto L6832;
    default:
      break;
    }
  goto ret0;

 L5661: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  if (((enum machine_mode) (x1)->mode) == SImode
      && ((enum rtx_code) (x1)->code) == UNSPEC
      && (((((x1)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x1)->u.fld[1]).rtint) == 10)
    goto L5662;
  switch (((enum rtx_code) (x1)->code))
    {
    case SET:
      goto L207;
    case CALL:
      goto L4291;
    case RETURN:
      goto L4328;
    default:
     break;
   }
  goto ret0;

 L5662: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L5663;
    }
  goto ret0;

 L5663: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L5664;
  goto ret0;

 L5664: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 7)
    goto L5665;
  goto ret0;

 L5665: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == MINUS)
    goto L5666;
  goto ret0;

 L5666: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 7)
    goto L5667;
  goto ret0;

 L5667: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[0])
      && (!0 && (target_flags & 0x00000100))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 2;
      return 486;
    }
  goto ret0;

 L207: __attribute__ ((__unused__))
  return recog_26 (x0, insn, pnum_clobbers);

 L4291: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L4292;
  goto ret0;

 L4292: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode)
    goto L11287;
  goto ret0;

 L11287: __attribute__ ((__unused__))
  if (constant_call_address_operand (x3, SImode))
    {
      operands[0] = x3;
      goto L4293;
    }
 L11288: __attribute__ ((__unused__))
  if (call_insn_operand (x3, SImode))
    {
      operands[0] = x3;
      goto L4303;
    }
  goto ret0;

 L4293: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  operands[1] = x2;
  goto L4294;

 L4294: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L4295;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11288;

 L4295: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 7)
    goto L4296;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11288;

 L4296: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L4297;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11288;

 L4297: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 7)
    goto L4298;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11288;

 L4298: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (immediate_operand (x3, SImode))
    {
      operands[2] = x3;
      return 358;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11288;

 L4303: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  operands[1] = x2;
  goto L4304;

 L4304: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L4305;
  goto ret0;

 L4305: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 7)
    goto L4306;
  goto ret0;

 L4306: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L4307;
  goto ret0;

 L4307: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 7)
    goto L4308;
  goto ret0;

 L4308: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (immediate_operand (x3, SImode))
    {
      operands[2] = x3;
      return 359;
    }
  goto ret0;

 L4328: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  switch (((enum rtx_code) (x1)->code))
    {
    case UNSPEC:
      goto L11289;
    case USE:
      goto L4338;
    default:
     break;
   }
  goto ret0;

 L11289: __attribute__ ((__unused__))
  if ((((((x1)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x1)->u.fld[1]).rtint) == 75)
    goto L4329;
  goto ret0;

 L4329: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (reload_completed))
    {
      return 365;
    }
  goto ret0;

 L4338: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L4339;
    }
  if (const_int_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L4334;
    }
  goto ret0;

 L4339: __attribute__ ((__unused__))
  if ((reload_completed))
    {
      return 367;
    }
  goto ret0;

 L4334: __attribute__ ((__unused__))
  if ((reload_completed))
    {
      return 366;
    }
  goto ret0;

 L213: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L214;
  goto ret0;

 L214: __attribute__ ((__unused__))
  return recog_28 (x0, insn, pnum_clobbers);

 L681: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L682;
  goto ret0;

 L682: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, DImode))
    {
      operands[0] = x2;
      goto L683;
    }
  goto ret0;

 L683: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == FIX)
    goto L684;
  goto ret0;

 L684: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L685;
    }
  goto ret0;

 L685: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L686;
  goto ret0;

 L686: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[2] = x2;
      goto L687;
    }
  goto ret0;

 L687: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L688;
  goto ret0;

 L688: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[3] = x2;
      goto L689;
    }
  goto ret0;

 L689: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L690;
  goto ret0;

 L690: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, DImode))
    {
      operands[4] = x2;
      goto L691;
    }
  goto ret0;

 L691: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L692;
  goto ret0;

 L692: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, DFmode))
    {
      operands[5] = x2;
      goto L693;
    }
  goto ret0;

 L693: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_VECTOR_FLOAT)
   && (!((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode)) || !0)))
    {
      return 104;
    }
  goto ret0;

 L5649: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  if (((enum machine_mode) (x1)->mode) == SImode
      && ((enum rtx_code) (x1)->code) == UNSPEC
      && (((((x1)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x1)->u.fld[1]).rtint) == 10)
    goto L5650;
  if (((enum rtx_code) (x1)->code) == SET)
    goto L696;
  goto ret0;

 L5650: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L5651;
    }
  goto ret0;

 L5651: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L5652;
  goto ret0;

 L5652: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 7)
    goto L5653;
  goto ret0;

 L5653: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == MINUS)
    goto L5654;
  goto ret0;

 L5654: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 7)
    goto L5655;
  goto ret0;

 L5655: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[0]))
    goto L5656;
  goto ret0;

 L5656: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5657;
  goto ret0;

 L5657: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L5658;
    }
  goto ret0;

 L5658: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5659;
  goto ret0;

 L5659: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && (target_flags & 0x00000100)))
    {
      return 486;
    }
  goto ret0;

 L696: __attribute__ ((__unused__))
  return recog_30 (x0, insn, pnum_clobbers);

 L5025: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L5026;
  goto ret0;

 L5026: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode)
    goto L11379;
  goto ret0;

 L11379: __attribute__ ((__unused__))
  if (register_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L5027;
    }
 L11380: __attribute__ ((__unused__))
  if (register_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L5113;
    }
  goto ret0;

 L5027: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L)
    goto L5028;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5028: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L5029;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5029: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L5030;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5030: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L5031;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5031: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode)
    goto L11381;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L11381: __attribute__ ((__unused__))
  if (((enum rtx_code) (x3)->code) == ASHIFT)
    goto L5032;
  if (register_operand (x3, SImode))
    {
      operands[3] = x3;
      goto L5059;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5032: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, SImode))
    {
      operands[5] = x4;
      goto L5033;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5033: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L5034;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5034: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[3] = x3;
      goto L5035;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5035: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L5036;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5036: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L5037;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5037: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L5038;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5038: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == ASHIFT)
    goto L5039;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5039: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (rtx_equal_p (x4, operands[5]))
    goto L5040;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5040: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L5041;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5041: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[4] = x3;
      goto L5042;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5042: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L5043;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5043: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == BLKmode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L5044;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5044: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[3]))
    goto L5045;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5045: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == BLKmode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L5046;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5046: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[4]))
    goto L5047;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5047: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L5048;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5048: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[5]))
    goto L5049;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5049: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L5050;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5050: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 19)
    {
      return 444;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5059: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[5] = x3;
      goto L5060;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5060: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L5061;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5061: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L5062;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5062: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L5063;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5063: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[4] = x3;
      goto L5064;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5064: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[5]))
    goto L5065;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5065: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L5066;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5066: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == BLKmode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L5067;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5067: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[3]))
    goto L5068;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5068: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == BLKmode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L5069;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5069: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[4]))
    goto L5070;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5070: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L5071;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5071: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[5]))
    goto L5072;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5072: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L5073;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5073: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 19)
    {
      return 445;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11380;

 L5113: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L)
    goto L5114;
  goto ret0;

 L5114: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L5115;
  goto ret0;

 L5115: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L5116;
    }
  goto ret0;

 L5116: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L5117;
  goto ret0;

 L5117: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode)
    goto L11383;
  goto ret0;

 L11383: __attribute__ ((__unused__))
  if (((enum rtx_code) (x3)->code) == ASHIFT)
    goto L5118;
  if (register_operand (x3, SImode))
    {
      operands[3] = x3;
      goto L5139;
    }
  goto ret0;

 L5118: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, SImode))
    {
      operands[4] = x4;
      goto L5119;
    }
  goto ret0;

 L5119: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 2L)
    goto L5120;
  goto ret0;

 L5120: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[3] = x3;
      goto L5121;
    }
  goto ret0;

 L5121: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L5122;
  goto ret0;

 L5122: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == BLKmode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L5123;
  goto ret0;

 L5123: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[3]))
    goto L5124;
  goto ret0;

 L5124: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L)
    goto L5125;
  goto ret0;

 L5125: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L5126;
  goto ret0;

 L5126: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L5127;
    }
  goto ret0;

 L5127: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L5128;
  goto ret0;

 L5128: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[4]))
    goto L5129;
  goto ret0;

 L5129: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L5130;
  goto ret0;

 L5130: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 19)
    {
      return 449;
    }
  goto ret0;

 L5139: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[4] = x3;
      goto L5140;
    }
  goto ret0;

 L5140: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L5141;
  goto ret0;

 L5141: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == BLKmode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L5142;
  goto ret0;

 L5142: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[3]))
    goto L5143;
  goto ret0;

 L5143: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L)
    goto L5144;
  goto ret0;

 L5144: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L5145;
  goto ret0;

 L5145: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L5146;
    }
  goto ret0;

 L5146: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L5147;
  goto ret0;

 L5147: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[4]))
    goto L5148;
  goto ret0;

 L5148: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L5149;
  goto ret0;

 L5149: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 19)
    {
      return 450;
    }
  goto ret0;

 L5151: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L5152;
  goto ret0;

 L5152: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L5153;
  goto ret0;

 L5153: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode)
    goto L11385;
  goto ret0;

 L11385: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case COMPARE:
      goto L5154;
    case IF_THEN_ELSE:
      goto L5174;
    default:
     break;
   }
  goto ret0;

 L5154: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == BLKmode
      && ((enum rtx_code) (x3)->code) == MEM)
    goto L5155;
  goto ret0;

 L5155: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, SImode))
    {
      operands[4] = x4;
      goto L5156;
    }
  goto ret0;

 L5156: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == BLKmode
      && ((enum rtx_code) (x3)->code) == MEM)
    goto L5157;
  goto ret0;

 L5157: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, SImode))
    {
      operands[5] = x4;
      goto L5158;
    }
  goto ret0;

 L5158: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L5159;
  goto ret0;

 L5159: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[6] = x2;
      goto L5160;
    }
  goto ret0;

 L5160: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L5161;
  goto ret0;

 L5161: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (immediate_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L5162;
    }
  goto ret0;

 L5162: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L5163;
  goto ret0;

 L5163: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 19)
    goto L5164;
  goto ret0;

 L5164: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5165;
  goto ret0;

 L5165: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L5166;
    }
  goto ret0;

 L5166: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5167;
  goto ret0;

 L5167: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L5168;
    }
  goto ret0;

 L5168: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[6]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5169;
  goto ret0;

 L5169: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[2] = x2;
      return 451;
    }
  goto ret0;

 L5174: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == NE)
    goto L5175;
  goto ret0;

 L5175: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, SImode))
    {
      operands[6] = x4;
      goto L5176;
    }
  goto ret0;

 L5176: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L5177;
  goto ret0;

 L5177: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == CCmode
      && ((enum rtx_code) (x3)->code) == COMPARE)
    goto L5178;
  goto ret0;

 L5178: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == BLKmode
      && ((enum rtx_code) (x4)->code) == MEM)
    goto L5179;
  goto ret0;

 L5179: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (register_operand (x5, SImode))
    {
      operands[4] = x5;
      goto L5180;
    }
  goto ret0;

 L5180: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum machine_mode) (x4)->mode) == BLKmode
      && ((enum rtx_code) (x4)->code) == MEM)
    goto L5181;
  goto ret0;

 L5181: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (register_operand (x5, SImode))
    {
      operands[5] = x5;
      goto L5182;
    }
  goto ret0;

 L5182: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L5183;
  goto ret0;

 L5183: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L5184;
  goto ret0;

 L5184: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (immediate_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L5185;
    }
  goto ret0;

 L5185: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L5186;
  goto ret0;

 L5186: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L5187;
  goto ret0;

 L5187: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L5188;
  goto ret0;

 L5188: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 19)
    goto L5189;
  goto ret0;

 L5189: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5190;
  goto ret0;

 L5190: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L5191;
    }
  goto ret0;

 L5191: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5192;
  goto ret0;

 L5192: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L5193;
    }
  goto ret0;

 L5193: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[6]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L5194;
  goto ret0;

 L5194: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[2] = x2;
      return 452;
    }
  goto ret0;

 L6832: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x1)->code) == UNSPEC_VOLATILE)
    goto L11387;
  goto ret0;

 L11387: __attribute__ ((__unused__))
  if ((((((x1)->u.fld[0]).rtvec))->num_elem) == 1)
    goto L11389;
  goto ret0;

 L11389: __attribute__ ((__unused__))
  switch ((((x1)->u.fld[1]).rtint))
    {
    case 31L:
      goto L6833;
    case 46L:
      goto L6935;
    default:
      break;
    }
  goto ret0;

 L6833: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L)
    goto L6834;
  goto ret0;

 L6834: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6835;
  goto ret0;

 L6835: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 8)
    goto L6836;
  goto ret0;

 L6836: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6837;
  goto ret0;

 L6837: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 9)
    goto L6838;
  goto ret0;

 L6838: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6839;
  goto ret0;

 L6839: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 10)
    goto L6840;
  goto ret0;

 L6840: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6841;
  goto ret0;

 L6841: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 11)
    goto L6842;
  goto ret0;

 L6842: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6843;
  goto ret0;

 L6843: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 12)
    goto L6844;
  goto ret0;

 L6844: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[6]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6845;
  goto ret0;

 L6845: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 13)
    goto L6846;
  goto ret0;

 L6846: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[7]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6847;
  goto ret0;

 L6847: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 14)
    goto L6848;
  goto ret0;

 L6848: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[8]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6849;
  goto ret0;

 L6849: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 15)
    goto L6850;
  goto ret0;

 L6850: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[9]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6851;
  goto ret0;

 L6851: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 29)
    goto L6852;
  goto ret0;

 L6852: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[10]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6853;
  goto ret0;

 L6853: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 30)
    goto L6854;
  goto ret0;

 L6854: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[11]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6855;
  goto ret0;

 L6855: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 31)
    goto L6856;
  goto ret0;

 L6856: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[12]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6857;
  goto ret0;

 L6857: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 32)
    goto L6858;
  goto ret0;

 L6858: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[13]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6859;
  goto ret0;

 L6859: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 33)
    goto L6860;
  goto ret0;

 L6860: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[14]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6861;
  goto ret0;

 L6861: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 34)
    goto L6862;
  goto ret0;

 L6862: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[15]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6863;
  goto ret0;

 L6863: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 35)
    goto L6864;
  goto ret0;

 L6864: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[16]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6865;
  goto ret0;

 L6865: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 36
      && (((target_flags & 0x00002000) != 0)))
    {
      return 648;
    }
  goto ret0;

 L6935: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L)
    goto L6936;
  goto ret0;

 L6936: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6937;
  goto ret0;

 L6937: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 8)
    goto L6938;
  goto ret0;

 L6938: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6939;
  goto ret0;

 L6939: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 9)
    goto L6940;
  goto ret0;

 L6940: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6941;
  goto ret0;

 L6941: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 10)
    goto L6942;
  goto ret0;

 L6942: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6943;
  goto ret0;

 L6943: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 11)
    goto L6944;
  goto ret0;

 L6944: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6945;
  goto ret0;

 L6945: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 12)
    goto L6946;
  goto ret0;

 L6946: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[6]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6947;
  goto ret0;

 L6947: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 13)
    goto L6948;
  goto ret0;

 L6948: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[7]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6949;
  goto ret0;

 L6949: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 14)
    goto L6950;
  goto ret0;

 L6950: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[8]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6951;
  goto ret0;

 L6951: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 15)
    goto L6952;
  goto ret0;

 L6952: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[9]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6953;
  goto ret0;

 L6953: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 29)
    goto L6954;
  goto ret0;

 L6954: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[10]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6955;
  goto ret0;

 L6955: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 30)
    goto L6956;
  goto ret0;

 L6956: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[11]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6957;
  goto ret0;

 L6957: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 31)
    goto L6958;
  goto ret0;

 L6958: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[12]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6959;
  goto ret0;

 L6959: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 32)
    goto L6960;
  goto ret0;

 L6960: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[13]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6961;
  goto ret0;

 L6961: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 33)
    goto L6962;
  goto ret0;

 L6962: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[14]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6963;
  goto ret0;

 L6963: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 34)
    goto L6964;
  goto ret0;

 L6964: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[15]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6965;
  goto ret0;

 L6965: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 35)
    goto L6966;
  goto ret0;

 L6966: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[16]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L6967;
  goto ret0;

 L6967: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 36
      && (((target_flags & 0x00020000) != 0)))
    {
      return 661;
    }
  goto ret0;
 ret0:
  return -1;
}

int
recog (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *pnum_clobbers __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  int tem __attribute__ ((__unused__));
  recog_data.insn = (rtx) 0;

  switch (((enum rtx_code) (x0)->code))
    {
    case SET:
      goto L100;
    case PARALLEL:
      goto L10119;
    case CALL:
      goto L4310;
    case UNSPEC_VOLATILE:
      goto L10123;
    case RETURN:
      goto L10124;
    case CONST_INT:
      goto L10125;
    case TRAP_IF:
      goto L5713;
    case PREFETCH:
      goto L7131;
    default:
     break;
   }
  goto ret0;

 L100: __attribute__ ((__unused__))
  return recog_17 (x0, insn, pnum_clobbers);

 L10119: __attribute__ ((__unused__))
  return recog_31 (x0, insn, pnum_clobbers);

 L4310: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[0]).rtx);
  if (((enum machine_mode) (x1)->mode) == QImode
      && ((enum rtx_code) (x1)->code) == MEM)
    goto L4311;
  goto ret0;

 L4311: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (constant_call_address_operand (x2, VOIDmode))
    {
      operands[0] = x2;
      goto L4312;
    }
 L4315: __attribute__ ((__unused__))
  if (((enum machine_mode) (x2)->mode) == SImode)
    goto L11391;
  goto ret0;

 L4312: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  operands[1] = x1;
  return 360;

 L11391: __attribute__ ((__unused__))
  if (call_insn_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L4316;
    }
 L11392: __attribute__ ((__unused__))
  if (sibcall_insn_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L4321;
    }
  goto ret0;

 L4316: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  operands[1] = x1;
  goto L4317;

 L4317: __attribute__ ((__unused__))
  if ((!(((insn))->jump) && !0))
    {
      return 361;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11392;

 L4321: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  operands[1] = x1;
  goto L4322;

 L4322: __attribute__ ((__unused__))
  if (((((insn))->jump) && !0))
    {
      return 362;
    }
  goto ret0;

 L10123: __attribute__ ((__unused__))
  switch ((((((x0)->u.fld[0]).rtvec))->num_elem))
    {
    case 1:
      goto L11393;
    case 2:
      goto L11400;
    case 3:
      goto L11401;
    default:
      break;
    }
  goto ret0;

 L11393: __attribute__ ((__unused__))
  switch ((((x0)->u.fld[1]).rtint))
    {
    case 0L:
      goto L4324;
    case 68L:
      goto L4342;
    case 13L:
      goto L4355;
    case 31L:
      goto L6867;
    case 37L:
      goto L6869;
    case 46L:
      goto L6969;
    case 57L:
      goto L8221;
    default:
      break;
    }
  goto ret0;

 L4324: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  operands[0] = x1;
  return 363;

 L4342: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  operands[0] = x1;
  return 369;

 L4355: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x1, SImode))
    {
      operands[0] = x1;
      return 371;
    }
  goto ret0;

 L6867: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x1)->code) == CONST_INT
      && ((x1)->u.hwint[0]) == 0L
      && (((target_flags & 0x00002000) != 0))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 16;
      return 648;
    }
  goto ret0;

 L6869: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  if (memory_operand (x1, SImode))
    {
      operands[0] = x1;
      goto L6870;
    }
  goto ret0;

 L6870: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return 649;
    }
  goto ret0;

 L6969: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x1)->code) == CONST_INT
      && ((x1)->u.hwint[0]) == 0L
      && (((target_flags & 0x00020000) != 0))
      && pnum_clobbers != ((void *)0))
    {
      *pnum_clobbers = 16;
      return 661;
    }
  goto ret0;

 L8221: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  if (address_operand (x1, VOIDmode))
    {
      operands[0] = x1;
      goto L8222;
    }
  goto ret0;

 L8222: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return 809;
    }
  goto ret0;

 L11400: __attribute__ ((__unused__))
  if ((((x0)->u.fld[1]).rtint) == 70)
    goto L8232;
  goto ret0;

 L8232: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x1, SImode))
    {
      operands[0] = x1;
      goto L8233;
    }
  goto ret0;

 L8233: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x1, SImode))
    {
      operands[1] = x1;
      goto L8234;
    }
  goto ret0;

 L8234: __attribute__ ((__unused__))
  if ((((target_flags & 0x00010000) != 0)))
    {
      return 812;
    }
  goto ret0;

 L11401: __attribute__ ((__unused__))
  if ((((x0)->u.fld[1]).rtint) == 69)
    goto L8236;
  goto ret0;

 L8236: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x1, SImode))
    {
      operands[0] = x1;
      goto L8237;
    }
  goto ret0;

 L8237: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (register_operand (x1, SImode))
    {
      operands[1] = x1;
      goto L8238;
    }
  goto ret0;

 L8238: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (register_operand (x1, SImode))
    {
      operands[2] = x1;
      goto L8239;
    }
  goto ret0;

 L8239: __attribute__ ((__unused__))
  if ((((target_flags & 0x00010000) != 0)))
    {
      return 813;
    }
  goto ret0;

 L10124: __attribute__ ((__unused__))
  if ((reload_completed))
    {
      return 364;
    }
  goto ret0;

 L10125: __attribute__ ((__unused__))
  if (((x0)->u.hwint[0]) == 0L)
    {
      return 368;
    }
  goto ret0;

 L5713: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[0]).rtx);
  if (((enum rtx_code) (x1)->code) == CONST_INT
      && ((x1)->u.hwint[0]) == 1L)
    goto L5714;
  if (comparison_operator (x1, VOIDmode))
    {
      operands[0] = x1;
      goto L5717;
    }
  goto ret0;

 L5714: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum rtx_code) (x1)->code) == CONST_INT
      && ((x1)->u.hwint[0]) == 5L)
    {
      return 492;
    }
  goto ret0;

 L5717: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L5718;
  goto ret0;

 L5718: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L)
    goto L5719;
  goto ret0;

 L5719: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (const_int_operand (x1, VOIDmode))
    {
      operands[1] = x1;
      return 493;
    }
  goto ret0;

 L7131: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[0]).rtx);
  if (address_operand (x1, SImode))
    {
      operands[0] = x1;
      goto L7132;
    }
  goto ret0;

 L7132: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum rtx_code) (x1)->code) == CONST_INT)
    goto L11402;
  goto ret0;

 L11402: __attribute__ ((__unused__))
  if (((x1)->u.hwint[0]) == 0L)
    goto L7133;
 L11403: __attribute__ ((__unused__))
  if (const_int_operand (x1, SImode))
    {
      operands[1] = x1;
      goto L7138;
    }
  goto ret0;

 L7133: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[2]).rtx);
  if (const_int_operand (x1, SImode))
    {
      operands[1] = x1;
      goto L7134;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L11403;

 L7134: __attribute__ ((__unused__))
  if (((x86_prefetch_sse) && !0))
    {
      return 678;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L11403;

 L7138: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[2]).rtx);
  if (((enum rtx_code) (x1)->code) == CONST_INT
      && ((x1)->u.hwint[0]) == 3L
      && (((target_flags & 0x00020000) != 0) && !0))
    {
      return 679;
    }
  goto ret0;
 ret0:
  return -1;
}

static rtx
split_1 (rtx x0 __attribute__ ((__unused__)), rtx insn __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  rtx tem __attribute__ ((__unused__));

  x1 = (((x0)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x1)->mode))
    {
    case DImode:
      goto L11409;
    case SFmode:
      goto L11411;
    case DFmode:
      goto L11412;
    case SImode:
      goto L11415;
    case HImode:
      goto L11416;
    case QImode:
      goto L11417;
    default:
      break;
    }
 L8331: __attribute__ ((__unused__))
  if (push_operand (x1, VOIDmode))
    {
      operands[0] = x1;
      goto L8332;
    }
 L8335: __attribute__ ((__unused__))
  if (push_operand (x1, XFmode))
    {
      operands[0] = x1;
      goto L8336;
    }
  switch (((enum rtx_code) (x1)->code))
    {
    case REG:
      goto L11421;
    case STRICT_LOW_PART:
      goto L9147;
    case PC:
      goto L9170;
    default:
     break;
   }
 L8338: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, VOIDmode))
    {
      operands[0] = x1;
      goto L8339;
    }
 L10108: __attribute__ ((__unused__))
  if (push_operand (x1, VOIDmode))
    {
      operands[0] = x1;
      goto L10109;
    }
  if (register_operand (x1, VOIDmode))
    {
      operands[0] = x1;
      goto L8650;
    }
 L10100: __attribute__ ((__unused__))
  switch (((enum machine_mode) (x1)->mode))
    {
    case V4SFmode:
      goto L11422;
    case V2DFmode:
      goto L11423;
    case TImode:
      goto L11424;
    case TFmode:
      goto L11425;
    default:
      break;
    }
  goto ret0;

 L11409: __attribute__ ((__unused__))
  if (push_operand (x1, DImode))
    {
      operands[0] = x1;
      goto L8305;
    }
 L11410: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, DImode))
    {
      operands[0] = x1;
      goto L8513;
    }
  goto L8331;

 L8305: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (general_operand (x1, DImode))
    {
      operands[1] = x1;
      goto L8306;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11410;

 L8306: __attribute__ ((__unused__))
  if ((!0 && reload_completed
   && (! ((((enum rtx_code) (operands[1])->code) == REG) && (((((operands[1])->u.fld[0]).rtuint)) >= (((20 + 1) + 7) + 1) && ((((operands[1])->u.fld[0]).rtuint)) <= ((((20 + 1) + 7) + 1) + 7))) && !((((enum rtx_code) (operands[1])->code) == REG) && ((((((operands[1])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[1])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[1])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[1])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7)))))))
    {
      return gen_split_841 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11410;

 L8513: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == DImode
      && ((enum rtx_code) (x1)->code) == FIX)
    goto L8514;
  if (general_operand (x1, DImode))
    {
      operands[1] = x1;
      goto L8310;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L8514: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L8515;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L8515: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_VECTOR_FLOAT)
   && !reload_completed && !reload_in_progress
   && (!((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode)) || !0)&& 1))
    {
      return gen_split_892 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L8310: __attribute__ ((__unused__))
  if ((!0 && reload_completed
   && (!((((enum rtx_code) (operands[0])->code) == REG) && (((((operands[0])->u.fld[0]).rtuint)) >= (((20 + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((20 + 1) + 7) + 1) + 7))) && !((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7)))))
   && (!((((enum rtx_code) (operands[1])->code) == REG) && (((((operands[1])->u.fld[0]).rtuint)) >= (((20 + 1) + 7) + 1) && ((((operands[1])->u.fld[0]).rtuint)) <= ((((20 + 1) + 7) + 1) + 7))) && !((((enum rtx_code) (operands[1])->code) == REG) && ((((((operands[1])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[1])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[1])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[1])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7)))))))
    {
      return gen_split_842 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L11411: __attribute__ ((__unused__))
  if (push_operand (x1, SFmode))
    {
      operands[0] = x1;
      goto L8313;
    }
  if (register_operand (x1, SFmode))
    {
      operands[0] = x1;
      goto L8468;
    }
  goto L8331;

 L8313: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == SFmode)
    goto L11427;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L11427: __attribute__ ((__unused__))
  if (any_fp_register_operand (x1, SFmode))
    {
      operands[1] = x1;
      return gen_split_845 (operands);
    }
  if (memory_operand (x1, SFmode))
    {
      operands[1] = x1;
      goto L8314;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L8314: __attribute__ ((__unused__))
  if ((reload_completed
   && ((enum rtx_code) (operands[1])->code) == MEM
   && ((enum rtx_code) ((((operands[1])->u.fld[0]).rtx))->code) == SYMBOL_REF
   && ((((((operands[1])->u.fld[0]).rtx)))->unchanging)))
    {
      return gen_split_844 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L8468: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == SFmode)
    goto L11428;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L11428: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case FLOAT_TRUNCATE:
      goto L8469;
    case FLOAT:
      goto L8628;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L8469: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L8470;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L8470: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && reload_completed
   && ((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7)))) && (x86_sse_partial_regs_for_cvtsd2ss & (1 << ix86_tune))))
    {
      return gen_split_881 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L8628: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case SImode:
      goto L11430;
    case DImode:
      goto L11431;
    default:
      break;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L11430: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L8629;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L8629: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && reload_completed && (x86_sse_partial_regs & (1 << ix86_tune))
   && ((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7))))))
    {
      return gen_split_913 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L11431: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, DImode))
    {
      operands[1] = x2;
      goto L8634;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L8634: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && reload_completed && (x86_sse_partial_regs & (1 << ix86_tune))
   && ((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7))))))
    {
      return gen_split_915 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L11412: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case MEM:
      goto L11432;
    case REG:
      goto L11433;
    default:
     break;
   }
 L11413: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, DFmode))
    {
      operands[0] = x1;
      goto L8328;
    }
  goto L8331;

 L11432: __attribute__ ((__unused__))
  if (push_operand (x1, DFmode))
    {
      operands[0] = x1;
      goto L8320;
    }
  goto L11413;

 L8320: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == DFmode)
    goto L11434;
 L8324: __attribute__ ((__unused__))
  if (general_operand (x1, DFmode))
    {
      operands[1] = x1;
      goto L8325;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11413;

 L11434: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case REG:
      goto L11436;
    case FLOAT_EXTEND:
      goto L8441;
    default:
     break;
   }
  goto L8324;

 L11436: __attribute__ ((__unused__))
  if (any_fp_register_operand (x1, DFmode))
    {
      operands[1] = x1;
      goto L8321;
    }
  goto L8324;

 L8321: __attribute__ ((__unused__))
  if ((!0 && reload_completed))
    {
      return gen_split_847 (operands);
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L8324;

 L8441: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (fp_register_operand (x2, SFmode))
    {
      operands[1] = x2;
      return gen_split_872 (operands);
    }
  goto L8324;

 L8325: __attribute__ ((__unused__))
  if ((reload_completed))
    {
      return gen_split_848 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11413;

 L11433: __attribute__ ((__unused__))
  if (register_and_not_any_fp_reg_operand (x1, DFmode))
    {
      operands[0] = x1;
      goto L9426;
    }
  goto L11413;

 L9426: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == DFmode
      && ((enum rtx_code) (x1)->code) == IF_THEN_ELSE)
    goto L9427;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11413;

 L9427: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (fcmov_comparison_operator (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L9428;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11413;

 L9428: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (flags_reg_operand (x3, VOIDmode))
    {
      operands[4] = x3;
      goto L9429;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11413;

 L9429: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L9430;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11413;

 L9430: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonimmediate_operand (x2, DFmode))
    {
      operands[2] = x2;
      goto L9431;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11413;

 L9431: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (nonimmediate_operand (x2, DFmode))
    {
      operands[3] = x2;
      goto L9432;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11413;

 L9432: __attribute__ ((__unused__))
  if ((!0 && reload_completed))
    {
      return gen_split_1180 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11413;

 L8328: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (general_operand (x1, DFmode))
    {
      operands[1] = x1;
      goto L8329;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L8329: __attribute__ ((__unused__))
  if ((reload_completed
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)
   && ! (((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= 8 && ((((operands[0])->u.fld[0]).rtuint)) <= (8 + 7)) || ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7))))) ||
  (((enum rtx_code) (operands[0])->code) == SUBREG
   && ((((enum rtx_code) ((((operands[0])->u.fld[0]).rtx))->code) == REG) && (((((((((operands[0])->u.fld[0]).rtx))->u.fld[0]).rtuint)) >= 8 && (((((((operands[0])->u.fld[0]).rtx))->u.fld[0]).rtuint)) <= (8 + 7)) || (((((((((operands[0])->u.fld[0]).rtx))->u.fld[0]).rtuint)) >= (20 + 1) && (((((((operands[0])->u.fld[0]).rtx))->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || ((((((((operands[0])->u.fld[0]).rtx))->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && (((((((operands[0])->u.fld[0]).rtx))->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7)))))))
   && ! (((((enum rtx_code) (operands[1])->code) == REG) && ((((((operands[1])->u.fld[0]).rtuint)) >= 8 && ((((operands[1])->u.fld[0]).rtuint)) <= (8 + 7)) || ((((((operands[1])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[1])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[1])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[1])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7))))) ||
  (((enum rtx_code) (operands[1])->code) == SUBREG
   && ((((enum rtx_code) ((((operands[1])->u.fld[0]).rtx))->code) == REG) && (((((((((operands[1])->u.fld[0]).rtx))->u.fld[0]).rtuint)) >= 8 && (((((((operands[1])->u.fld[0]).rtx))->u.fld[0]).rtuint)) <= (8 + 7)) || (((((((((operands[1])->u.fld[0]).rtx))->u.fld[0]).rtuint)) >= (20 + 1) && (((((((operands[1])->u.fld[0]).rtx))->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || ((((((((operands[1])->u.fld[0]).rtx))->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && (((((((operands[1])->u.fld[0]).rtx))->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7)))))))))
    {
      return gen_split_849 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L11415: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, SImode))
    {
      operands[0] = x1;
      goto L8558;
    }
  goto L8331;

 L8558: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == SImode
      && ((enum rtx_code) (x1)->code) == FIX)
    goto L8559;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L8559: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L8560;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L8560: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && (mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[1])->mode)] == MODE_VECTOR_FLOAT)
   && !reload_completed && !reload_in_progress
   && !((((target_flags & 0x00004000) != 0) && (((enum machine_mode) (operands[1])->mode)) == SFmode) || (((target_flags & 0x00008000) != 0) && (((enum machine_mode) (operands[1])->mode)) == DFmode))&& 1))
    {
      return gen_split_900 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L11416: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, HImode))
    {
      operands[0] = x1;
      goto L8599;
    }
  goto L8331;

 L8599: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == HImode
      && ((enum rtx_code) (x1)->code) == FIX)
    goto L8600;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L8600: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[1] = x2;
      return gen_split_908 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L11417: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, QImode))
    {
      operands[0] = x1;
      goto L9140;
    }
 L11418: __attribute__ ((__unused__))
  if (register_operand (x1, QImode))
    {
      operands[0] = x1;
      goto L9417;
    }
  goto L8331;

 L9140: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == QImode)
    goto L11437;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11418;

 L11437: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case NE:
      goto L9141;
    case EQ:
      goto L9156;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11418;

 L9141: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (ix86_comparison_operator (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L9142;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11418;

 L9142: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 17)
    goto L9143;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11418;

 L9143: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L9144;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11418;

 L9144: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L)
    {
      return gen_split_1085 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11418;

 L9156: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (ix86_comparison_operator (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L9157;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11418;

 L9157: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 17)
    goto L9158;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11418;

 L9158: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L9159;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11418;

 L9159: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L)
    {
      return gen_split_1087 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11418;

 L9417: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == QImode
      && ((enum rtx_code) (x1)->code) == IF_THEN_ELSE)
    goto L9418;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L9418: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (ix86_comparison_operator (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L9419;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L9419: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (flags_reg_operand (x3, VOIDmode))
    {
      operands[4] = x3;
      goto L9420;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L9420: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L9421;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L9421: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, QImode))
    {
      operands[2] = x2;
      goto L9422;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L9422: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (register_operand (x2, QImode))
    {
      operands[3] = x2;
      goto L9423;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L9423: __attribute__ ((__unused__))
  if ((((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0)) && !(x86_partial_reg_stall & (1 << ix86_tune))&& reload_completed))
    {
      return gen_split_1177 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8331;

 L8332: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (general_operand (x1, VOIDmode))
    {
      operands[1] = x1;
      goto L8333;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8335;

 L8333: __attribute__ ((__unused__))
  if ((reload_completed
   && (((enum machine_mode) (operands[0])->mode) == XFmode
       || ((enum machine_mode) (operands[0])->mode) == DFmode)
   && !((((enum rtx_code) (operands[1])->code) == REG) && ((((((operands[1])->u.fld[0]).rtuint)) >= 8 && ((((operands[1])->u.fld[0]).rtuint)) <= (8 + 7)) || ((((((operands[1])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[1])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[1])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[1])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7)))))))
    {
      return gen_split_851 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8335;

 L8336: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == XFmode)
    goto L11439;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8338;

 L11439: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case REG:
      goto L11441;
    case FLOAT_EXTEND:
      goto L8445;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8338;

 L11441: __attribute__ ((__unused__))
  if (any_fp_register_operand (x1, XFmode))
    {
      operands[1] = x1;
      return gen_split_852 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8338;

 L8445: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case SFmode:
      goto L11442;
    case DFmode:
      goto L11443;
    default:
      break;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8338;

 L11442: __attribute__ ((__unused__))
  if (fp_register_operand (x2, SFmode))
    {
      operands[1] = x2;
      return gen_split_873 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8338;

 L11443: __attribute__ ((__unused__))
  if (fp_register_operand (x2, DFmode))
    {
      operands[1] = x2;
      return gen_split_874 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8338;

 L11421: __attribute__ ((__unused__))
  if ((((x1)->u.fld[0]).rtint) == 17)
    goto L8718;
 L11420: __attribute__ ((__unused__))
  if (fp_register_operand (x1, VOIDmode))
    {
      operands[0] = x1;
      goto L8637;
    }
  goto L8338;

 L8718: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum rtx_code) (x1)->code) == COMPARE)
    goto L8719;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11420;

 L8719: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum rtx_code) (x2)->code))
    {
    case ZERO_EXTRACT:
      goto L8720;
    case AND:
      goto L8728;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11420;

 L8720: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, VOIDmode))
    {
      operands[0] = x3;
      goto L8721;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11420;

 L8721: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const_int_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L8722;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11420;

 L8722: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (const_int_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L8723;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11420;

 L8723: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (ix86_match_ccmode (insn, CCNOmode)))
    {
      return gen_split_969 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11420;

 L8728: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[0] = x3;
      goto L8729;
    }
 L8735: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, VOIDmode))
    {
      operands[0] = x3;
      goto L8736;
    }
 L9581: __attribute__ ((__unused__))
  if (aligned_operand (x3, HImode))
    {
      operands[0] = x3;
      goto L9582;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11420;

 L8729: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const_int_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L8730;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L8735;

 L8730: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (reload_completed
    && ((((enum rtx_code) (operands[0])->code) == REG) && (((operands[0])->u.fld[0]).rtuint) < 4)
    && ((ix86_match_ccmode (insn, CCZmode)
      && !(((operands[1])->u.hwint[0]) & ~(255 << 8)))
 || (ix86_match_ccmode (insn, CCNOmode)
     && !(((operands[1])->u.hwint[0]) & ~(127 << 8))))
    && ((enum machine_mode) (operands[0])->mode) != QImode))
    {
      return gen_split_970 (operands);
    }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L8735;

 L8736: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const_int_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L8737;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9581;

 L8737: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (reload_completed
    && (!(((enum rtx_code) (operands[0])->code) == REG) || (0 ? ((((enum rtx_code) (operands[0])->code) == REG) && (((((operands[0])->u.fld[0]).rtuint)) < 8 || (((((operands[0])->u.fld[0]).rtuint)) >= (((((20 + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((20 + 1) + 7) + 1) + 7) + 1) + 7)))) : ((((enum rtx_code) (operands[0])->code) == REG) && (((operands[0])->u.fld[0]).rtuint) < 4)))
    && ((ix86_match_ccmode (insn, CCZmode)
  && !(((operands[1])->u.hwint[0]) & ~255))
 || (ix86_match_ccmode (insn, CCNOmode)
     && !(((operands[1])->u.hwint[0]) & ~127)))
    && ((enum machine_mode) (operands[0])->mode) != QImode))
    {
      return gen_split_971 (operands);
    }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9581;

 L9582: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const_int_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L9583;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11420;

 L9583: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (! (x86_partial_reg_stall & (1 << ix86_tune)) && reload_completed

   && ix86_match_ccmode (insn, ((operands[1])->u.hwint[0]) >= 0 ? CCNOmode : CCZmode)
   && ! (x86_fast_prefix & (1 << ix86_tune))
   && ! optimize_size))
    {
      return gen_split_1207 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11420;

 L8637: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum rtx_code) (x1)->code) == FLOAT)
    goto L8638;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8338;

 L8638: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L8639;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8338;

 L8639: __attribute__ ((__unused__))
  if ((reload_completed && (mode_class[((enum machine_mode) (operands[0])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[0])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[0])->mode)] == MODE_VECTOR_FLOAT)))
    {
      return gen_split_919 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L8338;

 L9147: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L9148;
    }
  goto L10100;

 L9148: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == QImode)
    goto L11444;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L11444: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case NE:
      goto L9149;
    case EQ:
      goto L9164;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9149: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (ix86_comparison_operator (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L9150;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9150: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 17)
    goto L9151;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9151: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L9152;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9152: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L)
    {
      return gen_split_1086 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9164: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (ix86_comparison_operator (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L9165;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9165: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 17)
    goto L9166;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9166: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L9167;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9167: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L)
    {
      return gen_split_1088 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9170: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum rtx_code) (x1)->code) == IF_THEN_ELSE)
    goto L9171;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9171: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum rtx_code) (x2)->code))
    {
    case NE:
      goto L9172;
    case EQ:
      goto L9183;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9172: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (ix86_comparison_operator (x3, VOIDmode))
    {
      operands[0] = x3;
      goto L9173;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9173: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum rtx_code) (x4)->code) == REG
      && (((x4)->u.fld[0]).rtint) == 17)
    goto L9174;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9174: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L9175;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9175: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L9176;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9176: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == LABEL_REF)
    goto L9177;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9177: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  operands[1] = x3;
  goto L9178;

 L9178: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == PC)
    {
      return gen_split_1107 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9183: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (ix86_comparison_operator (x3, VOIDmode))
    {
      operands[0] = x3;
      goto L9184;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9184: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum rtx_code) (x4)->code) == REG
      && (((x4)->u.fld[0]).rtint) == 17)
    goto L9185;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9185: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L9186;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9186: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L9187;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9187: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == LABEL_REF)
    goto L9188;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9188: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  operands[1] = x3;
  goto L9189;

 L9189: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (((enum rtx_code) (x2)->code) == PC)
    {
      return gen_split_1108 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L8339: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (general_operand (x1, VOIDmode))
    {
      operands[1] = x1;
      goto L8340;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10108;

 L8340: __attribute__ ((__unused__))
  if ((reload_completed
   && (((enum rtx_code) (operands[0])->code) != MEM || ((enum rtx_code) (operands[1])->code) != MEM)
   && ((enum machine_mode) (operands[0])->mode) == XFmode
   && ! (((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= 8 && ((((operands[0])->u.fld[0]).rtuint)) <= (8 + 7)) || ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7))))) ||
  (((enum rtx_code) (operands[0])->code) == SUBREG
   && ((((enum rtx_code) ((((operands[0])->u.fld[0]).rtx))->code) == REG) && (((((((((operands[0])->u.fld[0]).rtx))->u.fld[0]).rtuint)) >= 8 && (((((((operands[0])->u.fld[0]).rtx))->u.fld[0]).rtuint)) <= (8 + 7)) || (((((((((operands[0])->u.fld[0]).rtx))->u.fld[0]).rtuint)) >= (20 + 1) && (((((((operands[0])->u.fld[0]).rtx))->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || ((((((((operands[0])->u.fld[0]).rtx))->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && (((((((operands[0])->u.fld[0]).rtx))->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7)))))))
   && ! (((((enum rtx_code) (operands[1])->code) == REG) && ((((((operands[1])->u.fld[0]).rtuint)) >= 8 && ((((operands[1])->u.fld[0]).rtuint)) <= (8 + 7)) || ((((((operands[1])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[1])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[1])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[1])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7))))) ||
  (((enum rtx_code) (operands[1])->code) == SUBREG
   && ((((enum rtx_code) ((((operands[1])->u.fld[0]).rtx))->code) == REG) && (((((((((operands[1])->u.fld[0]).rtx))->u.fld[0]).rtuint)) >= 8 && (((((((operands[1])->u.fld[0]).rtx))->u.fld[0]).rtuint)) <= (8 + 7)) || (((((((((operands[1])->u.fld[0]).rtx))->u.fld[0]).rtuint)) >= (20 + 1) && (((((((operands[1])->u.fld[0]).rtx))->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || ((((((((operands[1])->u.fld[0]).rtx))->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && (((((((operands[1])->u.fld[0]).rtx))->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7)))))))))
    {
      return gen_split_853 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10108;

 L10109: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (register_operand (x1, VOIDmode))
    {
      operands[1] = x1;
      goto L10110;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L10110: __attribute__ ((__unused__))
  if ((!0 && reload_completed
   && (((((enum rtx_code) (operands[1])->code) == REG) && ((((((operands[1])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[1])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[1])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[1])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7)))) || ((((enum rtx_code) (operands[1])->code) == REG) && (((((operands[1])->u.fld[0]).rtuint)) >= (((20 + 1) + 7) + 1) && ((((operands[1])->u.fld[0]).rtuint)) <= ((((20 + 1) + 7) + 1) + 7))))))
    {
      return gen_split_1287 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L8650: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  switch (((enum rtx_code) (x1)->code))
    {
    case PLUS:
      goto L8651;
    case IF_THEN_ELSE:
      goto L9550;
    case NOT:
      goto L9594;
    case SUBREG:
    case MEM:
      goto L8343;
    default:
      goto L9326;
   }
 L8343: __attribute__ ((__unused__))
  if (memory_operand (x1, VOIDmode))
    {
      operands[1] = x1;
      goto L8344;
    }
 L9326: __attribute__ ((__unused__))
  if (binary_fp_operator (x1, VOIDmode))
    {
      operands[3] = x1;
      goto L9327;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L8651: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum rtx_code) (x2)->code))
    {
    case PLUS:
      goto L8668;
    case MULT:
      goto L8660;
    default:
     break;
   }
  goto L9326;

 L8668: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == MULT)
    goto L8669;
  if (index_register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L8653;
    }
  goto L9326;

 L8669: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (index_register_operand (x4, VOIDmode))
    {
      operands[1] = x4;
      goto L8670;
    }
  goto L9326;

 L8670: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (const248_operand (x4, VOIDmode))
    {
      operands[2] = x4;
      goto L8671;
    }
  goto L9326;

 L8671: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[3] = x3;
      goto L8672;
    }
  goto L9326;

 L8672: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (immediate_operand (x2, VOIDmode))
    {
      operands[4] = x2;
      goto L8673;
    }
  goto L9326;

 L8673: __attribute__ ((__unused__))
  if (((((enum machine_mode) (operands[0])->mode) == QImode || ((enum machine_mode) (operands[0])->mode) == HImode
    || (0 && ((enum machine_mode) (operands[0])->mode) == SImode))
   && (!(x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && ((enum machine_mode) (operands[0])->mode) == ((enum machine_mode) (operands[1])->mode)
   && ((enum machine_mode) (operands[0])->mode) == ((enum machine_mode) (operands[3])->mode)&& reload_completed))
    {
      return gen_split_932 (operands);
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L9326;

 L8653: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L8654;
    }
  goto L9326;

 L8654: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (immediate_operand (x2, VOIDmode))
    {
      operands[3] = x2;
      goto L8655;
    }
  goto L9326;

 L8655: __attribute__ ((__unused__))
  if (((((enum machine_mode) (operands[0])->mode) == QImode || ((enum machine_mode) (operands[0])->mode) == HImode
    || (0 && ((enum machine_mode) (operands[0])->mode) == SImode))
   && (!(x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && ((enum machine_mode) (operands[0])->mode) == ((enum machine_mode) (operands[1])->mode)
   && ((enum machine_mode) (operands[0])->mode) == ((enum machine_mode) (operands[2])->mode)
   && (((enum machine_mode) (operands[0])->mode) == ((enum machine_mode) (operands[3])->mode)
       || ((enum machine_mode) (operands[3])->mode) == VOIDmode)&& reload_completed))
    {
      return gen_split_930 (operands);
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L9326;

 L8660: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (index_register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L8661;
    }
  goto L9326;

 L8661: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const248_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L8662;
    }
  goto L9326;

 L8662: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonmemory_operand (x2, VOIDmode))
    {
      operands[3] = x2;
      goto L8663;
    }
  goto L9326;

 L8663: __attribute__ ((__unused__))
  if (((((enum machine_mode) (operands[0])->mode) == QImode || ((enum machine_mode) (operands[0])->mode) == HImode
    || (0 && ((enum machine_mode) (operands[0])->mode) == SImode))
   && (!(x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
   && ((enum machine_mode) (operands[0])->mode) == ((enum machine_mode) (operands[1])->mode)
   && (((enum machine_mode) (operands[0])->mode) == ((enum machine_mode) (operands[3])->mode)
       || ((enum machine_mode) (operands[3])->mode) == VOIDmode)&& reload_completed))
    {
      return gen_split_931 (operands);
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L9326;

 L9550: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (comparison_operator (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L9600;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9600: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 17)
    goto L9601;
 L9551: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, VOIDmode))
    {
      operands[4] = x3;
      goto L9552;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9601: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L9602;
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9551;

 L9602: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[2] = x2;
      goto L9603;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9551;

 L9603: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[3] = x2;
      goto L9604;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9551;

 L9604: __attribute__ ((__unused__))
  if ((! (x86_partial_reg_stall & (1 << ix86_tune)) && ((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0))
   && (((enum machine_mode) (operands[0])->mode) == HImode
       || (((enum machine_mode) (operands[0])->mode) == QImode
    && ((x86_promote_QImode & (1 << ix86_tune)) || optimize_size)))))
    {
      return gen_split_1210 (operands);
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[0]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9551;

 L9552: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, VOIDmode))
    {
      operands[5] = x3;
      goto L9553;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9553: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonmemory_operand (x2, VOIDmode))
    {
      operands[2] = x2;
      goto L9554;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9554: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[2]).rtx);
  if (nonmemory_operand (x2, VOIDmode))
    {
      operands[3] = x2;
      goto L9555;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9555: __attribute__ ((__unused__))
  if ((((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7)))) && reload_completed
   && (const0_operand (operands[2], ((enum machine_mode) (operands[0])->mode))
       || const0_operand (operands[3], ((enum machine_mode) (operands[0])->mode)))))
    {
      return gen_split_1199 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9594: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L9595;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9595: __attribute__ ((__unused__))
  if ((! (x86_partial_reg_stall & (1 << ix86_tune)) && reload_completed
   && (((enum machine_mode) (operands[0])->mode) == HImode
       || (((enum machine_mode) (operands[0])->mode) == QImode
    && ((x86_promote_QImode & (1 << ix86_tune)) || optimize_size)))))
    {
      return gen_split_1209 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L8344: __attribute__ ((__unused__))
  if ((reload_completed
   && ((enum rtx_code) (operands[1])->code) == MEM
   && (((enum machine_mode) (operands[0])->mode) == XFmode
       || ((enum machine_mode) (operands[0])->mode) == SFmode || ((enum machine_mode) (operands[0])->mode) == DFmode)
   && ((enum rtx_code) ((((operands[1])->u.fld[0]).rtx))->code) == SYMBOL_REF
   && ((((((operands[1])->u.fld[0]).rtx)))->unchanging)))
    {
      return gen_split_854 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9327: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum rtx_code) (x2)->code) == FLOAT)
    goto L9328;
  if (register_operand (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L9335;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9328: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L9329;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9329: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[2] = x2;
      goto L9330;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9330: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && reload_completed
   && (mode_class[((enum machine_mode) (operands[0])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[0])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[0])->mode)] == MODE_VECTOR_FLOAT)))
    {
      return gen_split_1141 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9335: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == FLOAT)
    goto L9336;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9336: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L9337;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L9337: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && reload_completed
   && (mode_class[((enum machine_mode) (operands[0])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[0])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[0])->mode)] == MODE_VECTOR_FLOAT)))
    {
      return gen_split_1142 (operands);
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L10100;

 L11422: __attribute__ ((__unused__))
  if (register_operand (x1, V4SFmode))
    {
      operands[0] = x1;
      goto L10101;
    }
  goto ret0;

 L10101: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (zero_extended_scalar_load_operand (x1, V4SFmode))
    {
      operands[1] = x1;
      goto L10102;
    }
  goto ret0;

 L10102: __attribute__ ((__unused__))
  if ((((target_flags & 0x00004000) != 0)))
    {
      return gen_split_1274 (operands);
    }
  goto ret0;

 L11423: __attribute__ ((__unused__))
  if (register_operand (x1, V2DFmode))
    {
      operands[0] = x1;
      goto L10105;
    }
  goto ret0;

 L10105: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (zero_extended_scalar_load_operand (x1, V2DFmode))
    {
      operands[1] = x1;
      goto L10106;
    }
  goto ret0;

 L10106: __attribute__ ((__unused__))
  if ((((target_flags & 0x00008000) != 0)))
    {
      return gen_split_1275 (operands);
    }
  goto ret0;

 L11424: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, TImode))
    {
      operands[0] = x1;
      goto L10113;
    }
  goto ret0;

 L10113: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (general_operand (x1, TImode))
    {
      operands[1] = x1;
      goto L10114;
    }
  goto ret0;

 L10114: __attribute__ ((__unused__))
  if ((reload_completed && !((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7))))
   && !((((enum rtx_code) (operands[1])->code) == REG) && ((((((operands[1])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[1])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[1])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[1])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7))))))
    {
      return gen_split_1288 (operands);
    }
  goto ret0;

 L11425: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, TFmode))
    {
      operands[0] = x1;
      goto L10117;
    }
  goto ret0;

 L10117: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (general_operand (x1, TFmode))
    {
      operands[1] = x1;
      goto L10118;
    }
  goto ret0;

 L10118: __attribute__ ((__unused__))
  if ((reload_completed && !((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7))))
   && !((((enum rtx_code) (operands[1])->code) == REG) && ((((((operands[1])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[1])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[1])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[1])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7))))))
    {
      return gen_split_1289 (operands);
    }
  goto ret0;
 ret0:
  return 0;
}

static rtx
split_2 (rtx x0 __attribute__ ((__unused__)), rtx insn __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  rtx tem __attribute__ ((__unused__));

  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case SImode:
      goto L11446;
    case HImode:
      goto L11447;
    case DImode:
      goto L11448;
    case SFmode:
      goto L11450;
    case DFmode:
      goto L11452;
    case XFmode:
      goto L11458;
    default:
      break;
    }
 L9025: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L9026;
 L8676: __attribute__ ((__unused__))
  if (register_operand (x2, VOIDmode))
    {
      operands[0] = x2;
      goto L8677;
    }
 L8748: __attribute__ ((__unused__))
  if (ext_register_operand (x2, VOIDmode))
    {
      operands[0] = x2;
      goto L8749;
    }
 L8764: __attribute__ ((__unused__))
  if (register_operand (x2, VOIDmode))
    {
      operands[0] = x2;
      goto L8765;
    }
 L8860: __attribute__ ((__unused__))
  if (memory_operand (x2, VOIDmode))
    {
      operands[0] = x2;
      goto L8861;
    }
 L9586: __attribute__ ((__unused__))
  if (register_operand (x2, VOIDmode))
    {
      operands[0] = x2;
      goto L9587;
    }
  goto ret0;

 L11446: __attribute__ ((__unused__))
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L8348;
    }
  goto L9025;

 L8348: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == ZERO_EXTEND)
    goto L8349;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8349: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x3)->mode))
    {
    case HImode:
      goto L11460;
    case QImode:
      goto L11461;
    default:
      break;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L11460: __attribute__ ((__unused__))
  if (register_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L8350;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8350: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8351;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8351: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed && (x86_zero_extend_with_and & (1 << ix86_tune)) && !optimize_size))
    {
      return gen_split_856 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L11461: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L8378;
    }
 L11462: __attribute__ ((__unused__))
  if (register_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L8392;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8378: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8379;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11462;

 L8379: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode)
    goto L11463;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11462;

 L11463: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG)
    goto L11465;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11462;

 L11465: __attribute__ ((__unused__))
  if ((((x2)->u.fld[0]).rtint) == 17)
    goto L11467;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11462;

 L11467: __attribute__ ((__unused__))
  if ((reload_completed
   && (!(x86_zero_extend_with_and & (1 << ix86_tune)) || optimize_size)
   && (!(((enum rtx_code) (operands[1])->code) == REG) || (0 ? ((((enum rtx_code) (operands[1])->code) == REG) && (((((operands[1])->u.fld[0]).rtuint)) < 8 || (((((operands[1])->u.fld[0]).rtuint)) >= (((((20 + 1) + 7) + 1) + 7) + 1) && ((((operands[1])->u.fld[0]).rtuint)) <= ((((((20 + 1) + 7) + 1) + 7) + 1) + 7)))) : ((((enum rtx_code) (operands[1])->code) == REG) && (((operands[1])->u.fld[0]).rtuint) < 4)))))
    {
      return gen_split_862 (operands);
    }
 L11468: __attribute__ ((__unused__))
  if ((reload_completed
   && (0 ? ((((enum rtx_code) (operands[0])->code) == REG) && (((((operands[0])->u.fld[0]).rtuint)) < 8 || (((((operands[0])->u.fld[0]).rtuint)) >= (((((20 + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((20 + 1) + 7) + 1) + 7) + 1) + 7)))) : ((((enum rtx_code) (operands[0])->code) == REG) && (((operands[0])->u.fld[0]).rtuint) < 4))
   && ((0 ? ((((enum rtx_code) (operands[1])->code) == REG) && (((((operands[1])->u.fld[0]).rtuint)) < 8 || (((((operands[1])->u.fld[0]).rtuint)) >= (((((20 + 1) + 7) + 1) + 7) + 1) && ((((operands[1])->u.fld[0]).rtuint)) <= ((((((20 + 1) + 7) + 1) + 7) + 1) + 7)))) : ((((enum rtx_code) (operands[1])->code) == REG) && (((operands[1])->u.fld[0]).rtuint) < 4)) || ((enum rtx_code) (operands[1])->code) == MEM)
   && ((x86_zero_extend_with_and & (1 << ix86_tune)) && !optimize_size)
   && !reg_overlap_mentioned_p (operands[0], operands[1])))
    {
      return gen_split_863 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11462;

 L8392: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8393;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8393: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed
   && true_regnum (operands[0]) == true_regnum (operands[1])))
    {
      return gen_split_864 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L11447: __attribute__ ((__unused__))
  if (register_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L8355;
    }
  goto L9025;

 L8355: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == ZERO_EXTEND)
    goto L8356;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8356: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == QImode)
    goto L11469;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L11469: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L8357;
    }
 L11470: __attribute__ ((__unused__))
  if (register_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L8371;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8357: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8358;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11470;

 L8358: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode)
    goto L11471;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11470;

 L11471: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG)
    goto L11473;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11470;

 L11473: __attribute__ ((__unused__))
  if ((((x2)->u.fld[0]).rtint) == 17)
    goto L11475;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11470;

 L11475: __attribute__ ((__unused__))
  if ((reload_completed
   && (!(x86_zero_extend_with_and & (1 << ix86_tune)) || optimize_size)
   && (!(((enum rtx_code) (operands[1])->code) == REG) || (0 ? ((((enum rtx_code) (operands[1])->code) == REG) && (((((operands[1])->u.fld[0]).rtuint)) < 8 || (((((operands[1])->u.fld[0]).rtuint)) >= (((((20 + 1) + 7) + 1) + 7) + 1) && ((((operands[1])->u.fld[0]).rtuint)) <= ((((((20 + 1) + 7) + 1) + 7) + 1) + 7)))) : ((((enum rtx_code) (operands[1])->code) == REG) && (((operands[1])->u.fld[0]).rtuint) < 4)))))
    {
      return gen_split_858 (operands);
    }
 L11476: __attribute__ ((__unused__))
  if ((reload_completed
   && (0 ? ((((enum rtx_code) (operands[0])->code) == REG) && (((((operands[0])->u.fld[0]).rtuint)) < 8 || (((((operands[0])->u.fld[0]).rtuint)) >= (((((20 + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((20 + 1) + 7) + 1) + 7) + 1) + 7)))) : ((((enum rtx_code) (operands[0])->code) == REG) && (((operands[0])->u.fld[0]).rtuint) < 4))
   && ((x86_zero_extend_with_and & (1 << ix86_tune)) && !optimize_size)
   && !reg_overlap_mentioned_p (operands[0], operands[1])))
    {
      return gen_split_859 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11470;

 L8371: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8372;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8372: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed
   && true_regnum (operands[0]) == true_regnum (operands[1])))
    {
      return gen_split_860 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L11448: __attribute__ ((__unused__))
  if (register_operand (x2, DImode))
    {
      operands[0] = x2;
      goto L8397;
    }
 L11449: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, DImode))
    {
      operands[0] = x2;
      goto L8404;
    }
  goto L9025;

 L8397: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode)
    goto L11477;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11449;

 L11477: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case ZERO_EXTEND:
      goto L8398;
    case ASHIFT:
      goto L9082;
    case ASHIFTRT:
      goto L9116;
    case LSHIFTRT:
      goto L9134;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11449;

 L8398: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L8399;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11449;

 L8399: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8400;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11449;

 L8400: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && reload_completed
   && true_regnum (operands[0]) == true_regnum (operands[1])))
    {
      return gen_split_866 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11449;

 L9082: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L9083;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11449;

 L9083: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L9084;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11449;

 L9084: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9085;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11449;

 L9085: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && reload_completed))
    {
      return gen_split_1037 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11449;

 L9116: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L9117;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11449;

 L9117: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L9118;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11449;

 L9118: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9119;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11449;

 L9119: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && reload_completed))
    {
      return gen_split_1047 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11449;

 L9134: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L9135;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11449;

 L9135: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L9136;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11449;

 L9136: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9137;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11449;

 L9137: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && reload_completed))
    {
      return gen_split_1054 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11449;

 L8404: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode)
    goto L11481;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L11481: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case ZERO_EXTEND:
      goto L8405;
    case PLUS:
      goto L8644;
    case MINUS:
      goto L8686;
    case NEG:
      goto L8814;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8405: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (general_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L8406;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8406: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8407;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8407: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && reload_completed
   && !((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7)))) && !((((enum rtx_code) (operands[0])->code) == REG) && (((((operands[0])->u.fld[0]).rtuint)) >= (((20 + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((20 + 1) + 7) + 1) + 7)))))
    {
      return gen_split_867 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8644: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L8645;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8645: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, DImode))
    {
      operands[2] = x3;
      goto L8646;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8646: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8647;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8647: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && reload_completed))
    {
      return gen_split_928 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8686: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L8687;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8687: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (general_operand (x3, DImode))
    {
      operands[2] = x3;
      goto L8688;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8688: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8689;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8689: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && reload_completed))
    {
      return gen_split_940 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8814: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (general_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L8815;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8815: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8816;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8816: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && reload_completed))
    {
      return gen_split_992 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L11450: __attribute__ ((__unused__))
  if (memory_operand (x2, SFmode))
    {
      operands[0] = x2;
      goto L8453;
    }
 L11451: __attribute__ ((__unused__))
  if (register_operand (x2, SFmode))
    {
      operands[0] = x2;
      goto L8461;
    }
 L11454: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG)
    goto L11485;
  goto L9025;

 L8453: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SFmode
      && ((enum rtx_code) (x2)->code) == FLOAT_TRUNCATE)
    goto L8454;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11451;

 L8454: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x3)->mode))
    {
    case DFmode:
      goto L11487;
    case XFmode:
      goto L11488;
    default:
      break;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11451;

 L11487: __attribute__ ((__unused__))
  if (register_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L8455;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11451;

 L8455: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8456;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11451;

 L8456: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, SFmode))
    {
      operands[2] = x2;
      goto L8457;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11451;

 L8457: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return gen_split_879 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11451;

 L11488: __attribute__ ((__unused__))
  if (register_operand (x3, XFmode))
    {
      operands[1] = x3;
      goto L8484;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11451;

 L8484: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8485;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11451;

 L8485: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, SFmode))
    {
      operands[2] = x2;
      goto L8486;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11451;

 L8486: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return gen_split_884 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11451;

 L8461: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SFmode)
    goto L11489;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11454;

 L11489: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case FLOAT_TRUNCATE:
      goto L8462;
    case IF_THEN_ELSE:
      goto L9437;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11454;

 L8462: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x3)->mode))
    {
    case DFmode:
      goto L11491;
    case XFmode:
      goto L11493;
    default:
      break;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11454;

 L11491: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L8463;
    }
 L11492: __attribute__ ((__unused__))
  if (fp_register_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L8476;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11454;

 L8463: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8464;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11492;

 L8464: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  operands[2] = x2;
  goto L8465;

 L8465: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && reload_completed
   && ((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7))))
   && !((((enum rtx_code) (operands[1])->code) == REG) && (((operands[1])->u.fld[0]).rtuint) >= 8 && (((operands[1])->u.fld[0]).rtuint) <= (8 + 7))))
    {
      return gen_split_880 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11492;

 L8476: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8477;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11454;

 L8477: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, SFmode))
    {
      operands[2] = x2;
      goto L8478;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11454;

 L8478: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && reload_completed))
    {
      return gen_split_882 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11454;

 L11493: __attribute__ ((__unused__))
  if (register_operand (x3, XFmode))
    {
      operands[1] = x3;
      goto L8492;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11454;

 L8492: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8493;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11454;

 L8493: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, SFmode))
    {
      operands[2] = x2;
      goto L8494;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11454;

 L8494: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && reload_completed))
    {
      return gen_split_885 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11454;

 L9437: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  switch (((enum rtx_code) (x3)->code))
    {
    case LT:
      goto L9438;
    case GT:
      goto L9482;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11454;

 L9438: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, SFmode))
    {
      operands[1] = x4;
      goto L9439;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11454;

 L9439: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, SFmode))
    {
      operands[2] = x4;
      goto L9440;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11454;

 L9440: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, SFmode))
    {
      operands[3] = x3;
      goto L9441;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11454;

 L9441: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[4] = x3;
      goto L9442;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11454;

 L9442: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9443;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11454;

 L9443: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7)))) && reload_completed
   && ((operands_match_p (operands[1], operands[3])
 && operands_match_p (operands[2], operands[4]))
       || (operands_match_p (operands[1], operands[4])
    && operands_match_p (operands[2], operands[3])))))
    {
      return gen_split_1183 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11454;

 L9482: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, SFmode))
    {
      operands[1] = x4;
      goto L9483;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11454;

 L9483: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, SFmode))
    {
      operands[2] = x4;
      goto L9484;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11454;

 L9484: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, SFmode))
    {
      operands[3] = x3;
      goto L9485;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11454;

 L9485: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (nonimmediate_operand (x3, SFmode))
    {
      operands[4] = x3;
      goto L9486;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11454;

 L9486: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9487;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11454;

 L9487: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7)))) && reload_completed
   && ((operands_match_p (operands[1], operands[3])
 && operands_match_p (operands[2], operands[4]))
       || (operands_match_p (operands[1], operands[4])
    && operands_match_p (operands[2], operands[3])))))
    {
      return gen_split_1192 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11454;

 L11485: __attribute__ ((__unused__))
  if (fp_register_operand (x2, SFmode))
    {
      operands[0] = x2;
      goto L8847;
    }
 L11486: __attribute__ ((__unused__))
  if (register_and_not_fp_reg_operand (x2, SFmode))
    {
      operands[0] = x2;
      goto L8854;
    }
  goto L9025;

 L8847: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SFmode)
    goto L11494;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11486;

 L11494: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case NEG:
      goto L8848;
    case ABS:
      goto L8951;
    case IF_THEN_ELSE:
      goto L9448;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11486;

 L8848: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L8849;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11486;

 L8849: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8850;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11486;

 L8850: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((target_flags & 0x00000001) && reload_completed))
    {
      return gen_split_1000 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11486;

 L8951: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L8952;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11486;

 L8952: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8953;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11486;

 L8953: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((target_flags & 0x00000001) && reload_completed))
    {
      return gen_split_1016 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11486;

 L9448: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  switch (((enum rtx_code) (x3)->code))
    {
    case LT:
      goto L9449;
    case GT:
      goto L9493;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11486;

 L9449: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, SFmode))
    {
      operands[1] = x4;
      goto L9450;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11486;

 L9450: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (register_operand (x4, SFmode))
    {
      operands[2] = x4;
      goto L9451;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11486;

 L9451: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, SFmode))
    {
      operands[3] = x3;
      goto L9452;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11486;

 L9452: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (register_operand (x3, SFmode))
    {
      operands[4] = x3;
      goto L9453;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11486;

 L9453: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9454;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11486;

 L9454: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed
   && ((operands_match_p (operands[1], operands[3])
 && operands_match_p (operands[2], operands[4]))
       || (operands_match_p (operands[1], operands[4])
    && operands_match_p (operands[2], operands[3])))))
    {
      return gen_split_1187 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11486;

 L9493: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, SFmode))
    {
      operands[1] = x4;
      goto L9494;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11486;

 L9494: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (register_operand (x4, SFmode))
    {
      operands[2] = x4;
      goto L9495;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11486;

 L9495: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, SFmode))
    {
      operands[3] = x3;
      goto L9496;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11486;

 L9496: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (register_operand (x3, SFmode))
    {
      operands[4] = x3;
      goto L9497;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11486;

 L9497: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9498;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11486;

 L9498: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed
   && ((operands_match_p (operands[1], operands[3])
 && operands_match_p (operands[2], operands[4]))
       || (operands_match_p (operands[1], operands[4])
    && operands_match_p (operands[2], operands[3])))))
    {
      return gen_split_1193 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11486;

 L8854: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SFmode)
    goto L11497;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L11497: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case NEG:
      goto L8855;
    case ABS:
      goto L8958;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8855: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L8856;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8856: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8857;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8857: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((target_flags & 0x00000001) && reload_completed))
    {
      return gen_split_1001 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8958: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L8959;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8959: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8960;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8960: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((target_flags & 0x00000001) && reload_completed))
    {
      return gen_split_1017 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L11452: __attribute__ ((__unused__))
  if (memory_operand (x2, DFmode))
    {
      operands[0] = x2;
      goto L8498;
    }
 L11453: __attribute__ ((__unused__))
  if (register_operand (x2, DFmode))
    {
      operands[0] = x2;
      goto L8506;
    }
 L11456: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG)
    goto L11499;
  goto L9025;

 L8498: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode
      && ((enum rtx_code) (x2)->code) == FLOAT_TRUNCATE)
    goto L8499;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11453;

 L8499: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, XFmode))
    {
      operands[1] = x3;
      goto L8500;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11453;

 L8500: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8501;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11453;

 L8501: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, DFmode))
    {
      operands[2] = x2;
      goto L8502;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11453;

 L8502: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001)))
    {
      return gen_split_887 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11453;

 L8506: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode)
    goto L11501;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11456;

 L11501: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case FLOAT_TRUNCATE:
      goto L8507;
    case IF_THEN_ELSE:
      goto L9459;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11456;

 L8507: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, XFmode))
    {
      operands[1] = x3;
      goto L8508;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11456;

 L8508: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8509;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11456;

 L8509: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, DFmode))
    {
      operands[2] = x2;
      goto L8510;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11456;

 L8510: __attribute__ ((__unused__))
  if (((target_flags & 0x00000001) && reload_completed))
    {
      return gen_split_888 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11456;

 L9459: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  switch (((enum rtx_code) (x3)->code))
    {
    case LT:
      goto L9460;
    case GT:
      goto L9504;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11456;

 L9460: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, DFmode))
    {
      operands[1] = x4;
      goto L9461;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11456;

 L9461: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, DFmode))
    {
      operands[2] = x4;
      goto L9462;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11456;

 L9462: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, DFmode))
    {
      operands[3] = x3;
      goto L9463;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11456;

 L9463: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[4] = x3;
      goto L9464;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11456;

 L9464: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9465;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11456;

 L9465: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7)))) && reload_completed
   && ((operands_match_p (operands[1], operands[3])
 && operands_match_p (operands[2], operands[4]))
       || (operands_match_p (operands[1], operands[4])
    && operands_match_p (operands[2], operands[3])))))
    {
      return gen_split_1189 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11456;

 L9504: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, DFmode))
    {
      operands[1] = x4;
      goto L9505;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11456;

 L9505: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, DFmode))
    {
      operands[2] = x4;
      goto L9506;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11456;

 L9506: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, DFmode))
    {
      operands[3] = x3;
      goto L9507;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11456;

 L9507: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (nonimmediate_operand (x3, DFmode))
    {
      operands[4] = x3;
      goto L9508;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11456;

 L9508: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9509;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11456;

 L9509: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7)))) && reload_completed
   && ((operands_match_p (operands[1], operands[3])
 && operands_match_p (operands[2], operands[4]))
       || (operands_match_p (operands[1], operands[4])
    && operands_match_p (operands[2], operands[3])))))
    {
      return gen_split_1195 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11456;

 L11499: __attribute__ ((__unused__))
  if (fp_register_operand (x2, DFmode))
    {
      operands[0] = x2;
      goto L8895;
    }
 L11500: __attribute__ ((__unused__))
  if (register_and_not_fp_reg_operand (x2, DFmode))
    {
      operands[0] = x2;
      goto L8902;
    }
  goto L9025;

 L8895: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode)
    goto L11503;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11500;

 L11503: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case NEG:
      goto L8896;
    case ABS:
      goto L8999;
    case IF_THEN_ELSE:
      goto L9470;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11500;

 L8896: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L8897;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11500;

 L8897: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8898;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11500;

 L8898: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((target_flags & 0x00000001) && reload_completed))
    {
      return gen_split_1007 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11500;

 L8999: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L9000;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11500;

 L9000: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9001;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11500;

 L9001: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((target_flags & 0x00000001) && reload_completed))
    {
      return gen_split_1023 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11500;

 L9470: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  switch (((enum rtx_code) (x3)->code))
    {
    case LT:
      goto L9471;
    case GT:
      goto L9515;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11500;

 L9471: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, DFmode))
    {
      operands[1] = x4;
      goto L9472;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11500;

 L9472: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (register_operand (x4, DFmode))
    {
      operands[2] = x4;
      goto L9473;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11500;

 L9473: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, DFmode))
    {
      operands[3] = x3;
      goto L9474;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11500;

 L9474: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (register_operand (x3, DFmode))
    {
      operands[4] = x3;
      goto L9475;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11500;

 L9475: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9476;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11500;

 L9476: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed
   && ((operands_match_p (operands[1], operands[3])
 && operands_match_p (operands[2], operands[4]))
       || (operands_match_p (operands[1], operands[4])
    && operands_match_p (operands[2], operands[3])))))
    {
      return gen_split_1190 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11500;

 L9515: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, DFmode))
    {
      operands[1] = x4;
      goto L9516;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11500;

 L9516: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (register_operand (x4, DFmode))
    {
      operands[2] = x4;
      goto L9517;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11500;

 L9517: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, DFmode))
    {
      operands[3] = x3;
      goto L9518;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11500;

 L9518: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (register_operand (x3, DFmode))
    {
      operands[4] = x3;
      goto L9519;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11500;

 L9519: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9520;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11500;

 L9520: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed
   && ((operands_match_p (operands[1], operands[3])
 && operands_match_p (operands[2], operands[4]))
       || (operands_match_p (operands[1], operands[4])
    && operands_match_p (operands[2], operands[3])))))
    {
      return gen_split_1196 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11500;

 L8902: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode)
    goto L11506;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L11506: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case NEG:
      goto L8903;
    case ABS:
      goto L9006;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8903: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L8904;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8904: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8905;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8905: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && (target_flags & 0x00000001) && reload_completed))
    {
      return gen_split_1008 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L9006: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L9007;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L9007: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9008;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L9008: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && (target_flags & 0x00000001) && reload_completed))
    {
      return gen_split_1024 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L11458: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG)
    goto L11508;
  goto L9025;

 L11508: __attribute__ ((__unused__))
  if (fp_register_operand (x2, XFmode))
    {
      operands[0] = x2;
      goto L8909;
    }
 L11509: __attribute__ ((__unused__))
  if (register_and_not_fp_reg_operand (x2, XFmode))
    {
      operands[0] = x2;
      goto L8916;
    }
  goto L9025;

 L8909: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode)
    goto L11510;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11509;

 L11510: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case NEG:
      goto L8910;
    case ABS:
      goto L9013;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11509;

 L8910: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, XFmode))
    {
      operands[1] = x3;
      goto L8911;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11509;

 L8911: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8912;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11509;

 L8912: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((target_flags & 0x00000001) && reload_completed))
    {
      return gen_split_1010 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11509;

 L9013: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, XFmode))
    {
      operands[1] = x3;
      goto L9014;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11509;

 L9014: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9015;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11509;

 L9015: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((target_flags & 0x00000001) && reload_completed))
    {
      return gen_split_1026 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11509;

 L8916: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == XFmode)
    goto L11512;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L11512: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case NEG:
      goto L8917;
    case ABS:
      goto L9020;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8917: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, XFmode))
    {
      operands[1] = x3;
      goto L8918;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8918: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8919;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L8919: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((target_flags & 0x00000001) && reload_completed))
    {
      return gen_split_1011 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L9020: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, XFmode))
    {
      operands[1] = x3;
      goto L9021;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L9021: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9022;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L9022: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((target_flags & 0x00000001) && reload_completed))
    {
      return gen_split_1027 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9025;

 L9026: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == COMPARE)
    goto L9027;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8676;

 L9027: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x3)->mode))
    {
    case SImode:
      goto L11514;
    case HImode:
      goto L11515;
    case QImode:
      goto L11516;
    default:
      break;
    }
 L9568: __attribute__ ((__unused__))
  if (((enum rtx_code) (x3)->code) == AND)
    goto L9569;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8676;

 L11514: __attribute__ ((__unused__))
  if (((enum rtx_code) (x3)->code) == NOT)
    goto L9028;
  goto L9568;

 L9028: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == SImode)
    goto L11517;
  goto L9568;

 L11517: __attribute__ ((__unused__))
  if (nonimmediate_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L9029;
    }
 L11518: __attribute__ ((__unused__))
  if (register_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L9040;
    }
  goto L9568;

 L9029: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L9030;
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11518;

 L9030: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L9031;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11518;

 L9031: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L9032;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11518;

 L9032: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == NOT)
    goto L9033;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11518;

 L9033: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1])
      && (ix86_match_ccmode (insn, CCNOmode)))
    {
      return gen_split_1029 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  x4 = (((x3)->u.fld[0]).rtx);
  goto L11518;

 L9040: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L9041;
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9568;

 L9041: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L9042;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9568;

 L9042: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, DImode))
    {
      operands[0] = x2;
      goto L9043;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9568;

 L9043: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == ZERO_EXTEND)
    goto L9044;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9568;

 L9044: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == NOT)
    goto L9045;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9568;

 L9045: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (rtx_equal_p (x4, operands[1])
      && (ix86_match_ccmode (insn, CCNOmode)))
    {
      return gen_split_1030 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9568;

 L11515: __attribute__ ((__unused__))
  if (((enum rtx_code) (x3)->code) == NOT)
    goto L9051;
  goto L9568;

 L9051: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, HImode))
    {
      operands[1] = x4;
      goto L9052;
    }
  goto L9568;

 L9052: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L9053;
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9568;

 L9053: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L9054;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9568;

 L9054: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L9055;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9568;

 L9055: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == NOT)
    goto L9056;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9568;

 L9056: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1])
      && (ix86_match_ccmode (insn, CCNOmode)))
    {
      return gen_split_1032 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9568;

 L11516: __attribute__ ((__unused__))
  if (((enum rtx_code) (x3)->code) == NOT)
    goto L9062;
  goto L9568;

 L9062: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, QImode))
    {
      operands[1] = x4;
      goto L9063;
    }
  goto L9568;

 L9063: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L9064;
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9568;

 L9064: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L9065;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9568;

 L9065: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L9066;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9568;

 L9066: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == NOT)
    goto L9067;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9568;

 L9067: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1])
      && (ix86_match_ccmode (insn, CCNOmode)))
    {
      return gen_split_1034 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9568;

 L9569: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (aligned_operand (x4, VOIDmode))
    {
      operands[1] = x4;
      goto L9570;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8676;

 L9570: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (const_int_operand (x4, VOIDmode))
    {
      operands[2] = x4;
      goto L9571;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8676;

 L9571: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L9572;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8676;

 L9572: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L9573;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8676;

 L9573: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[0] = x2;
      goto L9574;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8676;

 L9574: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == AND)
    goto L9575;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8676;

 L9575: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L9576;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8676;

 L9576: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2])
      && (! (x86_partial_reg_stall & (1 << ix86_tune)) && reload_completed

   && ix86_match_ccmode (insn, ((operands[2])->u.hwint[0]) >= 0 ? CCNOmode : CCZmode)
   && ! optimize_size
   && ((((enum machine_mode) (operands[0])->mode) == HImode && ! (x86_fast_prefix & (1 << ix86_tune)))
       || (((enum machine_mode) (operands[0])->mode) == QImode && (x86_promote_QImode & (1 << ix86_tune))))))
    {
      return gen_split_1206 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8676;

 L8677: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  switch (((enum rtx_code) (x2)->code))
    {
    case PLUS:
      goto L8678;
    case AND:
      goto L8742;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8748;

 L8678: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L8679;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8748;

 L8679: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonmemory_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L8680;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8748;

 L8680: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8681;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8748;

 L8681: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed
   && true_regnum (operands[0]) != true_regnum (operands[1])))
    {
      return gen_split_933 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8748;

 L8742: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[0]))
    goto L8743;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8748;

 L8743: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == -65536L)
    goto L8744;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8748;

 L8744: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8745;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8748;

 L8745: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (optimize_size || ((x86_fast_prefix & (1 << ix86_tune)) && !(x86_partial_reg_stall & (1 << ix86_tune)))))
    {
      return gen_split_973 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8748;

 L8749: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == AND)
    goto L8750;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8764;

 L8750: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[0]))
    goto L8751;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8764;

 L8751: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT)
    goto L11519;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8764;

 L11519: __attribute__ ((__unused__))
  if ((int) ((x3)->u.hwint[0]) == ((x3)->u.hwint[0]))
    switch ((int) ((x3)->u.hwint[0]))
      {
      case -256L:
        goto L8752;
      case -65281L:
        goto L8760;
      default:
        break;
      }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8764;

 L8752: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8753;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8764;

 L8753: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((optimize_size || !(x86_partial_reg_stall & (1 << ix86_tune))) && reload_completed))
    {
      return gen_split_974 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8764;

 L8760: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8761;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8764;

 L8761: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((optimize_size || !(x86_partial_reg_stall & (1 << ix86_tune))) && reload_completed))
    {
      return gen_split_975 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8764;

 L8765: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  switch (((enum rtx_code) (x2)->code))
    {
    case AND:
      goto L8766;
    case IOR:
      goto L8782;
    case XOR:
      goto L8798;
    case ASHIFT:
      goto L9090;
    default:
     break;
   }
 L9559: __attribute__ ((__unused__))
  if (promotable_binary_operator (x2, VOIDmode))
    {
      operands[3] = x2;
      goto L9560;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8860;

 L8766: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L8767;
    }
 L8774: __attribute__ ((__unused__))
  if (general_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L8775;
    }
  goto L9559;

 L8767: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const_int_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L8768;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L8774;

 L8768: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8769;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L8774;

 L8769: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed
    && ((((enum rtx_code) (operands[0])->code) == REG) && (((operands[0])->u.fld[0]).rtuint) < 4)
    && (!(x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
    && !(~((operands[2])->u.hwint[0]) & ~(255 << 8))
    && ((enum machine_mode) (operands[0])->mode) != QImode))
    {
      return gen_split_978 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L8774;

 L8775: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const_int_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L8776;
    }
  goto L9559;

 L8776: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8777;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L9559;

 L8777: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed
    && (0 ? ((((enum rtx_code) (operands[0])->code) == REG) && (((((operands[0])->u.fld[0]).rtuint)) < 8 || (((((operands[0])->u.fld[0]).rtuint)) >= (((((20 + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((20 + 1) + 7) + 1) + 7) + 1) + 7)))) : ((((enum rtx_code) (operands[0])->code) == REG) && (((operands[0])->u.fld[0]).rtuint) < 4))
    && (!(x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
    && !(~((operands[2])->u.hwint[0]) & ~255)
    && !(((operands[2])->u.hwint[0]) & 128)
    && ((enum machine_mode) (operands[0])->mode) != QImode))
    {
      return gen_split_979 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L9559;

 L8782: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L8783;
    }
 L8790: __attribute__ ((__unused__))
  if (general_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L8791;
    }
  goto L9559;

 L8783: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const_int_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L8784;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L8790;

 L8784: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8785;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L8790;

 L8785: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed
    && ((((enum rtx_code) (operands[0])->code) == REG) && (((operands[0])->u.fld[0]).rtuint) < 4)
    && (!(x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
    && !(((operands[2])->u.hwint[0]) & ~(255 << 8))
    && ((enum machine_mode) (operands[0])->mode) != QImode))
    {
      return gen_split_983 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L8790;

 L8791: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const_int_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L8792;
    }
  goto L9559;

 L8792: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8793;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L9559;

 L8793: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed
    && (0 ? ((((enum rtx_code) (operands[0])->code) == REG) && (((((operands[0])->u.fld[0]).rtuint)) < 8 || (((((operands[0])->u.fld[0]).rtuint)) >= (((((20 + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((20 + 1) + 7) + 1) + 7) + 1) + 7)))) : ((((enum rtx_code) (operands[0])->code) == REG) && (((operands[0])->u.fld[0]).rtuint) < 4))
    && (!(x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
    && !(((operands[2])->u.hwint[0]) & ~255)
    && (((operands[2])->u.hwint[0]) & 128)
    && ((enum machine_mode) (operands[0])->mode) != QImode))
    {
      return gen_split_984 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L9559;

 L8798: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L8799;
    }
 L8806: __attribute__ ((__unused__))
  if (general_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L8807;
    }
  goto L9559;

 L8799: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const_int_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L8800;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L8806;

 L8800: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8801;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L8806;

 L8801: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed
    && ((((enum rtx_code) (operands[0])->code) == REG) && (((operands[0])->u.fld[0]).rtuint) < 4)
    && (!(x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
    && !(((operands[2])->u.hwint[0]) & ~(255 << 8))
    && ((enum machine_mode) (operands[0])->mode) != QImode))
    {
      return gen_split_989 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L8806;

 L8807: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const_int_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L8808;
    }
  goto L9559;

 L8808: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8809;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L9559;

 L8809: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed
    && (0 ? ((((enum rtx_code) (operands[0])->code) == REG) && (((((operands[0])->u.fld[0]).rtuint)) < 8 || (((((operands[0])->u.fld[0]).rtuint)) >= (((((20 + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((20 + 1) + 7) + 1) + 7) + 1) + 7)))) : ((((enum rtx_code) (operands[0])->code) == REG) && (((operands[0])->u.fld[0]).rtuint) < 4))
    && (!(x86_partial_reg_stall & (1 << ix86_tune)) || optimize_size)
    && !(((operands[2])->u.hwint[0]) & ~255)
    && (((operands[2])->u.hwint[0]) & 128)
    && ((enum machine_mode) (operands[0])->mode) != QImode))
    {
      return gen_split_990 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L9559;

 L9090: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (index_register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L9091;
    }
 L9098: __attribute__ ((__unused__))
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L9099;
    }
  goto L9559;

 L9091: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const_int_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L9092;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9098;

 L9092: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9093;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9098;

 L9093: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed
   && true_regnum (operands[0]) != true_regnum (operands[1])))
    {
      return gen_split_1041 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9098;

 L9099: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const_int_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L9100;
    }
  goto L9559;

 L9100: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9101;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L9559;

 L9101: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed
   && true_regnum (operands[0]) != true_regnum (operands[1])))
    {
      return gen_split_1042 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L9559;

 L9560: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L9561;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8860;

 L9561: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (aligned_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L9562;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8860;

 L9562: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9563;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8860;

 L9563: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (! (x86_partial_reg_stall & (1 << ix86_tune)) && reload_completed
   && ((((enum machine_mode) (operands[0])->mode) == HImode
 && ((!optimize_size && !(x86_fast_prefix & (1 << ix86_tune)))
     || ((enum rtx_code) (operands[2])->code) != CONST_INT
     || (('K') == 'I' ? (((operands[2])->u.hwint[0])) >= 0 && (((operands[2])->u.hwint[0])) <= 31 : ('K') == 'J' ? (((operands[2])->u.hwint[0])) >= 0 && (((operands[2])->u.hwint[0])) <= 63 : ('K') == 'K' ? (((operands[2])->u.hwint[0])) >= -128 && (((operands[2])->u.hwint[0])) <= 127 : ('K') == 'L' ? (((operands[2])->u.hwint[0])) == 0xff || (((operands[2])->u.hwint[0])) == 0xffff : ('K') == 'M' ? (((operands[2])->u.hwint[0])) >= 0 && (((operands[2])->u.hwint[0])) <= 3 : ('K') == 'N' ? (((operands[2])->u.hwint[0])) >= 0 && (((operands[2])->u.hwint[0])) <= 255 : 0)))
       || (((enum machine_mode) (operands[0])->mode) == QImode
    && ((x86_promote_QImode & (1 << ix86_tune)) || optimize_size)))))
    {
      return gen_split_1205 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8860;

 L8861: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  switch (((enum rtx_code) (x2)->code))
    {
    case NEG:
      goto L8862;
    case ABS:
      goto L8965;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9586;

 L8862: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (memory_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L8863;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9586;

 L8863: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8864;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9586;

 L8864: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((target_flags & 0x00000001) && reload_completed && (mode_class[((enum machine_mode) (operands[0])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[0])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[0])->mode)] == MODE_VECTOR_FLOAT)))
    {
      return gen_split_1002 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9586;

 L8965: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (memory_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L8966;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9586;

 L8966: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8967;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9586;

 L8967: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((target_flags & 0x00000001) && reload_completed && (mode_class[((enum machine_mode) (operands[0])->mode)] == MODE_FLOAT || mode_class[((enum machine_mode) (operands[0])->mode)] == MODE_COMPLEX_FLOAT || mode_class[((enum machine_mode) (operands[0])->mode)] == MODE_VECTOR_FLOAT)))
    {
      return gen_split_1018 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9586;

 L9587: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == NEG)
    goto L9588;
  goto ret0;

 L9588: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L9589;
    }
  goto ret0;

 L9589: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9590;
  goto ret0;

 L9590: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (! (x86_partial_reg_stall & (1 << ix86_tune)) && reload_completed
   && (((enum machine_mode) (operands[0])->mode) == HImode
       || (((enum machine_mode) (operands[0])->mode) == QImode
    && ((x86_promote_QImode & (1 << ix86_tune)) || optimize_size)))))
    {
      return gen_split_1208 (operands);
    }
  goto ret0;
 ret0:
  return 0;
}

static rtx
split_3 (rtx x0 __attribute__ ((__unused__)), rtx insn __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  rtx tem __attribute__ ((__unused__));

  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case DImode:
      goto L11521;
    case SImode:
      goto L11523;
    case SFmode:
      goto L11524;
    case DFmode:
      goto L11526;
    default:
      break;
    }
 L9192: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == PC)
    goto L9193;
  if (register_operand (x2, VOIDmode))
    {
      operands[0] = x2;
      goto L9524;
    }
  goto ret0;

 L11521: __attribute__ ((__unused__))
  if (memory_operand (x2, DImode))
    {
      operands[0] = x2;
      goto L8411;
    }
 L11522: __attribute__ ((__unused__))
  if (register_operand (x2, DImode))
    {
      operands[0] = x2;
      goto L8431;
    }
  goto L9192;

 L8411: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == SIGN_EXTEND)
    goto L8412;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11522;

 L8412: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L8413;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11522;

 L8413: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8414;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11522;

 L8414: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L8415;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11522;

 L8415: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8416;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11522;

 L8416: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L8417;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11522;

 L8417: __attribute__ ((__unused__))
  if (((reload_completed
    && dead_or_set_p (insn, operands[1])
    && !reg_mentioned_p (operands[1], operands[0]))))
    {
      return gen_split_869 (operands);
    }
 L8427: __attribute__ ((__unused__))
  if ((reload_completed))
    {
      return gen_split_870 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11522;

 L8431: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode)
    goto L11529;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L11529: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case SIGN_EXTEND:
      goto L8432;
    case ASHIFT:
      goto L9072;
    case ASHIFTRT:
      goto L9106;
    case LSHIFTRT:
      goto L9124;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8432: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L8433;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8433: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8434;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8434: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L8435;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8435: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8436;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8436: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L8437;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8437: __attribute__ ((__unused__))
  if ((reload_completed))
    {
      return gen_split_871 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L9072: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L9073;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L9073: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L9074;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L9074: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9075;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L9075: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L9076;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L9076: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9077;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L9077: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && ((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0)) && reload_completed))
    {
      return gen_split_1036 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L9106: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L9107;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L9107: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L9108;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L9108: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9109;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L9109: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L9110;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L9110: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9111;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L9111: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && ((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0)) && reload_completed))
    {
      return gen_split_1046 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L9124: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L9125;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L9125: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonmemory_operand (x3, QImode))
    {
      operands[2] = x3;
      goto L9126;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L9126: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9127;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L9127: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L9128;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L9128: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9129;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L9129: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && ((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0)) && reload_completed))
    {
      return gen_split_1053 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L11523: __attribute__ ((__unused__))
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L8693;
    }
 L11528: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L9302;
    }
  goto L9192;

 L8693: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode)
    goto L11533;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L11533: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case DIV:
      goto L8694;
    case UDIV:
      goto L8707;
    case FFS:
      goto L9294;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L8694: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L8695;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L8695: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L8696;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L8696: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L8697;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L8697: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L8698;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L8698: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == MOD)
    goto L8699;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L8699: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L8700;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L8700: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2]))
    goto L8701;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L8701: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8702;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L8702: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed))
    {
      return gen_split_963 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L8707: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L8708;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L8708: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L8709;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L8709: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L8710;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L8710: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L8711;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L8711: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == UMOD)
    goto L8712;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L8712: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L8713;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L8713: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[2]))
    goto L8714;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L8714: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8715;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L8715: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed))
    {
      return gen_split_964 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L9294: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L9295;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L9295: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9296;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L9296: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L9297;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L9297: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9298;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L9298: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((x86_cmove & (1 << ix86_arch)) || ((target_flags & 0x00004000) != 0))&& reload_completed))
    {
      return gen_split_1133 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11528;

 L9302: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == FFS)
    goto L9303;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L9303: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L9304;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L9304: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9305;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L9305: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L9306;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L9306: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9307;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L9307: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed))
    {
      return gen_split_1134 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L11524: __attribute__ ((__unused__))
  if (memory_operand (x2, SFmode))
    {
      operands[0] = x2;
      goto L8820;
    }
 L11525: __attribute__ ((__unused__))
  if (register_operand (x2, SFmode))
    {
      operands[0] = x2;
      goto L8829;
    }
  goto L9192;

 L8820: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SFmode)
    goto L11536;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11525;

 L11536: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case NEG:
      goto L8821;
    case ABS:
      goto L8924;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11525;

 L8821: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (memory_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L8822;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11525;

 L8822: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L8823;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11525;

 L8823: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  operands[2] = x2;
  goto L8824;

 L8824: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8825;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11525;

 L8825: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return gen_split_997 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11525;

 L8924: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (memory_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L8925;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11525;

 L8925: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L8926;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11525;

 L8926: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  operands[2] = x2;
  goto L8927;

 L8927: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8928;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11525;

 L8928: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return gen_split_1013 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11525;

 L8829: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SFmode)
    goto L11538;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L11538: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case NEG:
      goto L8830;
    case ABS:
      goto L8933;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8830: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L8831;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8831: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L8832;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8832: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  operands[2] = x2;
  goto L8833;
 L8841: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[2] = x2;
      goto L8842;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8833: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8834;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8841;

 L8834: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed && !((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7))))))
    {
      return gen_split_998 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8841;

 L8842: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8843;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8843: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed && ((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7))))))
    {
      return gen_split_999 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8933: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, SFmode))
    {
      operands[1] = x3;
      goto L8934;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8934: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L8935;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8935: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  operands[2] = x2;
  goto L8936;
 L8944: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, V4SFmode))
    {
      operands[2] = x2;
      goto L8945;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8936: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8937;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8944;

 L8937: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed && !((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7))))))
    {
      return gen_split_1014 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8944;

 L8945: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8946;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8946: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed && ((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7))))))
    {
      return gen_split_1015 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L11526: __attribute__ ((__unused__))
  if (memory_operand (x2, DFmode))
    {
      operands[0] = x2;
      goto L8868;
    }
 L11527: __attribute__ ((__unused__))
  if (register_operand (x2, DFmode))
    {
      operands[0] = x2;
      goto L8877;
    }
  goto L9192;

 L8868: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode)
    goto L11540;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11527;

 L11540: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case NEG:
      goto L8869;
    case ABS:
      goto L8972;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11527;

 L8869: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (memory_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L8870;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11527;

 L8870: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L8871;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11527;

 L8871: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  operands[2] = x2;
  goto L8872;

 L8872: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8873;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11527;

 L8873: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return gen_split_1004 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11527;

 L8972: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (memory_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L8973;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11527;

 L8973: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L8974;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11527;

 L8974: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  operands[2] = x2;
  goto L8975;

 L8975: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8976;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11527;

 L8976: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return gen_split_1020 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11527;

 L8877: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DFmode)
    goto L11542;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L11542: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case NEG:
      goto L8878;
    case ABS:
      goto L8981;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8878: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L8879;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8879: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L8880;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8880: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  operands[2] = x2;
  goto L8881;
 L8889: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, V2DFmode))
    {
      operands[2] = x2;
      goto L8890;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8881: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8882;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8889;

 L8882: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed && !((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7))))
   && (!0 || ((((enum rtx_code) (operands[0])->code) == REG) && (((((operands[0])->u.fld[0]).rtuint)) >= 8 && ((((operands[0])->u.fld[0]).rtuint)) <= (8 + 7))))))
    {
      return gen_split_1005 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8889;

 L8890: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8891;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8891: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed && ((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7))))))
    {
      return gen_split_1006 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8981: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DFmode))
    {
      operands[1] = x3;
      goto L8982;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8982: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L8983;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8983: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  operands[2] = x2;
  goto L8984;
 L8992: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, V2DFmode))
    {
      operands[2] = x2;
      goto L8993;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8984: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8985;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8992;

 L8985: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed && !((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7))))))
    {
      return gen_split_1021 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L8992;

 L8993: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8994;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L8994: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed && ((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7))))))
    {
      return gen_split_1022 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9192;

 L9193: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == IF_THEN_ELSE)
    goto L9194;
  goto ret0;

 L9194: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (comparison_operator (x3, VOIDmode))
    {
      operands[0] = x3;
      goto L9195;
    }
  goto ret0;

 L9195: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, VOIDmode))
    {
      operands[1] = x4;
      goto L9196;
    }
  goto ret0;

 L9196: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, VOIDmode))
    {
      operands[2] = x4;
      goto L9197;
    }
  goto ret0;

 L9197: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  operands[3] = x3;
  goto L9198;

 L9198: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  operands[4] = x3;
  goto L9199;

 L9199: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9200;
  goto ret0;

 L9200: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCFPmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 18)
    goto L9201;
  goto ret0;

 L9201: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9202;
  goto ret0;

 L9202: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCFPmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (reload_completed))
    {
      return gen_split_1109 (operands);
    }
  goto ret0;

 L9524: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == IF_THEN_ELSE)
    goto L9525;
  goto ret0;

 L9525: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (comparison_operator (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L9526;
    }
 L9538: __attribute__ ((__unused__))
  if (sse_comparison_operator (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L9539;
    }
  goto ret0;

 L9526: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (nonimmediate_operand (x4, VOIDmode))
    {
      operands[4] = x4;
      goto L9527;
    }
  goto L9538;

 L9527: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (register_operand (x4, VOIDmode))
    {
      operands[5] = x4;
      goto L9528;
    }
  goto L9538;

 L9528: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonimmediate_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L9529;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9538;

 L9529: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (nonimmediate_operand (x3, VOIDmode))
    {
      operands[3] = x3;
      goto L9530;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9538;

 L9530: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9531;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9538;

 L9531: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  operands[6] = x2;
  goto L9532;

 L9532: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9533;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9538;

 L9533: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7)))) && reload_completed
   && ((((enum machine_mode) (operands[0])->mode)) == TImode || (((enum machine_mode) (operands[0])->mode)) == V4SFmode || (((enum machine_mode) (operands[0])->mode)) == V4SImode || (((enum machine_mode) (operands[0])->mode)) == SFmode || (((enum machine_mode) (operands[0])->mode)) == TFmode || ((((enum machine_mode) (operands[0])->mode)) == V16QImode || (((enum machine_mode) (operands[0])->mode)) == V8HImode || (((enum machine_mode) (operands[0])->mode)) == V2DFmode || (((enum machine_mode) (operands[0])->mode)) == V2DImode) || (((target_flags & 0x00008000) != 0) && ((((enum machine_mode) (operands[0])->mode)) == DFmode || ((((enum machine_mode) (operands[0])->mode)) == DImode || (((enum machine_mode) (operands[0])->mode)) == V8QImode || (((enum machine_mode) (operands[0])->mode)) == V4HImode || (((enum machine_mode) (operands[0])->mode)) == V2SImode || (((enum machine_mode) (operands[0])->mode)) == SImode))))))
    {
      return gen_split_1197 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9538;

 L9539: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, VOIDmode))
    {
      operands[4] = x4;
      goto L9540;
    }
  goto ret0;

 L9540: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, VOIDmode))
    {
      operands[5] = x4;
      goto L9541;
    }
  goto ret0;

 L9541: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[2] = x3;
      goto L9542;
    }
  goto ret0;

 L9542: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[3] = x3;
      goto L9543;
    }
  goto ret0;

 L9543: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9544;
  goto ret0;

 L9544: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  operands[6] = x2;
  goto L9545;

 L9545: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9546;
  goto ret0;

 L9546: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (((((enum rtx_code) (operands[0])->code) == REG) && ((((((operands[0])->u.fld[0]).rtuint)) >= (20 + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((20 + 1) + 7)) || (((((operands[0])->u.fld[0]).rtuint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((operands[0])->u.fld[0]).rtuint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7)))) && reload_completed))
    {
      return gen_split_1198 (operands);
    }
  goto ret0;
 ret0:
  return 0;
}

static rtx
split_4 (rtx x0 __attribute__ ((__unused__)), rtx insn __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  rtx tem __attribute__ ((__unused__));

  switch ((((((x0)->u.fld[0]).rtvec))->num_elem))
    {
    case 2:
      goto L8346;
    case 3:
      goto L8409;
    case 5:
      goto L8517;
    case 4:
      goto L8574;
    default:
      break;
    }
  goto ret0;

 L8346: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L8347;
  goto ret0;

 L8347: __attribute__ ((__unused__))
  return split_2 (x0, insn);

 L8409: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L8410;
  goto ret0;

 L8410: __attribute__ ((__unused__))
  return split_3 (x0, insn);

 L8517: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L8518;
  goto ret0;

 L8518: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode)
    goto L11544;
  goto ret0;

 L11544: __attribute__ ((__unused__))
  if (register_operand (x2, DImode))
    {
      operands[0] = x2;
      goto L8519;
    }
 L11545: __attribute__ ((__unused__))
  if (memory_operand (x2, DImode))
    {
      operands[0] = x2;
      goto L8533;
    }
  goto ret0;

 L8519: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == FIX)
    goto L8520;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11545;

 L8520: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L8521;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11545;

 L8521: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L8522;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11545;

 L8522: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[2] = x2;
      goto L8523;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11545;

 L8523: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L8524;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11545;

 L8524: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[3] = x2;
      goto L8525;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11545;

 L8525: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8526;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11545;

 L8526: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, DImode))
    {
      operands[4] = x2;
      goto L8527;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11545;

 L8527: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8528;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11545;

 L8528: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, VOIDmode))
    {
      operands[5] = x2;
      goto L8529;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11545;

 L8529: __attribute__ ((__unused__))
  if ((reload_completed))
    {
      return gen_split_893 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11545;

 L8533: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == FIX)
    goto L8534;
  goto ret0;

 L8534: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L8535;
    }
  goto ret0;

 L8535: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L8536;
  goto ret0;

 L8536: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[2] = x2;
      goto L8537;
    }
  goto ret0;

 L8537: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L8538;
  goto ret0;

 L8538: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[3] = x2;
      goto L8539;
    }
  goto ret0;

 L8539: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8540;
  goto ret0;

 L8540: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, DImode))
    {
      operands[4] = x2;
      goto L8541;
    }
  goto ret0;

 L8541: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8542;
  goto ret0;

 L8542: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, VOIDmode))
    {
      operands[5] = x2;
      goto L8543;
    }
  goto ret0;

 L8543: __attribute__ ((__unused__))
  if ((reload_completed))
    {
      return gen_split_894 (operands);
    }
  goto ret0;

 L8574: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L8575;
  goto ret0;

 L8575: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case SImode:
      goto L11546;
    case HImode:
      goto L11548;
    default:
      break;
    }
 L9205: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == PC)
    goto L9206;
  goto ret0;

 L11546: __attribute__ ((__unused__))
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L8576;
    }
 L11547: __attribute__ ((__unused__))
  if (memory_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L8588;
    }
  goto L9205;

 L8576: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode)
    goto L11550;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11547;

 L11550: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case FIX:
      goto L8577;
    case PLUS:
      goto L9312;
    default:
     break;
   }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11547;

 L8577: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L8578;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11547;

 L8578: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L8579;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11547;

 L8579: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[2] = x2;
      goto L8580;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11547;

 L8580: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L8581;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11547;

 L8581: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[3] = x2;
      goto L8582;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11547;

 L8582: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8583;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11547;

 L8583: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, SImode))
    {
      operands[4] = x2;
      goto L8584;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11547;

 L8584: __attribute__ ((__unused__))
  if ((reload_completed))
    {
      return gen_split_903 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11547;

 L9312: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == UNSPEC
      && (((((x3)->u.fld[0]).rtvec))->num_elem) == 2
      && (((x3)->u.fld[1]).rtint) == 17)
    goto L9313;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11547;

 L9313: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[0]);
  if (register_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L9314;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11547;

 L9314: __attribute__ ((__unused__))
  x4 = (((((x3)->u.fld[0]).rtvec))->elem[1]);
  if (call_insn_operand (x4, SImode))
    {
      operands[2] = x4;
      goto L9315;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11547;

 L9315: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == CONST)
    goto L9316;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11547;

 L9316: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == SImode
      && ((enum rtx_code) (x4)->code) == UNSPEC
      && (((((x4)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x4)->u.fld[1]).rtint) == 6)
    goto L9317;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11547;

 L9317: __attribute__ ((__unused__))
  x5 = (((((x4)->u.fld[0]).rtvec))->elem[0]);
  if (tls_symbolic_operand (x5, SImode))
    {
      operands[3] = x5;
      goto L9318;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11547;

 L9318: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9319;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11547;

 L9319: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[4] = x2;
      goto L9320;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11547;

 L9320: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9321;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11547;

 L9321: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[5] = x2;
      goto L9322;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11547;

 L9322: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9323;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11547;

 L9323: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      return gen_split_1140 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11547;

 L8588: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == FIX)
    goto L8589;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9205;

 L8589: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L8590;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9205;

 L8590: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L8591;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9205;

 L8591: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[2] = x2;
      goto L8592;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9205;

 L8592: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L8593;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9205;

 L8593: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[3] = x2;
      goto L8594;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9205;

 L8594: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8595;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9205;

 L8595: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, SImode))
    {
      operands[4] = x2;
      goto L8596;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9205;

 L8596: __attribute__ ((__unused__))
  if ((reload_completed))
    {
      return gen_split_904 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9205;

 L11548: __attribute__ ((__unused__))
  if (memory_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L8604;
    }
 L11549: __attribute__ ((__unused__))
  if (register_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L8616;
    }
  goto L9205;

 L8604: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == FIX)
    goto L8605;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11549;

 L8605: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L8606;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11549;

 L8606: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L8607;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11549;

 L8607: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[2] = x2;
      goto L8608;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11549;

 L8608: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L8609;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11549;

 L8609: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[3] = x2;
      goto L8610;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11549;

 L8610: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8611;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11549;

 L8611: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[4] = x2;
      goto L8612;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11549;

 L8612: __attribute__ ((__unused__))
  if ((reload_completed))
    {
      return gen_split_909 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11549;

 L8616: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == FIX)
    goto L8617;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9205;

 L8617: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L8618;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9205;

 L8618: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L8619;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9205;

 L8619: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[2] = x2;
      goto L8620;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9205;

 L8620: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L8621;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9205;

 L8621: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[3] = x2;
      goto L8622;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9205;

 L8622: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L8623;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9205;

 L8623: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (memory_operand (x2, HImode))
    {
      operands[4] = x2;
      goto L8624;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9205;

 L8624: __attribute__ ((__unused__))
  if ((reload_completed))
    {
      return gen_split_910 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9205;

 L9206: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == IF_THEN_ELSE)
    goto L9223;
  goto ret0;

 L9223: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == NE)
    goto L9224;
 L9207: __attribute__ ((__unused__))
  if (comparison_operator (x3, VOIDmode))
    {
      operands[0] = x3;
      goto L9208;
    }
  goto ret0;

 L9224: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L9225;
    }
  goto L9207;

 L9225: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 1L)
    goto L9226;
  goto L9207;

 L9226: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  operands[0] = x3;
  goto L9227;

 L9227: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == PC)
    goto L9228;
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9207;

 L9228: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L9229;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9207;

 L9229: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[1]))
    goto L9230;
 L9247: __attribute__ ((__unused__))
  if (nonimmediate_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L9248;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9207;

 L9230: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L9231;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9247;

 L9231: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L9232;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9247;

 L9232: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == -1L)
    goto L9233;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9247;

 L9233: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9234;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9247;

 L9234: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[2] = x2;
      goto L9235;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9247;

 L9235: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9236;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9247;

 L9236: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && (x86_use_loop & (1 << ix86_tune))
   && reload_completed
   && (((operands[1])->u.fld[0]).rtuint) != 2))
    {
      return gen_split_1114 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L9247;

 L9248: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L9249;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9207;

 L9249: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1]))
    goto L9250;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9207;

 L9250: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == -1L)
    goto L9251;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9207;

 L9251: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9252;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9207;

 L9252: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L9253;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9207;

 L9253: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9254;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9207;

 L9254: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (!0 && (x86_use_loop & (1 << ix86_tune))
   && reload_completed
   && (! (((enum rtx_code) (operands[2])->code) == REG)
       || ! rtx_equal_p (operands[1], operands[2]))))
    {
      return gen_split_1115 (operands);
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9207;

 L9208: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, VOIDmode))
    {
      operands[1] = x4;
      goto L9209;
    }
  goto ret0;

 L9209: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (nonimmediate_operand (x4, VOIDmode))
    {
      operands[2] = x4;
      goto L9210;
    }
  goto ret0;

 L9210: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  operands[3] = x3;
  goto L9211;

 L9211: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  operands[4] = x3;
  goto L9212;

 L9212: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9213;
  goto ret0;

 L9213: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCFPmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 18)
    goto L9214;
  goto ret0;

 L9214: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9215;
  goto ret0;

 L9215: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCFPmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L9216;
  goto ret0;

 L9216: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9217;
  goto ret0;

 L9217: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (scratch_operand (x2, HImode))
    {
      operands[5] = x2;
      goto L9218;
    }
  goto ret0;

 L9218: __attribute__ ((__unused__))
  if ((reload_completed))
    {
      return gen_split_1110 (operands);
    }
  goto ret0;
 ret0:
  return 0;
}

rtx
split_insns (rtx x0 __attribute__ ((__unused__)), rtx insn __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  rtx tem __attribute__ ((__unused__));
  recog_data.insn = (rtx) 0;

  switch (((enum rtx_code) (x0)->code))
    {
    case SET:
      goto L8304;
    case PARALLEL:
      goto L11404;
    case UNSPEC_VOLATILE:
      goto L11408;
    default:
     break;
   }
  goto ret0;

 L8304: __attribute__ ((__unused__))
  return split_1 (x0, insn);

 L11404: __attribute__ ((__unused__))
  return split_4 (x0, insn);

 L11408: __attribute__ ((__unused__))
  if ((((((x0)->u.fld[0]).rtvec))->num_elem) == 1
      && (((x0)->u.fld[1]).rtint) == 13)
    goto L9285;
  goto ret0;

 L9285: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  switch (((enum machine_mode) (x1)->mode))
    {
    case SImode:
      goto L11552;
    case DImode:
      goto L11553;
    default:
      break;
    }
  goto ret0;

 L11552: __attribute__ ((__unused__))
  if (register_operand (x1, SImode))
    {
      operands[0] = x1;
      goto L9286;
    }
  goto ret0;

 L9286: __attribute__ ((__unused__))
  if ((reload_completed))
    {
      return gen_split_1130 (operands);
    }
  goto ret0;

 L11553: __attribute__ ((__unused__))
  if (register_operand (x1, DImode))
    {
      operands[0] = x1;
      goto L9289;
    }
  goto ret0;

 L9289: __attribute__ ((__unused__))
  if ((reload_completed))
    {
      return gen_split_1131 (operands);
    }
  goto ret0;
 ret0:
  return 0;
}

static rtx
peephole2_1 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *_pmatch_len __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  rtx tem __attribute__ ((__unused__));

  x1 = (((x0)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x1)->mode))
    {
    case DImode:
      goto L11560;
    case SImode:
      goto L11559;
    case SFmode:
      goto L11561;
    case HImode:
      goto L11562;
    case QImode:
      goto L11563;
    default:
      break;
    }
 L9257: __attribute__ ((__unused__))
  if (((enum rtx_code) (x1)->code) == REG
      && (((x1)->u.fld[0]).rtint) == 17)
    goto L9258;
 L9665: __attribute__ ((__unused__))
  switch (((enum machine_mode) (x1)->mode))
    {
    case SImode:
      goto L11567;
    case HImode:
      goto L11568;
    case QImode:
      goto L11569;
    case DImode:
      goto L11571;
    default:
      break;
    }
 L9750: __attribute__ ((__unused__))
  if (((enum rtx_code) (x1)->code) == STRICT_LOW_PART)
    goto L9751;
  if (register_operand (x1, VOIDmode))
    {
      operands[0] = x1;
      goto L9747;
    }
  goto ret0;

 L11560: __attribute__ ((__unused__))
  if (push_operand (x1, DImode))
    {
      operands[0] = x1;
      goto L9613;
    }
  if (register_operand (x1, DImode))
    {
      operands[0] = x1;
      goto L8547;
    }
  goto L9257;

 L9613: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (memory_operand (x1, DImode))
    {
      operands[1] = x1;
      goto L9614;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9257;

 L9614: __attribute__ ((__unused__))
  tem = peep2_next_insn (0);
  if (tem == (rtx) 0)
    goto L9257;
  x1 = (((tem)->u.fld[5]).rtx);
  if ((! optimize_size && ! (x86_push_memory & (1 << ix86_tune))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1212 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9257;

 L8547: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == DImode
      && ((enum rtx_code) (x1)->code) == FIX)
    goto L8548;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9257;

 L8548: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case SFmode:
      goto L11572;
    case DFmode:
      goto L11573;
    default:
      break;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9257;

 L11572: __attribute__ ((__unused__))
  if (memory_operand (x2, SFmode))
    {
      operands[1] = x2;
      goto L8549;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9257;

 L8549: __attribute__ ((__unused__))
  tem = peep2_next_insn (0);
  if (tem == (rtx) 0)
    goto L9257;
  x1 = (((tem)->u.fld[5]).rtx);
  if (((ix86_tune == PROCESSOR_K8) && !optimize_size))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_895 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9257;

 L11573: __attribute__ ((__unused__))
  if (memory_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L8555;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9257;

 L8555: __attribute__ ((__unused__))
  tem = peep2_next_insn (0);
  if (tem == (rtx) 0)
    goto L9257;
  x1 = (((tem)->u.fld[5]).rtx);
  if (((ix86_tune == PROCESSOR_K8) && !optimize_size))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_896 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9257;

 L11559: __attribute__ ((__unused__))
  if (push_operand (x1, SImode))
    {
      operands[0] = x1;
      goto L9608;
    }
  if (register_operand (x1, SImode))
    {
      operands[0] = x1;
      goto L8564;
    }
 L11564: __attribute__ ((__unused__))
  if (memory_operand (x1, SImode))
    {
      operands[0] = x1;
      goto L9633;
    }
  goto L9257;

 L9608: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (memory_operand (x1, SImode))
    {
      operands[1] = x1;
      goto L9609;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11564;

 L9609: __attribute__ ((__unused__))
  tem = peep2_next_insn (0);
  if (tem == (rtx) 0)
    goto L11564;
  x1 = (((tem)->u.fld[5]).rtx);
  if ((! optimize_size && ! (x86_push_memory & (1 << ix86_tune))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1211 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11564;

 L8564: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == SImode
      && ((enum rtx_code) (x1)->code) == FIX)
    goto L8565;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11564;

 L8565: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case SFmode:
      goto L11574;
    case DFmode:
      goto L11575;
    default:
      break;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11564;

 L11574: __attribute__ ((__unused__))
  if (memory_operand (x2, SFmode))
    {
      operands[1] = x2;
      goto L8566;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11564;

 L8566: __attribute__ ((__unused__))
  tem = peep2_next_insn (0);
  if (tem == (rtx) 0)
    goto L11564;
  x1 = (((tem)->u.fld[5]).rtx);
  if (((ix86_tune == PROCESSOR_K8) && !optimize_size))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_901 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11564;

 L11575: __attribute__ ((__unused__))
  if (memory_operand (x2, DFmode))
    {
      operands[1] = x2;
      goto L8572;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11564;

 L8572: __attribute__ ((__unused__))
  tem = peep2_next_insn (0);
  if (tem == (rtx) 0)
    goto L11564;
  x1 = (((tem)->u.fld[5]).rtx);
  if (((ix86_tune == PROCESSOR_K8) && !optimize_size))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_902 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11564;

 L9633: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum rtx_code) (x1)->code) == CONST_INT
      && ((x1)->u.hwint[0]) == 0L
      && (! optimize_size
   && ! (x86_use_mov0 & (1 << ix86_tune))
   && (x86_split_long_moves & (1 << ix86_tune))
   && get_attr_length (insn) >= ix86_cost->large_insn
   && peep2_regno_dead_p (0, 17)))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1216 (insn, operands);
      if (tem != 0)
        return tem;
    }
 L9645: __attribute__ ((__unused__))
  if (immediate_operand (x1, SImode))
    {
      operands[1] = x1;
      goto L9646;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9257;

 L9646: __attribute__ ((__unused__))
  tem = peep2_next_insn (0);
  if (tem == (rtx) 0)
    goto L9257;
  x1 = (((tem)->u.fld[5]).rtx);
  if ((! optimize_size
   && get_attr_length (insn) >= ix86_cost->large_insn
   && (x86_split_long_moves & (1 << ix86_tune))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1219 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9257;

 L11561: __attribute__ ((__unused__))
  if (push_operand (x1, SFmode))
    {
      operands[0] = x1;
      goto L9618;
    }
  goto L9257;

 L9618: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (memory_operand (x1, SFmode))
    {
      operands[1] = x1;
      goto L9619;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9257;

 L9619: __attribute__ ((__unused__))
  tem = peep2_next_insn (0);
  if (tem == (rtx) 0)
    goto L9257;
  x1 = (((tem)->u.fld[5]).rtx);
  if ((! optimize_size && ! (x86_push_memory & (1 << ix86_tune))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1213 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9257;

 L11562: __attribute__ ((__unused__))
  if (push_operand (x1, HImode))
    {
      operands[0] = x1;
      goto L9623;
    }
 L11565: __attribute__ ((__unused__))
  if (memory_operand (x1, HImode))
    {
      operands[0] = x1;
      goto L9637;
    }
  goto L9257;

 L9623: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (memory_operand (x1, HImode))
    {
      operands[1] = x1;
      goto L9624;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11565;

 L9624: __attribute__ ((__unused__))
  tem = peep2_next_insn (0);
  if (tem == (rtx) 0)
    goto L11565;
  x1 = (((tem)->u.fld[5]).rtx);
  if ((! optimize_size && ! (x86_push_memory & (1 << ix86_tune))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1214 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11565;

 L9637: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum rtx_code) (x1)->code) == CONST_INT
      && ((x1)->u.hwint[0]) == 0L
      && (! optimize_size
   && ! (x86_use_mov0 & (1 << ix86_tune))
   && (x86_split_long_moves & (1 << ix86_tune))
   && get_attr_length (insn) >= ix86_cost->large_insn
   && peep2_regno_dead_p (0, 17)))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1217 (insn, operands);
      if (tem != 0)
        return tem;
    }
 L9650: __attribute__ ((__unused__))
  if (immediate_operand (x1, HImode))
    {
      operands[1] = x1;
      goto L9651;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9257;

 L9651: __attribute__ ((__unused__))
  tem = peep2_next_insn (0);
  if (tem == (rtx) 0)
    goto L9257;
  x1 = (((tem)->u.fld[5]).rtx);
  if ((! optimize_size && get_attr_length (insn) >= ix86_cost->large_insn
  && (x86_split_long_moves & (1 << ix86_tune))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1220 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9257;

 L11563: __attribute__ ((__unused__))
  if (push_operand (x1, QImode))
    {
      operands[0] = x1;
      goto L9628;
    }
 L11566: __attribute__ ((__unused__))
  if (memory_operand (x1, QImode))
    {
      operands[0] = x1;
      goto L9641;
    }
  goto L9257;

 L9628: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (memory_operand (x1, QImode))
    {
      operands[1] = x1;
      goto L9629;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11566;

 L9629: __attribute__ ((__unused__))
  tem = peep2_next_insn (0);
  if (tem == (rtx) 0)
    goto L11566;
  x1 = (((tem)->u.fld[5]).rtx);
  if ((! optimize_size && ! (x86_push_memory & (1 << ix86_tune))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1215 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11566;

 L9641: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum rtx_code) (x1)->code) == CONST_INT
      && ((x1)->u.hwint[0]) == 0L
      && (! optimize_size
   && ! (x86_use_mov0 & (1 << ix86_tune))
   && (x86_split_long_moves & (1 << ix86_tune))
   && get_attr_length (insn) >= ix86_cost->large_insn
   && peep2_regno_dead_p (0, 17)))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1218 (insn, operands);
      if (tem != 0)
        return tem;
    }
 L9655: __attribute__ ((__unused__))
  if (immediate_operand (x1, QImode))
    {
      operands[1] = x1;
      goto L9656;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9257;

 L9656: __attribute__ ((__unused__))
  tem = peep2_next_insn (0);
  if (tem == (rtx) 0)
    goto L9257;
  x1 = (((tem)->u.fld[5]).rtx);
  if ((! optimize_size && get_attr_length (insn) >= ix86_cost->large_insn
  && (x86_split_long_moves & (1 << ix86_tune))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1221 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9257;

 L9258: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  operands[0] = x1;
  goto L9259;
 L9660: __attribute__ ((__unused__))
  if (((enum rtx_code) (x1)->code) == COMPARE)
    goto L9661;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9665;

 L9259: __attribute__ ((__unused__))
  tem = peep2_next_insn (1);
  if (tem == (rtx) 0)
    goto L9660;
  x1 = (((tem)->u.fld[5]).rtx);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L9260;
  x1 = (((x0)->u.fld[1]).rtx);
  goto L9660;

 L9260: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L9261;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L9660;

 L9261: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (ix86_comparison_operator (x2, QImode))
    {
      operands[2] = x2;
      goto L9262;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L9660;

 L9262: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 17)
    goto L9263;
  x1 = (((x0)->u.fld[1]).rtx);
  goto L9660;

 L9263: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L9264;
  x1 = (((x0)->u.fld[1]).rtx);
  goto L9660;

 L9264: __attribute__ ((__unused__))
  tem = peep2_next_insn (2);
  if (tem == (rtx) 0)
    goto L9660;
  x1 = (((tem)->u.fld[5]).rtx);
  switch (((enum rtx_code) (x1)->code))
    {
    case SET:
      goto L9265;
    case PARALLEL:
      goto L11576;
    default:
     break;
   }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L9660;

 L9265: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (q_regs_operand (x2, VOIDmode))
    {
      operands[3] = x2;
      goto L9266;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L9660;

 L9266: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == ZERO_EXTEND)
    goto L9267;
  x1 = (((x0)->u.fld[1]).rtx);
  goto L9660;

 L9267: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[1])
      && ((peep2_reg_dead_p (3, operands[1])
    || operands_match_p (operands[1], operands[3]))
   && ! reg_overlap_mentioned_p (operands[3], operands[0])))
    {
      *_pmatch_len = 2;
      tem = gen_peephole2_1116 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L9660;

 L11576: __attribute__ ((__unused__))
  if ((((((x1)->u.fld[0]).rtvec))->num_elem) == 2)
    goto L9278;
  x1 = (((x0)->u.fld[1]).rtx);
  goto L9660;

 L9278: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x2)->code) == SET)
    goto L9279;
  x1 = (((x0)->u.fld[1]).rtx);
  goto L9660;

 L9279: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (q_regs_operand (x3, VOIDmode))
    {
      operands[3] = x3;
      goto L9280;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L9660;

 L9280: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == ZERO_EXTEND)
    goto L9281;
  x1 = (((x0)->u.fld[1]).rtx);
  goto L9660;

 L9281: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (rtx_equal_p (x4, operands[1]))
    goto L9282;
  x1 = (((x0)->u.fld[1]).rtx);
  goto L9660;

 L9282: __attribute__ ((__unused__))
  x2 = (((((x1)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x2)->code) == CLOBBER)
    goto L9283;
  x1 = (((x0)->u.fld[1]).rtx);
  goto L9660;

 L9283: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == CCmode
      && ((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 17
      && ((peep2_reg_dead_p (3, operands[1])
    || operands_match_p (operands[1], operands[3]))
   && ! reg_overlap_mentioned_p (operands[3], operands[0])))
    {
      *_pmatch_len = 2;
      tem = gen_peephole2_1117 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  goto L9660;

 L9661: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case SImode:
      goto L11578;
    case QImode:
      goto L11579;
    case HImode:
      goto L11581;
    default:
      break;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9665;

 L11578: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == AND)
    goto L9686;
  if (memory_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L9662;
    }
 L11580: __attribute__ ((__unused__))
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L9911;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9665;

 L9686: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode)
    goto L11584;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9665;

 L11584: __attribute__ ((__unused__))
  if (((enum rtx_code) (x3)->code) == ZERO_EXTRACT)
    goto L9703;
  if (register_operand (x3, SImode))
    {
      operands[0] = x3;
      goto L9687;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9665;

 L9703: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (ext_register_operand (x4, VOIDmode))
    {
      operands[0] = x4;
      goto L9704;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9665;

 L9704: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L9705;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9665;

 L9705: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[2]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 8L)
    goto L9706;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9665;

 L9706: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const_int_operand (x3, VOIDmode))
    {
      operands[1] = x3;
      goto L9707;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9665;

 L9707: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (! (x86_partial_reg_stall & (1 << ix86_tune))
   && ix86_match_ccmode (insn, CCNOmode)
   && true_regnum (operands[0]) != 0
   && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1228 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9665;

 L9687: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (immediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L9688;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9665;

 L9688: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (ix86_match_ccmode (insn, CCNOmode)
   && (true_regnum (operands[0]) != 0
       || (((enum rtx_code) (operands[1])->code) == CONST_INT
    && (('K') == 'I' ? (((operands[1])->u.hwint[0])) >= 0 && (((operands[1])->u.hwint[0])) <= 31 : ('K') == 'J' ? (((operands[1])->u.hwint[0])) >= 0 && (((operands[1])->u.hwint[0])) <= 63 : ('K') == 'K' ? (((operands[1])->u.hwint[0])) >= -128 && (((operands[1])->u.hwint[0])) <= 127 : ('K') == 'L' ? (((operands[1])->u.hwint[0])) == 0xff || (((operands[1])->u.hwint[0])) == 0xffff : ('K') == 'M' ? (((operands[1])->u.hwint[0])) >= 0 && (((operands[1])->u.hwint[0])) <= 3 : ('K') == 'N' ? (((operands[1])->u.hwint[0])) >= 0 && (((operands[1])->u.hwint[0])) <= 255 : 0)))
   && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1226 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9665;

 L9662: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (ix86_match_ccmode (insn, CCNOmode) && ! optimize_size))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1222 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11580;

 L9911: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT)
    goto L11585;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9665;

 L11585: __attribute__ ((__unused__))
  if (incdec_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L9912;
    }
 L11586: __attribute__ ((__unused__))
  if (((x2)->u.hwint[0]) == 128L
      && (ix86_match_ccmode (insn, CCGCmode)
   && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1255 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9665;

 L9912: __attribute__ ((__unused__))
  tem = peep2_next_insn (0);
  if (tem == (rtx) 0)
    goto L11586;
  x1 = (((tem)->u.fld[5]).rtx);
  if ((ix86_match_ccmode (insn, CCGCmode)
   && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1252 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L11586;

 L11579: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == AND)
    goto L9694;
  if (register_operand (x2, QImode))
    {
      operands[0] = x2;
      goto L9925;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9665;

 L9694: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, QImode))
    {
      operands[0] = x3;
      goto L9695;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9665;

 L9695: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (immediate_operand (x3, QImode))
    {
      operands[1] = x3;
      goto L9696;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9665;

 L9696: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT
      && ((x2)->u.hwint[0]) == 0L
      && (! (x86_partial_reg_stall & (1 << ix86_tune))
   && ix86_match_ccmode (insn, CCNOmode)
   && true_regnum (operands[0]) != 0
   && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1227 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9665;

 L9925: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (incdec_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L9926;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9665;

 L9926: __attribute__ ((__unused__))
  tem = peep2_next_insn (0);
  if (tem == (rtx) 0)
    goto L9665;
  x1 = (((tem)->u.fld[5]).rtx);
  if ((ix86_match_ccmode (insn, CCGCmode)
   && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1254 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9665;

 L11581: __attribute__ ((__unused__))
  if (register_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L9918;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9665;

 L9918: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == CONST_INT)
    goto L11587;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9665;

 L11587: __attribute__ ((__unused__))
  if (incdec_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L9919;
    }
 L11588: __attribute__ ((__unused__))
  if (((x2)->u.hwint[0]) == 128L
      && (ix86_match_ccmode (insn, CCGCmode)
   && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1256 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9665;

 L9919: __attribute__ ((__unused__))
  tem = peep2_next_insn (0);
  if (tem == (rtx) 0)
    goto L11588;
  x1 = (((tem)->u.fld[5]).rtx);
  if ((ix86_match_ccmode (insn, CCGCmode)
   && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1253 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[1]).rtx);
  x2 = (((x1)->u.fld[1]).rtx);
  goto L11588;

 L11567: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, SImode))
    {
      operands[0] = x1;
      goto L9666;
    }
 L11570: __attribute__ ((__unused__))
  if (register_operand (x1, SImode))
    {
      operands[0] = x1;
      goto L9760;
    }
  goto L9750;

 L9666: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == SImode
      && ((enum rtx_code) (x1)->code) == NOT)
    goto L9667;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11570;

 L9667: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L9668;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11570;

 L9668: __attribute__ ((__unused__))
  tem = peep2_next_insn (0);
  if (tem == (rtx) 0)
    goto L11570;
  x1 = (((tem)->u.fld[5]).rtx);
  if ((!optimize_size
   && peep2_regno_dead_p (0, 17)
   && (((ix86_tune == PROCESSOR_PENTIUM)
        && (((enum rtx_code) (operands[0])->code) != MEM
            || !memory_displacement_operand (operands[0], SImode)))
       || ((ix86_tune == PROCESSOR_K6) && long_memory_operand (operands[0], SImode)))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1223 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L11570;

 L9760: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == SImode)
    goto L11589;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L11589: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case PLUS:
      goto L9761;
    case SUBREG:
      goto L11592;
    case MULT:
      goto L9783;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L9761: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[0]))
    goto L9762;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L9762: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (nonmemory_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L9763;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L9763: __attribute__ ((__unused__))
  tem = peep2_next_insn (0);
  if (tem == (rtx) 0)
    goto L9750;
  x1 = (((tem)->u.fld[5]).rtx);
  if ((peep2_regno_dead_p (0, 17)))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1236 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L11592: __attribute__ ((__unused__))
  if ((((x1)->u.fld[1]).rtint) == 0)
    goto L9768;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L9768: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode)
    goto L11593;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L11593: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case PLUS:
      goto L9769;
    case MULT:
      goto L9798;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L9769: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L9770;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L9770: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonmemory_operand (x3, DImode))
    {
      operands[2] = x3;
      goto L9771;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L9771: __attribute__ ((__unused__))
  tem = peep2_next_insn (0);
  if (tem == (rtx) 0)
    goto L9750;
  x1 = (((tem)->u.fld[5]).rtx);
  if ((peep2_regno_dead_p (0, 17) && (((operands[0])->u.fld[0]).rtuint) == (((operands[1])->u.fld[0]).rtuint)))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1237 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L9798: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (register_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L9799;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L9799: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const_int_operand (x3, DImode))
    {
      operands[2] = x3;
      goto L9800;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L9800: __attribute__ ((__unused__))
  tem = peep2_next_insn (0);
  if (tem == (rtx) 0)
    goto L9750;
  x1 = (((tem)->u.fld[5]).rtx);
  if ((exact_log2_wide ((unsigned long) (((operands[2])->u.hwint[0]))) >= 0
   && (((operands[0])->u.fld[0]).rtuint) == (((operands[1])->u.fld[0]).rtuint)
   && peep2_regno_dead_p (0, 17)))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1241 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L9783: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[0]))
    goto L9784;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L9784: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const_int_operand (x2, SImode))
    {
      operands[1] = x2;
      goto L9785;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L9785: __attribute__ ((__unused__))
  tem = peep2_next_insn (0);
  if (tem == (rtx) 0)
    goto L9750;
  x1 = (((tem)->u.fld[5]).rtx);
  if ((exact_log2_wide ((unsigned long) (((operands[1])->u.hwint[0]))) >= 0
   && peep2_regno_dead_p (0, 17)))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1239 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L11568: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, HImode))
    {
      operands[0] = x1;
      goto L9672;
    }
  goto L9750;

 L9672: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == HImode
      && ((enum rtx_code) (x1)->code) == NOT)
    goto L9673;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L9673: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, HImode))
    {
      operands[1] = x2;
      goto L9674;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L9674: __attribute__ ((__unused__))
  tem = peep2_next_insn (0);
  if (tem == (rtx) 0)
    goto L9750;
  x1 = (((tem)->u.fld[5]).rtx);
  if ((!optimize_size
   && peep2_regno_dead_p (0, 17)
   && (((ix86_tune == PROCESSOR_PENTIUM)
        && (((enum rtx_code) (operands[0])->code) != MEM
            || !memory_displacement_operand (operands[0], HImode)))
       || ((ix86_tune == PROCESSOR_K6) && long_memory_operand (operands[0], HImode)))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1224 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L11569: __attribute__ ((__unused__))
  if (nonimmediate_operand (x1, QImode))
    {
      operands[0] = x1;
      goto L9678;
    }
  goto L9750;

 L9678: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == QImode
      && ((enum rtx_code) (x1)->code) == NOT)
    goto L9679;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L9679: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (nonimmediate_operand (x2, QImode))
    {
      operands[1] = x2;
      goto L9680;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L9680: __attribute__ ((__unused__))
  tem = peep2_next_insn (0);
  if (tem == (rtx) 0)
    goto L9750;
  x1 = (((tem)->u.fld[5]).rtx);
  if ((!optimize_size
   && peep2_regno_dead_p (0, 17)
   && (((ix86_tune == PROCESSOR_PENTIUM)
        && (((enum rtx_code) (operands[0])->code) != MEM
            || !memory_displacement_operand (operands[0], QImode)))
       || ((ix86_tune == PROCESSOR_K6) && long_memory_operand (operands[0], QImode)))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1225 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L11571: __attribute__ ((__unused__))
  if (register_operand (x1, DImode))
    {
      operands[0] = x1;
      goto L9775;
    }
  goto L9750;

 L9775: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum machine_mode) (x1)->mode) == DImode)
    goto L11595;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L11595: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x1)->code))
    {
    case PLUS:
      goto L9776;
    case MULT:
      goto L9790;
    default:
     break;
   }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L9776: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[0]))
    goto L9777;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L9777: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (x86_64_general_operand (x2, DImode))
    {
      operands[1] = x2;
      goto L9778;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L9778: __attribute__ ((__unused__))
  tem = peep2_next_insn (0);
  if (tem == (rtx) 0)
    goto L9750;
  x1 = (((tem)->u.fld[5]).rtx);
  if ((peep2_regno_dead_p (0, 17)))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1238 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L9790: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (rtx_equal_p (x2, operands[0]))
    goto L9791;
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L9791: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (const_int_operand (x2, DImode))
    {
      operands[1] = x2;
      goto L9792;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L9792: __attribute__ ((__unused__))
  tem = peep2_next_insn (0);
  if (tem == (rtx) 0)
    goto L9750;
  x1 = (((tem)->u.fld[5]).rtx);
  if ((exact_log2_wide ((unsigned long) (((operands[1])->u.hwint[0]))) >= 0
   && peep2_regno_dead_p (0, 17)))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1240 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((x0)->u.fld[0]).rtx);
  goto L9750;

 L9751: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[0] = x2;
      goto L9752;
    }
  goto ret0;

 L9752: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum rtx_code) (x1)->code) == CONST_INT
      && ((x1)->u.hwint[0]) == 0L
      && ((((enum machine_mode) (operands[0])->mode) == QImode
    || ((enum machine_mode) (operands[0])->mode) == HImode)
   && (! (x86_use_mov0 & (1 << ix86_tune)) || optimize_size)
   && peep2_regno_dead_p (0, 17)))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1234 (insn, operands);
      if (tem != 0)
        return tem;
    }
  goto ret0;

 L9747: __attribute__ ((__unused__))
  x1 = (((x0)->u.fld[1]).rtx);
  if (((enum rtx_code) (x1)->code) == CONST_INT)
    goto L11597;
  goto ret0;

 L11597: __attribute__ ((__unused__))
  if ((int) ((x1)->u.hwint[0]) == ((x1)->u.hwint[0]))
    switch ((int) ((x1)->u.hwint[0]))
      {
      case 0L:
        goto L11599;
      case -1L:
        goto L11600;
      default:
        break;
      }
  goto ret0;

 L11599: __attribute__ ((__unused__))
  if (((((enum machine_mode) (operands[0])->mode) == QImode
    || ((enum machine_mode) (operands[0])->mode) == HImode
    || ((enum machine_mode) (operands[0])->mode) == SImode
    || (((enum machine_mode) (operands[0])->mode) == DImode && 0))
   && (! (x86_use_mov0 & (1 << ix86_tune)) || optimize_size)
   && peep2_regno_dead_p (0, 17)))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1233 (insn, operands);
      if (tem != 0)
        return tem;
    }
  goto ret0;

 L11600: __attribute__ ((__unused__))
  if (((((enum machine_mode) (operands[0])->mode) == HImode
    || ((enum machine_mode) (operands[0])->mode) == SImode
    || (((enum machine_mode) (operands[0])->mode) == DImode && 0))
   && (optimize_size || (ix86_tune == PROCESSOR_PENTIUM))
   && peep2_regno_dead_p (0, 17)))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1235 (insn, operands);
      if (tem != 0)
        return tem;
    }
  goto ret0;
 ret0:
  return 0;
}

static rtx
peephole2_2 (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *_pmatch_len __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  rtx tem __attribute__ ((__unused__));

  switch ((((((x0)->u.fld[0]).rtvec))->num_elem))
    {
    case 7:
      goto L9340;
    case 2:
      goto L9710;
    case 3:
      goto L9803;
    default:
      break;
    }
  goto ret0;

 L9340: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L9341;
  goto ret0;

 L9341: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L9342;
  goto ret0;

 L9342: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode)
    goto L11601;
  goto ret0;

 L11601: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case COMPARE:
      goto L9343;
    case IF_THEN_ELSE:
      goto L9379;
    default:
     break;
   }
  goto ret0;

 L9343: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == BLKmode
      && ((enum rtx_code) (x3)->code) == MEM)
    goto L9344;
  goto ret0;

 L9344: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, VOIDmode))
    {
      operands[4] = x4;
      goto L9345;
    }
  goto ret0;

 L9345: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == BLKmode
      && ((enum rtx_code) (x3)->code) == MEM)
    goto L9346;
  goto ret0;

 L9346: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, VOIDmode))
    {
      operands[5] = x4;
      goto L9347;
    }
  goto ret0;

 L9347: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L9348;
  goto ret0;

 L9348: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[6] = x2;
      goto L9349;
    }
  goto ret0;

 L9349: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L9350;
  goto ret0;

 L9350: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (immediate_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L9351;
    }
  goto ret0;

 L9351: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L9352;
  goto ret0;

 L9352: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 19)
    goto L9353;
  goto ret0;

 L9353: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9354;
  goto ret0;

 L9354: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[0] = x2;
      goto L9355;
    }
  goto ret0;

 L9355: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9356;
  goto ret0;

 L9356: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L9357;
    }
  goto ret0;

 L9357: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[6]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9358;
  goto ret0;

 L9358: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[2] = x2;
      goto L9359;
    }
  goto ret0;

 L9359: __attribute__ ((__unused__))
  tem = peep2_next_insn (1);
  if (tem == (rtx) 0)
    goto ret0;
  x1 = (((tem)->u.fld[5]).rtx);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L9360;
  goto ret0;

 L9360: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, QImode))
    {
      operands[7] = x2;
      goto L9361;
    }
  goto ret0;

 L9361: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == GTU)
    goto L9362;
  goto ret0;

 L9362: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == CCmode
      && ((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 17)
    goto L9363;
  goto ret0;

 L9363: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L9364;
  goto ret0;

 L9364: __attribute__ ((__unused__))
  tem = peep2_next_insn (2);
  if (tem == (rtx) 0)
    goto ret0;
  x1 = (((tem)->u.fld[5]).rtx);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L9365;
  goto ret0;

 L9365: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, QImode))
    {
      operands[8] = x2;
      goto L9366;
    }
  goto ret0;

 L9366: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == LTU)
    goto L9367;
  goto ret0;

 L9367: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == CCmode
      && ((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 17)
    goto L9368;
  goto ret0;

 L9368: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L9369;
  goto ret0;

 L9369: __attribute__ ((__unused__))
  tem = peep2_next_insn (3);
  if (tem == (rtx) 0)
    goto ret0;
  x1 = (((tem)->u.fld[5]).rtx);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L9370;
  goto ret0;

 L9370: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L9371;
  goto ret0;

 L9371: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == COMPARE)
    goto L9372;
  goto ret0;

 L9372: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[7]))
    goto L9373;
  goto ret0;

 L9373: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[8])
      && (peep2_reg_dead_p (4, operands[7]) && peep2_reg_dead_p (4, operands[8])))
    {
      *_pmatch_len = 3;
      tem = gen_peephole2_1172 (insn, operands);
      if (tem != 0)
        return tem;
    }
  goto ret0;

 L9379: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == NE)
    goto L9380;
  goto ret0;

 L9380: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (register_operand (x4, VOIDmode))
    {
      operands[6] = x4;
      goto L9381;
    }
  goto ret0;

 L9381: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum rtx_code) (x4)->code) == CONST_INT
      && ((x4)->u.hwint[0]) == 0L)
    goto L9382;
  goto ret0;

 L9382: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum machine_mode) (x3)->mode) == CCmode
      && ((enum rtx_code) (x3)->code) == COMPARE)
    goto L9383;
  goto ret0;

 L9383: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (((enum machine_mode) (x4)->mode) == BLKmode
      && ((enum rtx_code) (x4)->code) == MEM)
    goto L9384;
  goto ret0;

 L9384: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (register_operand (x5, VOIDmode))
    {
      operands[4] = x5;
      goto L9385;
    }
  goto ret0;

 L9385: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (((enum machine_mode) (x4)->mode) == BLKmode
      && ((enum rtx_code) (x4)->code) == MEM)
    goto L9386;
  goto ret0;

 L9386: __attribute__ ((__unused__))
  x5 = (((x4)->u.fld[0]).rtx);
  if (register_operand (x5, VOIDmode))
    {
      operands[5] = x5;
      goto L9387;
    }
  goto ret0;

 L9387: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[2]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L9388;
  goto ret0;

 L9388: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L9389;
  goto ret0;

 L9389: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (immediate_operand (x2, SImode))
    {
      operands[3] = x2;
      goto L9390;
    }
  goto ret0;

 L9390: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L9391;
  goto ret0;

 L9391: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L9392;
  goto ret0;

 L9392: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[3]);
  if (((enum rtx_code) (x1)->code) == USE)
    goto L9393;
  goto ret0;

 L9393: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 19)
    goto L9394;
  goto ret0;

 L9394: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[4]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9395;
  goto ret0;

 L9395: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[0] = x2;
      goto L9396;
    }
  goto ret0;

 L9396: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[5]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9397;
  goto ret0;

 L9397: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[1] = x2;
      goto L9398;
    }
  goto ret0;

 L9398: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[6]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9399;
  goto ret0;

 L9399: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, VOIDmode))
    {
      operands[2] = x2;
      goto L9400;
    }
  goto ret0;

 L9400: __attribute__ ((__unused__))
  tem = peep2_next_insn (1);
  if (tem == (rtx) 0)
    goto ret0;
  x1 = (((tem)->u.fld[5]).rtx);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L9401;
  goto ret0;

 L9401: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, QImode))
    {
      operands[7] = x2;
      goto L9402;
    }
  goto ret0;

 L9402: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == GTU)
    goto L9403;
  goto ret0;

 L9403: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == CCmode
      && ((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 17)
    goto L9404;
  goto ret0;

 L9404: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L9405;
  goto ret0;

 L9405: __attribute__ ((__unused__))
  tem = peep2_next_insn (2);
  if (tem == (rtx) 0)
    goto ret0;
  x1 = (((tem)->u.fld[5]).rtx);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L9406;
  goto ret0;

 L9406: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (register_operand (x2, QImode))
    {
      operands[8] = x2;
      goto L9407;
    }
  goto ret0;

 L9407: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == QImode
      && ((enum rtx_code) (x2)->code) == LTU)
    goto L9408;
  goto ret0;

 L9408: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == CCmode
      && ((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 17)
    goto L9409;
  goto ret0;

 L9409: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT
      && ((x3)->u.hwint[0]) == 0L)
    goto L9410;
  goto ret0;

 L9410: __attribute__ ((__unused__))
  tem = peep2_next_insn (3);
  if (tem == (rtx) 0)
    goto ret0;
  x1 = (((tem)->u.fld[5]).rtx);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L9411;
  goto ret0;

 L9411: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L9412;
  goto ret0;

 L9412: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum rtx_code) (x2)->code) == COMPARE)
    goto L9413;
  goto ret0;

 L9413: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[7]))
    goto L9414;
  goto ret0;

 L9414: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[8])
      && (peep2_reg_dead_p (4, operands[7]) && peep2_reg_dead_p (4, operands[8])))
    {
      *_pmatch_len = 3;
      tem = gen_peephole2_1173 (insn, operands);
      if (tem != 0)
        return tem;
    }
  goto ret0;

 L9710: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L9711;
  goto ret0;

 L9711: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case SImode:
      goto L11605;
    case DImode:
      goto L11606;
    case HImode:
      goto L11609;
    default:
      break;
    }
  goto ret0;

 L11605: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 7)
    goto L9829;
 L11603: __attribute__ ((__unused__))
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L9712;
    }
 L11604: __attribute__ ((__unused__))
  if (memory_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L9730;
    }
 L11608: __attribute__ ((__unused__))
  if (register_operand (x2, SImode))
    {
      operands[0] = x2;
      goto L10057;
    }
  goto ret0;

 L9829: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L9830;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11603;

 L9830: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 7)
    goto L9831;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11603;

 L9831: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT)
    goto L11610;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11603;

 L11610: __attribute__ ((__unused__))
  if ((int) ((x3)->u.hwint[0]) == ((x3)->u.hwint[0]))
    switch ((int) ((x3)->u.hwint[0]))
      {
      case -4L:
        goto L9832;
      case -8L:
        goto L9841;
      case 4L:
        goto L9886;
      case 8L:
        goto L9895;
      default:
        break;
      }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11603;

 L9832: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9833;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11603;

 L9833: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (optimize_size || !(x86_sub_esp_4 & (1 << ix86_tune))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1244 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11603;

 L9841: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9842;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11603;

 L9842: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (optimize_size || !(x86_sub_esp_8 & (1 << ix86_tune))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1245 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11603;

 L9886: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9887;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11603;

 L9887: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1249 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11603;

 L9895: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9896;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11603;

 L9896: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode)
    goto L11614;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11603;

 L11614: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG)
    goto L11616;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11603;

 L11616: __attribute__ ((__unused__))
  if ((((x2)->u.fld[0]).rtint) == 17)
    goto L11618;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11603;

 L11618: __attribute__ ((__unused__))
  *_pmatch_len = 0;
  tem = gen_peephole2_1250 (insn, operands);
  if (tem != 0)
    return tem;
 L11619: __attribute__ ((__unused__))
  if ((optimize_size))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1251 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11603;

 L9712: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (arith_or_logical_operator (x2, SImode))
    {
      operands[3] = x2;
      goto L9713;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11604;

 L9713: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[0]))
    goto L9714;
 L9722: __attribute__ ((__unused__))
  if (memory_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L9723;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11604;

 L9714: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (memory_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L9715;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9722;

 L9715: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9716;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9722;

 L9716: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (! optimize_size && ! (x86_read_modify & (1 << ix86_tune))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1229 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9722;

 L9723: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[0]))
    goto L9724;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11604;

 L9724: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9725;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11604;

 L9725: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (! optimize_size && ! (x86_read_modify & (1 << ix86_tune))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1230 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11604;

 L9730: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (arith_or_logical_operator (x2, SImode))
    {
      operands[3] = x2;
      goto L9731;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11608;

 L9731: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (rtx_equal_p (x3, operands[0]))
    goto L9732;
 L9740: __attribute__ ((__unused__))
  if (nonmemory_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L9741;
    }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11608;

 L9732: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (nonmemory_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L9733;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9740;

 L9733: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9734;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9740;

 L9734: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (! optimize_size && ! (x86_read_modify_write & (1 << ix86_tune))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1231 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L9740;

 L9741: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (rtx_equal_p (x3, operands[0]))
    goto L9742;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11608;

 L9742: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9743;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11608;

 L9743: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (! optimize_size && ! (x86_read_modify_write & (1 << ix86_tune))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1232 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11608;

 L10057: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == MULT)
    goto L10058;
  goto ret0;

 L10058: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode)
    goto L11620;
  goto ret0;

 L11620: __attribute__ ((__unused__))
  if (memory_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L10059;
    }
 L11621: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, SImode))
    {
      operands[1] = x3;
      goto L10087;
    }
  goto ret0;

 L10059: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (immediate_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L10060;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11621;

 L10060: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L10061;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11621;

 L10061: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((ix86_tune == PROCESSOR_K8) && !optimize_size
   && (((enum rtx_code) (operands[2])->code) != CONST_INT
       || !(('K') == 'I' ? (((operands[2])->u.hwint[0])) >= 0 && (((operands[2])->u.hwint[0])) <= 31 : ('K') == 'J' ? (((operands[2])->u.hwint[0])) >= 0 && (((operands[2])->u.hwint[0])) <= 63 : ('K') == 'K' ? (((operands[2])->u.hwint[0])) >= -128 && (((operands[2])->u.hwint[0])) <= 127 : ('K') == 'L' ? (((operands[2])->u.hwint[0])) == 0xff || (((operands[2])->u.hwint[0])) == 0xffff : ('K') == 'M' ? (((operands[2])->u.hwint[0])) >= 0 && (((operands[2])->u.hwint[0])) <= 3 : ('K') == 'N' ? (((operands[2])->u.hwint[0])) >= 0 && (((operands[2])->u.hwint[0])) <= 255 : 0))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1268 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11621;

 L10087: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const_int_operand (x3, SImode))
    {
      operands[2] = x3;
      goto L10088;
    }
  goto ret0;

 L10088: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L10089;
  goto ret0;

 L10089: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((ix86_tune == PROCESSOR_K8) && !optimize_size
   && (('K') == 'I' ? (((operands[2])->u.hwint[0])) >= 0 && (((operands[2])->u.hwint[0])) <= 31 : ('K') == 'J' ? (((operands[2])->u.hwint[0])) >= 0 && (((operands[2])->u.hwint[0])) <= 63 : ('K') == 'K' ? (((operands[2])->u.hwint[0])) >= -128 && (((operands[2])->u.hwint[0])) <= 127 : ('K') == 'L' ? (((operands[2])->u.hwint[0])) == 0xff || (((operands[2])->u.hwint[0])) == 0xffff : ('K') == 'M' ? (((operands[2])->u.hwint[0])) >= 0 && (((operands[2])->u.hwint[0])) <= 3 : ('K') == 'N' ? (((operands[2])->u.hwint[0])) >= 0 && (((operands[2])->u.hwint[0])) <= 255 : 0)))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1271 (insn, operands);
      if (tem != 0)
        return tem;
    }
  goto ret0;

 L11606: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 7)
    goto L9967;
 L11607: __attribute__ ((__unused__))
  if (register_operand (x2, DImode))
    {
      operands[0] = x2;
      goto L10048;
    }
  goto ret0;

 L9967: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L9968;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11607;

 L9968: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == DImode
      && ((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 7)
    goto L9969;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11607;

 L9969: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT)
    goto L11622;
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11607;

 L11622: __attribute__ ((__unused__))
  if ((int) ((x3)->u.hwint[0]) == ((x3)->u.hwint[0]))
    switch ((int) ((x3)->u.hwint[0]))
      {
      case -8L:
        goto L9970;
      case -16L:
        goto L9979;
      case 8L:
        goto L10024;
      case 16L:
        goto L10033;
      default:
        break;
      }
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11607;

 L9970: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9971;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11607;

 L9971: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (optimize_size || !(x86_sub_esp_4 & (1 << ix86_tune))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1259 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11607;

 L9979: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9980;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11607;

 L9980: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && (optimize_size || !(x86_sub_esp_8 & (1 << ix86_tune))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1260 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11607;

 L10024: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L10025;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11607;

 L10025: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1264 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11607;

 L10033: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L10034;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11607;

 L10034: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode)
    goto L11626;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11607;

 L11626: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG)
    goto L11628;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11607;

 L11628: __attribute__ ((__unused__))
  if ((((x2)->u.fld[0]).rtint) == 17)
    goto L11630;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11607;

 L11630: __attribute__ ((__unused__))
  *_pmatch_len = 0;
  tem = gen_peephole2_1265 (insn, operands);
  if (tem != 0)
    return tem;
 L11631: __attribute__ ((__unused__))
  if ((optimize_size))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1266 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[0]).rtx);
  goto L11607;

 L10048: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode)
    goto L11632;
  goto ret0;

 L11632: __attribute__ ((__unused__))
  switch (((enum rtx_code) (x2)->code))
    {
    case MULT:
      goto L10049;
    case ZERO_EXTEND:
      goto L10067;
    default:
     break;
   }
  goto ret0;

 L10049: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == DImode)
    goto L11634;
  goto ret0;

 L11634: __attribute__ ((__unused__))
  if (memory_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L10050;
    }
 L11635: __attribute__ ((__unused__))
  if (nonimmediate_operand (x3, DImode))
    {
      operands[1] = x3;
      goto L10078;
    }
  goto ret0;

 L10050: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (immediate_operand (x3, DImode))
    {
      operands[2] = x3;
      goto L10051;
    }
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11635;

 L10051: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L10052;
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11635;

 L10052: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((ix86_tune == PROCESSOR_K8) && !optimize_size
   && (((enum rtx_code) (operands[2])->code) != CONST_INT
       || !(('K') == 'I' ? (((operands[2])->u.hwint[0])) >= 0 && (((operands[2])->u.hwint[0])) <= 31 : ('K') == 'J' ? (((operands[2])->u.hwint[0])) >= 0 && (((operands[2])->u.hwint[0])) <= 63 : ('K') == 'K' ? (((operands[2])->u.hwint[0])) >= -128 && (((operands[2])->u.hwint[0])) <= 127 : ('K') == 'L' ? (((operands[2])->u.hwint[0])) == 0xff || (((operands[2])->u.hwint[0])) == 0xffff : ('K') == 'M' ? (((operands[2])->u.hwint[0])) >= 0 && (((operands[2])->u.hwint[0])) <= 3 : ('K') == 'N' ? (((operands[2])->u.hwint[0])) >= 0 && (((operands[2])->u.hwint[0])) <= 255 : 0))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1267 (insn, operands);
      if (tem != 0)
        return tem;
    }
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  x2 = (((x1)->u.fld[1]).rtx);
  x3 = (((x2)->u.fld[0]).rtx);
  goto L11635;

 L10078: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (const_int_operand (x3, DImode))
    {
      operands[2] = x3;
      goto L10079;
    }
  goto ret0;

 L10079: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L10080;
  goto ret0;

 L10080: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((ix86_tune == PROCESSOR_K8) && !optimize_size
   && (('K') == 'I' ? (((operands[2])->u.hwint[0])) >= 0 && (((operands[2])->u.hwint[0])) <= 31 : ('K') == 'J' ? (((operands[2])->u.hwint[0])) >= 0 && (((operands[2])->u.hwint[0])) <= 63 : ('K') == 'K' ? (((operands[2])->u.hwint[0])) >= -128 && (((operands[2])->u.hwint[0])) <= 127 : ('K') == 'L' ? (((operands[2])->u.hwint[0])) == 0xff || (((operands[2])->u.hwint[0])) == 0xffff : ('K') == 'M' ? (((operands[2])->u.hwint[0])) >= 0 && (((operands[2])->u.hwint[0])) <= 3 : ('K') == 'N' ? (((operands[2])->u.hwint[0])) >= 0 && (((operands[2])->u.hwint[0])) <= 255 : 0)))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1270 (insn, operands);
      if (tem != 0)
        return tem;
    }
  goto ret0;

 L10067: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == MULT)
    goto L10068;
  goto ret0;

 L10068: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[0]).rtx);
  if (memory_operand (x4, SImode))
    {
      operands[1] = x4;
      goto L10069;
    }
  goto ret0;

 L10069: __attribute__ ((__unused__))
  x4 = (((x3)->u.fld[1]).rtx);
  if (immediate_operand (x4, SImode))
    {
      operands[2] = x4;
      goto L10070;
    }
  goto ret0;

 L10070: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L10071;
  goto ret0;

 L10071: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((ix86_tune == PROCESSOR_K8) && !optimize_size
   && (((enum rtx_code) (operands[2])->code) != CONST_INT
       || !(('K') == 'I' ? (((operands[2])->u.hwint[0])) >= 0 && (((operands[2])->u.hwint[0])) <= 31 : ('K') == 'J' ? (((operands[2])->u.hwint[0])) >= 0 && (((operands[2])->u.hwint[0])) <= 63 : ('K') == 'K' ? (((operands[2])->u.hwint[0])) >= -128 && (((operands[2])->u.hwint[0])) <= 127 : ('K') == 'L' ? (((operands[2])->u.hwint[0])) == 0xff || (((operands[2])->u.hwint[0])) == 0xffff : ('K') == 'M' ? (((operands[2])->u.hwint[0])) >= 0 && (((operands[2])->u.hwint[0])) <= 3 : ('K') == 'N' ? (((operands[2])->u.hwint[0])) >= 0 && (((operands[2])->u.hwint[0])) <= 255 : 0))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1269 (insn, operands);
      if (tem != 0)
        return tem;
    }
  goto ret0;

 L11609: __attribute__ ((__unused__))
  if (register_operand (x2, HImode))
    {
      operands[0] = x2;
      goto L10094;
    }
  goto ret0;

 L10094: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == HImode
      && ((enum rtx_code) (x2)->code) == MULT)
    goto L10095;
  goto ret0;

 L10095: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (nonimmediate_operand (x3, HImode))
    {
      operands[1] = x3;
      goto L10096;
    }
  goto ret0;

 L10096: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (immediate_operand (x3, HImode))
    {
      operands[2] = x3;
      goto L10097;
    }
  goto ret0;

 L10097: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L10098;
  goto ret0;

 L10098: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17
      && ((ix86_tune == PROCESSOR_K8) && !optimize_size))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1272 (insn, operands);
      if (tem != 0)
        return tem;
    }
  goto ret0;

 L9803: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[0]);
  if (((enum rtx_code) (x1)->code) == SET)
    goto L9804;
  goto ret0;

 L9804: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  switch (((enum machine_mode) (x2)->mode))
    {
    case SImode:
      goto L11636;
    case DImode:
      goto L11637;
    default:
      break;
    }
  goto ret0;

 L11636: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 7)
    goto L9805;
  goto ret0;

 L9805: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == SImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L9806;
  goto ret0;

 L9806: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == SImode
      && ((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 7)
    goto L9807;
  goto ret0;

 L9807: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT)
    goto L11638;
  goto ret0;

 L11638: __attribute__ ((__unused__))
  if ((int) ((x3)->u.hwint[0]) == ((x3)->u.hwint[0]))
    switch ((int) ((x3)->u.hwint[0]))
      {
      case -4L:
        goto L9808;
      case -8L:
        goto L9820;
      case 4L:
        goto L9850;
      case 8L:
        goto L9862;
      default:
        break;
      }
  goto ret0;

 L9808: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9809;
  goto ret0;

 L9809: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L9810;
  goto ret0;

 L9810: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9811;
  goto ret0;

 L9811: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == BLKmode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L9812;
  goto ret0;

 L9812: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == SCRATCH
      && (optimize_size || !(x86_sub_esp_4 & (1 << ix86_tune))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1242 (insn, operands);
      if (tem != 0)
        return tem;
    }
  goto ret0;

 L9820: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9821;
  goto ret0;

 L9821: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L9822;
  goto ret0;

 L9822: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9823;
  goto ret0;

 L9823: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == BLKmode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L9824;
  goto ret0;

 L9824: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == SCRATCH
      && (optimize_size || !(x86_sub_esp_8 & (1 << ix86_tune))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1243 (insn, operands);
      if (tem != 0)
        return tem;
    }
  goto ret0;

 L9850: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9851;
  goto ret0;

 L9851: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L9852;
  goto ret0;

 L9852: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9853;
  goto ret0;

 L9853: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == BLKmode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L9854;
  goto ret0;

 L9854: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == SCRATCH
      && (optimize_size || !(x86_add_esp_4 & (1 << ix86_tune))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1246 (insn, operands);
      if (tem != 0)
        return tem;
    }
  goto ret0;

 L9862: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9863;
  goto ret0;

 L9863: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L9864;
  goto ret0;

 L9864: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9865;
  goto ret0;

 L9865: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == BLKmode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L9866;
  goto ret0;

 L9866: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == SCRATCH)
    goto L11642;
  goto ret0;

 L11642: __attribute__ ((__unused__))
  if ((optimize_size || !(x86_add_esp_8 & (1 << ix86_tune))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1247 (insn, operands);
      if (tem != 0)
        return tem;
    }
 L11643: __attribute__ ((__unused__))
  if ((optimize_size))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1248 (insn, operands);
      if (tem != 0)
        return tem;
    }
  goto ret0;

 L11637: __attribute__ ((__unused__))
  if (((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 7)
    goto L9943;
  goto ret0;

 L9943: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[1]).rtx);
  if (((enum machine_mode) (x2)->mode) == DImode
      && ((enum rtx_code) (x2)->code) == PLUS)
    goto L9944;
  goto ret0;

 L9944: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum machine_mode) (x3)->mode) == DImode
      && ((enum rtx_code) (x3)->code) == REG
      && (((x3)->u.fld[0]).rtint) == 7)
    goto L9945;
  goto ret0;

 L9945: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[1]).rtx);
  if (((enum rtx_code) (x3)->code) == CONST_INT)
    goto L11644;
  goto ret0;

 L11644: __attribute__ ((__unused__))
  if ((int) ((x3)->u.hwint[0]) == ((x3)->u.hwint[0]))
    switch ((int) ((x3)->u.hwint[0]))
      {
      case -8L:
        goto L9946;
      case -16L:
        goto L9958;
      case 8L:
        goto L9988;
      case 16L:
        goto L10000;
      default:
        break;
      }
  goto ret0;

 L9946: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9947;
  goto ret0;

 L9947: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L9948;
  goto ret0;

 L9948: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9949;
  goto ret0;

 L9949: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == BLKmode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L9950;
  goto ret0;

 L9950: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == SCRATCH
      && (optimize_size || !(x86_sub_esp_4 & (1 << ix86_tune))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1257 (insn, operands);
      if (tem != 0)
        return tem;
    }
  goto ret0;

 L9958: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9959;
  goto ret0;

 L9959: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L9960;
  goto ret0;

 L9960: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9961;
  goto ret0;

 L9961: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == BLKmode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L9962;
  goto ret0;

 L9962: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == SCRATCH
      && (optimize_size || !(x86_sub_esp_8 & (1 << ix86_tune))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1258 (insn, operands);
      if (tem != 0)
        return tem;
    }
  goto ret0;

 L9988: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9989;
  goto ret0;

 L9989: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L9990;
  goto ret0;

 L9990: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L9991;
  goto ret0;

 L9991: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == BLKmode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L9992;
  goto ret0;

 L9992: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == SCRATCH
      && (optimize_size || !(x86_add_esp_4 & (1 << ix86_tune))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1261 (insn, operands);
      if (tem != 0)
        return tem;
    }
  goto ret0;

 L10000: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[1]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L10001;
  goto ret0;

 L10001: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == CCmode
      && ((enum rtx_code) (x2)->code) == REG
      && (((x2)->u.fld[0]).rtint) == 17)
    goto L10002;
  goto ret0;

 L10002: __attribute__ ((__unused__))
  x1 = (((((x0)->u.fld[0]).rtvec))->elem[2]);
  if (((enum rtx_code) (x1)->code) == CLOBBER)
    goto L10003;
  goto ret0;

 L10003: __attribute__ ((__unused__))
  x2 = (((x1)->u.fld[0]).rtx);
  if (((enum machine_mode) (x2)->mode) == BLKmode
      && ((enum rtx_code) (x2)->code) == MEM)
    goto L10004;
  goto ret0;

 L10004: __attribute__ ((__unused__))
  x3 = (((x2)->u.fld[0]).rtx);
  if (((enum rtx_code) (x3)->code) == SCRATCH)
    goto L11648;
  goto ret0;

 L11648: __attribute__ ((__unused__))
  if ((optimize_size || !(x86_add_esp_8 & (1 << ix86_tune))))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1262 (insn, operands);
      if (tem != 0)
        return tem;
    }
 L11649: __attribute__ ((__unused__))
  if ((optimize_size))
    {
      *_pmatch_len = 0;
      tem = gen_peephole2_1263 (insn, operands);
      if (tem != 0)
        return tem;
    }
  goto ret0;
 ret0:
  return 0;
}

rtx
peephole2_insns (rtx x0 __attribute__ ((__unused__)),
 rtx insn __attribute__ ((__unused__)),
 int *_pmatch_len __attribute__ ((__unused__)))
{
  rtx * const operands __attribute__ ((__unused__)) = &recog_data.operand[0];
  rtx x1 __attribute__ ((__unused__));
  rtx x2 __attribute__ ((__unused__));
  rtx x3 __attribute__ ((__unused__));
  rtx x4 __attribute__ ((__unused__));
  rtx x5 __attribute__ ((__unused__));
  rtx x6 __attribute__ ((__unused__));
  rtx x7 __attribute__ ((__unused__));
  rtx tem __attribute__ ((__unused__));
  recog_data.insn = (rtx) 0;

  switch (((enum rtx_code) (x0)->code))
    {
    case SET:
      goto L8546;
    case PARALLEL:
      goto L11554;
    default:
     break;
   }
  goto ret0;

 L8546: __attribute__ ((__unused__))
  return peephole2_1 (x0, insn, _pmatch_len);

 L11554: __attribute__ ((__unused__))
  return peephole2_2 (x0, insn, _pmatch_len);
 ret0:
  return 0;
}
