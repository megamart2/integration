# 1 "insn-emit.c"
# 1 "<built-in>"
# 1 "<command line>"
# 1 "insn-emit.c"



# 1 "config.h" 1


# 1 "auto-host.h" 1
# 4 "config.h" 2

# 1 "../.././gcc/../include/ansidecl.h" 1
# 6 "config.h" 2
# 5 "insn-emit.c" 2
# 1 "../.././gcc/system.h" 1
# 28 "../.././gcc/system.h"
# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stdarg.h" 1 3 4
# 43 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 105 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 29 "../.././gcc/system.h" 2
# 39 "../.././gcc/system.h"
# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 152 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 214 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 3 4
typedef unsigned int size_t;
# 326 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 3 4
typedef long int wchar_t;
# 40 "../.././gcc/system.h" 2


# 1 "/usr/include/stdio.h" 1 3 4
# 28 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 329 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 313 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 314 "/usr/include/sys/cdefs.h" 2 3 4
# 330 "/usr/include/features.h" 2 3 4
# 352 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4



# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 5 "/usr/include/gnu/stubs.h" 2 3 4


# 1 "/usr/include/gnu/stubs-32.h" 1 3 4
# 8 "/usr/include/gnu/stubs.h" 2 3 4
# 353 "/usr/include/features.h" 2 3 4
# 29 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 35 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/bits/types.h" 1 3 4
# 28 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/types.h" 2 3 4


# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 32 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;




__extension__ typedef signed long long int __int64_t;
__extension__ typedef unsigned long long int __uint64_t;







__extension__ typedef long long int __quad_t;
__extension__ typedef unsigned long long int __u_quad_t;
# 134 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 135 "/usr/include/bits/types.h" 2 3 4


__extension__ typedef __u_quad_t __dev_t;
__extension__ typedef unsigned int __uid_t;
__extension__ typedef unsigned int __gid_t;
__extension__ typedef unsigned long int __ino_t;
__extension__ typedef __u_quad_t __ino64_t;
__extension__ typedef unsigned int __mode_t;
__extension__ typedef unsigned int __nlink_t;
__extension__ typedef long int __off_t;
__extension__ typedef __quad_t __off64_t;
__extension__ typedef int __pid_t;
__extension__ typedef struct { int __val[2]; } __fsid_t;
__extension__ typedef long int __clock_t;
__extension__ typedef unsigned long int __rlim_t;
__extension__ typedef __u_quad_t __rlim64_t;
__extension__ typedef unsigned int __id_t;
__extension__ typedef long int __time_t;
__extension__ typedef unsigned int __useconds_t;
__extension__ typedef long int __suseconds_t;

__extension__ typedef int __daddr_t;
__extension__ typedef long int __swblk_t;
__extension__ typedef int __key_t;


__extension__ typedef int __clockid_t;


__extension__ typedef void * __timer_t;


__extension__ typedef long int __blksize_t;




__extension__ typedef long int __blkcnt_t;
__extension__ typedef __quad_t __blkcnt64_t;


__extension__ typedef unsigned long int __fsblkcnt_t;
__extension__ typedef __u_quad_t __fsblkcnt64_t;


__extension__ typedef unsigned long int __fsfilcnt_t;
__extension__ typedef __u_quad_t __fsfilcnt64_t;

__extension__ typedef int __ssize_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


__extension__ typedef int __intptr_t;


__extension__ typedef unsigned int __socklen_t;
# 37 "/usr/include/stdio.h" 2 3 4









typedef struct _IO_FILE FILE;





# 62 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 72 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 32 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 14 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 355 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 15 "/usr/include/_G_config.h" 2 3 4
# 24 "/usr/include/_G_config.h" 3 4
# 1 "/usr/include/wchar.h" 1 3 4
# 48 "/usr/include/wchar.h" 3 4
# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 49 "/usr/include/wchar.h" 2 3 4

# 1 "/usr/include/bits/wchar.h" 1 3 4
# 51 "/usr/include/wchar.h" 2 3 4
# 76 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 25 "/usr/include/_G_config.h" 2 3 4

typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 44 "/usr/include/_G_config.h" 3 4
# 1 "/usr/include/gconv.h" 1 3 4
# 28 "/usr/include/gconv.h" 3 4
# 1 "/usr/include/wchar.h" 1 3 4
# 48 "/usr/include/wchar.h" 3 4
# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 49 "/usr/include/wchar.h" 2 3 4
# 29 "/usr/include/gconv.h" 2 3 4


# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 32 "/usr/include/gconv.h" 2 3 4





enum
{
  __GCONV_OK = 0,
  __GCONV_NOCONV,
  __GCONV_NODB,
  __GCONV_NOMEM,

  __GCONV_EMPTY_INPUT,
  __GCONV_FULL_OUTPUT,
  __GCONV_ILLEGAL_INPUT,
  __GCONV_INCOMPLETE_INPUT,

  __GCONV_ILLEGAL_DESCRIPTOR,
  __GCONV_INTERNAL_ERROR
};



enum
{
  __GCONV_IS_LAST = 0x0001,
  __GCONV_IGNORE_ERRORS = 0x0002
};



struct __gconv_step;
struct __gconv_step_data;
struct __gconv_loaded_object;
struct __gconv_trans_data;



typedef int (*__gconv_fct) (struct __gconv_step *, struct __gconv_step_data *,
       __const unsigned char **, __const unsigned char *,
       unsigned char **, size_t *, int, int);


typedef wint_t (*__gconv_btowc_fct) (struct __gconv_step *, unsigned char);


typedef int (*__gconv_init_fct) (struct __gconv_step *);
typedef void (*__gconv_end_fct) (struct __gconv_step *);



typedef int (*__gconv_trans_fct) (struct __gconv_step *,
      struct __gconv_step_data *, void *,
      __const unsigned char *,
      __const unsigned char **,
      __const unsigned char *, unsigned char **,
      size_t *);


typedef int (*__gconv_trans_context_fct) (void *, __const unsigned char *,
       __const unsigned char *,
       unsigned char *, unsigned char *);


typedef int (*__gconv_trans_query_fct) (__const char *, __const char ***,
     size_t *);


typedef int (*__gconv_trans_init_fct) (void **, const char *);
typedef void (*__gconv_trans_end_fct) (void *);

struct __gconv_trans_data
{

  __gconv_trans_fct __trans_fct;
  __gconv_trans_context_fct __trans_context_fct;
  __gconv_trans_end_fct __trans_end_fct;
  void *__data;
  struct __gconv_trans_data *__next;
};



struct __gconv_step
{
  struct __gconv_loaded_object *__shlib_handle;
  __const char *__modname;

  int __counter;

  char *__from_name;
  char *__to_name;

  __gconv_fct __fct;
  __gconv_btowc_fct __btowc_fct;
  __gconv_init_fct __init_fct;
  __gconv_end_fct __end_fct;



  int __min_needed_from;
  int __max_needed_from;
  int __min_needed_to;
  int __max_needed_to;


  int __stateful;

  void *__data;
};



struct __gconv_step_data
{
  unsigned char *__outbuf;
  unsigned char *__outbufend;



  int __flags;



  int __invocation_counter;



  int __internal_use;

  __mbstate_t *__statep;
  __mbstate_t __state;



  struct __gconv_trans_data *__trans;
};



typedef struct __gconv_info
{
  size_t __nsteps;
  struct __gconv_step *__steps;
  __extension__ struct __gconv_step_data __data [];
} *__gconv_t;
# 45 "/usr/include/_G_config.h" 2 3 4
typedef union
{
  struct __gconv_info __cd;
  struct
  {
    struct __gconv_info __cd;
    struct __gconv_step_data __data;
  } __combined;
} _G_iconv_t;

typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));
typedef int _G_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));
# 33 "/usr/include/libio.h" 2 3 4
# 166 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 176 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 199 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 267 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 315 "/usr/include/libio.h" 3 4
  __off64_t _offset;
# 324 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 360 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);







extern int __underflow (_IO_FILE *) __attribute__ ((__nothrow__));
extern int __uflow (_IO_FILE *) __attribute__ ((__nothrow__));
extern int __overflow (_IO_FILE *, int) __attribute__ ((__nothrow__));
extern wint_t __wunderflow (_IO_FILE *) __attribute__ ((__nothrow__));
extern wint_t __wuflow (_IO_FILE *) __attribute__ ((__nothrow__));
extern wint_t __woverflow (_IO_FILE *, wint_t) __attribute__ ((__nothrow__));
# 450 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp) __attribute__ ((__nothrow__));
extern int _IO_putc (int __c, _IO_FILE *__fp) __attribute__ ((__nothrow__));
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__));

extern int _IO_peekc_locked (_IO_FILE *__fp) __attribute__ ((__nothrow__));





extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__));
# 480 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t) __attribute__ ((__nothrow__));
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t) __attribute__ ((__nothrow__));

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int) __attribute__ ((__nothrow__));
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int) __attribute__ ((__nothrow__));

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__));
# 73 "/usr/include/stdio.h" 2 3 4
# 86 "/usr/include/stdio.h" 3 4


typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 138 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 139 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;









extern int remove (__const char *__filename) __attribute__ ((__nothrow__));

extern int rename (__const char *__old, __const char *__new) __attribute__ ((__nothrow__));




extern int renameat (int __oldfd, __const char *__old, int __newfd,
       __const char *__new) __attribute__ ((__nothrow__));








extern FILE *tmpfile (void);
# 181 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void);



extern char *tmpnam (char *__s) __attribute__ ((__nothrow__));





extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__));
# 203 "/usr/include/stdio.h" 3 4
extern char *tempnam (__const char *__dir, __const char *__pfx)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__));








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 228 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 238 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);









extern FILE *fopen (__const char *__restrict __filename,
      __const char *__restrict __modes);




extern FILE *freopen (__const char *__restrict __filename,
        __const char *__restrict __modes,
        FILE *__restrict __stream);
# 269 "/usr/include/stdio.h" 3 4


extern FILE *fopen64 (__const char *__restrict __filename,
        __const char *__restrict __modes);
extern FILE *freopen64 (__const char *__restrict __filename,
   __const char *__restrict __modes,
   FILE *__restrict __stream);




extern FILE *fdopen (int __fd, __const char *__modes) __attribute__ ((__nothrow__));





extern FILE *fopencookie (void *__restrict __magic_cookie,
     __const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) __attribute__ ((__nothrow__));


extern FILE *fmemopen (void *__s, size_t __len, __const char *__modes) __attribute__ ((__nothrow__));




extern FILE *open_memstream (char **__restrict __bufloc,
        size_t *__restrict __sizeloc) __attribute__ ((__nothrow__));



extern FILE *open_wmemstream (wchar_t **__restrict __bufloc,
         size_t *__restrict __sizeloc) __attribute__ ((__nothrow__));






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__));





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__));








extern int fprintf (FILE *__restrict __stream,
      __const char *__restrict __format, ...);




extern int printf (__const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      __const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (__const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));





extern int snprintf (char *__restrict __s, size_t __maxlen,
       __const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        __const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, __const char *__restrict __f,
        __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0)));
extern int __asprintf (char **__restrict __ptr,
         __const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3)));
extern int asprintf (char **__restrict __ptr,
       __const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3)));







extern int vdprintf (int __fd, __const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, __const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     __const char *__restrict __format, ...) ;




extern int scanf (__const char *__restrict __format, ...) ;

extern int sscanf (__const char *__restrict __s,
     __const char *__restrict __format, ...) __attribute__ ((__nothrow__));








extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (__const char *__restrict __s,
      __const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__scanf__, 2, 0)));









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 466 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 477 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 510 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;






extern char *gets (char *__s) ;

# 556 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 572 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (__const char *__restrict __s, FILE *__restrict __stream);





extern int puts (__const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s) ;

# 633 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (__const char *__restrict __s,
      FILE *__restrict __stream);
# 644 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (__const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream) ;








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 680 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 699 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, __const fpos_t *__pos);
# 722 "/usr/include/stdio.h" 3 4



extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, __const fpos64_t *__pos);




extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__)) ;




extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__)) ;








extern void perror (__const char *__s);






# 1 "/usr/include/bits/sys_errlist.h" 1 3 4
# 27 "/usr/include/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern __const char *__const sys_errlist[];


extern int _sys_nerr;
extern __const char *__const _sys_errlist[];
# 761 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__)) ;
# 780 "/usr/include/stdio.h" 3 4
extern FILE *popen (__const char *__command, __const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__));





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      __const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       __const char *__restrict __format,
       __gnuc_va_list __args)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__));
# 841 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio.h" 1 3 4
# 33 "/usr/include/bits/stdio.h" 3 4
extern __inline int
vprintf (__const char *__restrict __fmt, __gnuc_va_list __arg)
{
  return vfprintf (stdout, __fmt, __arg);
}


extern __inline int
getchar (void)
{
  return _IO_getc (stdin);
}




extern __inline int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline int
putchar (int __c)
{
  return _IO_putc (__c, stdout);
}




extern __inline int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}





extern __inline __ssize_t
getline (char **__lineptr, size_t *__n, FILE *__stream)
{
  return __getdelim (__lineptr, __n, '\n', __stream);
}





extern __inline int
__attribute__ ((__nothrow__)) feof_unlocked (FILE *__stream)
{
  return (((__stream)->_flags & 0x10) != 0);
}


extern __inline int
__attribute__ ((__nothrow__)) ferror_unlocked (FILE *__stream)
{
  return (((__stream)->_flags & 0x20) != 0);
}
# 842 "/usr/include/stdio.h" 2 3 4
# 850 "/usr/include/stdio.h" 3 4

# 43 "../.././gcc/system.h" 2
# 180 "../.././gcc/system.h"
# 1 "../.././gcc/../include/safe-ctype.h" 1
# 61 "../.././gcc/../include/safe-ctype.h"
enum {

  _sch_isblank = 0x0001,
  _sch_iscntrl = 0x0002,
  _sch_isdigit = 0x0004,
  _sch_islower = 0x0008,
  _sch_isprint = 0x0010,
  _sch_ispunct = 0x0020,
  _sch_isspace = 0x0040,
  _sch_isupper = 0x0080,
  _sch_isxdigit = 0x0100,


  _sch_isidst = 0x0200,
  _sch_isvsp = 0x0400,
  _sch_isnvsp = 0x0800,


  _sch_isalpha = _sch_isupper|_sch_islower,
  _sch_isalnum = _sch_isalpha|_sch_isdigit,
  _sch_isidnum = _sch_isidst|_sch_isdigit,
  _sch_isgraph = _sch_isalnum|_sch_ispunct,
  _sch_iscppsp = _sch_isvsp|_sch_isnvsp,
  _sch_isbasic = _sch_isprint|_sch_iscppsp

};


extern const unsigned short _sch_istable[256];
# 114 "../.././gcc/../include/safe-ctype.h"
extern const unsigned char _sch_toupper[256];
extern const unsigned char _sch_tolower[256];
# 181 "../.././gcc/system.h" 2

# 1 "/usr/include/sys/types.h" 1 3 4
# 29 "/usr/include/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __pid_t pid_t;




typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 133 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 59 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 75 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 93 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 105 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 134 "/usr/include/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 148 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 195 "/usr/include/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 217 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 38 "/usr/include/endian.h" 2 3 4
# 218 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/select.h" 1 3 4
# 31 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 32 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 23 "/usr/include/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 35 "/usr/include/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "/usr/include/time.h" 1 3 4
# 121 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    long int tv_nsec;
  };
# 45 "/usr/include/sys/select.h" 2 3 4

# 1 "/usr/include/bits/time.h" 1 3 4
# 69 "/usr/include/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 47 "/usr/include/sys/select.h" 2 3 4
# 55 "/usr/include/sys/select.h" 3 4
typedef long int __fd_mask;
# 67 "/usr/include/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 99 "/usr/include/sys/select.h" 3 4

# 109 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 121 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);



# 221 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/sysmacros.h" 1 3 4
# 29 "/usr/include/sys/sysmacros.h" 3 4
__extension__
extern __inline unsigned int gnu_dev_major (unsigned long long int __dev)
     __attribute__ ((__nothrow__));
__extension__
extern __inline unsigned int gnu_dev_minor (unsigned long long int __dev)
     __attribute__ ((__nothrow__));
__extension__
extern __inline unsigned long long int gnu_dev_makedev (unsigned int __major,
       unsigned int __minor)
     __attribute__ ((__nothrow__));


__extension__ extern __inline unsigned int
__attribute__ ((__nothrow__)) gnu_dev_major (unsigned long long int __dev)
{
  return ((__dev >> 8) & 0xfff) | ((unsigned int) (__dev >> 32) & ~0xfff);
}

__extension__ extern __inline unsigned int
__attribute__ ((__nothrow__)) gnu_dev_minor (unsigned long long int __dev)
{
  return (__dev & 0xff) | ((unsigned int) (__dev >> 12) & ~0xff);
}

__extension__ extern __inline unsigned long long int
__attribute__ ((__nothrow__)) gnu_dev_makedev (unsigned int __major, unsigned int __minor)
{
  return ((__minor & 0xff) | ((__major & 0xfff) << 8)
   | (((unsigned long long int) (__minor & ~0xff)) << 12)
   | (((unsigned long long int) (__major & ~0xfff)) << 32));
}
# 224 "/usr/include/sys/types.h" 2 3 4




typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 262 "/usr/include/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 36 "/usr/include/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


typedef union
{
  char __size[36];
  long int __align;
} pthread_attr_t;


typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;




typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;


    int __kind;
    unsigned int __nusers;
    __extension__ union
    {
      int __spins;
      __pthread_slist_t __list;
    };
  } __data;
  char __size[24];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  long int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  long int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{
  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;


    unsigned int __flags;
    int __writer;
  } __data;
  char __size[32];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[20];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/sys/types.h" 2 3 4



# 183 "../.././gcc/system.h" 2

# 1 "/usr/include/errno.h" 1 3 4
# 32 "/usr/include/errno.h" 3 4




# 1 "/usr/include/bits/errno.h" 1 3 4
# 25 "/usr/include/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4



# 1 "/usr/include/asm/errno.h" 1 3 4
# 5 "/usr/include/linux/errno.h" 2 3 4
# 26 "/usr/include/bits/errno.h" 2 3 4
# 43 "/usr/include/bits/errno.h" 3 4
extern int *__errno_location (void) __attribute__ ((__nothrow__)) __attribute__ ((__const__));
# 37 "/usr/include/errno.h" 2 3 4
# 55 "/usr/include/errno.h" 3 4
extern char *program_invocation_name, *program_invocation_short_name;




# 69 "/usr/include/errno.h" 3 4
typedef int error_t;
# 185 "../.././gcc/system.h" 2
# 195 "../.././gcc/system.h"
# 1 "/usr/include/string.h" 1 3 4
# 28 "/usr/include/string.h" 3 4





# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4




extern void *memcpy (void *__restrict __dest,
       __const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, __const void *__src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, __const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (__const void *__s1, __const void *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memchr (__const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern void *rawmemchr (__const void *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern void *memrchr (__const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strcpy (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, __const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (__const char *__s1, __const char *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));






# 1 "/usr/include/xlocale.h" 1 3 4
# 28 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;
# 119 "/usr/include/string.h" 2 3 4


extern int strcoll_l (__const char *__s1, __const char *__s2, __locale_t __l)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, __const char *__src, size_t __n,
    __locale_t __l) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 4)));




extern char *strdup (__const char *__s)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (__const char *__string, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 165 "/usr/include/string.h" 3 4


extern char *strchr (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));

extern char *strrchr (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strchrnul (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strcspn (__const char *__s, __const char *__reject)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (__const char *__s, __const char *__accept)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strpbrk (__const char *__s, __const char *__accept)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strstr (__const char *__haystack, __const char *__needle)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *strtok (char *__restrict __s, __const char *__restrict __delim)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    __const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, __const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));




extern char *strcasestr (__const char *__haystack, __const char *__needle)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern void *memmem (__const void *__haystack, size_t __haystacklen,
       __const void *__needle, size_t __needlelen)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   __const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        __const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (__const char *__s)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (__const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) __attribute__ ((__nothrow__));

# 281 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));





extern void __bzero (void *__s, size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern void bcopy (__const void *__src, void *__dest, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int bcmp (__const void *__s1, __const void *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *index (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern char *rindex (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));



extern int ffs (int __i) __attribute__ ((__nothrow__)) __attribute__ ((__const__));




extern int ffsl (long int __l) __attribute__ ((__nothrow__)) __attribute__ ((__const__));

__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__));




extern int strcasecmp (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (__const char *__s1, __const char *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (__const char *__s1, __const char *__s2,
    __locale_t __loc)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (__const char *__s1, __const char *__s2,
     size_t __n, __locale_t __loc)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       __const char *__restrict __delim)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strsignal (int __sig) __attribute__ ((__nothrow__));


extern char *__stpcpy (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern char *basename (__const char *__filename) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 414 "/usr/include/string.h" 3 4
# 1 "/usr/include/bits/string.h" 1 3 4
# 415 "/usr/include/string.h" 2 3 4


# 1 "/usr/include/bits/string2.h" 1 3 4
# 418 "/usr/include/string.h" 2 3 4
# 426 "/usr/include/string.h" 3 4

# 196 "../.././gcc/system.h" 2
# 1 "/usr/include/strings.h" 1 3 4
# 197 "../.././gcc/system.h" 2
# 208 "../.././gcc/system.h"
# 1 "/usr/include/stdlib.h" 1 3 4
# 33 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 34 "/usr/include/stdlib.h" 2 3 4








# 1 "/usr/include/bits/waitflags.h" 1 3 4
# 43 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/bits/waitstatus.h" 1 3 4
# 67 "/usr/include/bits/waitstatus.h" 3 4
union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 44 "/usr/include/stdlib.h" 2 3 4
# 68 "/usr/include/stdlib.h" 3 4
typedef union
  {
    union wait *__uptr;
    int *__iptr;
  } __WAIT_STATUS __attribute__ ((__transparent_union__));
# 96 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 140 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__)) ;




extern double atof (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (__const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





extern float strtof (__const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

extern long double strtold (__const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





extern long int strtol (__const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

extern unsigned long int strtoul (__const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;




__extension__
extern long long int strtoq (__const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtouq (__const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





__extension__
extern long long int strtoll (__const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtoull (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

# 240 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 4))) ;

extern unsigned long int strtoul_l (__const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern long long int strtoll_l (__const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern unsigned long long int strtoull_l (__const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 4))) ;

extern double strtod_l (__const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3))) ;

extern float strtof_l (__const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3))) ;

extern long double strtold_l (__const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3))) ;






extern double __strtod_internal (__const char *__restrict __nptr,
     char **__restrict __endptr, int __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
extern float __strtof_internal (__const char *__restrict __nptr,
    char **__restrict __endptr, int __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
extern long double __strtold_internal (__const char *__restrict __nptr,
           char **__restrict __endptr,
           int __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

extern long int __strtol_internal (__const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, int __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



extern unsigned long int __strtoul_internal (__const char *__restrict __nptr,
          char **__restrict __endptr,
          int __base, int __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;




__extension__
extern long long int __strtoll_internal (__const char *__restrict __nptr,
      char **__restrict __endptr,
      int __base, int __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



__extension__
extern unsigned long long int __strtoull_internal (__const char *
         __restrict __nptr,
         char **__restrict __endptr,
         int __base, int __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;








extern __inline double
__attribute__ ((__nothrow__)) strtod (__const char *__restrict __nptr, char **__restrict __endptr)
{
  return __strtod_internal (__nptr, __endptr, 0);
}
extern __inline long int
__attribute__ ((__nothrow__)) strtol (__const char *__restrict __nptr, char **__restrict __endptr, int __base)

{
  return __strtol_internal (__nptr, __endptr, __base, 0);
}
extern __inline unsigned long int
__attribute__ ((__nothrow__)) strtoul (__const char *__restrict __nptr, char **__restrict __endptr, int __base)

{
  return __strtoul_internal (__nptr, __endptr, __base, 0);
}




extern __inline float
__attribute__ ((__nothrow__)) strtof (__const char *__restrict __nptr, char **__restrict __endptr)
{
  return __strtof_internal (__nptr, __endptr, 0);
}

extern __inline long double
__attribute__ ((__nothrow__)) strtold (__const char *__restrict __nptr, char **__restrict __endptr)
{
  return __strtold_internal (__nptr, __endptr, 0);
}





__extension__ extern __inline long long int
__attribute__ ((__nothrow__)) strtoq (__const char *__restrict __nptr, char **__restrict __endptr, int __base)

{
  return __strtoll_internal (__nptr, __endptr, __base, 0);
}
__extension__ extern __inline unsigned long long int
__attribute__ ((__nothrow__)) strtouq (__const char *__restrict __nptr, char **__restrict __endptr, int __base)

{
  return __strtoull_internal (__nptr, __endptr, __base, 0);
}




__extension__ extern __inline long long int
__attribute__ ((__nothrow__)) strtoll (__const char *__restrict __nptr, char **__restrict __endptr, int __base)

{
  return __strtoll_internal (__nptr, __endptr, __base, 0);
}
__extension__ extern __inline unsigned long long int
__attribute__ ((__nothrow__)) strtoull (__const char * __restrict __nptr, char **__restrict __endptr, int __base)

{
  return __strtoull_internal (__nptr, __endptr, __base, 0);
}




extern __inline double
__attribute__ ((__nothrow__)) atof (__const char *__nptr)
{
  return strtod (__nptr, (char **) ((void *)0));
}
extern __inline int
__attribute__ ((__nothrow__)) atoi (__const char *__nptr)
{
  return (int) strtol (__nptr, (char **) ((void *)0), 10);
}
extern __inline long int
__attribute__ ((__nothrow__)) atol (__const char *__nptr)
{
  return strtol (__nptr, (char **) ((void *)0), 10);
}




__extension__ extern __inline long long int
__attribute__ ((__nothrow__)) atoll (__const char *__nptr)
{
  return strtoll (__nptr, (char **) ((void *)0), 10);
}

# 429 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__)) ;


extern long int a64l (__const char *__s)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
# 445 "/usr/include/stdlib.h" 3 4
extern long int random (void) __attribute__ ((__nothrow__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) __attribute__ ((__nothrow__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__));




extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__));







extern double drand48 (void) __attribute__ ((__nothrow__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    unsigned long long int __a;
  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;







extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) __attribute__ ((__nothrow__));




extern void cfree (void *__ptr) __attribute__ ((__nothrow__));



# 1 "/usr/include/alloca.h" 1 3 4
# 25 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 26 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__));






# 613 "/usr/include/stdlib.h" 2 3 4




extern void *valloc (size_t __size) __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;




extern void abort (void) __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));






extern void _Exit (int __status) __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));






extern char *getenv (__const char *__name) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;




extern char *__secure_getenv (__const char *__name)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





extern int putenv (char *__string) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (__const char *__name, __const char *__value, int __replace)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (__const char *__name) __attribute__ ((__nothrow__));






extern int clearenv (void) __attribute__ ((__nothrow__));
# 698 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
# 709 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 719 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 729 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;








extern int system (__const char *__command) ;







extern char *canonicalize_file_name (__const char *__name)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
# 757 "/usr/include/stdlib.h" 3 4
extern char *realpath (__const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__)) ;






typedef int (*__compar_fn_t) (__const void *, __const void *);


typedef __compar_fn_t comparison_fn_t;






extern void *bsearch (__const void *__key, __const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;



extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));



extern int abs (int __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;

# 822 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4, 5)));







extern int mblen (__const char *__s, size_t __n) __attribute__ ((__nothrow__)) ;


extern int mbtowc (wchar_t *__restrict __pwc,
     __const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__)) ;


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__)) ;



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   __const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__));

extern size_t wcstombs (char *__restrict __s,
   __const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__));








extern int rpmatch (__const char *__response) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
# 910 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *__const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (__const char *__key) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) __attribute__ ((__nothrow__));



extern int unlockpt (int __fd) __attribute__ ((__nothrow__));




extern char *ptsname (int __fd) __attribute__ ((__nothrow__)) ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 978 "/usr/include/stdlib.h" 3 4

# 209 "../.././gcc/system.h" 2
# 231 "../.././gcc/system.h"
# 1 "/usr/include/unistd.h" 1 3 4
# 28 "/usr/include/unistd.h" 3 4

# 171 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/bits/posix_opt.h" 1 3 4
# 172 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/bits/environments.h" 1 3 4
# 176 "/usr/include/unistd.h" 2 3 4
# 195 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 196 "/usr/include/unistd.h" 2 3 4
# 236 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 256 "/usr/include/unistd.h" 3 4
extern int access (__const char *__name, int __type) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int euidaccess (__const char *__name, int __type)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int eaccess (__const char *__name, int __type)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, __const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2))) ;
# 299 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __attribute__ ((__nothrow__));
# 310 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     __attribute__ ((__nothrow__));






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, __const void *__buf, size_t __n) ;
# 341 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, __const void *__buf, size_t __n,
         __off_t __offset) ;
# 369 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, __const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__)) ;
# 391 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__));
# 403 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);






extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__));






extern int usleep (__useconds_t __useconds);
# 427 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (__const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__)) ;




extern int lchown (__const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, __const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2))) ;



extern int chdir (__const char *__path) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) __attribute__ ((__nothrow__)) ;
# 469 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__)) ;





extern char *get_current_dir_name (void) __attribute__ ((__nothrow__));






extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) __attribute__ ((__nothrow__)) ;


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__));


extern char **__environ;

extern char **environ;





extern int execve (__const char *__path, char *__const __argv[],
     char *__const __envp[]) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int fexecve (int __fd, char *__const __argv[], char *__const __envp[])
     __attribute__ ((__nothrow__));




extern int execv (__const char *__path, char *__const __argv[])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int execle (__const char *__path, __const char *__arg, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int execl (__const char *__path, __const char *__arg, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int execvp (__const char *__file, char *__const __argv[])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int execlp (__const char *__file, __const char *__arg, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int nice (int __inc) __attribute__ ((__nothrow__)) ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/bits/confname.h" 1 3 4
# 26 "/usr/include/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,


    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS

  };
# 553 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (__const char *__path, int __name)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__));


extern long int sysconf (int __name) __attribute__ ((__nothrow__)) __attribute__ ((__const__));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__));




extern __pid_t getpid (void) __attribute__ ((__nothrow__));


extern __pid_t getppid (void) __attribute__ ((__nothrow__));




extern __pid_t getpgrp (void) __attribute__ ((__nothrow__));
# 589 "/usr/include/unistd.h" 3 4
extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__));

extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__));






extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__));
# 615 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__));
# 632 "/usr/include/unistd.h" 3 4
extern __pid_t setsid (void) __attribute__ ((__nothrow__));



extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__));



extern __uid_t getuid (void) __attribute__ ((__nothrow__));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__));


extern __gid_t getgid (void) __attribute__ ((__nothrow__));


extern __gid_t getegid (void) __attribute__ ((__nothrow__));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__)) ;



extern int group_member (__gid_t __gid) __attribute__ ((__nothrow__));






extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__));




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__));




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__));






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__));




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__));




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__));





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     __attribute__ ((__nothrow__));



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     __attribute__ ((__nothrow__));



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     __attribute__ ((__nothrow__));



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     __attribute__ ((__nothrow__));






extern __pid_t fork (void) __attribute__ ((__nothrow__));






extern __pid_t vfork (void) __attribute__ ((__nothrow__));





extern char *ttyname (int __fd) __attribute__ ((__nothrow__));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) __attribute__ ((__nothrow__));





extern int ttyslot (void) __attribute__ ((__nothrow__));




extern int link (__const char *__from, __const char *__to)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, __const char *__from, int __tofd,
     __const char *__to, int __flags)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (__const char *__from, __const char *__to)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int readlink (__const char *__restrict __path, char *__restrict __buf,
       size_t __len) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (__const char *__from, int __tofd,
        __const char *__to) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3))) ;


extern int readlinkat (int __fd, __const char *__restrict __path,
         char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (__const char *__name) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, __const char *__name, int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));



extern int rmdir (__const char *__path) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__));






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (__const char *__name) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 834 "/usr/include/unistd.h" 3 4
# 1 "../.././gcc/../include/getopt.h" 1 3 4
# 36 "../.././gcc/../include/getopt.h" 3 4
extern char *optarg;
# 50 "../.././gcc/../include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 82 "../.././gcc/../include/getopt.h" 3 4
struct option
{

  const char *name;





  int has_arg;
  int *flag;
  int val;
};
# 113 "../.././gcc/../include/getopt.h" 3 4
extern int getopt (int argc, char *const *argv, const char *shortopts);







extern int getopt_long (int argc, char *const *argv, const char *shortopts,
          const struct option *longopts, int *longind);
extern int getopt_long_only (int argc, char *const *argv,
        const char *shortopts,
               const struct option *longopts, int *longind);


extern int _getopt_internal (int argc, char *const *argv,
        const char *shortopts,
               const struct option *longopts, int *longind,
        int long_only);
# 835 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int sethostname (__const char *__name, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) __attribute__ ((__nothrow__)) ;





extern int getdomainname (char *__name, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (__const char *__name, size_t __len)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) __attribute__ ((__nothrow__));


extern int revoke (__const char *__file) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int acct (__const char *__name) __attribute__ ((__nothrow__));



extern char *getusershell (void) __attribute__ ((__nothrow__));
extern void endusershell (void) __attribute__ ((__nothrow__));
extern void setusershell (void) __attribute__ ((__nothrow__));





extern int daemon (int __nochdir, int __noclose) __attribute__ ((__nothrow__)) ;






extern int chroot (__const char *__path) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (__const char *__prompt) __attribute__ ((__nonnull__ (1)));
# 920 "/usr/include/unistd.h" 3 4
extern int fsync (int __fd);






extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__));




extern int getpagesize (void) __attribute__ ((__nothrow__)) __attribute__ ((__const__));




extern int getdtablesize (void) __attribute__ ((__nothrow__));




extern int truncate (__const char *__file, __off_t __length)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
# 957 "/usr/include/unistd.h" 3 4
extern int truncate64 (__const char *__file, __off64_t __length)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;
# 967 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) __attribute__ ((__nothrow__)) ;
# 977 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) __attribute__ ((__nothrow__)) ;
# 987 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) __attribute__ ((__nothrow__)) ;





extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__));
# 1008 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) __attribute__ ((__nothrow__));
# 1031 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1041 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1062 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes) __attribute__ ((__nothrow__));







extern char *crypt (__const char *__key, __const char *__salt)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern void encrypt (char *__block, int __edflag) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern void swab (__const void *__restrict __from, void *__restrict __to,
    ssize_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));







extern char *ctermid (char *__s) __attribute__ ((__nothrow__));
# 1100 "/usr/include/unistd.h" 3 4

# 232 "../.././gcc/system.h" 2



# 1 "/usr/include/sys/param.h" 1 3 4
# 22 "/usr/include/sys/param.h" 3 4
# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/limits.h" 1 3 4
# 11 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/limits.h" 3 4
# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/limits.h" 1 3 4
# 122 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 145 "/usr/include/limits.h" 3 4
# 1 "/usr/include/bits/posix1_lim.h" 1 3 4
# 153 "/usr/include/bits/posix1_lim.h" 3 4
# 1 "/usr/include/bits/local_lim.h" 1 3 4
# 36 "/usr/include/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 37 "/usr/include/bits/local_lim.h" 2 3 4
# 154 "/usr/include/bits/posix1_lim.h" 2 3 4
# 146 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/posix2_lim.h" 1 3 4
# 150 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/xopen_lim.h" 1 3 4
# 34 "/usr/include/bits/xopen_lim.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 35 "/usr/include/bits/xopen_lim.h" 2 3 4
# 154 "/usr/include/limits.h" 2 3 4
# 123 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/limits.h" 2 3 4
# 8 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/syslimits.h" 2 3 4
# 12 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/limits.h" 2 3 4
# 23 "/usr/include/sys/param.h" 2 3 4

# 1 "/usr/include/linux/param.h" 1 3 4



# 1 "/usr/include/asm/param.h" 1 3 4
# 5 "/usr/include/linux/param.h" 2 3 4
# 25 "/usr/include/sys/param.h" 2 3 4
# 236 "../.././gcc/system.h" 2





# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/limits.h" 1 3 4
# 242 "../.././gcc/system.h" 2



# 1 "../.././gcc/hwint.h" 1
# 246 "../.././gcc/system.h" 2
# 274 "../.././gcc/system.h"
# 1 "/usr/include/sys/time.h" 1 3 4
# 27 "/usr/include/sys/time.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 28 "/usr/include/sys/time.h" 2 3 4

# 1 "/usr/include/bits/time.h" 1 3 4
# 30 "/usr/include/sys/time.h" 2 3 4
# 39 "/usr/include/sys/time.h" 3 4

# 57 "/usr/include/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 73 "/usr/include/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int settimeofday (__const struct timeval *__tv,
    __const struct timezone *__tz)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int adjtime (__const struct timeval *__delta,
      struct timeval *__olddelta) __attribute__ ((__nothrow__));




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };




typedef enum __itimer_which __itimer_which_t;






extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) __attribute__ ((__nothrow__));




extern int setitimer (__itimer_which_t __which,
        __const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) __attribute__ ((__nothrow__));




extern int utimes (__const char *__file, __const struct timeval __tvp[2])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int lutimes (__const char *__file, __const struct timeval __tvp[2])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, __const struct timeval __tvp[2]) __attribute__ ((__nothrow__));






extern int futimesat (int __fd, __const char *__file,
        __const struct timeval __tvp[2]) __attribute__ ((__nothrow__));
# 191 "/usr/include/sys/time.h" 3 4

# 275 "../.././gcc/system.h" 2
# 1 "/usr/include/time.h" 1 3 4
# 31 "/usr/include/time.h" 3 4








# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 40 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/time.h" 1 3 4
# 44 "/usr/include/time.h" 2 3 4
# 132 "/usr/include/time.h" 3 4


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  __const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;
# 181 "/usr/include/time.h" 3 4



extern clock_t clock (void) __attribute__ ((__nothrow__));


extern time_t time (time_t *__timer) __attribute__ ((__nothrow__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__));





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   __const char *__restrict __format,
   __const struct tm *__restrict __tp) __attribute__ ((__nothrow__));





extern char *strptime (__const char *__restrict __s,
         __const char *__restrict __fmt, struct tm *__tp)
     __attribute__ ((__nothrow__));







extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     __const char *__restrict __format,
     __const struct tm *__restrict __tp,
     __locale_t __loc) __attribute__ ((__nothrow__));

extern char *strptime_l (__const char *__restrict __s,
    __const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) __attribute__ ((__nothrow__));






extern struct tm *gmtime (__const time_t *__timer) __attribute__ ((__nothrow__));



extern struct tm *localtime (__const time_t *__timer) __attribute__ ((__nothrow__));





extern struct tm *gmtime_r (__const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__));



extern struct tm *localtime_r (__const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__));





extern char *asctime (__const struct tm *__tp) __attribute__ ((__nothrow__));


extern char *ctime (__const time_t *__timer) __attribute__ ((__nothrow__));







extern char *asctime_r (__const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__));


extern char *ctime_r (__const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__));




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__));



extern int daylight;
extern long int timezone;





extern int stime (__const time_t *__when) __attribute__ ((__nothrow__));
# 312 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__));


extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__));


extern int dysize (int __year) __attribute__ ((__nothrow__)) __attribute__ ((__const__));
# 327 "/usr/include/time.h" 3 4
extern int nanosleep (__const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__));


extern int clock_settime (clockid_t __clock_id, __const struct timespec *__tp)
     __attribute__ ((__nothrow__));






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       __const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__));


extern int timer_settime (timer_t __timerid, int __flags,
     __const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__));


extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__));
# 389 "/usr/include/time.h" 3 4
extern int getdate_err;
# 398 "/usr/include/time.h" 3 4
extern struct tm *getdate (__const char *__string);
# 412 "/usr/include/time.h" 3 4
extern int getdate_r (__const char *__restrict __string,
        struct tm *__restrict __resbufp);



# 276 "../.././gcc/system.h" 2
# 287 "../.././gcc/system.h"
# 1 "/usr/include/fcntl.h" 1 3 4
# 30 "/usr/include/fcntl.h" 3 4




# 1 "/usr/include/bits/fcntl.h" 1 3 4
# 138 "/usr/include/bits/fcntl.h" 3 4
struct flock
  {
    short int l_type;
    short int l_whence;

    __off_t l_start;
    __off_t l_len;




    __pid_t l_pid;
  };


struct flock64
  {
    short int l_type;
    short int l_whence;
    __off64_t l_start;
    __off64_t l_len;
    __pid_t l_pid;
  };
# 183 "/usr/include/bits/fcntl.h" 3 4



extern ssize_t readahead (int __fd, __off64_t __offset, size_t __count)
    __attribute__ ((__nothrow__));


# 35 "/usr/include/fcntl.h" 2 3 4



# 1 "/usr/include/sys/stat.h" 1 3 4
# 103 "/usr/include/sys/stat.h" 3 4


# 1 "/usr/include/bits/stat.h" 1 3 4
# 36 "/usr/include/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;
    unsigned short int __pad1;

    __ino_t st_ino;



    __mode_t st_mode;
    __nlink_t st_nlink;
    __uid_t st_uid;
    __gid_t st_gid;
    __dev_t st_rdev;
    unsigned short int __pad2;

    __off_t st_size;



    __blksize_t st_blksize;


    __blkcnt_t st_blocks;
# 70 "/usr/include/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 85 "/usr/include/bits/stat.h" 3 4
    unsigned long int __unused4;
    unsigned long int __unused5;



  };


struct stat64
  {
    __dev_t st_dev;
    unsigned int __pad1;

    __ino_t __st_ino;
    __mode_t st_mode;
    __nlink_t st_nlink;
    __uid_t st_uid;
    __gid_t st_gid;
    __dev_t st_rdev;
    unsigned int __pad2;
    __off64_t st_size;
    __blksize_t st_blksize;

    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 127 "/usr/include/bits/stat.h" 3 4
    __ino64_t st_ino;
  };
# 106 "/usr/include/sys/stat.h" 2 3 4
# 207 "/usr/include/sys/stat.h" 3 4
extern int stat (__const char *__restrict __file,
   struct stat *__restrict __buf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int fstat (int __fd, struct stat *__buf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));
# 226 "/usr/include/sys/stat.h" 3 4
extern int stat64 (__const char *__restrict __file,
     struct stat64 *__restrict __buf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
extern int fstat64 (int __fd, struct stat64 *__buf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));







extern int fstatat (int __fd, __const char *__restrict __file,
      struct stat *__restrict __buf, int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));
# 250 "/usr/include/sys/stat.h" 3 4
extern int fstatat64 (int __fd, __const char *__restrict __file,
        struct stat64 *__restrict __buf, int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));






extern int lstat (__const char *__restrict __file,
    struct stat *__restrict __buf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 272 "/usr/include/sys/stat.h" 3 4
extern int lstat64 (__const char *__restrict __file,
      struct stat64 *__restrict __buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));





extern int chmod (__const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int lchmod (__const char *__file, __mode_t __mode)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) __attribute__ ((__nothrow__));





extern int fchmodat (int __fd, __const char *__file, __mode_t mode, int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2))) ;






extern __mode_t umask (__mode_t __mask) __attribute__ ((__nothrow__));




extern __mode_t getumask (void) __attribute__ ((__nothrow__));



extern int mkdir (__const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, __const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));






extern int mknod (__const char *__path, __mode_t __mode, __dev_t __dev)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int mknodat (int __fd, __const char *__path, __mode_t __mode,
      __dev_t __dev) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));




extern int mkfifo (__const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, __const char *__path, __mode_t __mode)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));
# 380 "/usr/include/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, __const char *__filename,
      struct stat *__stat_buf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, __const char *__filename,
       struct stat *__stat_buf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, __const char *__filename,
         struct stat *__stat_buf, int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4)));
# 413 "/usr/include/sys/stat.h" 3 4
extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3)));
extern int __xstat64 (int __ver, __const char *__filename,
        struct stat64 *__stat_buf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat64 (int __ver, __const char *__filename,
         struct stat64 *__stat_buf) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat64 (int __ver, int __fildes, __const char *__filename,
    struct stat64 *__stat_buf, int __flag)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 4)));

extern int __xmknod (int __ver, __const char *__path, __mode_t __mode,
       __dev_t *__dev) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, __const char *__path,
         __mode_t __mode, __dev_t *__dev)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (3, 5)));




extern __inline__ int
__attribute__ ((__nothrow__)) stat (__const char *__path, struct stat *__statbuf)
{
  return __xstat (3, __path, __statbuf);
}


extern __inline__ int
__attribute__ ((__nothrow__)) lstat (__const char *__path, struct stat *__statbuf)
{
  return __lxstat (3, __path, __statbuf);
}


extern __inline__ int
__attribute__ ((__nothrow__)) fstat (int __fd, struct stat *__statbuf)
{
  return __fxstat (3, __fd, __statbuf);
}


extern __inline__ int
__attribute__ ((__nothrow__)) fstatat (int __fd, __const char *__filename, struct stat *__statbuf, int __flag)

{
  return __fxstatat (3, __fd, __filename, __statbuf, __flag);
}



extern __inline__ int
__attribute__ ((__nothrow__)) mknod (__const char *__path, __mode_t __mode, __dev_t __dev)
{
  return __xmknod (1, __path, __mode, &__dev);
}



extern __inline__ int
__attribute__ ((__nothrow__)) mknodat (int __fd, __const char *__path, __mode_t __mode, __dev_t __dev)

{
  return __xmknodat (1, __fd, __path, __mode, &__dev);
}





extern __inline__ int
__attribute__ ((__nothrow__)) stat64 (__const char *__path, struct stat64 *__statbuf)
{
  return __xstat64 (3, __path, __statbuf);
}


extern __inline__ int
__attribute__ ((__nothrow__)) lstat64 (__const char *__path, struct stat64 *__statbuf)
{
  return __lxstat64 (3, __path, __statbuf);
}


extern __inline__ int
__attribute__ ((__nothrow__)) fstat64 (int __fd, struct stat64 *__statbuf)
{
  return __fxstat64 (3, __fd, __statbuf);
}


extern __inline__ int
__attribute__ ((__nothrow__)) fstatat64 (int __fd, __const char *__filename, struct stat64 *__statbuf, int __flag)

{
  return __fxstatat64 (3, __fd, __filename, __statbuf, __flag);
}







# 39 "/usr/include/fcntl.h" 2 3 4
# 76 "/usr/include/fcntl.h" 3 4
extern int fcntl (int __fd, int __cmd, ...);
# 85 "/usr/include/fcntl.h" 3 4
extern int open (__const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 95 "/usr/include/fcntl.h" 3 4
extern int open64 (__const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 109 "/usr/include/fcntl.h" 3 4
extern int openat (int __fd, __const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 120 "/usr/include/fcntl.h" 3 4
extern int openat64 (int __fd, __const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 130 "/usr/include/fcntl.h" 3 4
extern int creat (__const char *__file, __mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/fcntl.h" 3 4
extern int creat64 (__const char *__file, __mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise (int __fd, __off_t __offset, __off_t __len,
     int __advise) __attribute__ ((__nothrow__));
# 188 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise64 (int __fd, __off64_t __offset, __off64_t __len,
       int __advise) __attribute__ ((__nothrow__));
# 198 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate (int __fd, __off_t __offset, __off_t __len);
# 209 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate64 (int __fd, __off64_t __offset, __off64_t __len);




# 288 "../.././gcc/system.h" 2
# 325 "../.././gcc/system.h"
# 1 "/usr/include/sys/wait.h" 1 3 4
# 29 "/usr/include/sys/wait.h" 3 4


# 1 "/usr/include/signal.h" 1 3 4
# 31 "/usr/include/signal.h" 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 103 "/usr/include/bits/sigset.h" 3 4
extern int __sigismember (__const __sigset_t *, int);
extern int __sigaddset (__sigset_t *, int);
extern int __sigdelset (__sigset_t *, int);
# 117 "/usr/include/bits/sigset.h" 3 4
extern __inline int __sigismember (__const __sigset_t *__set, int __sig) { unsigned long int __mask = (((unsigned long int) 1) << (((__sig) - 1) % (8 * sizeof (unsigned long int)))); unsigned long int __word = (((__sig) - 1) / (8 * sizeof (unsigned long int))); return (__set->__val[__word] & __mask) ? 1 : 0; }
extern __inline int __sigaddset ( __sigset_t *__set, int __sig) { unsigned long int __mask = (((unsigned long int) 1) << (((__sig) - 1) % (8 * sizeof (unsigned long int)))); unsigned long int __word = (((__sig) - 1) / (8 * sizeof (unsigned long int))); return ((__set->__val[__word] |= __mask), 0); }
extern __inline int __sigdelset ( __sigset_t *__set, int __sig) { unsigned long int __mask = (((unsigned long int) 1) << (((__sig) - 1) % (8 * sizeof (unsigned long int)))); unsigned long int __word = (((__sig) - 1) / (8 * sizeof (unsigned long int))); return ((__set->__val[__word] &= ~__mask), 0); }
# 34 "/usr/include/signal.h" 2 3 4







typedef __sig_atomic_t sig_atomic_t;

# 58 "/usr/include/signal.h" 3 4
# 1 "/usr/include/bits/signum.h" 1 3 4
# 59 "/usr/include/signal.h" 2 3 4
# 75 "/usr/include/signal.h" 3 4
typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__));

extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__));







extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__));
# 104 "/usr/include/signal.h" 3 4





extern __sighandler_t bsd_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__));






extern int kill (__pid_t __pid, int __sig) __attribute__ ((__nothrow__));






extern int killpg (__pid_t __pgrp, int __sig) __attribute__ ((__nothrow__));




extern int raise (int __sig) __attribute__ ((__nothrow__));




extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__));
extern int gsignal (int __sig) __attribute__ ((__nothrow__));




extern void psignal (int __sig, __const char *__s);
# 153 "/usr/include/signal.h" 3 4
extern int __sigpause (int __sig_or_mask, int __is_sig);
# 162 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
# 181 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) __attribute__ ((__nothrow__)) __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) __attribute__ ((__nothrow__)) __attribute__ ((__deprecated__));


extern int siggetmask (void) __attribute__ ((__nothrow__)) __attribute__ ((__deprecated__));
# 196 "/usr/include/signal.h" 3 4
typedef __sighandler_t sighandler_t;




typedef __sighandler_t sig_t;
# 212 "/usr/include/signal.h" 3 4
# 1 "/usr/include/bits/siginfo.h" 1 3 4
# 25 "/usr/include/bits/siginfo.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 26 "/usr/include/bits/siginfo.h" 2 3 4







typedef union sigval
  {
    int sival_int;
    void *sival_ptr;
  } sigval_t;
# 51 "/usr/include/bits/siginfo.h" 3 4
typedef struct siginfo
  {
    int si_signo;
    int si_errno;

    int si_code;

    union
      {
 int _pad[((128 / sizeof (int)) - 3)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;
      } _sifields;
  } siginfo_t;
# 129 "/usr/include/bits/siginfo.h" 3 4
enum
{
  SI_ASYNCNL = -60,

  SI_TKILL = -6,

  SI_SIGIO,

  SI_ASYNCIO,

  SI_MESGQ,

  SI_TIMER,

  SI_QUEUE,

  SI_USER,

  SI_KERNEL = 0x80

};



enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR

};


enum
{
  TRAP_BRKPT = 1,

  TRAP_TRACE

};


enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};
# 273 "/usr/include/bits/siginfo.h" 3 4
typedef struct sigevent
  {
    sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 3)];



 __pid_t _tid;

 struct
   {
     void (*_function) (sigval_t);
     void *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;






enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4

};
# 213 "/usr/include/signal.h" 2 3 4



extern int sigemptyset (sigset_t *__set) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int sigismember (__const sigset_t *__set, int __signo)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int sigisemptyset (__const sigset_t *__set) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int sigandset (sigset_t *__set, __const sigset_t *__left,
        __const sigset_t *__right) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern int sigorset (sigset_t *__set, __const sigset_t *__left,
       __const sigset_t *__right) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2, 3)));




# 1 "/usr/include/bits/sigaction.h" 1 3 4
# 25 "/usr/include/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 247 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, __const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) __attribute__ ((__nothrow__));






extern int sigsuspend (__const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, __const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) __attribute__ ((__nothrow__));


extern int sigpending (sigset_t *__set) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int sigwait (__const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));






extern int sigwaitinfo (__const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (__const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    __const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, __const union sigval __val)
     __attribute__ ((__nothrow__));
# 304 "/usr/include/signal.h" 3 4
extern __const char *__const _sys_siglist[65];
extern __const char *__const sys_siglist[65];


struct sigvec
  {
    __sighandler_t sv_handler;
    int sv_mask;

    int sv_flags;

  };
# 328 "/usr/include/signal.h" 3 4
extern int sigvec (int __sig, __const struct sigvec *__vec,
     struct sigvec *__ovec) __attribute__ ((__nothrow__));



# 1 "/usr/include/bits/sigcontext.h" 1 3 4
# 28 "/usr/include/bits/sigcontext.h" 3 4
# 1 "/usr/include/asm/sigcontext.h" 1 3 4
# 18 "/usr/include/asm/sigcontext.h" 3 4
struct _fpreg {
 unsigned short significand[4];
 unsigned short exponent;
};

struct _fpxreg {
 unsigned short significand[4];
 unsigned short exponent;
 unsigned short padding[3];
};

struct _xmmreg {
 unsigned long element[4];
};

struct _fpstate {

 unsigned long cw;
 unsigned long sw;
 unsigned long tag;
 unsigned long ipoff;
 unsigned long cssel;
 unsigned long dataoff;
 unsigned long datasel;
 struct _fpreg _st[8];
 unsigned short status;
 unsigned short magic;


 unsigned long _fxsr_env[6];
 unsigned long mxcsr;
 unsigned long reserved;
 struct _fpxreg _fxsr_st[8];
 struct _xmmreg _xmm[8];
 unsigned long padding[56];
};



struct sigcontext {
 unsigned short gs, __gsh;
 unsigned short fs, __fsh;
 unsigned short es, __esh;
 unsigned short ds, __dsh;
 unsigned long edi;
 unsigned long esi;
 unsigned long ebp;
 unsigned long esp;
 unsigned long ebx;
 unsigned long edx;
 unsigned long ecx;
 unsigned long eax;
 unsigned long trapno;
 unsigned long err;
 unsigned long eip;
 unsigned short cs, __csh;
 unsigned long eflags;
 unsigned long esp_at_signal;
 unsigned short ss, __ssh;
 struct _fpstate * fpstate;
 unsigned long oldmask;
 unsigned long cr2;
};
# 29 "/usr/include/bits/sigcontext.h" 2 3 4
# 334 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) __attribute__ ((__nothrow__));
# 346 "/usr/include/signal.h" 3 4
extern int siginterrupt (int __sig, int __interrupt) __attribute__ ((__nothrow__));

# 1 "/usr/include/bits/sigstack.h" 1 3 4
# 26 "/usr/include/bits/sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };



enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 50 "/usr/include/bits/sigstack.h" 3 4
typedef struct sigaltstack
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 349 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/sys/ucontext.h" 1 3 4
# 23 "/usr/include/sys/ucontext.h" 3 4
# 1 "/usr/include/signal.h" 1 3 4
# 24 "/usr/include/sys/ucontext.h" 2 3 4



# 1 "/usr/include/bits/sigcontext.h" 1 3 4
# 28 "/usr/include/sys/ucontext.h" 2 3 4



typedef int greg_t;





typedef greg_t gregset_t[19];



enum
{
  REG_GS = 0,

  REG_FS,

  REG_ES,

  REG_DS,

  REG_EDI,

  REG_ESI,

  REG_EBP,

  REG_ESP,

  REG_EBX,

  REG_EDX,

  REG_ECX,

  REG_EAX,

  REG_TRAPNO,

  REG_ERR,

  REG_EIP,

  REG_CS,

  REG_EFL,

  REG_UESP,

  REG_SS

};



struct _libc_fpreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
};

struct _libc_fpstate
{
  unsigned long int cw;
  unsigned long int sw;
  unsigned long int tag;
  unsigned long int ipoff;
  unsigned long int cssel;
  unsigned long int dataoff;
  unsigned long int datasel;
  struct _libc_fpreg _st[8];
  unsigned long int status;
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;


    fpregset_t fpregs;
    unsigned long int oldmask;
    unsigned long int cr2;
  } mcontext_t;


typedef struct ucontext
  {
    unsigned long int uc_flags;
    struct ucontext *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    __sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
  } ucontext_t;
# 352 "/usr/include/signal.h" 2 3 4





extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     __attribute__ ((__nothrow__)) __attribute__ ((__deprecated__));



extern int sigaltstack (__const struct sigaltstack *__restrict __ss,
   struct sigaltstack *__restrict __oss) __attribute__ ((__nothrow__));







extern int sighold (int __sig) __attribute__ ((__nothrow__));


extern int sigrelse (int __sig) __attribute__ ((__nothrow__));


extern int sigignore (int __sig) __attribute__ ((__nothrow__));


extern __sighandler_t sigset (int __sig, __sighandler_t __disp) __attribute__ ((__nothrow__));






# 1 "/usr/include/bits/sigthread.h" 1 3 4
# 31 "/usr/include/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       __const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)__attribute__ ((__nothrow__));


extern int pthread_kill (pthread_t __threadid, int __signo) __attribute__ ((__nothrow__));
# 388 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) __attribute__ ((__nothrow__));

extern int __libc_current_sigrtmax (void) __attribute__ ((__nothrow__));




# 32 "/usr/include/sys/wait.h" 2 3 4
# 1 "/usr/include/sys/resource.h" 1 3 4
# 25 "/usr/include/sys/resource.h" 3 4
# 1 "/usr/include/bits/resource.h" 1 3 4
# 33 "/usr/include/bits/resource.h" 3 4
enum __rlimit_resource
{

  RLIMIT_CPU = 0,



  RLIMIT_FSIZE = 1,



  RLIMIT_DATA = 2,



  RLIMIT_STACK = 3,



  RLIMIT_CORE = 4,






  __RLIMIT_RSS = 5,



  RLIMIT_NOFILE = 7,
  __RLIMIT_OFILE = RLIMIT_NOFILE,




  RLIMIT_AS = 9,



  __RLIMIT_NPROC = 6,



  __RLIMIT_MEMLOCK = 8,



  __RLIMIT_LOCKS = 10,



  __RLIMIT_SIGPENDING = 11,



  __RLIMIT_MSGQUEUE = 12,





  __RLIMIT_NICE = 13,




  __RLIMIT_RTPRIO = 14,


  __RLIMIT_NLIMITS = 15,
  __RLIM_NLIMITS = __RLIMIT_NLIMITS


};
# 127 "/usr/include/bits/resource.h" 3 4
typedef __rlim_t rlim_t;




typedef __rlim64_t rlim64_t;


struct rlimit
  {

    rlim_t rlim_cur;

    rlim_t rlim_max;
  };


struct rlimit64
  {

    rlim64_t rlim_cur;

    rlim64_t rlim_max;
 };



enum __rusage_who
{

  RUSAGE_SELF = 0,



  RUSAGE_CHILDREN = -1

};


# 1 "/usr/include/bits/time.h" 1 3 4
# 167 "/usr/include/bits/resource.h" 2 3 4


struct rusage
  {

    struct timeval ru_utime;

    struct timeval ru_stime;

    long int ru_maxrss;


    long int ru_ixrss;

    long int ru_idrss;

    long int ru_isrss;


    long int ru_minflt;

    long int ru_majflt;

    long int ru_nswap;


    long int ru_inblock;

    long int ru_oublock;

    long int ru_msgsnd;

    long int ru_msgrcv;

    long int ru_nsignals;



    long int ru_nvcsw;


    long int ru_nivcsw;
  };







enum __priority_which
{
  PRIO_PROCESS = 0,

  PRIO_PGRP = 1,

  PRIO_USER = 2

};
# 26 "/usr/include/sys/resource.h" 2 3 4













typedef enum __rlimit_resource __rlimit_resource_t;
typedef enum __rusage_who __rusage_who_t;
typedef enum __priority_which __priority_which_t;
# 51 "/usr/include/sys/resource.h" 3 4
extern int getrlimit (__rlimit_resource_t __resource,
        struct rlimit *__rlimits) __attribute__ ((__nothrow__));
# 62 "/usr/include/sys/resource.h" 3 4
extern int getrlimit64 (__rlimit_resource_t __resource,
   struct rlimit64 *__rlimits) __attribute__ ((__nothrow__));






extern int setrlimit (__rlimit_resource_t __resource,
        __const struct rlimit *__rlimits) __attribute__ ((__nothrow__));
# 82 "/usr/include/sys/resource.h" 3 4
extern int setrlimit64 (__rlimit_resource_t __resource,
   __const struct rlimit64 *__rlimits) __attribute__ ((__nothrow__));




extern int getrusage (__rusage_who_t __who, struct rusage *__usage) __attribute__ ((__nothrow__));





extern int getpriority (__priority_which_t __which, id_t __who) __attribute__ ((__nothrow__));



extern int setpriority (__priority_which_t __which, id_t __who, int __prio)
     __attribute__ ((__nothrow__));


# 33 "/usr/include/sys/wait.h" 2 3 4
# 102 "/usr/include/sys/wait.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 116 "/usr/include/sys/wait.h" 3 4
extern __pid_t wait (__WAIT_STATUS __stat_loc);
# 139 "/usr/include/sys/wait.h" 3 4
extern __pid_t waitpid (__pid_t __pid, int *__stat_loc, int __options);



# 1 "/usr/include/bits/siginfo.h" 1 3 4
# 25 "/usr/include/bits/siginfo.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 26 "/usr/include/bits/siginfo.h" 2 3 4
# 144 "/usr/include/sys/wait.h" 2 3 4
# 155 "/usr/include/sys/wait.h" 3 4
extern int waitid (idtype_t __idtype, __id_t __id, siginfo_t *__infop,
     int __options);





struct rusage;






extern __pid_t wait3 (__WAIT_STATUS __stat_loc, int __options,
        struct rusage * __usage) __attribute__ ((__nothrow__));





struct rusage;


extern __pid_t wait4 (__pid_t __pid, __WAIT_STATUS __stat_loc, int __options,
        struct rusage *__usage) __attribute__ ((__nothrow__));




# 326 "../.././gcc/system.h" 2
# 376 "../.././gcc/system.h"
extern int getopt (int, char * const *, const char *);
# 396 "../.././gcc/system.h"
# 1 "/usr/include/malloc.h" 1 3 4
# 24 "/usr/include/malloc.h" 3 4
# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 25 "/usr/include/malloc.h" 2 3 4
# 46 "/usr/include/malloc.h" 3 4



extern void *malloc (size_t __size) __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;


extern void *calloc (size_t __nmemb, size_t __size) __attribute__ ((__nothrow__))
       __attribute__ ((__malloc__)) ;



extern void *realloc (void *__ptr, size_t __size) __attribute__ ((__nothrow__))
       __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));


extern void free (void *__ptr) __attribute__ ((__nothrow__));


extern void cfree (void *__ptr) __attribute__ ((__nothrow__));


extern void *memalign (size_t __alignment, size_t __size) __attribute__ ((__nothrow__))
       __attribute__ ((__malloc__)) ;


extern void *valloc (size_t __size) __attribute__ ((__nothrow__))
       __attribute__ ((__malloc__)) ;



extern void * pvalloc (size_t __size) __attribute__ ((__nothrow__))
       __attribute__ ((__malloc__)) ;



extern void *(*__morecore) (ptrdiff_t __size);


extern void *__default_morecore (ptrdiff_t __size) __attribute__ ((__nothrow__))
       __attribute__ ((__malloc__));



struct mallinfo {
  int arena;
  int ordblks;
  int smblks;
  int hblks;
  int hblkhd;
  int usmblks;
  int fsmblks;
  int uordblks;
  int fordblks;
  int keepcost;
};


extern struct mallinfo mallinfo (void) __attribute__ ((__nothrow__));
# 128 "/usr/include/malloc.h" 3 4
extern int mallopt (int __param, int __val) __attribute__ ((__nothrow__));



extern int malloc_trim (size_t __pad) __attribute__ ((__nothrow__));



extern size_t malloc_usable_size (void *__ptr) __attribute__ ((__nothrow__));


extern void malloc_stats (void) __attribute__ ((__nothrow__));


extern void *malloc_get_state (void) __attribute__ ((__nothrow__));



extern int malloc_set_state (void *__ptr) __attribute__ ((__nothrow__));




extern void (*__malloc_initialize_hook) (void);

extern void (*__free_hook) (void *__ptr, __const void *);

extern void *(*__malloc_hook) (size_t __size, __const void *);

extern void *(*__realloc_hook) (void *__ptr, size_t __size, __const void *);

extern void *(*__memalign_hook) (size_t __alignment, size_t __size, __const void *);


extern void (*__after_morecore_hook) (void);


extern void __malloc_check_init (void) __attribute__ ((__nothrow__));



# 397 "../.././gcc/system.h" 2
# 520 "../.././gcc/system.h"
# 1 "../.././gcc/../include/filenames.h" 1
# 521 "../.././gcc/system.h" 2
# 531 "../.././gcc/system.h"
# 1 "../.././gcc/../include/libiberty.h" 1
# 42 "../.././gcc/../include/libiberty.h"
# 1 "../.././gcc/../include/ansidecl.h" 1
# 43 "../.././gcc/../include/libiberty.h" 2


# 1 "/usr/lib/gcc/i386-redhat-linux/4.1.0/include/stddef.h" 1 3 4
# 46 "../.././gcc/../include/libiberty.h" 2
# 55 "../.././gcc/../include/libiberty.h"
extern void unlock_stream (FILE *);





extern void unlock_std_streams (void);





extern FILE *fopen_unlocked (const char *, const char *);
extern FILE *fdopen_unlocked (int, const char *);
extern FILE *freopen_unlocked (const char *, const char *, FILE *);




extern char **buildargv (const char *) __attribute__ ((__malloc__));



extern void freeargv (char **);




extern char **dupargv (char **) __attribute__ ((__malloc__));



extern void expandargv (int *, char ***);
# 112 "../.././gcc/../include/libiberty.h"
extern const char *lbasename (const char *);



extern char *lrealpath (const char *);





extern char *concat (const char *, ...) __attribute__ ((__malloc__)) __attribute__ ((__sentinel__));
# 131 "../.././gcc/../include/libiberty.h"
extern char *reconcat (char *, const char *, ...) __attribute__ ((__malloc__)) __attribute__ ((__sentinel__));





extern unsigned long concat_length (const char *, ...) __attribute__ ((__sentinel__));






extern char *concat_copy (char *, const char *, ...) __attribute__ ((__sentinel__));






extern char *concat_copy2 (const char *, ...) __attribute__ ((__sentinel__));



extern char *libiberty_concat_ptr;
# 167 "../.././gcc/../include/libiberty.h"
extern int fdmatch (int fd1, int fd2);
# 179 "../.././gcc/../include/libiberty.h"
extern char * getpwd (void);
# 192 "../.././gcc/../include/libiberty.h"
extern long get_run_time (void);




extern char *make_relative_prefix (const char *, const char *,
                                   const char *) __attribute__ ((__malloc__));



extern char *choose_temp_base (void) __attribute__ ((__malloc__));



extern char *make_temp_file (const char *) __attribute__ ((__malloc__));



extern int unlink_if_ordinary (const char *);



extern const char *spaces (int count);




extern int errno_max (void);




extern const char *strerrno (int);



extern int strtoerrno (const char *);



extern char *xstrerror (int);




extern int signo_max (void);
# 249 "../.././gcc/../include/libiberty.h"
extern const char *strsigno (int);



extern int strtosigno (const char *);



extern int xatexit (void (*fn) (void));



extern void xexit (int status) __attribute__ ((__noreturn__));



extern void xmalloc_set_program_name (const char *);


extern void xmalloc_failed (size_t) __attribute__ ((__noreturn__));





extern void *xmalloc (size_t) __attribute__ ((__malloc__));





extern void *xrealloc (void *, size_t);




extern void *xcalloc (size_t, size_t) __attribute__ ((__malloc__));



extern char *xstrdup (const char *) __attribute__ ((__malloc__));



extern char *xstrndup (const char *, size_t) __attribute__ ((__malloc__));



extern void *xmemdup (const void *, size_t, size_t) __attribute__ ((__malloc__));


extern double physmem_total (void);
extern double physmem_available (void);
# 338 "../.././gcc/../include/libiberty.h"
extern const unsigned char _hex_value[256];
extern void hex_init (void);
# 364 "../.././gcc/../include/libiberty.h"
extern struct pex_obj *pex_init (int flags, const char *pname,
     const char *tempbase);
# 446 "../.././gcc/../include/libiberty.h"
extern const char *pex_run (struct pex_obj *obj, int flags,
       const char *executable, char * const *argv,
       const char *outname, const char *errname,
       int *err);







extern FILE *pex_read_output (struct pex_obj *, int binary);





extern int pex_get_status (struct pex_obj *, int count, int *vector);






struct pex_time
{
  unsigned long user_seconds;
  unsigned long user_microseconds;
  unsigned long system_seconds;
  unsigned long system_microseconds;
};

extern int pex_get_times (struct pex_obj *, int count,
     struct pex_time *vector);



extern void pex_free (struct pex_obj *);
# 496 "../.././gcc/../include/libiberty.h"
extern const char *pex_one (int flags, const char *executable,
       char * const *argv, const char *pname,
       const char *outname, const char *errname,
       int *status, int *err);
# 515 "../.././gcc/../include/libiberty.h"
extern int pexecute (const char *, char * const *, const char *,
                     const char *, char **, char **, int);



extern int pwait (int, int *, int);
# 559 "../.././gcc/../include/libiberty.h"
extern void *C_alloca (size_t) __attribute__ ((__malloc__));
# 532 "../.././gcc/system.h" 2
# 569 "../.././gcc/system.h"
extern void fancy_abort (const char *, int, const char *) __attribute__ ((__noreturn__));
# 647 "../.././gcc/system.h"
        




        



        
# 688 "../.././gcc/system.h"
        
# 734 "../.././gcc/system.h"
        
# 750 "../.././gcc/system.h"
        
# 760 "../.././gcc/system.h"
        
# 6 "insn-emit.c" 2
# 1 "../.././gcc/coretypes.h" 1
# 40 "../.././gcc/coretypes.h"
struct rtx_def;
typedef struct rtx_def *rtx;
struct rtvec_def;
typedef struct rtvec_def *rtvec;
union tree_node;
typedef union tree_node *tree;





struct cpp_reader;




enum tls_model {
  TLS_MODEL_NONE,
  TLS_MODEL_GLOBAL_DYNAMIC,
  TLS_MODEL_LOCAL_DYNAMIC,
  TLS_MODEL_INITIAL_EXEC,
  TLS_MODEL_LOCAL_EXEC
};
# 7 "insn-emit.c" 2
# 1 "tm.h" 1



# 1 "options.h" 1





extern int target_flags;

extern int warn_abi;
extern int warn_aggregate_return;
extern int warn_assign_intercept;
extern int warn_attributes;
extern int warn_bad_function_cast;
extern int warn_cxx_compat;
extern int warn_cast_align;
extern int warn_cast_qual;
extern int warn_char_subscripts;
extern int warn_conversion;
extern int warn_ctor_dtor_privacy;
extern int warn_declaration_after_statement;
extern int warn_deprecated;
extern int warn_deprecated_decl;
extern int warn_disabled_optimization;
extern int warn_div_by_zero;
extern int warn_ecpp;
extern int warnings_are_errors;
extern int flag_fatal_errors;
extern int warn_float_equal;
extern int warn_format_extra_args;
extern int warn_format_nonliteral;
extern int warn_format_security;
extern int warn_format_y2k;
extern int warn_format_zero_length;
extern int mesg_implicit_function_declaration;
extern int warn_implicit_int;
extern int warn_init_self;
extern int warn_inline;
extern int warn_int_to_pointer_cast;
extern int warn_invalid_offsetof;
extern int warn_long_long;
extern int warn_missing_braces;
extern int warn_missing_declarations;
extern int warn_missing_field_initializers;
extern int warn_missing_format_attribute;
extern int warn_missing_noreturn;
extern int warn_missing_prototypes;
extern int warn_nested_externs;
extern int warn_nontemplate_friend;
extern int warn_nonvdtor;
extern int warn_nonnull;
extern int warn_old_style_cast;
extern int warn_old_style_definition;
extern int warn_overloaded_virtual;
extern int warn_packed;
extern int warn_padded;
extern int warn_parentheses;
extern int warn_pmf2ptr;
extern int warn_pointer_arith;
extern int warn_pointer_sign;
extern int warn_pointer_to_int_cast;
extern int warn_pragmas;
extern int warn_protocol;
extern int warn_redundant_decls;
extern int warn_reorder;
extern int warn_return_type;
extern int warn_selector;
extern int warn_sequence_point;
extern int warn_shadow;
extern int warn_sign_compare;
extern int warn_sign_promo;
extern int warn_stack_protect;
extern int warn_strict_prototypes;
extern int warn_strict_selector_match;
extern int warn_switch;
extern int warn_switch_default;
extern int warn_switch_enum;
extern int warn_synth;
extern int warn_system_headers;
extern int warn_traditional;
extern int warn_undeclared_selector;
extern int warn_uninitialized;
extern int warn_notreached;
extern int warn_unsafe_loop_optimizations;
extern int warn_unused_function;
extern int warn_unused_label;
extern int warn_unused_parameter;
extern int warn_unused_value;
extern int warn_unused_variable;
extern int warn_register_var;
extern int flag_pic;
extern int flag_pie;
extern int flag_abi_version;
extern int align_functions;
extern int align_jumps;
extern int align_labels;
extern int align_loops;
extern int flag_argument_noalias;
extern int flag_argument_noalias;
extern int flag_argument_noalias;
extern int flag_asynchronous_unwind_tables;
extern int flag_bounds_check;
extern int flag_branch_on_count_reg;
extern int flag_branch_probabilities;
extern int flag_branch_target_load_optimize;
extern int flag_branch_target_load_optimize2;
extern int flag_btr_bb_exclusive;
extern int flag_caller_saves;
extern int flag_no_common;
extern int flag_cprop_registers;
extern int flag_crossjumping;
extern int flag_cse_follow_jumps;
extern int flag_cse_skip_blocks;
extern int flag_cx_limited_range;
extern int flag_data_sections;
extern int flag_defer_pop;
extern int flag_delayed_branch;
extern int flag_delete_null_pointer_checks;
extern int flag_dump_unnumbered;
extern int flag_early_inlining;
extern int flag_eliminate_dwarf2_dups;
extern int flag_debug_only_used_symbols;
extern int flag_eliminate_unused_debug_types;
extern int flag_exceptions;
extern int flag_expensive_optimizations;
extern int flag_finite_math_only;
extern int flag_float_store;
extern int flag_force_addr;
extern int flag_force_mem;
extern int flag_friend_injection;
extern int flag_no_function_cse;
extern int flag_function_sections;
extern int flag_gcse;
extern int flag_gcse_after_reload;
extern int flag_gcse_las;
extern int flag_gcse_lm;
extern int flag_gcse_sm;
extern int flag_guess_branch_prob;
extern int flag_no_ident;
extern int flag_if_conversion;
extern int flag_if_conversion2;
extern int flag_inhibit_size_directive;
extern int flag_no_inline;
extern int flag_inline_functions;
extern int flag_inline_functions_called_once;
extern int flag_instrument_function_entry_exit;
extern int flag_ipa_cp;
extern int flag_ipa_pure_const;
extern int flag_ipa_reference;
extern int flag_ipa_type_escape;
extern int flag_ivopts;
extern int flag_jump_tables;
extern int flag_keep_inline_functions;
extern int flag_keep_static_consts;
extern int flag_leading_underscore;
extern int flag_loop_optimize;
extern int flag_loop_optimize2;
extern int flag_errno_math;
extern int mem_report;
extern int flag_merge_constants;
extern int flag_merge_constants;
extern int flag_modulo_sched;
extern int flag_move_loop_invariants;
extern int flag_mudflap;
extern int flag_mudflap_ignore_reads;
extern int flag_mudflap_threads;
extern int flag_non_call_exceptions;
extern int flag_objc_call_cxx_cdtors;
extern int flag_objc_direct_dispatch;
extern int flag_objc_exceptions;
extern int flag_objc_gc;
extern int flag_objc_sjlj_exceptions;
extern int flag_omit_frame_pointer;
extern int flag_regmove;
extern int flag_optimize_sibling_calls;
extern int flag_pack_struct;
extern int flag_pcc_struct_return;
extern int flag_peel_loops;
extern int flag_no_peephole;
extern int flag_peephole2;
extern int flag_pic;
extern int flag_pie;
extern int flag_prefetch_loop_arrays;
extern int profile_flag;
extern int profile_arc_flag;
extern int flag_profile_values;
extern int flag_pcc_struct_return;
extern int flag_regmove;
extern int flag_rename_registers;
extern int flag_reorder_blocks;
extern int flag_reorder_blocks_and_partition;
extern int flag_reorder_functions;
extern int flag_rerun_cse_after_loop;
extern int flag_rerun_loop_opt;
extern int flag_resched_modulo_sched;
extern int flag_rounding_math;
extern int flag_schedule_interblock;
extern int flag_schedule_speculative;
extern int flag_schedule_speculative_load;
extern int flag_schedule_speculative_load_dangerous;
extern int flag_sched_stalled_insns;
extern int flag_sched_stalled_insns_dep;
extern int flag_sched2_use_superblocks;
extern int flag_sched2_use_traces;
extern int flag_schedule_insns;
extern int flag_schedule_insns_after_reload;
extern int flag_shared_data;
extern int flag_show_column;
extern int flag_signaling_nans;
extern int flag_single_precision_constant;
extern int flag_split_ivs_in_unroller;
extern int flag_stack_check;
extern int flag_stack_protect;
extern int flag_stack_protect;
extern int flag_strength_reduce;
extern int flag_strict_aliasing;
extern int flag_syntax_only;
extern int flag_test_coverage;
extern int flag_thread_jumps;
extern int time_report;
extern int flag_tracer;
extern int flag_trapping_math;
extern int flag_trapv;
extern int flag_tree_ccp;
extern int flag_tree_ch;
extern int flag_tree_combine_temps;
extern int flag_tree_copy_prop;
extern int flag_tree_copyrename;
extern int flag_tree_dce;
extern int flag_tree_dom;
extern int flag_tree_dse;
extern int flag_tree_fre;
extern int flag_tree_loop_im;
extern int flag_tree_loop_ivcanon;
extern int flag_tree_loop_linear;
extern int flag_tree_loop_optimize;
extern int flag_tree_live_range_split;
extern int flag_tree_pre;
extern int flag_tree_salias;
extern int flag_tree_sink;
extern int flag_tree_sra;
extern int flag_tree_store_ccp;
extern int flag_tree_store_copy_prop;
extern int flag_tree_ter;
extern int flag_tree_vect_loop_version;
extern int flag_tree_vectorize;
extern int flag_tree_vrp;
extern int flag_unit_at_a_time;
extern int flag_unroll_all_loops;
extern int flag_unroll_loops;
extern int flag_unsafe_loop_optimizations;
extern int flag_unsafe_math_optimizations;
extern int flag_unswitch_loops;
extern int flag_unwind_tables;
extern int flag_var_tracking;
extern int flag_variable_expansion_in_unroller;
extern int flag_verbose_asm;
extern int flag_value_profile_transformations;
extern int flag_web;
extern int flag_whole_program;
extern int flag_wrapv;
extern int flag_zero_initialized_in_bss;
extern const char *ix86_align_funcs_string;
extern const char *ix86_align_jumps_string;
extern const char *ix86_align_loops_string;
extern const char *ix86_arch_string;
extern const char *ix86_asm_string;
extern const char *ix86_branch_cost_string;
extern const char *ix86_cmodel_string;
extern int TARGET_DEBUG_ADDR;
extern int TARGET_DEBUG_ARG;
extern const char *ix86_fpmath_string;
extern const char *ix86_section_threshold_string;
extern const char *ix86_preferred_stack_boundary_string;
extern const char *ix86_regparm_string;
extern const char *ix86_tls_dialect_string;
extern const char *ix86_tune_string;
extern int profile_flag;
extern int pedantic;
extern int quiet_flag;
extern int version_flag;
extern int inhibit_warnings;
# 344 "options.h"
enum opt_code
{
  OPT__help,
  OPT__output_pch_,
  OPT__param,
  OPT__target_help,
  OPT__version,
  OPT_A,
  OPT_C,
  OPT_CC,
  OPT_D,
  OPT_E,
  OPT_F,
  OPT_G,
  OPT_H,
  OPT_I,
  OPT_M,
  OPT_MD,
  OPT_MF,
  OPT_MG,
  OPT_MM,
  OPT_MMD,
  OPT_MP,
  OPT_MQ,
  OPT_MT,
  OPT_O,
  OPT_Os,
  OPT_P,
  OPT_U,
  OPT_W,
  OPT_Wabi,
  OPT_Waggregate_return,
  OPT_Wall,
  OPT_Wassign_intercept,
  OPT_Wattributes,
  OPT_Wbad_function_cast,
  OPT_Wc___compat,
  OPT_Wcast_align,
  OPT_Wcast_qual,
  OPT_Wchar_subscripts,
  OPT_Wcomment,
  OPT_Wcomments,
  OPT_Wconversion,
  OPT_Wctor_dtor_privacy,
  OPT_Wdeclaration_after_statement,
  OPT_Wdeprecated,
  OPT_Wdeprecated_declarations,
  OPT_Wdisabled_optimization,
  OPT_Wdiv_by_zero,
  OPT_Weffc__,
  OPT_Wendif_labels,
  OPT_Werror,
  OPT_Werror_implicit_function_declaration,
  OPT_Wextra,
  OPT_Wfatal_errors,
  OPT_Wfloat_equal,
  OPT_Wformat,
  OPT_Wformat_extra_args,
  OPT_Wformat_nonliteral,
  OPT_Wformat_security,
  OPT_Wformat_y2k,
  OPT_Wformat_zero_length,
  OPT_Wformat_,
  OPT_Wimplicit,
  OPT_Wimplicit_function_declaration,
  OPT_Wimplicit_int,
  OPT_Wimport,
  OPT_Winit_self,
  OPT_Winline,
  OPT_Wint_to_pointer_cast,
  OPT_Winvalid_offsetof,
  OPT_Winvalid_pch,
  OPT_Wlarger_than_,
  OPT_Wlong_long,
  OPT_Wmain,
  OPT_Wmissing_braces,
  OPT_Wmissing_declarations,
  OPT_Wmissing_field_initializers,
  OPT_Wmissing_format_attribute,
  OPT_Wmissing_include_dirs,
  OPT_Wmissing_noreturn,
  OPT_Wmissing_prototypes,
  OPT_Wmultichar,
  OPT_Wnested_externs,
  OPT_Wnon_template_friend,
  OPT_Wnon_virtual_dtor,
  OPT_Wnonnull,
  OPT_Wnormalized_,
  OPT_Wold_style_cast,
  OPT_Wold_style_definition,
  OPT_Woverloaded_virtual,
  OPT_Wpacked,
  OPT_Wpadded,
  OPT_Wparentheses,
  OPT_Wpmf_conversions,
  OPT_Wpointer_arith,
  OPT_Wpointer_sign,
  OPT_Wpointer_to_int_cast,
  OPT_Wpragmas,
  OPT_Wprotocol,
  OPT_Wredundant_decls,
  OPT_Wreorder,
  OPT_Wreturn_type,
  OPT_Wselector,
  OPT_Wsequence_point,
  OPT_Wshadow,
  OPT_Wsign_compare,
  OPT_Wsign_promo,
  OPT_Wstack_protector,
  OPT_Wstrict_aliasing,
  OPT_Wstrict_aliasing_,
  OPT_Wstrict_null_sentinel,
  OPT_Wstrict_prototypes,
  OPT_Wstrict_selector_match,
  OPT_Wswitch,
  OPT_Wswitch_default,
  OPT_Wswitch_enum,
  OPT_Wsynth,
  OPT_Wsystem_headers,
  OPT_Wtraditional,
  OPT_Wtrigraphs,
  OPT_Wundeclared_selector,
  OPT_Wundef,
  OPT_Wuninitialized,
  OPT_Wunknown_pragmas,
  OPT_Wunreachable_code,
  OPT_Wunsafe_loop_optimizations,
  OPT_Wunused,
  OPT_Wunused_function,
  OPT_Wunused_label,
  OPT_Wunused_macros,
  OPT_Wunused_parameter,
  OPT_Wunused_value,
  OPT_Wunused_variable,
  OPT_Wvariadic_macros,
  OPT_Wvolatile_register_var,
  OPT_Wwrite_strings,
  OPT_ansi,
  OPT_aux_info,
  OPT_aux_info_,
  OPT_auxbase,
  OPT_auxbase_strip,
  OPT_d,
  OPT_dumpbase,
  OPT_fPIC,
  OPT_fPIE,
  OPT_fabi_version_,
  OPT_faccess_control,
  OPT_falign_functions,
  OPT_falign_functions_,
  OPT_falign_jumps,
  OPT_falign_jumps_,
  OPT_falign_labels,
  OPT_falign_labels_,
  OPT_falign_loops,
  OPT_falign_loops_,
  OPT_fall_virtual,
  OPT_falt_external_templates,
  OPT_fargument_alias,
  OPT_fargument_noalias,
  OPT_fargument_noalias_global,
  OPT_fasm,
  OPT_fasynchronous_unwind_tables,
  OPT_fbounds_check,
  OPT_fbranch_count_reg,
  OPT_fbranch_probabilities,
  OPT_fbranch_target_load_optimize,
  OPT_fbranch_target_load_optimize2,
  OPT_fbtr_bb_exclusive,
  OPT_fbuiltin,
  OPT_fbuiltin_,
  OPT_fcall_saved_,
  OPT_fcall_used_,
  OPT_fcaller_saves,
  OPT_fcheck_new,
  OPT_fcommon,
  OPT_fcond_mismatch,
  OPT_fconserve_space,
  OPT_fconst_strings,
  OPT_fconstant_string_class_,
  OPT_fcprop_registers,
  OPT_fcrossjumping,
  OPT_fcse_follow_jumps,
  OPT_fcse_skip_blocks,
  OPT_fcx_limited_range,
  OPT_fdata_sections,
  OPT_fdefault_inline,
  OPT_fdefer_pop,
  OPT_fdelayed_branch,
  OPT_fdelete_null_pointer_checks,
  OPT_fdiagnostics_show_location_,
  OPT_fdiagnostics_show_option,
  OPT_fdollars_in_identifiers,
  OPT_fdump_,
  OPT_fdump_unnumbered,
  OPT_fearly_inlining,
  OPT_felide_constructors,
  OPT_feliminate_dwarf2_dups,
  OPT_feliminate_unused_debug_symbols,
  OPT_feliminate_unused_debug_types,
  OPT_fenforce_eh_specs,
  OPT_fenum_int_equiv,
  OPT_fexceptions,
  OPT_fexec_charset_,
  OPT_fexpensive_optimizations,
  OPT_fextended_identifiers,
  OPT_fexternal_templates,
  OPT_ffast_math,
  OPT_ffinite_math_only,
  OPT_ffixed_,
  OPT_ffixed_form,
  OPT_ffixed_line_length_,
  OPT_ffixed_line_length_none,
  OPT_ffloat_store,
  OPT_ffor_scope,
  OPT_fforce_addr,
  OPT_fforce_mem,
  OPT_ffreestanding,
  OPT_ffriend_injection,
  OPT_ffunction_cse,
  OPT_ffunction_sections,
  OPT_fgcse,
  OPT_fgcse_after_reload,
  OPT_fgcse_las,
  OPT_fgcse_lm,
  OPT_fgcse_sm,
  OPT_fgnu_keywords,
  OPT_fgnu_runtime,
  OPT_fguess_branch_probability,
  OPT_fguiding_decls,
  OPT_fhandle_exceptions,
  OPT_fhonor_std,
  OPT_fhosted,
  OPT_fhuge_objects,
  OPT_fident,
  OPT_fif_conversion,
  OPT_fif_conversion2,
  OPT_fimplement_inlines,
  OPT_fimplicit_inline_templates,
  OPT_fimplicit_templates,
  OPT_finhibit_size_directive,
  OPT_finline,
  OPT_finline_functions,
  OPT_finline_functions_called_once,
  OPT_finline_limit_,
  OPT_finline_limit_eq,
  OPT_finput_charset_,
  OPT_finstrument_functions,
  OPT_fipa_cp,
  OPT_fipa_pure_const,
  OPT_fipa_reference,
  OPT_fipa_type_escape,
  OPT_fivopts,
  OPT_fjump_tables,
  OPT_fkeep_inline_functions,
  OPT_fkeep_static_consts,
  OPT_flabels_ok,
  OPT_fleading_underscore,
  OPT_floop_optimize,
  OPT_floop_optimize2,
  OPT_fmath_errno,
  OPT_fmem_report,
  OPT_fmerge_all_constants,
  OPT_fmerge_constants,
  OPT_fmessage_length_,
  OPT_fmodulo_sched,
  OPT_fmove_loop_invariants,
  OPT_fms_extensions,
  OPT_fmudflap,
  OPT_fmudflapir,
  OPT_fmudflapth,
  OPT_fname_mangling_version_,
  OPT_fnew_abi,
  OPT_fnext_runtime,
  OPT_fnil_receivers,
  OPT_fnon_call_exceptions,
  OPT_fnonansi_builtins,
  OPT_fnonnull_objects,
  OPT_fobjc_call_cxx_cdtors,
  OPT_fobjc_direct_dispatch,
  OPT_fobjc_exceptions,
  OPT_fobjc_gc,
  OPT_fobjc_sjlj_exceptions,
  OPT_fomit_frame_pointer,
  OPT_foperator_names,
  OPT_foptimize_register_move,
  OPT_foptimize_sibling_calls,
  OPT_foptional_diags,
  OPT_fpack_struct,
  OPT_fpack_struct_,
  OPT_fpcc_struct_return,
  OPT_fpch_deps,
  OPT_fpch_preprocess,
  OPT_fpeel_loops,
  OPT_fpeephole,
  OPT_fpeephole2,
  OPT_fpermissive,
  OPT_fpic,
  OPT_fpie,
  OPT_fprefetch_loop_arrays,
  OPT_fpreprocessed,
  OPT_fprofile,
  OPT_fprofile_arcs,
  OPT_fprofile_generate,
  OPT_fprofile_use,
  OPT_fprofile_values,
  OPT_frandom_seed,
  OPT_frandom_seed_,
  OPT_freg_struct_return,
  OPT_fregmove,
  OPT_frename_registers,
  OPT_freorder_blocks,
  OPT_freorder_blocks_and_partition,
  OPT_freorder_functions,
  OPT_freplace_objc_classes,
  OPT_frepo,
  OPT_frerun_cse_after_loop,
  OPT_frerun_loop_opt,
  OPT_freschedule_modulo_scheduled_loops,
  OPT_frounding_math,
  OPT_frtti,
  OPT_fsched_interblock,
  OPT_fsched_spec,
  OPT_fsched_spec_load,
  OPT_fsched_spec_load_dangerous,
  OPT_fsched_stalled_insns,
  OPT_fsched_stalled_insns_dep,
  OPT_fsched_stalled_insns_dep_,
  OPT_fsched_stalled_insns_,
  OPT_fsched_verbose_,
  OPT_fsched2_use_superblocks,
  OPT_fsched2_use_traces,
  OPT_fschedule_insns,
  OPT_fschedule_insns2,
  OPT_fshared_data,
  OPT_fshort_double,
  OPT_fshort_enums,
  OPT_fshort_wchar,
  OPT_fshow_column,
  OPT_fsignaling_nans,
  OPT_fsigned_bitfields,
  OPT_fsigned_char,
  OPT_fsingle_precision_constant,
  OPT_fsplit_ivs_in_unroller,
  OPT_fsquangle,
  OPT_fstack_check,
  OPT_fstack_limit,
  OPT_fstack_limit_register_,
  OPT_fstack_limit_symbol_,
  OPT_fstack_protector,
  OPT_fstack_protector_all,
  OPT_fstats,
  OPT_fstrength_reduce,
  OPT_fstrict_aliasing,
  OPT_fstrict_prototype,
  OPT_fsyntax_only,
  OPT_ftabstop_,
  OPT_ftemplate_depth_,
  OPT_ftest_coverage,
  OPT_fthis_is_variable,
  OPT_fthread_jumps,
  OPT_fthreadsafe_statics,
  OPT_ftime_report,
  OPT_ftls_model_,
  OPT_ftracer,
  OPT_ftrapping_math,
  OPT_ftrapv,
  OPT_ftree_ccp,
  OPT_ftree_ch,
  OPT_ftree_combine_temps,
  OPT_ftree_copy_prop,
  OPT_ftree_copyrename,
  OPT_ftree_dce,
  OPT_ftree_dominator_opts,
  OPT_ftree_dse,
  OPT_ftree_fre,
  OPT_ftree_loop_im,
  OPT_ftree_loop_ivcanon,
  OPT_ftree_loop_linear,
  OPT_ftree_loop_optimize,
  OPT_ftree_lrs,
  OPT_ftree_pre,
  OPT_ftree_salias,
  OPT_ftree_sink,
  OPT_ftree_sra,
  OPT_ftree_store_ccp,
  OPT_ftree_store_copy_prop,
  OPT_ftree_ter,
  OPT_ftree_vect_loop_version,
  OPT_ftree_vectorize,
  OPT_ftree_vectorizer_verbose_,
  OPT_ftree_vrp,
  OPT_funit_at_a_time,
  OPT_funroll_all_loops,
  OPT_funroll_loops,
  OPT_funsafe_loop_optimizations,
  OPT_funsafe_math_optimizations,
  OPT_funsigned_bitfields,
  OPT_funsigned_char,
  OPT_funswitch_loops,
  OPT_funwind_tables,
  OPT_fuse_cxa_atexit,
  OPT_fvar_tracking,
  OPT_fvariable_expansion_in_unroller,
  OPT_fverbose_asm,
  OPT_fvisibility_inlines_hidden,
  OPT_fvisibility_,
  OPT_fvpt,
  OPT_fvtable_gc,
  OPT_fvtable_thunks,
  OPT_fweak,
  OPT_fweb,
  OPT_fwhole_program,
  OPT_fwide_exec_charset_,
  OPT_fworking_directory,
  OPT_fwrapv,
  OPT_fxref,
  OPT_fzero_initialized_in_bss,
  OPT_fzero_link,
  OPT_g,
  OPT_gcoff,
  OPT_gdwarf_2,
  OPT_gen_decls,
  OPT_ggdb,
  OPT_gstabs,
  OPT_gstabs_,
  OPT_gvms,
  OPT_gxcoff,
  OPT_gxcoff_,
  OPT_idirafter,
  OPT_imacros,
  OPT_include,
  OPT_iprefix,
  OPT_iquote,
  OPT_isysroot,
  OPT_isystem,
  OPT_iwithprefix,
  OPT_iwithprefixbefore,
  OPT_lang_asm,
  OPT_lang_fortran,
  OPT_lang_objc,
  OPT_m128bit_long_double,
  OPT_m32,
  OPT_m386,
  OPT_m3dnow,
  OPT_m486,
  OPT_m64,
  OPT_m80387,
  OPT_m96bit_long_double,
  OPT_maccumulate_outgoing_args,
  OPT_malign_double,
  OPT_malign_functions_,
  OPT_malign_jumps_,
  OPT_malign_loops_,
  OPT_malign_stringops,
  OPT_march_,
  OPT_masm_,
  OPT_mbranch_cost_,
  OPT_mcmodel_,
  OPT_mdebug_addr,
  OPT_mdebug_arg,
  OPT_mfancy_math_387,
  OPT_mfp_ret_in_387,
  OPT_mfpmath_,
  OPT_mhard_float,
  OPT_mieee_fp,
  OPT_minline_all_stringops,
  OPT_mintel_syntax,
  OPT_mlarge_data_threshold_,
  OPT_mmmx,
  OPT_mms_bitfields,
  OPT_mno_align_stringops,
  OPT_mno_fancy_math_387,
  OPT_mno_push_args,
  OPT_mno_red_zone,
  OPT_momit_leaf_frame_pointer,
  OPT_mpentium,
  OPT_mpentiumpro,
  OPT_mpreferred_stack_boundary_,
  OPT_mpush_args,
  OPT_mred_zone,
  OPT_mregparm_,
  OPT_mrtd,
  OPT_msoft_float,
  OPT_msse,
  OPT_msse2,
  OPT_msse3,
  OPT_msseregparm,
  OPT_mstack_arg_probe,
  OPT_msvr3_shlib,
  OPT_mtls_dialect_,
  OPT_mtls_direct_seg_refs,
  OPT_mtune_,
  OPT_nostdinc,
  OPT_nostdinc__,
  OPT_o,
  OPT_p,
  OPT_pedantic,
  OPT_pedantic_errors,
  OPT_print_objc_runtime_info,
  OPT_print_pch_checksum,
  OPT_quiet,
  OPT_remap,
  OPT_std_c__98,
  OPT_std_c89,
  OPT_std_c99,
  OPT_std_c9x,
  OPT_std_gnu__98,
  OPT_std_gnu89,
  OPT_std_gnu99,
  OPT_std_gnu9x,
  OPT_std_iso9899_1990,
  OPT_std_iso9899_199409,
  OPT_std_iso9899_1999,
  OPT_std_iso9899_199x,
  OPT_traditional_cpp,
  OPT_trigraphs,
  OPT_undef,
  OPT_v,
  OPT_version,
  OPT_w,
  N_OPTS
};
# 5 "tm.h" 2
# 1 "../.././gcc/config/i386/i386.h" 1
# 39 "../.././gcc/config/i386/i386.h"
struct processor_costs {
  const int add;
  const int lea;
  const int shift_var;
  const int shift_const;
  const int mult_init[5];

  const int mult_bit;
  const int divide[5];

  int movsx;
  int movzx;
  const int large_insn;
  const int move_ratio;

  const int movzbl_load;
  const int int_load[3];


  const int int_store[3];

  const int fp_move;
  const int fp_load[3];

  const int fp_store[3];

  const int mmx_move;
  const int mmx_load[2];

  const int mmx_store[2];

  const int sse_move;
  const int sse_load[3];

  const int sse_store[3];

  const int mmxsse_to_integer;

  const int prefetch_block;
  const int simultaneous_prefetches;

  const int branch_cost;
  const int fadd;
  const int fmul;
  const int fdiv;
  const int fabs;
  const int fchs;
  const int fsqrt;
};

extern const struct processor_costs *ix86_cost;
# 145 "../.././gcc/config/i386/i386.h"
extern const int x86_use_leave, x86_push_memory, x86_zero_extend_with_and;
extern const int x86_use_bit_test, x86_cmove, x86_fisttp, x86_deep_branch;
extern const int x86_branch_hints, x86_unroll_strlen;
extern const int x86_double_with_add, x86_partial_reg_stall, x86_movx;
extern const int x86_use_himode_fiop, x86_use_simode_fiop;
extern const int x86_use_mov0, x86_use_cltd, x86_read_modify_write;
extern const int x86_read_modify, x86_split_long_moves;
extern const int x86_promote_QImode, x86_single_stringop, x86_fast_prefix;
extern const int x86_himode_math, x86_qimode_math, x86_promote_qi_regs;
extern const int x86_promote_hi_regs, x86_integer_DFmode_moves;
extern const int x86_add_esp_4, x86_add_esp_8, x86_sub_esp_4, x86_sub_esp_8;
extern const int x86_partial_reg_dependency, x86_memory_mismatch_stall;
extern const int x86_accumulate_outgoing_args, x86_prologue_using_move;
extern const int x86_epilogue_using_move, x86_decompose_lea;
extern const int x86_arch_always_fancy_math_387, x86_shift1;
extern const int x86_sse_partial_reg_dependency, x86_sse_split_regs;
extern const int x86_sse_typeless_stores, x86_sse_load0_by_pxor;
extern const int x86_use_ffreep;
extern const int x86_inter_unit_moves, x86_schedule;
extern const int x86_use_bt;
extern const int x86_cmpxchg, x86_xadd;
extern int x86_prefetch_sse;
# 1024 "../.././gcc/config/i386/i386.h"
enum reg_class
{
  NO_REGS,
  AREG, DREG, CREG, BREG, SIREG, DIREG,
  AD_REGS,
  Q_REGS,
  NON_Q_REGS,
  INDEX_REGS,
  LEGACY_REGS,
  GENERAL_REGS,
  FP_TOP_REG, FP_SECOND_REG,
  FLOAT_REGS,
  SSE_REGS,
  MMX_REGS,
  FP_TOP_SSE_REGS,
  FP_SECOND_SSE_REGS,
  FLOAT_SSE_REGS,
  FLOAT_INT_REGS,
  INT_SSE_REGS,
  FLOAT_INT_SSE_REGS,
  ALL_REGS, LIM_REG_CLASSES
};
# 1465 "../.././gcc/config/i386/i386.h"
typedef struct ix86_args {
  int words;
  int nregs;
  int regno;
  int fastcall;
  int sse_words;
  int sse_nregs;
  int warn_sse;
  int warn_mmx;
  int sse_regno;
  int mmx_words;
  int mmx_nregs;
  int mmx_regno;
  int maybe_vaarg;
  int float_in_sse;

} CUMULATIVE_ARGS;
# 1994 "../.././gcc/config/i386/i386.h"
extern int const dbx_register_map[53];
extern int const dbx64_register_map[53];
extern int const svr4_dbx_register_map[53];
# 2108 "../.././gcc/config/i386/i386.h"
enum processor_type
{
  PROCESSOR_I386,
  PROCESSOR_I486,
  PROCESSOR_PENTIUM,
  PROCESSOR_PENTIUMPRO,
  PROCESSOR_K6,
  PROCESSOR_ATHLON,
  PROCESSOR_PENTIUM4,
  PROCESSOR_K8,
  PROCESSOR_NOCONA,
  PROCESSOR_max
};

extern enum processor_type ix86_tune;
extern enum processor_type ix86_arch;

enum fpmath_unit
{
  FPMATH_387 = 1,
  FPMATH_SSE = 2
};

extern enum fpmath_unit ix86_fpmath;

enum tls_dialect
{
  TLS_DIALECT_GNU,
  TLS_DIALECT_SUN
};

extern enum tls_dialect ix86_tls_dialect;

enum cmodel {
  CM_32,
  CM_SMALL,
  CM_KERNEL,
  CM_MEDIUM,
  CM_LARGE,
  CM_SMALL_PIC,
  CM_MEDIUM_PIC
};

extern enum cmodel ix86_cmodel;






enum asm_dialect {
  ASM_ATT,
  ASM_INTEL
};

extern enum asm_dialect ix86_asm_dialect;
extern unsigned int ix86_preferred_stack_boundary;
extern int ix86_branch_cost, ix86_section_threshold;


extern enum reg_class const regclass_map[53];

extern rtx ix86_compare_op0;
extern rtx ix86_compare_op1;
extern rtx ix86_compare_emitted;
# 2189 "../.././gcc/config/i386/i386.h"
enum ix86_entity
{
  I387_TRUNC = 0,
  I387_FLOOR,
  I387_CEIL,
  I387_MASK_PM,
  MAX_386_ENTITIES
};

enum ix86_stack_slot
{
  SLOT_TEMP = 0,
  SLOT_CW_STORED,
  SLOT_CW_TRUNC,
  SLOT_CW_FLOOR,
  SLOT_CW_CEIL,
  SLOT_CW_MASK_PM,
  MAX_386_STACK_LOCALS
};
# 2263 "../.././gcc/config/i386/i386.h"
struct machine_function
{
  struct stack_local_entry *stack_locals;
  const char *some_ld_name;
  rtx force_align_arg_pointer;
  int save_varrargs_registers;
  int accesses_prev_frame;
  int optimize_mode_switching[MAX_386_ENTITIES];


  int use_fast_prologue_epilogue;


  int use_fast_prologue_epilogue_nregs;
};
# 6 "tm.h" 2
# 1 "../.././gcc/config/i386/unix.h" 1
# 7 "tm.h" 2
# 1 "../.././gcc/config/i386/att.h" 1
# 8 "tm.h" 2
# 1 "../.././gcc/config/dbxelf.h" 1
# 9 "tm.h" 2
# 1 "../.././gcc/config/elfos.h" 1
# 10 "tm.h" 2
# 1 "../.././gcc/config/svr4.h" 1
# 11 "tm.h" 2
# 1 "../.././gcc/config/linux.h" 1
# 12 "tm.h" 2
# 1 "../.././gcc/config/i386/linux.h" 1
# 13 "tm.h" 2
# 1 "../.././gcc/defaults.h" 1
# 14 "tm.h" 2


# 1 "insn-constants.h" 1
# 17 "tm.h" 2
# 1 "insn-flags.h" 1
# 1095 "insn-flags.h"
static __inline__ rtx gen_cmpdi_ccno_1_rex64 (rtx, rtx);
static __inline__ rtx
gen_cmpdi_ccno_1_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_cmpdi_1_insn_rex64 (rtx, rtx);
static __inline__ rtx
gen_cmpdi_1_insn_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_cmpqi_ext_3_insn (rtx, rtx);
static __inline__ rtx gen_cmpqi_ext_3_insn_rex64 (rtx, rtx);
static __inline__ rtx
gen_cmpqi_ext_3_insn_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_x86_fnstsw_1 (rtx);
extern rtx gen_x86_sahf_1 (rtx);
extern rtx gen_popsi1 (rtx);
extern rtx gen_movsi_insv_1 (rtx, rtx);
static __inline__ rtx gen_movdi_insv_1_rex64 (rtx, rtx);
static __inline__ rtx
gen_movdi_insv_1_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_popdi1 (rtx);
static __inline__ rtx
gen_popdi1(rtx a __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_swapxf (rtx, rtx);
extern rtx gen_zero_extendhisi2_and (rtx, rtx);
extern rtx gen_zero_extendsidi2_32 (rtx, rtx);
static __inline__ rtx gen_zero_extendsidi2_rex64 (rtx, rtx);
static __inline__ rtx
gen_zero_extendsidi2_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_zero_extendhidi2 (rtx, rtx);
static __inline__ rtx
gen_zero_extendhidi2(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_zero_extendqidi2 (rtx, rtx);
static __inline__ rtx
gen_zero_extendqidi2(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_extendsidi2_rex64 (rtx, rtx);
static __inline__ rtx
gen_extendsidi2_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_extendhidi2 (rtx, rtx);
static __inline__ rtx
gen_extendhidi2(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_extendqidi2 (rtx, rtx);
static __inline__ rtx
gen_extendqidi2(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_extendhisi2 (rtx, rtx);
extern rtx gen_extendqihi2 (rtx, rtx);
extern rtx gen_extendqisi2 (rtx, rtx);
extern rtx gen_truncxfsf2_i387_noop (rtx, rtx);
extern rtx gen_truncxfdf2_i387_noop (rtx, rtx);
static __inline__ rtx gen_fix_truncsfdi_sse (rtx, rtx);
static __inline__ rtx
gen_fix_truncsfdi_sse(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_fix_truncdfdi_sse (rtx, rtx);
static __inline__ rtx
gen_fix_truncdfdi_sse(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fix_truncsfsi_sse (rtx, rtx);
extern rtx gen_fix_truncdfsi_sse (rtx, rtx);
extern rtx gen_fix_trunchi_fisttp_i387_1 (rtx, rtx);
extern rtx gen_fix_truncsi_fisttp_i387_1 (rtx, rtx);
extern rtx gen_fix_truncdi_fisttp_i387_1 (rtx, rtx);
extern rtx gen_fix_trunchi_i387_fisttp (rtx, rtx);
extern rtx gen_fix_truncsi_i387_fisttp (rtx, rtx);
extern rtx gen_fix_truncdi_i387_fisttp (rtx, rtx);
extern rtx gen_fix_trunchi_i387_fisttp_with_temp (rtx, rtx, rtx);
extern rtx gen_fix_truncsi_i387_fisttp_with_temp (rtx, rtx, rtx);
extern rtx gen_fix_truncdi_i387_fisttp_with_temp (rtx, rtx, rtx);
extern rtx gen_fix_truncdi_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncdi_i387_with_temp (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fix_trunchi_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncsi_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_fix_trunchi_i387_with_temp (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncsi_i387_with_temp (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_x86_fnstcw_1 (rtx);
extern rtx gen_x86_fldcw_1 (rtx);
extern rtx gen_floathixf2 (rtx, rtx);
extern rtx gen_floatsixf2 (rtx, rtx);
extern rtx gen_floatdixf2 (rtx, rtx);
static __inline__ rtx gen_adddi3_carry_rex64 (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_adddi3_carry_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_addqi3_carry (rtx, rtx, rtx, rtx);
extern rtx gen_addhi3_carry (rtx, rtx, rtx, rtx);
extern rtx gen_addsi3_carry (rtx, rtx, rtx, rtx);
extern rtx gen_addqi3_cc (rtx, rtx, rtx);
static __inline__ rtx gen_addsi_1_zext (rtx, rtx, rtx);
static __inline__ rtx
gen_addsi_1_zext(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_addqi_ext_1 (rtx, rtx, rtx);
static __inline__ rtx gen_subdi3_carry_rex64 (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_subdi3_carry_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_subqi3_carry (rtx, rtx, rtx, rtx);
extern rtx gen_subhi3_carry (rtx, rtx, rtx, rtx);
extern rtx gen_subsi3_carry (rtx, rtx, rtx, rtx);
static __inline__ rtx gen_subsi3_carry_zext (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_subsi3_carry_zext(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_divqi3 (rtx, rtx, rtx);
extern rtx gen_udivqi3 (rtx, rtx, rtx);
extern rtx gen_divmodhi4 (rtx, rtx, rtx, rtx);
static __inline__ rtx gen_udivmoddi4 (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_udivmoddi4(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_udivmodsi4 (rtx, rtx, rtx, rtx);
extern rtx gen_testsi_1 (rtx, rtx);
extern rtx gen_andqi_ext_0 (rtx, rtx, rtx);
extern rtx gen_iorqi_ext_0 (rtx, rtx, rtx);
extern rtx gen_xorqi_ext_0 (rtx, rtx, rtx);
extern rtx gen_copysignsf3_const (rtx, rtx, rtx, rtx);
extern rtx gen_copysignsf3_var (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_copysigndf3_const (rtx, rtx, rtx, rtx);
extern rtx gen_copysigndf3_var (rtx, rtx, rtx, rtx, rtx, rtx);
static __inline__ rtx gen_ashlti3_1 (rtx, rtx, rtx);
static __inline__ rtx
gen_ashlti3_1(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_x86_64_shld (rtx, rtx, rtx);
static __inline__ rtx
gen_x86_64_shld(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_x86_shld_1 (rtx, rtx, rtx);
static __inline__ rtx gen_ashrti3_1 (rtx, rtx, rtx);
static __inline__ rtx
gen_ashrti3_1(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_x86_64_shrd (rtx, rtx, rtx);
static __inline__ rtx
gen_x86_64_shrd(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_x86_shrd_1 (rtx, rtx, rtx);
extern rtx gen_ashrsi3_31 (rtx, rtx, rtx);
static __inline__ rtx gen_lshrti3_1 (rtx, rtx, rtx);
static __inline__ rtx
gen_lshrti3_1(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ix86_rotldi3 (rtx, rtx, rtx);
extern rtx gen_ix86_rotrdi3 (rtx, rtx, rtx);
extern rtx gen_jump (rtx);
extern rtx gen_blockage (rtx);
extern rtx gen_return_internal (void);
extern rtx gen_return_internal_long (void);
extern rtx gen_return_pop_internal (rtx);
extern rtx gen_return_indirect_internal (rtx);
extern rtx gen_nop (void);
extern rtx gen_align (rtx);
extern rtx gen_set_got (rtx);
static __inline__ rtx gen_set_got_rex64 (rtx);
static __inline__ rtx
gen_set_got_rex64(rtx a __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_eh_return_si (rtx);
static __inline__ rtx gen_eh_return_di (rtx);
static __inline__ rtx
gen_eh_return_di(rtx a __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_leave (void);
static __inline__ rtx gen_leave_rex64 (void);
static __inline__ rtx
gen_leave_rex64(void)
{
  return 0;
}
extern rtx gen_ctzsi2 (rtx, rtx);
static __inline__ rtx gen_ctzdi2 (rtx, rtx);
static __inline__ rtx
gen_ctzdi2(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sqrtxf2 (rtx, rtx);
extern rtx gen_fpremxf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fprem1xf4 (rtx, rtx, rtx, rtx);
extern rtx gen_sincosdf3 (rtx, rtx, rtx);
extern rtx gen_sincossf3 (rtx, rtx, rtx);
extern rtx gen_sincosxf3 (rtx, rtx, rtx);
extern rtx gen_atan2df3_1 (rtx, rtx, rtx);
extern rtx gen_atan2sf3_1 (rtx, rtx, rtx);
extern rtx gen_atan2xf3_1 (rtx, rtx, rtx);
extern rtx gen_fyl2x_xf3 (rtx, rtx, rtx);
extern rtx gen_fyl2xp1_xf3 (rtx, rtx, rtx);
extern rtx gen_frndintxf2 (rtx, rtx);
extern rtx gen_fistdi2 (rtx, rtx);
extern rtx gen_fistdi2_with_temp (rtx, rtx, rtx);
extern rtx gen_fisthi2 (rtx, rtx);
extern rtx gen_fistsi2 (rtx, rtx);
extern rtx gen_fisthi2_with_temp (rtx, rtx, rtx);
extern rtx gen_fistsi2_with_temp (rtx, rtx, rtx);
extern rtx gen_frndintxf2_floor (rtx, rtx);
extern rtx gen_frndintxf2_floor_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_fistdi2_floor (rtx, rtx, rtx, rtx);
extern rtx gen_fistdi2_floor_with_temp (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fisthi2_floor (rtx, rtx, rtx, rtx);
extern rtx gen_fistsi2_floor (rtx, rtx, rtx, rtx);
extern rtx gen_fisthi2_floor_with_temp (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fistsi2_floor_with_temp (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_frndintxf2_ceil (rtx, rtx);
extern rtx gen_frndintxf2_ceil_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_fistdi2_ceil (rtx, rtx, rtx, rtx);
extern rtx gen_fistdi2_ceil_with_temp (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fisthi2_ceil (rtx, rtx, rtx, rtx);
extern rtx gen_fistsi2_ceil (rtx, rtx, rtx, rtx);
extern rtx gen_fisthi2_ceil_with_temp (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fistsi2_ceil_with_temp (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_frndintxf2_trunc (rtx, rtx);
extern rtx gen_frndintxf2_trunc_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_frndintxf2_mask_pm (rtx, rtx);
extern rtx gen_frndintxf2_mask_pm_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_cld (void);
static __inline__ rtx gen_x86_movdicc_0_m1_rex64 (rtx, rtx);
static __inline__ rtx
gen_x86_movdicc_0_m1_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_x86_movsicc_0_m1 (rtx, rtx);
extern rtx gen_sminsf3 (rtx, rtx, rtx);
extern rtx gen_smaxsf3 (rtx, rtx, rtx);
extern rtx gen_smindf3 (rtx, rtx, rtx);
extern rtx gen_smaxdf3 (rtx, rtx, rtx);
extern rtx gen_pro_epilogue_adjust_stack_1 (rtx, rtx, rtx);
static __inline__ rtx gen_pro_epilogue_adjust_stack_rex64 (rtx, rtx, rtx);
static __inline__ rtx
gen_pro_epilogue_adjust_stack_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_pro_epilogue_adjust_stack_rex64_2 (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_pro_epilogue_adjust_stack_rex64_2(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_allocate_stack_worker_1 (rtx);
static __inline__ rtx gen_allocate_stack_worker_rex64 (rtx);
static __inline__ rtx
gen_allocate_stack_worker_rex64(rtx a __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_trap (void);
extern rtx gen_stack_protect_set_si (rtx, rtx);
static __inline__ rtx gen_stack_protect_set_di (rtx, rtx);
static __inline__ rtx
gen_stack_protect_set_di(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_stack_tls_protect_set_si (rtx, rtx);
static __inline__ rtx gen_stack_tls_protect_set_di (rtx, rtx);
static __inline__ rtx
gen_stack_tls_protect_set_di(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_stack_protect_test_si (rtx, rtx, rtx);
static __inline__ rtx gen_stack_protect_test_di (rtx, rtx, rtx);
static __inline__ rtx
gen_stack_protect_test_di(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_stack_tls_protect_test_si (rtx, rtx, rtx);
static __inline__ rtx gen_stack_tls_protect_test_di (rtx, rtx, rtx);
static __inline__ rtx
gen_stack_tls_protect_test_di(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse_movups (rtx, rtx);
extern rtx gen_sse2_movupd (rtx, rtx);
extern rtx gen_sse2_movdqu (rtx, rtx);
extern rtx gen_sse_movntv4sf (rtx, rtx);
extern rtx gen_sse2_movntv2df (rtx, rtx);
extern rtx gen_sse2_movntv2di (rtx, rtx);
extern rtx gen_sse2_movntsi (rtx, rtx);
extern rtx gen_sse3_lddqu (rtx, rtx);
extern rtx gen_sse_vmaddv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_vmsubv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_vmmulv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_vmdivv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_rcpv4sf2 (rtx, rtx);
extern rtx gen_sse_vmrcpv4sf2 (rtx, rtx, rtx);
extern rtx gen_sse_rsqrtv4sf2 (rtx, rtx);
extern rtx gen_sse_vmrsqrtv4sf2 (rtx, rtx, rtx);
extern rtx gen_sqrtv4sf2 (rtx, rtx);
extern rtx gen_sse_vmsqrtv4sf2 (rtx, rtx, rtx);
extern rtx gen_sse_vmsmaxv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_vmsminv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse3_addsubv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse3_haddv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse3_hsubv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_maskcmpv4sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmmaskcmpv4sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_sse_comi (rtx, rtx);
extern rtx gen_sse_ucomi (rtx, rtx);
extern rtx gen_sse_nandv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_cvtpi2ps (rtx, rtx, rtx);
extern rtx gen_sse_cvtps2pi (rtx, rtx);
extern rtx gen_sse_cvttps2pi (rtx, rtx);
extern rtx gen_sse_cvtsi2ss (rtx, rtx, rtx);
static __inline__ rtx gen_sse_cvtsi2ssq (rtx, rtx, rtx);
static __inline__ rtx
gen_sse_cvtsi2ssq(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse_cvtss2si (rtx, rtx);
static __inline__ rtx gen_sse_cvtss2siq (rtx, rtx);
static __inline__ rtx
gen_sse_cvtss2siq(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse_cvttss2si (rtx, rtx);
static __inline__ rtx gen_sse_cvttss2siq (rtx, rtx);
static __inline__ rtx
gen_sse_cvttss2siq(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse2_cvtdq2ps (rtx, rtx);
extern rtx gen_sse2_cvtps2dq (rtx, rtx);
extern rtx gen_sse2_cvttps2dq (rtx, rtx);
extern rtx gen_sse_movhlps (rtx, rtx, rtx);
extern rtx gen_sse_movlhps (rtx, rtx, rtx);
extern rtx gen_sse_unpckhps (rtx, rtx, rtx);
extern rtx gen_sse_unpcklps (rtx, rtx, rtx);
extern rtx gen_sse3_movshdup (rtx, rtx);
extern rtx gen_sse3_movsldup (rtx, rtx);
extern rtx gen_sse_shufps_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_storehps (rtx, rtx);
extern rtx gen_sse_loadhps (rtx, rtx, rtx);
extern rtx gen_sse_storelps (rtx, rtx);
extern rtx gen_sse_loadlps (rtx, rtx, rtx);
extern rtx gen_sse_movss (rtx, rtx, rtx);
extern rtx gen_sse2_vmaddv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_vmsubv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_vmmulv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_vmdivv2df3 (rtx, rtx, rtx);
extern rtx gen_sqrtv2df2 (rtx, rtx);
extern rtx gen_sse2_vmsqrtv2df2 (rtx, rtx, rtx);
extern rtx gen_sse2_vmsmaxv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_vmsminv2df3 (rtx, rtx, rtx);
extern rtx gen_sse3_addsubv2df3 (rtx, rtx, rtx);
extern rtx gen_sse3_haddv2df3 (rtx, rtx, rtx);
extern rtx gen_sse3_hsubv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_maskcmpv2df3 (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmmaskcmpv2df3 (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_comi (rtx, rtx);
extern rtx gen_sse2_ucomi (rtx, rtx);
extern rtx gen_sse2_nandv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_cvtpi2pd (rtx, rtx);
extern rtx gen_sse2_cvtpd2pi (rtx, rtx);
extern rtx gen_sse2_cvttpd2pi (rtx, rtx);
extern rtx gen_sse2_cvtsi2sd (rtx, rtx, rtx);
static __inline__ rtx gen_sse2_cvtsi2sdq (rtx, rtx, rtx);
static __inline__ rtx
gen_sse2_cvtsi2sdq(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse2_cvtsd2si (rtx, rtx);
static __inline__ rtx gen_sse2_cvtsd2siq (rtx, rtx);
static __inline__ rtx
gen_sse2_cvtsd2siq(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse2_cvttsd2si (rtx, rtx);
static __inline__ rtx gen_sse2_cvttsd2siq (rtx, rtx);
static __inline__ rtx
gen_sse2_cvttsd2siq(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse2_cvtdq2pd (rtx, rtx);
extern rtx gen_sse2_cvtsd2ss (rtx, rtx, rtx);
extern rtx gen_sse2_cvtss2sd (rtx, rtx, rtx);
extern rtx gen_sse2_cvtps2pd (rtx, rtx);
extern rtx gen_sse2_unpckhpd (rtx, rtx, rtx);
extern rtx gen_sse2_unpcklpd (rtx, rtx, rtx);
extern rtx gen_sse2_shufpd_1 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_storehpd (rtx, rtx);
extern rtx gen_sse2_storelpd (rtx, rtx);
extern rtx gen_sse2_loadhpd (rtx, rtx, rtx);
extern rtx gen_sse2_loadlpd (rtx, rtx, rtx);
extern rtx gen_sse2_movsd (rtx, rtx, rtx);
extern rtx gen_sse2_ssaddv16qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_ssaddv8hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_usaddv16qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_usaddv8hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_sssubv16qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_sssubv8hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_ussubv16qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_ussubv8hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_smulv8hi3_highpart (rtx, rtx, rtx);
extern rtx gen_sse2_umulv8hi3_highpart (rtx, rtx, rtx);
extern rtx gen_sse2_umulv2siv2di3 (rtx, rtx, rtx);
extern rtx gen_sse2_pmaddwd (rtx, rtx, rtx);
extern rtx gen_ashrv8hi3 (rtx, rtx, rtx);
extern rtx gen_ashrv4si3 (rtx, rtx, rtx);
extern rtx gen_lshrv8hi3 (rtx, rtx, rtx);
extern rtx gen_lshrv4si3 (rtx, rtx, rtx);
extern rtx gen_lshrv2di3 (rtx, rtx, rtx);
extern rtx gen_ashlv8hi3 (rtx, rtx, rtx);
extern rtx gen_ashlv4si3 (rtx, rtx, rtx);
extern rtx gen_ashlv2di3 (rtx, rtx, rtx);
extern rtx gen_sse2_ashlti3 (rtx, rtx, rtx);
extern rtx gen_sse2_lshrti3 (rtx, rtx, rtx);
extern rtx gen_sse2_eqv16qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_eqv8hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_eqv4si3 (rtx, rtx, rtx);
extern rtx gen_sse2_gtv16qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_gtv8hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_gtv4si3 (rtx, rtx, rtx);
extern rtx gen_sse2_nandv16qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_nandv8hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_nandv4si3 (rtx, rtx, rtx);
extern rtx gen_sse2_nandv2di3 (rtx, rtx, rtx);
extern rtx gen_sse2_packsswb (rtx, rtx, rtx);
extern rtx gen_sse2_packssdw (rtx, rtx, rtx);
extern rtx gen_sse2_packuswb (rtx, rtx, rtx);
extern rtx gen_sse2_punpckhbw (rtx, rtx, rtx);
extern rtx gen_sse2_punpcklbw (rtx, rtx, rtx);
extern rtx gen_sse2_punpckhwd (rtx, rtx, rtx);
extern rtx gen_sse2_punpcklwd (rtx, rtx, rtx);
extern rtx gen_sse2_punpckhdq (rtx, rtx, rtx);
extern rtx gen_sse2_punpckldq (rtx, rtx, rtx);
extern rtx gen_sse2_punpckhqdq (rtx, rtx, rtx);
extern rtx gen_sse2_punpcklqdq (rtx, rtx, rtx);
extern rtx gen_sse2_pextrw (rtx, rtx, rtx);
extern rtx gen_sse2_pshufd_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pshuflw_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pshufhw_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_loadld (rtx, rtx, rtx);
extern rtx gen_sse2_stored (rtx, rtx);
extern rtx gen_sse2_uavgv16qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_uavgv8hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_psadbw (rtx, rtx, rtx);
extern rtx gen_sse_movmskps (rtx, rtx);
extern rtx gen_sse2_movmskpd (rtx, rtx);
extern rtx gen_sse2_pmovmskb (rtx, rtx);
extern rtx gen_sse_ldmxcsr (rtx);
extern rtx gen_sse_stmxcsr (rtx);
extern rtx gen_sse2_clflush (rtx);
extern rtx gen_sse3_mwait (rtx, rtx);
extern rtx gen_sse3_monitor (rtx, rtx, rtx);
extern rtx gen_sse_movntdi (rtx, rtx);
extern rtx gen_mmx_addv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_subv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_mulv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_smaxv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_sminv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_rcpv2sf2 (rtx, rtx);
extern rtx gen_mmx_rcpit1v2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_rcpit2v2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_rsqrtv2sf2 (rtx, rtx);
extern rtx gen_mmx_rsqit1v2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_haddv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_hsubv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_addsubv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_gtv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_gev2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_eqv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_pf2id (rtx, rtx);
extern rtx gen_mmx_pf2iw (rtx, rtx);
extern rtx gen_mmx_pi2fw (rtx, rtx);
extern rtx gen_mmx_floatv2si2 (rtx, rtx);
extern rtx gen_mmx_pswapdv2sf2 (rtx, rtx);
extern rtx gen_mmx_addv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_addv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_addv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_adddi3 (rtx, rtx, rtx);
extern rtx gen_mmx_ssaddv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_ssaddv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_usaddv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_usaddv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_subv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_subv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_subv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_subdi3 (rtx, rtx, rtx);
extern rtx gen_mmx_sssubv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_sssubv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_ussubv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_ussubv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_mulv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_smulv4hi3_highpart (rtx, rtx, rtx);
extern rtx gen_mmx_umulv4hi3_highpart (rtx, rtx, rtx);
extern rtx gen_mmx_pmaddwd (rtx, rtx, rtx);
extern rtx gen_mmx_pmulhrwv4hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_umulsidi3 (rtx, rtx, rtx);
extern rtx gen_mmx_umaxv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_smaxv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_uminv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_sminv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_ashrv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_ashrv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_lshrv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_lshrv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_lshrdi3 (rtx, rtx, rtx);
extern rtx gen_mmx_ashlv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_ashlv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_ashldi3 (rtx, rtx, rtx);
extern rtx gen_mmx_eqv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_eqv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_eqv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_gtv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_gtv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_gtv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_andv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_andv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_andv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_nandv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_nandv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_nandv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_iorv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_iorv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_iorv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_xorv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_xorv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_xorv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_packsswb (rtx, rtx, rtx);
extern rtx gen_mmx_packssdw (rtx, rtx, rtx);
extern rtx gen_mmx_packuswb (rtx, rtx, rtx);
extern rtx gen_mmx_punpckhbw (rtx, rtx, rtx);
extern rtx gen_mmx_punpcklbw (rtx, rtx, rtx);
extern rtx gen_mmx_punpckhwd (rtx, rtx, rtx);
extern rtx gen_mmx_punpcklwd (rtx, rtx, rtx);
extern rtx gen_mmx_punpckhdq (rtx, rtx, rtx);
extern rtx gen_mmx_punpckldq (rtx, rtx, rtx);
extern rtx gen_mmx_pextrw (rtx, rtx, rtx);
extern rtx gen_mmx_pshufw_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mmx_pswapdv2si2 (rtx, rtx);
extern rtx gen_mmx_uavgv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_uavgv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_psadbw (rtx, rtx, rtx);
extern rtx gen_mmx_pmovmskb (rtx, rtx);
extern rtx gen_mmx_emms (void);
extern rtx gen_mmx_femms (void);
extern rtx gen_sync_compare_and_swapqi (rtx, rtx, rtx, rtx);
extern rtx gen_sync_compare_and_swaphi (rtx, rtx, rtx, rtx);
extern rtx gen_sync_compare_and_swapsi (rtx, rtx, rtx, rtx);
static __inline__ rtx gen_sync_compare_and_swapdi (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_sync_compare_and_swapdi(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sync_old_addqi (rtx, rtx, rtx);
extern rtx gen_sync_old_addhi (rtx, rtx, rtx);
extern rtx gen_sync_old_addsi (rtx, rtx, rtx);
static __inline__ rtx gen_sync_old_adddi (rtx, rtx, rtx);
static __inline__ rtx
gen_sync_old_adddi(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sync_lock_test_and_setqi (rtx, rtx, rtx);
extern rtx gen_sync_lock_test_and_sethi (rtx, rtx, rtx);
extern rtx gen_sync_lock_test_and_setsi (rtx, rtx, rtx);
static __inline__ rtx gen_sync_lock_test_and_setdi (rtx, rtx, rtx);
static __inline__ rtx
gen_sync_lock_test_and_setdi(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sync_addqi (rtx, rtx);
extern rtx gen_sync_addhi (rtx, rtx);
extern rtx gen_sync_addsi (rtx, rtx);
static __inline__ rtx gen_sync_adddi (rtx, rtx);
static __inline__ rtx
gen_sync_adddi(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sync_subqi (rtx, rtx);
extern rtx gen_sync_subhi (rtx, rtx);
extern rtx gen_sync_subsi (rtx, rtx);
static __inline__ rtx gen_sync_subdi (rtx, rtx);
static __inline__ rtx
gen_sync_subdi(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sync_iorqi (rtx, rtx);
extern rtx gen_sync_iorhi (rtx, rtx);
extern rtx gen_sync_iorsi (rtx, rtx);
static __inline__ rtx gen_sync_iordi (rtx, rtx);
static __inline__ rtx
gen_sync_iordi(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sync_andqi (rtx, rtx);
extern rtx gen_sync_andhi (rtx, rtx);
extern rtx gen_sync_andsi (rtx, rtx);
static __inline__ rtx gen_sync_anddi (rtx, rtx);
static __inline__ rtx
gen_sync_anddi(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sync_xorqi (rtx, rtx);
extern rtx gen_sync_xorhi (rtx, rtx);
extern rtx gen_sync_xorsi (rtx, rtx);
static __inline__ rtx gen_sync_xordi (rtx, rtx);
static __inline__ rtx
gen_sync_xordi(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_cmpti (rtx, rtx);
static __inline__ rtx
gen_cmpti(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_cmpdi (rtx, rtx);
extern rtx gen_cmpsi (rtx, rtx);
extern rtx gen_cmphi (rtx, rtx);
extern rtx gen_cmpqi (rtx, rtx);
static __inline__ rtx gen_cmpdi_1_rex64 (rtx, rtx);
static __inline__ rtx
gen_cmpdi_1_rex64(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_cmpsi_1 (rtx, rtx);
extern rtx gen_cmpqi_ext_3 (rtx, rtx);
extern rtx gen_cmpxf (rtx, rtx);
extern rtx gen_cmpdf (rtx, rtx);
extern rtx gen_cmpsf (rtx, rtx);
extern rtx gen_movsi (rtx, rtx);
extern rtx gen_movhi (rtx, rtx);
extern rtx gen_movstricthi (rtx, rtx);
extern rtx gen_movqi (rtx, rtx);
extern rtx gen_reload_outqi (rtx, rtx, rtx);
extern rtx gen_movstrictqi (rtx, rtx);
extern rtx gen_movdi (rtx, rtx);
extern rtx gen_movti (rtx, rtx);
extern rtx gen_movsf (rtx, rtx);
extern rtx gen_movdf (rtx, rtx);
extern rtx gen_movxf (rtx, rtx);
static __inline__ rtx gen_movtf (rtx, rtx);
static __inline__ rtx
gen_movtf(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_zero_extendhisi2 (rtx, rtx);
extern rtx gen_zero_extendqihi2 (rtx, rtx);
extern rtx gen_zero_extendqisi2 (rtx, rtx);
extern rtx gen_zero_extendsidi2 (rtx, rtx);
extern rtx gen_extendsidi2 (rtx, rtx);
extern rtx gen_extendsfdf2 (rtx, rtx);
extern rtx gen_extendsfxf2 (rtx, rtx);
extern rtx gen_extenddfxf2 (rtx, rtx);
extern rtx gen_truncdfsf2 (rtx, rtx);
extern rtx gen_truncdfsf2_with_temp (rtx, rtx, rtx);
extern rtx gen_truncxfsf2 (rtx, rtx);
extern rtx gen_truncxfdf2 (rtx, rtx);
extern rtx gen_fix_truncxfdi2 (rtx, rtx);
extern rtx gen_fix_truncsfdi2 (rtx, rtx);
extern rtx gen_fix_truncdfdi2 (rtx, rtx);
extern rtx gen_fix_truncxfsi2 (rtx, rtx);
extern rtx gen_fix_truncsfsi2 (rtx, rtx);
extern rtx gen_fix_truncdfsi2 (rtx, rtx);
extern rtx gen_fix_truncsfhi2 (rtx, rtx);
extern rtx gen_fix_truncdfhi2 (rtx, rtx);
extern rtx gen_fix_truncxfhi2 (rtx, rtx);
extern rtx gen_floathisf2 (rtx, rtx);
extern rtx gen_floatsisf2 (rtx, rtx);
extern rtx gen_floatdisf2 (rtx, rtx);
extern rtx gen_floathidf2 (rtx, rtx);
extern rtx gen_floatsidf2 (rtx, rtx);
extern rtx gen_floatdidf2 (rtx, rtx);
extern rtx gen_floatunssisf2 (rtx, rtx);
static __inline__ rtx gen_floatunsdisf2 (rtx, rtx);
static __inline__ rtx
gen_floatunsdisf2(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_floatunsdidf2 (rtx, rtx);
static __inline__ rtx
gen_floatunsdidf2(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_addti3 (rtx, rtx, rtx);
static __inline__ rtx
gen_addti3(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_adddi3 (rtx, rtx, rtx);
extern rtx gen_addsi3 (rtx, rtx, rtx);
extern rtx gen_addhi3 (rtx, rtx, rtx);
extern rtx gen_addqi3 (rtx, rtx, rtx);
extern rtx gen_addxf3 (rtx, rtx, rtx);
extern rtx gen_adddf3 (rtx, rtx, rtx);
extern rtx gen_addsf3 (rtx, rtx, rtx);
static __inline__ rtx gen_subti3 (rtx, rtx, rtx);
static __inline__ rtx
gen_subti3(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_subdi3 (rtx, rtx, rtx);
extern rtx gen_subsi3 (rtx, rtx, rtx);
extern rtx gen_subhi3 (rtx, rtx, rtx);
extern rtx gen_subqi3 (rtx, rtx, rtx);
extern rtx gen_subxf3 (rtx, rtx, rtx);
extern rtx gen_subdf3 (rtx, rtx, rtx);
extern rtx gen_subsf3 (rtx, rtx, rtx);
static __inline__ rtx gen_muldi3 (rtx, rtx, rtx);
static __inline__ rtx
gen_muldi3(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_mulsi3 (rtx, rtx, rtx);
extern rtx gen_mulhi3 (rtx, rtx, rtx);
extern rtx gen_mulqi3 (rtx, rtx, rtx);
extern rtx gen_umulqihi3 (rtx, rtx, rtx);
extern rtx gen_mulqihi3 (rtx, rtx, rtx);
static __inline__ rtx gen_umulditi3 (rtx, rtx, rtx);
static __inline__ rtx
gen_umulditi3(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_umulsidi3 (rtx, rtx, rtx);
static __inline__ rtx gen_mulditi3 (rtx, rtx, rtx);
static __inline__ rtx
gen_mulditi3(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_mulsidi3 (rtx, rtx, rtx);
static __inline__ rtx gen_umuldi3_highpart (rtx, rtx, rtx);
static __inline__ rtx
gen_umuldi3_highpart(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_umulsi3_highpart (rtx, rtx, rtx);
static __inline__ rtx gen_smuldi3_highpart (rtx, rtx, rtx);
static __inline__ rtx
gen_smuldi3_highpart(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_smulsi3_highpart (rtx, rtx, rtx);
extern rtx gen_mulxf3 (rtx, rtx, rtx);
extern rtx gen_muldf3 (rtx, rtx, rtx);
extern rtx gen_mulsf3 (rtx, rtx, rtx);
extern rtx gen_divxf3 (rtx, rtx, rtx);
extern rtx gen_divdf3 (rtx, rtx, rtx);
extern rtx gen_divsf3 (rtx, rtx, rtx);
static __inline__ rtx gen_divmoddi4 (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_divmoddi4(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_divmodsi4 (rtx, rtx, rtx, rtx);
extern rtx gen_udivmodhi4 (rtx, rtx, rtx, rtx);
extern rtx gen_testsi_ccno_1 (rtx, rtx);
extern rtx gen_testqi_ccz_1 (rtx, rtx);
extern rtx gen_testqi_ext_ccno_0 (rtx, rtx);
static __inline__ rtx gen_anddi3 (rtx, rtx, rtx);
static __inline__ rtx
gen_anddi3(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_andsi3 (rtx, rtx, rtx);
extern rtx gen_andhi3 (rtx, rtx, rtx);
extern rtx gen_andqi3 (rtx, rtx, rtx);
static __inline__ rtx gen_iordi3 (rtx, rtx, rtx);
static __inline__ rtx
gen_iordi3(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_iorsi3 (rtx, rtx, rtx);
extern rtx gen_iorhi3 (rtx, rtx, rtx);
extern rtx gen_iorqi3 (rtx, rtx, rtx);
static __inline__ rtx gen_xordi3 (rtx, rtx, rtx);
static __inline__ rtx
gen_xordi3(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_xorsi3 (rtx, rtx, rtx);
extern rtx gen_xorhi3 (rtx, rtx, rtx);
extern rtx gen_xorqi3 (rtx, rtx, rtx);
extern rtx gen_xorqi_cc_ext_1 (rtx, rtx, rtx);
static __inline__ rtx gen_negti2 (rtx, rtx);
static __inline__ rtx
gen_negti2(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_negdi2 (rtx, rtx);
extern rtx gen_negsi2 (rtx, rtx);
extern rtx gen_neghi2 (rtx, rtx);
extern rtx gen_negqi2 (rtx, rtx);
extern rtx gen_negsf2 (rtx, rtx);
extern rtx gen_abssf2 (rtx, rtx);
extern rtx gen_copysignsf3 (rtx, rtx, rtx);
extern rtx gen_negdf2 (rtx, rtx);
extern rtx gen_absdf2 (rtx, rtx);
extern rtx gen_copysigndf3 (rtx, rtx, rtx);
extern rtx gen_negxf2 (rtx, rtx);
extern rtx gen_absxf2 (rtx, rtx);
static __inline__ rtx gen_one_cmpldi2 (rtx, rtx);
static __inline__ rtx
gen_one_cmpldi2(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_one_cmplsi2 (rtx, rtx);
extern rtx gen_one_cmplhi2 (rtx, rtx);
extern rtx gen_one_cmplqi2 (rtx, rtx);
static __inline__ rtx gen_ashlti3 (rtx, rtx, rtx);
static __inline__ rtx
gen_ashlti3(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
static __inline__ rtx gen_x86_64_shift_adj (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_x86_64_shift_adj(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ashldi3 (rtx, rtx, rtx);
extern rtx gen_x86_shift_adj_1 (rtx, rtx, rtx, rtx);
extern rtx gen_x86_shift_adj_2 (rtx, rtx, rtx);
extern rtx gen_ashlsi3 (rtx, rtx, rtx);
extern rtx gen_ashlhi3 (rtx, rtx, rtx);
extern rtx gen_ashlqi3 (rtx, rtx, rtx);
static __inline__ rtx gen_ashrti3 (rtx, rtx, rtx);
static __inline__ rtx
gen_ashrti3(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ashrdi3 (rtx, rtx, rtx);
extern rtx gen_x86_shift_adj_3 (rtx, rtx, rtx);
extern rtx gen_ashrsi3 (rtx, rtx, rtx);
extern rtx gen_ashrhi3 (rtx, rtx, rtx);
extern rtx gen_ashrqi3 (rtx, rtx, rtx);
static __inline__ rtx gen_lshrti3 (rtx, rtx, rtx);
static __inline__ rtx
gen_lshrti3(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_lshrdi3 (rtx, rtx, rtx);
extern rtx gen_lshrsi3 (rtx, rtx, rtx);
extern rtx gen_lshrhi3 (rtx, rtx, rtx);
extern rtx gen_lshrqi3 (rtx, rtx, rtx);
extern rtx gen_rotldi3 (rtx, rtx, rtx);
extern rtx gen_rotlsi3 (rtx, rtx, rtx);
extern rtx gen_rotlhi3 (rtx, rtx, rtx);
extern rtx gen_rotlqi3 (rtx, rtx, rtx);
extern rtx gen_rotrdi3 (rtx, rtx, rtx);
extern rtx gen_rotrsi3 (rtx, rtx, rtx);
extern rtx gen_rotrhi3 (rtx, rtx, rtx);
extern rtx gen_rotrqi3 (rtx, rtx, rtx);
extern rtx gen_extv (rtx, rtx, rtx, rtx);
extern rtx gen_extzv (rtx, rtx, rtx, rtx);
extern rtx gen_insv (rtx, rtx, rtx, rtx);
extern rtx gen_seq (rtx);
extern rtx gen_sne (rtx);
extern rtx gen_sgt (rtx);
extern rtx gen_sgtu (rtx);
extern rtx gen_slt (rtx);
extern rtx gen_sltu (rtx);
extern rtx gen_sge (rtx);
extern rtx gen_sgeu (rtx);
extern rtx gen_sle (rtx);
extern rtx gen_sleu (rtx);
extern rtx gen_sunordered (rtx);
extern rtx gen_sordered (rtx);
extern rtx gen_suneq (rtx);
extern rtx gen_sunge (rtx);
extern rtx gen_sungt (rtx);
extern rtx gen_sunle (rtx);
extern rtx gen_sunlt (rtx);
extern rtx gen_sltgt (rtx);
extern rtx gen_beq (rtx);
extern rtx gen_bne (rtx);
extern rtx gen_bgt (rtx);
extern rtx gen_bgtu (rtx);
extern rtx gen_blt (rtx);
extern rtx gen_bltu (rtx);
extern rtx gen_bge (rtx);
extern rtx gen_bgeu (rtx);
extern rtx gen_ble (rtx);
extern rtx gen_bleu (rtx);
extern rtx gen_bunordered (rtx);
extern rtx gen_bordered (rtx);
extern rtx gen_buneq (rtx);
extern rtx gen_bunge (rtx);
extern rtx gen_bungt (rtx);
extern rtx gen_bunle (rtx);
extern rtx gen_bunlt (rtx);
extern rtx gen_bltgt (rtx);
extern rtx gen_indirect_jump (rtx);
extern rtx gen_tablejump (rtx, rtx);

extern rtx gen_call_pop (rtx, rtx, rtx, rtx);

extern rtx gen_call (rtx, rtx, rtx);

extern rtx gen_sibcall (rtx, rtx, rtx);

extern rtx gen_call_value_pop (rtx, rtx, rtx, rtx, rtx);

extern rtx gen_call_value (rtx, rtx, rtx, rtx);

extern rtx gen_sibcall_value (rtx, rtx, rtx, rtx);
extern rtx gen_untyped_call (rtx, rtx, rtx);
extern rtx gen_return (void);
extern rtx gen_prologue (void);
extern rtx gen_epilogue (void);
extern rtx gen_sibcall_epilogue (void);
extern rtx gen_eh_return (rtx);
extern rtx gen_ffssi2 (rtx, rtx);
static __inline__ rtx gen_ffsdi2 (rtx, rtx);
static __inline__ rtx
gen_ffsdi2(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_clzsi2 (rtx, rtx);
static __inline__ rtx gen_clzdi2 (rtx, rtx);
static __inline__ rtx
gen_clzdi2(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_tls_global_dynamic_32 (rtx, rtx);
extern rtx gen_tls_global_dynamic_64 (rtx, rtx);
extern rtx gen_tls_local_dynamic_base_32 (rtx);
extern rtx gen_tls_local_dynamic_base_64 (rtx);
extern rtx gen_sqrtsf2 (rtx, rtx);
extern rtx gen_sqrtdf2 (rtx, rtx);
extern rtx gen_fmodsf3 (rtx, rtx, rtx);
extern rtx gen_fmoddf3 (rtx, rtx, rtx);
extern rtx gen_fmodxf3 (rtx, rtx, rtx);
extern rtx gen_dremsf3 (rtx, rtx, rtx);
extern rtx gen_dremdf3 (rtx, rtx, rtx);
extern rtx gen_dremxf3 (rtx, rtx, rtx);
extern rtx gen_tandf2 (rtx, rtx);
extern rtx gen_tansf2 (rtx, rtx);
extern rtx gen_tanxf2 (rtx, rtx);
extern rtx gen_atan2df3 (rtx, rtx, rtx);
extern rtx gen_atandf2 (rtx, rtx);
extern rtx gen_atan2sf3 (rtx, rtx, rtx);
extern rtx gen_atansf2 (rtx, rtx);
extern rtx gen_atan2xf3 (rtx, rtx, rtx);
extern rtx gen_atanxf2 (rtx, rtx);
extern rtx gen_asindf2 (rtx, rtx);
extern rtx gen_asinsf2 (rtx, rtx);
extern rtx gen_asinxf2 (rtx, rtx);
extern rtx gen_acosdf2 (rtx, rtx);
extern rtx gen_acossf2 (rtx, rtx);
extern rtx gen_acosxf2 (rtx, rtx);
extern rtx gen_logsf2 (rtx, rtx);
extern rtx gen_logdf2 (rtx, rtx);
extern rtx gen_logxf2 (rtx, rtx);
extern rtx gen_log10sf2 (rtx, rtx);
extern rtx gen_log10df2 (rtx, rtx);
extern rtx gen_log10xf2 (rtx, rtx);
extern rtx gen_log2sf2 (rtx, rtx);
extern rtx gen_log2df2 (rtx, rtx);
extern rtx gen_log2xf2 (rtx, rtx);
extern rtx gen_log1psf2 (rtx, rtx);
extern rtx gen_log1pdf2 (rtx, rtx);
extern rtx gen_log1pxf2 (rtx, rtx);
extern rtx gen_logbsf2 (rtx, rtx);
extern rtx gen_logbdf2 (rtx, rtx);
extern rtx gen_logbxf2 (rtx, rtx);
extern rtx gen_ilogbsi2 (rtx, rtx, rtx, rtx);
extern rtx gen_expsf2 (rtx, rtx);
extern rtx gen_expdf2 (rtx, rtx);
extern rtx gen_expxf2 (rtx, rtx);
extern rtx gen_exp10sf2 (rtx, rtx);
extern rtx gen_exp10df2 (rtx, rtx);
extern rtx gen_exp10xf2 (rtx, rtx);
extern rtx gen_exp2sf2 (rtx, rtx);
extern rtx gen_exp2df2 (rtx, rtx);
extern rtx gen_exp2xf2 (rtx, rtx);
extern rtx gen_expm1df2 (rtx, rtx);
extern rtx gen_expm1sf2 (rtx, rtx);
extern rtx gen_expm1xf2 (rtx, rtx);
extern rtx gen_ldexpdf3 (rtx, rtx, rtx);
extern rtx gen_ldexpsf3 (rtx, rtx, rtx);
extern rtx gen_ldexpxf3 (rtx, rtx, rtx);
extern rtx gen_rintdf2 (rtx, rtx);
extern rtx gen_rintsf2 (rtx, rtx);
extern rtx gen_rintxf2 (rtx, rtx);
extern rtx gen_lrinthi2 (rtx, rtx);
extern rtx gen_lrintsi2 (rtx, rtx);
extern rtx gen_lrintdi2 (rtx, rtx);
extern rtx gen_floorxf2 (rtx, rtx);
extern rtx gen_floordf2 (rtx, rtx);
extern rtx gen_floorsf2 (rtx, rtx);
extern rtx gen_lfloorhi2 (rtx, rtx);
extern rtx gen_lfloorsi2 (rtx, rtx);
extern rtx gen_lfloordi2 (rtx, rtx);
extern rtx gen_ceilxf2 (rtx, rtx);
extern rtx gen_ceildf2 (rtx, rtx);
extern rtx gen_ceilsf2 (rtx, rtx);
extern rtx gen_lceilhi2 (rtx, rtx);
extern rtx gen_lceilsi2 (rtx, rtx);
extern rtx gen_lceildi2 (rtx, rtx);
extern rtx gen_btruncxf2 (rtx, rtx);
extern rtx gen_btruncdf2 (rtx, rtx);
extern rtx gen_btruncsf2 (rtx, rtx);
extern rtx gen_nearbyintxf2 (rtx, rtx);
extern rtx gen_nearbyintdf2 (rtx, rtx);
extern rtx gen_nearbyintsf2 (rtx, rtx);
extern rtx gen_movmemsi (rtx, rtx, rtx, rtx);
static __inline__ rtx gen_movmemdi (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_movmemdi(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_strmov (rtx, rtx, rtx, rtx);
extern rtx gen_strmov_singleop (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_rep_mov (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_setmemsi (rtx, rtx, rtx, rtx);
static __inline__ rtx gen_setmemdi (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_setmemdi(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_strset (rtx, rtx, rtx);
extern rtx gen_strset_singleop (rtx, rtx, rtx, rtx);
extern rtx gen_rep_stos (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_cmpstrnsi (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_cmpintqi (rtx);
extern rtx gen_cmpstrnqi_nz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_cmpstrnqi_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_strlensi (rtx, rtx, rtx, rtx);
extern rtx gen_strlendi (rtx, rtx, rtx, rtx);
extern rtx gen_strlenqi_1 (rtx, rtx, rtx);
static __inline__ rtx gen_movdicc (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_movdicc(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_movsicc (rtx, rtx, rtx, rtx);
extern rtx gen_movhicc (rtx, rtx, rtx, rtx);
extern rtx gen_movqicc (rtx, rtx, rtx, rtx);
extern rtx gen_movsfcc (rtx, rtx, rtx, rtx);
extern rtx gen_movdfcc (rtx, rtx, rtx, rtx);
extern rtx gen_movxfcc (rtx, rtx, rtx, rtx);
extern rtx gen_addqicc (rtx, rtx, rtx, rtx);
extern rtx gen_addhicc (rtx, rtx, rtx, rtx);
extern rtx gen_addsicc (rtx, rtx, rtx, rtx);
static __inline__ rtx gen_adddicc (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_adddicc(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_allocate_stack_worker (rtx);
extern rtx gen_allocate_stack_worker_postreload (rtx);
extern rtx gen_allocate_stack_worker_rex64_postreload (rtx);
extern rtx gen_allocate_stack (rtx, rtx);
extern rtx gen_builtin_setjmp_receiver (rtx);
static __inline__ rtx gen_sse_prologue_save (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_sse_prologue_save(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_prefetch (rtx, rtx, rtx);
extern rtx gen_stack_protect_set (rtx, rtx);
extern rtx gen_stack_protect_test (rtx, rtx, rtx);
extern rtx gen_movv16qi (rtx, rtx);
extern rtx gen_movv8hi (rtx, rtx);
extern rtx gen_movv4si (rtx, rtx);
extern rtx gen_movv2di (rtx, rtx);
extern rtx gen_movv4sf (rtx, rtx);
extern rtx gen_movv2df (rtx, rtx);
extern rtx gen_pushv16qi1 (rtx);
extern rtx gen_pushv8hi1 (rtx);
extern rtx gen_pushv4si1 (rtx);
extern rtx gen_pushv2di1 (rtx);
extern rtx gen_pushv4sf1 (rtx);
extern rtx gen_pushv2df1 (rtx);
extern rtx gen_movmisalignv16qi (rtx, rtx);
extern rtx gen_movmisalignv8hi (rtx, rtx);
extern rtx gen_movmisalignv4si (rtx, rtx);
extern rtx gen_movmisalignv2di (rtx, rtx);
extern rtx gen_movmisalignv4sf (rtx, rtx);
extern rtx gen_movmisalignv2df (rtx, rtx);
extern rtx gen_negv4sf2 (rtx, rtx);
extern rtx gen_absv4sf2 (rtx, rtx);
extern rtx gen_addv4sf3 (rtx, rtx, rtx);
extern rtx gen_subv4sf3 (rtx, rtx, rtx);
extern rtx gen_mulv4sf3 (rtx, rtx, rtx);
extern rtx gen_divv4sf3 (rtx, rtx, rtx);
extern rtx gen_smaxv4sf3 (rtx, rtx, rtx);
extern rtx gen_sminv4sf3 (rtx, rtx, rtx);
extern rtx gen_reduc_splus_v4sf (rtx, rtx);
extern rtx gen_reduc_smax_v4sf (rtx, rtx);
extern rtx gen_reduc_smin_v4sf (rtx, rtx);
extern rtx gen_vcondv4sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv4sf3 (rtx, rtx, rtx);
extern rtx gen_iorv4sf3 (rtx, rtx, rtx);
extern rtx gen_xorv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_shufps (rtx, rtx, rtx, rtx);
extern rtx gen_vec_initv4sf (rtx, rtx);
extern rtx gen_vec_setv4sf (rtx, rtx, rtx);
extern rtx gen_vec_extractv4sf (rtx, rtx, rtx);
extern rtx gen_negv2df2 (rtx, rtx);
extern rtx gen_absv2df2 (rtx, rtx);
extern rtx gen_addv2df3 (rtx, rtx, rtx);
extern rtx gen_subv2df3 (rtx, rtx, rtx);
extern rtx gen_mulv2df3 (rtx, rtx, rtx);
extern rtx gen_divv2df3 (rtx, rtx, rtx);
extern rtx gen_smaxv2df3 (rtx, rtx, rtx);
extern rtx gen_sminv2df3 (rtx, rtx, rtx);
extern rtx gen_reduc_splus_v2df (rtx, rtx);
extern rtx gen_vcondv2df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv2df3 (rtx, rtx, rtx);
extern rtx gen_iorv2df3 (rtx, rtx, rtx);
extern rtx gen_xorv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_cvtpd2dq (rtx, rtx);
extern rtx gen_sse2_cvttpd2dq (rtx, rtx);
extern rtx gen_sse2_cvtpd2ps (rtx, rtx);
extern rtx gen_sse2_shufpd (rtx, rtx, rtx, rtx);
extern rtx gen_vec_setv2df (rtx, rtx, rtx);
extern rtx gen_vec_extractv2df (rtx, rtx, rtx);
extern rtx gen_vec_initv2df (rtx, rtx);
extern rtx gen_negv16qi2 (rtx, rtx);
extern rtx gen_negv8hi2 (rtx, rtx);
extern rtx gen_negv4si2 (rtx, rtx);
extern rtx gen_negv2di2 (rtx, rtx);
extern rtx gen_addv16qi3 (rtx, rtx, rtx);
extern rtx gen_addv8hi3 (rtx, rtx, rtx);
extern rtx gen_addv4si3 (rtx, rtx, rtx);
extern rtx gen_addv2di3 (rtx, rtx, rtx);
extern rtx gen_subv16qi3 (rtx, rtx, rtx);
extern rtx gen_subv8hi3 (rtx, rtx, rtx);
extern rtx gen_subv4si3 (rtx, rtx, rtx);
extern rtx gen_subv2di3 (rtx, rtx, rtx);
extern rtx gen_mulv16qi3 (rtx, rtx, rtx);
extern rtx gen_mulv8hi3 (rtx, rtx, rtx);
extern rtx gen_mulv4si3 (rtx, rtx, rtx);
extern rtx gen_mulv2di3 (rtx, rtx, rtx);
extern rtx gen_vec_shl_v16qi (rtx, rtx, rtx);
extern rtx gen_vec_shl_v8hi (rtx, rtx, rtx);
extern rtx gen_vec_shl_v4si (rtx, rtx, rtx);
extern rtx gen_vec_shl_v2di (rtx, rtx, rtx);
extern rtx gen_vec_shr_v16qi (rtx, rtx, rtx);
extern rtx gen_vec_shr_v8hi (rtx, rtx, rtx);
extern rtx gen_vec_shr_v4si (rtx, rtx, rtx);
extern rtx gen_vec_shr_v2di (rtx, rtx, rtx);
extern rtx gen_umaxv16qi3 (rtx, rtx, rtx);
extern rtx gen_smaxv8hi3 (rtx, rtx, rtx);
extern rtx gen_umaxv8hi3 (rtx, rtx, rtx);
extern rtx gen_smaxv16qi3 (rtx, rtx, rtx);
extern rtx gen_smaxv4si3 (rtx, rtx, rtx);
extern rtx gen_umaxv4si3 (rtx, rtx, rtx);
extern rtx gen_uminv16qi3 (rtx, rtx, rtx);
extern rtx gen_sminv8hi3 (rtx, rtx, rtx);
extern rtx gen_sminv16qi3 (rtx, rtx, rtx);
extern rtx gen_sminv4si3 (rtx, rtx, rtx);
extern rtx gen_uminv8hi3 (rtx, rtx, rtx);
extern rtx gen_uminv4si3 (rtx, rtx, rtx);
extern rtx gen_vcondv16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_one_cmplv16qi2 (rtx, rtx);
extern rtx gen_one_cmplv8hi2 (rtx, rtx);
extern rtx gen_one_cmplv4si2 (rtx, rtx);
extern rtx gen_one_cmplv2di2 (rtx, rtx);
extern rtx gen_andv16qi3 (rtx, rtx, rtx);
extern rtx gen_andv8hi3 (rtx, rtx, rtx);
extern rtx gen_andv4si3 (rtx, rtx, rtx);
extern rtx gen_andv2di3 (rtx, rtx, rtx);
extern rtx gen_iorv16qi3 (rtx, rtx, rtx);
extern rtx gen_iorv8hi3 (rtx, rtx, rtx);
extern rtx gen_iorv4si3 (rtx, rtx, rtx);
extern rtx gen_iorv2di3 (rtx, rtx, rtx);
extern rtx gen_xorv16qi3 (rtx, rtx, rtx);
extern rtx gen_xorv8hi3 (rtx, rtx, rtx);
extern rtx gen_xorv4si3 (rtx, rtx, rtx);
extern rtx gen_xorv2di3 (rtx, rtx, rtx);
extern rtx gen_sse2_pinsrw (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pshufd (rtx, rtx, rtx);
extern rtx gen_sse2_pshuflw (rtx, rtx, rtx);
extern rtx gen_sse2_pshufhw (rtx, rtx, rtx);
extern rtx gen_sse2_loadd (rtx, rtx);
extern rtx gen_sse_storeq (rtx, rtx);
extern rtx gen_vec_setv2di (rtx, rtx, rtx);
extern rtx gen_vec_extractv2di (rtx, rtx, rtx);
extern rtx gen_vec_initv2di (rtx, rtx);
extern rtx gen_vec_setv4si (rtx, rtx, rtx);
extern rtx gen_vec_extractv4si (rtx, rtx, rtx);
extern rtx gen_vec_initv4si (rtx, rtx);
extern rtx gen_vec_setv8hi (rtx, rtx, rtx);
extern rtx gen_vec_extractv8hi (rtx, rtx, rtx);
extern rtx gen_vec_initv8hi (rtx, rtx);
extern rtx gen_vec_setv16qi (rtx, rtx, rtx);
extern rtx gen_vec_extractv16qi (rtx, rtx, rtx);
extern rtx gen_vec_initv16qi (rtx, rtx);
extern rtx gen_sse2_maskmovdqu (rtx, rtx, rtx);
extern rtx gen_sse_sfence (void);
extern rtx gen_sse2_mfence (void);
extern rtx gen_sse2_lfence (void);
extern rtx gen_movv8qi (rtx, rtx);
extern rtx gen_movv4hi (rtx, rtx);
extern rtx gen_movv2si (rtx, rtx);
extern rtx gen_movv2sf (rtx, rtx);
extern rtx gen_pushv8qi1 (rtx);
extern rtx gen_pushv4hi1 (rtx);
extern rtx gen_pushv2si1 (rtx);
extern rtx gen_pushv2sf1 (rtx);
extern rtx gen_movmisalignv8qi (rtx, rtx);
extern rtx gen_movmisalignv4hi (rtx, rtx);
extern rtx gen_movmisalignv2si (rtx, rtx);
extern rtx gen_movmisalignv2sf (rtx, rtx);
extern rtx gen_mmx_subrv2sf3 (rtx, rtx, rtx);
extern rtx gen_vec_setv2sf (rtx, rtx, rtx);
extern rtx gen_vec_extractv2sf (rtx, rtx, rtx);
extern rtx gen_vec_initv2sf (rtx, rtx);
extern rtx gen_mmx_pinsrw (rtx, rtx, rtx, rtx);
extern rtx gen_mmx_pshufw (rtx, rtx, rtx);
extern rtx gen_vec_setv2si (rtx, rtx, rtx);
extern rtx gen_vec_extractv2si (rtx, rtx, rtx);
extern rtx gen_vec_initv2si (rtx, rtx);
extern rtx gen_vec_setv4hi (rtx, rtx, rtx);
extern rtx gen_vec_extractv4hi (rtx, rtx, rtx);
extern rtx gen_vec_initv4hi (rtx, rtx);
extern rtx gen_vec_setv8qi (rtx, rtx, rtx);
extern rtx gen_vec_extractv8qi (rtx, rtx, rtx);
extern rtx gen_vec_initv8qi (rtx, rtx);
extern rtx gen_mmx_maskmovq (rtx, rtx, rtx);
extern rtx gen_sync_compare_and_swap_ccqi (rtx, rtx, rtx, rtx);
extern rtx gen_sync_compare_and_swap_cchi (rtx, rtx, rtx, rtx);
extern rtx gen_sync_compare_and_swap_ccsi (rtx, rtx, rtx, rtx);
static __inline__ rtx gen_sync_compare_and_swap_ccdi (rtx, rtx, rtx, rtx);
static __inline__ rtx
gen_sync_compare_and_swap_ccdi(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
# 18 "tm.h" 2
# 8 "insn-emit.c" 2
# 1 "../.././gcc/rtl.h" 1
# 25 "../.././gcc/rtl.h"
# 1 "../.././gcc/statistics.h" 1
# 26 "../.././gcc/rtl.h" 2
# 1 "../.././gcc/machmode.h" 1
# 26 "../.././gcc/machmode.h"
# 1 "./insn-modes.h" 1






enum machine_mode
{
  VOIDmode,
  BLKmode,
  CCmode,
  CCGCmode,
  CCGOCmode,
  CCNOmode,
  CCZmode,
  CCFPmode,
  CCFPUmode,
  BImode,
  QImode,
  HImode,
  SImode,
  DImode,
  TImode,
  SFmode,
  DFmode,
  XFmode,
  TFmode,
  CQImode,
  CHImode,
  CSImode,
  CDImode,
  CTImode,
  SCmode,
  DCmode,
  XCmode,
  TCmode,
  V4QImode,
  V2HImode,
  V8QImode,
  V4HImode,
  V2SImode,
  V16QImode,
  V8HImode,
  V4SImode,
  V2DImode,
  V32QImode,
  V16HImode,
  V8SImode,
  V4DImode,
  V2SFmode,
  V4SFmode,
  V2DFmode,
  V8SFmode,
  V4DFmode,
  MAX_MACHINE_MODE,

  MIN_MODE_RANDOM = VOIDmode,
  MAX_MODE_RANDOM = BLKmode,

  MIN_MODE_CC = CCmode,
  MAX_MODE_CC = CCFPUmode,

  MIN_MODE_INT = QImode,
  MAX_MODE_INT = TImode,

  MIN_MODE_PARTIAL_INT = VOIDmode,
  MAX_MODE_PARTIAL_INT = VOIDmode,

  MIN_MODE_FLOAT = SFmode,
  MAX_MODE_FLOAT = TFmode,

  MIN_MODE_COMPLEX_INT = CQImode,
  MAX_MODE_COMPLEX_INT = CTImode,

  MIN_MODE_COMPLEX_FLOAT = SCmode,
  MAX_MODE_COMPLEX_FLOAT = TCmode,

  MIN_MODE_VECTOR_INT = V4QImode,
  MAX_MODE_VECTOR_INT = V4DImode,

  MIN_MODE_VECTOR_FLOAT = V2SFmode,
  MAX_MODE_VECTOR_FLOAT = V4DFmode,

  NUM_MACHINE_MODES = MAX_MACHINE_MODE
};
# 27 "../.././gcc/machmode.h" 2



extern const char * const mode_name[NUM_MACHINE_MODES];




# 1 "../.././gcc/mode-classes.def" 1
# 36 "../.././gcc/machmode.h" 2

enum mode_class { MODE_RANDOM, MODE_CC, MODE_INT, MODE_PARTIAL_INT, MODE_FLOAT, MODE_COMPLEX_INT, MODE_COMPLEX_FLOAT, MODE_VECTOR_INT, MODE_VECTOR_FLOAT, MAX_MODE_CLASS };






extern const unsigned char mode_class[NUM_MACHINE_MODES];
# 81 "../.././gcc/machmode.h"
extern unsigned char mode_size[NUM_MACHINE_MODES];




extern const unsigned short mode_precision[NUM_MACHINE_MODES];





extern const unsigned long mode_mask_array[NUM_MACHINE_MODES];





extern const unsigned char mode_inner[NUM_MACHINE_MODES];
# 110 "../.././gcc/machmode.h"
extern const unsigned char mode_nunits[NUM_MACHINE_MODES];




extern const unsigned char mode_wider[NUM_MACHINE_MODES];


extern const unsigned char mode_2xwider[NUM_MACHINE_MODES];






extern enum machine_mode mode_for_size (unsigned int, enum mode_class, int);



extern enum machine_mode smallest_mode_for_size (unsigned int,
       enum mode_class);





extern enum machine_mode int_mode_for_mode (enum machine_mode);



extern enum machine_mode get_best_mode (int, int, unsigned int,
     enum machine_mode, int);



extern unsigned char mode_base_align[NUM_MACHINE_MODES];

extern unsigned get_mode_alignment (enum machine_mode);





extern const unsigned char class_narrowest_mode[MAX_MODE_CLASS];





extern enum machine_mode byte_mode;
extern enum machine_mode word_mode;
extern enum machine_mode ptr_mode;


extern void init_adjust_machine_modes (void);
# 27 "../.././gcc/rtl.h" 2
# 1 "../.././gcc/input.h" 1
# 25 "../.././gcc/input.h"
# 1 "../.././gcc/../libcpp/include/line-map.h" 1
# 31 "../.././gcc/../libcpp/include/line-map.h"
enum lc_reason {LC_ENTER = 0, LC_LEAVE, LC_RENAME};




typedef unsigned int source_location;
# 50 "../.././gcc/../libcpp/include/line-map.h"
struct line_map
{
  const char *to_file;
  unsigned int to_line;
  source_location start_location;
  int included_from;
  __extension__ enum lc_reason reason : 8;

  unsigned char sysp;

  unsigned int column_bits : 8;
};


struct line_maps
{
  struct line_map *maps;
  unsigned int allocated;
  unsigned int used;

  unsigned int cache;




  int last_listed;


  unsigned int depth;


  unsigned char trace_includes;


  source_location highest_location;


  source_location highest_line;



  unsigned int max_column_hint;
};


extern void linemap_init (struct line_maps *);


extern void linemap_free (struct line_maps *);



extern void linemap_check_files_exited (struct line_maps *);







extern source_location linemap_line_start
(struct line_maps *set, unsigned int to_line, unsigned int max_column_hint);
# 124 "../.././gcc/../libcpp/include/line-map.h"
extern const struct line_map *linemap_add
  (struct line_maps *, enum lc_reason, unsigned int sysp,
   const char *to_file, unsigned int to_line);



extern const struct line_map *linemap_lookup
  (struct line_maps *, source_location);




extern void linemap_print_containing_files (struct line_maps *,
         const struct line_map *);
# 178 "../.././gcc/../libcpp/include/line-map.h"
extern source_location
linemap_position_for_column (struct line_maps *set, unsigned int to_column);
# 26 "../.././gcc/input.h" 2
extern struct line_maps line_table;
# 52 "../.././gcc/input.h"
struct location_s
{

  const char *file;


  int line;
};

typedef struct location_s expanded_location;
typedef struct location_s location_t;
typedef location_t *source_locus;


extern location_t unknown_location;




struct file_stack
{
  struct file_stack *next;
  location_t location;
};


extern const char *main_input_filename;

extern location_t input_location;



extern void push_srcloc (const char *name, int line);

extern void pop_srcloc (void);
# 96 "../.././gcc/input.h"
extern struct file_stack *input_file_stack;


extern int input_file_stack_tick;
# 28 "../.././gcc/rtl.h" 2
# 1 "../.././gcc/real.h" 1
# 30 "../.././gcc/real.h"
enum real_value_class {
  rvc_zero,
  rvc_normal,
  rvc_inf,
  rvc_nan
};







struct real_value
{



  unsigned int cl : 2;
  unsigned int sign : 1;
  unsigned int signalling : 1;
  unsigned int canonical : 1;
  unsigned int uexp : (32 - 5);
  unsigned long sig[((128 + (8 * 4)) / (8 * 4))];
};
# 77 "../.././gcc/real.h"
extern char test_real_width
  [sizeof(struct real_value) <= (((128 + (8 * 4)) + 32)/(8 * 4) + (((128 + (8 * 4)) + 32)%(8 * 4) ? 1 : 0))*sizeof(long) ? 1 : -1];
# 115 "../.././gcc/real.h"
struct real_format
{

  void (*encode) (const struct real_format *, long *,
    const struct real_value *);
  void (*decode) (const struct real_format *, struct real_value *,
    const long *);


  int b;


  int log2_b;


  int p;


  int pnan;


  int emin;


  int emax;



  int signbit_ro;



  int signbit_rw;


  unsigned char has_nans;
  unsigned char has_inf;
  unsigned char has_denorm;
  unsigned char has_signed_zero;
  unsigned char qnan_msb_set;
};




extern const struct real_format *
  real_format_for_mode[MAX_MODE_FLOAT - MIN_MODE_FLOAT + 1];
# 174 "../.././gcc/real.h"
extern unsigned char real_arithmetic (struct real_value *, int, const struct real_value *,
        const struct real_value *);


extern unsigned char real_compare (int, const struct real_value *, const struct real_value *);


extern unsigned char real_isinf (const struct real_value *);


extern unsigned char real_isnan (const struct real_value *);


extern unsigned char real_isneg (const struct real_value *);


extern unsigned char real_isnegzero (const struct real_value *);


extern unsigned char real_identical (const struct real_value *, const struct real_value *);


extern void real_convert (struct real_value *, enum machine_mode,
     const struct real_value *);


extern unsigned char exact_real_truncate (enum machine_mode, const struct real_value *);


extern void real_to_decimal (char *, const struct real_value *, size_t,
        size_t, int);


extern void real_to_hexadecimal (char *, const struct real_value *,
     size_t, size_t, int);


extern long real_to_integer (const struct real_value *);
extern void real_to_integer2 (long *, long *,
         const struct real_value *);


extern void real_from_string (struct real_value *, const char *);


extern void real_from_integer (struct real_value *, enum machine_mode,
          unsigned long, long, int);

extern long real_to_target_fmt (long *, const struct real_value *,
    const struct real_format *);
extern long real_to_target (long *, const struct real_value *, enum machine_mode);

extern void real_from_target_fmt (struct real_value *, const long *,
      const struct real_format *);
extern void real_from_target (struct real_value *, const long *,
         enum machine_mode);

extern void real_inf (struct real_value *);

extern unsigned char real_nan (struct real_value *, const char *, int, enum machine_mode);

extern void real_maxval (struct real_value *, int, enum machine_mode);

extern void real_2expN (struct real_value *, int);

extern unsigned int real_hash (const struct real_value *);



extern const struct real_format ieee_single_format;
extern const struct real_format mips_single_format;
extern const struct real_format ieee_double_format;
extern const struct real_format mips_double_format;
extern const struct real_format ieee_extended_motorola_format;
extern const struct real_format ieee_extended_intel_96_format;
extern const struct real_format ieee_extended_intel_96_round_53_format;
extern const struct real_format ieee_extended_intel_128_format;
extern const struct real_format ibm_extended_format;
extern const struct real_format mips_extended_format;
extern const struct real_format ieee_quad_format;
extern const struct real_format mips_quad_format;
extern const struct real_format vax_f_format;
extern const struct real_format vax_d_format;
extern const struct real_format vax_g_format;
extern const struct real_format i370_single_format;
extern const struct real_format i370_double_format;
extern const struct real_format c4x_single_format;
extern const struct real_format c4x_extended_format;
extern const struct real_format real_internal_format;
# 305 "../.././gcc/real.h"
extern struct real_value real_value_truncate (enum machine_mode,
         struct real_value);




extern struct real_value real_arithmetic2 (int, const struct real_value *,
      const struct real_value *);







extern int significand_size (enum machine_mode);

extern struct real_value real_from_string2 (const char *, enum machine_mode);
# 340 "../.././gcc/real.h"
extern int real_exponent (const struct real_value *);


extern void real_ldexp (struct real_value *, const struct real_value *, int);





extern struct real_value dconst0;
extern struct real_value dconst1;
extern struct real_value dconst2;
extern struct real_value dconst3;
extern struct real_value dconst10;
extern struct real_value dconstm1;
extern struct real_value dconstm2;
extern struct real_value dconsthalf;
extern struct real_value dconstthird;
extern struct real_value dconstpi;
extern struct real_value dconste;



struct real_value real_value_from_int_cst (tree, tree);
# 372 "../.././gcc/real.h"
extern rtx const_double_from_real_value (struct real_value, enum machine_mode);


extern unsigned char exact_real_inverse (enum machine_mode, struct real_value *);


extern tree build_real (tree, struct real_value);


extern unsigned char real_sqrt (struct real_value *, enum machine_mode,
         const struct real_value *);


extern unsigned char real_powi (struct real_value *, enum machine_mode,
         const struct real_value *, long);


extern void real_trunc (struct real_value *, enum machine_mode,
   const struct real_value *);
extern void real_floor (struct real_value *, enum machine_mode,
   const struct real_value *);
extern void real_ceil (struct real_value *, enum machine_mode,
         const struct real_value *);
extern void real_round (struct real_value *, enum machine_mode,
   const struct real_value *);


extern void real_copysign (struct real_value *, const struct real_value *);
# 29 "../.././gcc/rtl.h" 2
# 42 "../.././gcc/rtl.h"
enum rtx_code {


# 1 "../.././gcc/rtl.def" 1
# 83 "../.././gcc/rtl.def"
UNKNOWN ,






EXPR_LIST ,



INSN_LIST ,





SEQUENCE ,


ADDRESS ,
# 116 "../.././gcc/rtl.def"
INSN ,



JUMP_INSN ,






CALL_INSN ,


BARRIER ,







CODE_LABEL ,
# 153 "../.././gcc/rtl.def"
NOTE ,
# 166 "../.././gcc/rtl.def"
COND_EXEC ,


PARALLEL ,







ASM_INPUT ,
# 205 "../.././gcc/rtl.def"
ASM_OPERANDS ,
# 217 "../.././gcc/rtl.def"
UNSPEC ,


UNSPEC_VOLATILE ,



ADDR_VEC ,
# 249 "../.././gcc/rtl.def"
ADDR_DIFF_VEC ,
# 260 "../.././gcc/rtl.def"
PREFETCH ,
# 272 "../.././gcc/rtl.def"
SET ,




USE ,




CLOBBER ,





CALL ,



RETURN ,





TRAP_IF ,




RESX ,






CONST_INT ,




CONST_DOUBLE ,


CONST_VECTOR ,




CONST_STRING ,





CONST ,



PC ,




VALUE ,
# 348 "../.././gcc/rtl.def"
REG ,






SCRATCH ,
# 365 "../.././gcc/rtl.def"
SUBREG ,
# 378 "../.././gcc/rtl.def"
STRICT_LOW_PART ,





CONCAT ,




MEM ,




LABEL_REF ,






SYMBOL_REF ,






CC0 ,
# 420 "../.././gcc/rtl.def"
IF_THEN_ELSE ,


COMPARE ,


PLUS ,


MINUS ,


NEG ,

MULT ,


DIV ,

MOD ,


UDIV ,
UMOD ,


AND ,
IOR ,
XOR ,
NOT ,




ASHIFT ,
ROTATE ,
ASHIFTRT ,
LSHIFTRT ,
ROTATERT ,
# 467 "../.././gcc/rtl.def"
SMIN ,
SMAX ,
UMIN ,
UMAX ,
# 479 "../.././gcc/rtl.def"
PRE_DEC ,
PRE_INC ,
POST_DEC ,
POST_INC ,
# 496 "../.././gcc/rtl.def"
PRE_MODIFY ,
POST_MODIFY ,



NE ,
EQ ,
GE ,
GT ,
LE ,
LT ,
GEU ,
GTU ,
LEU ,
LTU ,


UNORDERED ,
ORDERED ,


UNEQ ,
UNGE ,
UNGT ,
UNLE ,
UNLT ,


LTGT ,




SIGN_EXTEND ,


ZERO_EXTEND ,


TRUNCATE ,


FLOAT_EXTEND ,
FLOAT_TRUNCATE ,


FLOAT ,







FIX ,


UNSIGNED_FLOAT ,




UNSIGNED_FIX ,


ABS ,


SQRT ,




FFS ,


CLZ ,


CTZ ,


POPCOUNT ,


PARITY ,
# 593 "../.././gcc/rtl.def"
SIGN_EXTRACT ,



ZERO_EXTRACT ,




HIGH ,



LO_SUM ,






VEC_MERGE ,





VEC_SELECT ,




VEC_CONCAT ,





VEC_DUPLICATE ,


SS_PLUS ,


US_PLUS ,


SS_MINUS ,


US_MINUS ,


SS_TRUNCATE ,


US_TRUNCATE ,


VAR_LOCATION ,
# 46 "../.././gcc/rtl.h" 2


  LAST_AND_UNUSED_RTX_CODE};
# 57 "../.././gcc/rtl.h"
enum rtx_class {




  RTX_COMPARE,
  RTX_COMM_COMPARE,
  RTX_BIN_ARITH,
  RTX_COMM_ARITH,


  RTX_UNARY,

  RTX_EXTRA,
  RTX_MATCH,
  RTX_INSN,


  RTX_OBJ,
  RTX_CONST_OBJ,

  RTX_TERNARY,
  RTX_BITFIELD_OPS,
  RTX_AUTOINC
};
# 95 "../.././gcc/rtl.h"
extern const unsigned char rtx_length[((int) LAST_AND_UNUSED_RTX_CODE)];


extern const char * const rtx_name[((int) LAST_AND_UNUSED_RTX_CODE)];


extern const char * const rtx_format[((int) LAST_AND_UNUSED_RTX_CODE)];


extern const enum rtx_class rtx_class[((int) LAST_AND_UNUSED_RTX_CODE)];


extern const unsigned char rtx_size[((int) LAST_AND_UNUSED_RTX_CODE)];
extern const unsigned char rtx_next[((int) LAST_AND_UNUSED_RTX_CODE)];



typedef struct
{

  unsigned min_align: 8;

  unsigned base_after_vec: 1;
  unsigned min_after_vec: 1;

  unsigned max_after_vec: 1;

  unsigned min_after_base: 1;

  unsigned max_after_base: 1;


  unsigned offset_unsigned: 1;
  unsigned : 2;
  unsigned scale : 8;
} addr_diff_vec_flags;
# 139 "../.././gcc/rtl.h"
typedef struct mem_attrs
{
  long alias;
  tree expr;
  rtx offset;
  rtx size;
  unsigned int align;
} mem_attrs;




typedef struct reg_attrs
{
  tree decl;
  long offset;
} reg_attrs;



union rtunion_def
{
  int rt_int;
  unsigned int rt_uint;
  const char *rt_str;
  rtx rt_rtx;
  rtvec rt_rtvec;
  enum machine_mode rt_type;
  addr_diff_vec_flags rt_addr_diff_vec_flags;
  struct cselib_val_struct *rt_cselib;
  struct bitmap_head_def *rt_bit;
  tree rt_tree;
  struct basic_block_def *rt_bb;
  mem_attrs *rt_mem;
  reg_attrs *rt_reg;
};
typedef union rtunion_def rtunion;



struct rtx_def

{

  __extension__ enum rtx_code code: 16;


  __extension__ enum machine_mode mode : 8;






  unsigned int jump : 1;


  unsigned int call : 1;







  unsigned int unchanging : 1;
# 213 "../.././gcc/rtl.h"
  unsigned int volatil : 1;
# 227 "../.././gcc/rtl.h"
  unsigned int in_struct : 1;






  unsigned int used : 1;






  unsigned frame_related : 1;



  unsigned return_val : 1;




  union u {
    rtunion fld[1];
    long hwint[1];
    struct real_value rv;
  } u;
};
# 292 "../.././gcc/rtl.h"
struct rtvec_def {
  int num_elem;
  rtx elem[1];
};
# 723 "../.././gcc/rtl.h"
enum reg_note
{

# 1 "../.././gcc/reg-notes.def" 1
# 33 "../.././gcc/reg-notes.def"
REG_DEP_TRUE,




REG_DEAD,


REG_INC,
# 52 "../.././gcc/reg-notes.def"
REG_EQUIV,




REG_EQUAL,






REG_RETVAL,




REG_LIBCALL,






REG_NONNEG,



REG_NO_CONFLICT,


REG_UNUSED,
# 92 "../.././gcc/reg-notes.def"
REG_CC_SETTER,
REG_CC_USER,




REG_LABEL,



REG_DEP_ANTI,
REG_DEP_OUTPUT,





REG_BR_PROB,




REG_VALUE_PROFILE,



REG_NOALIAS,





REG_BR_PRED,




REG_FRAME_RELATED_EXPR,




REG_EH_CONTEXT,





REG_EH_REGION,


REG_SAVE_NOTE,





REG_MAYBE_DEAD,


REG_NORETURN,



REG_NON_LOCAL_GOTO,




REG_CROSSING_JUMP,



REG_SETJMP,
# 727 "../.././gcc/rtl.h" 2

  REG_NOTE_MAX
};
# 738 "../.././gcc/rtl.h"
extern const char * const reg_note_name[];
# 809 "../.././gcc/rtl.h"
enum insn_note
{

  NOTE_INSN_BIAS = -100,


# 1 "../.././gcc/insn-notes.def" 1
# 36 "../.././gcc/insn-notes.def"
NOTE_INSN_DELETED,


NOTE_INSN_DELETED_LABEL,



NOTE_INSN_BLOCK_BEG,
NOTE_INSN_BLOCK_END,


NOTE_INSN_LOOP_BEG,
NOTE_INSN_LOOP_END,




NOTE_INSN_FUNCTION_BEG,






NOTE_INSN_FUNCTION_END,


NOTE_INSN_PROLOGUE_END,


NOTE_INSN_EPILOGUE_BEG,



NOTE_INSN_EH_REGION_BEG,
NOTE_INSN_EH_REGION_END,





NOTE_INSN_REPEATED_LINE_NUMBER,


NOTE_INSN_VAR_LOCATION,



NOTE_INSN_EXPECTED_VALUE,




NOTE_INSN_BASIC_BLOCK,



NOTE_INSN_SWITCH_TEXT_SECTIONS,
# 816 "../.././gcc/rtl.h" 2


  NOTE_INSN_MAX
};



extern const char * const note_insn_name[NOTE_INSN_MAX - NOTE_INSN_BIAS];
# 838 "../.././gcc/rtl.h"
enum label_kind
{
  LABEL_NORMAL = 0,
  LABEL_STATIC_ENTRY,
  LABEL_GLOBAL_ENTRY,
  LABEL_WEAK_ENTRY
};
# 968 "../.././gcc/rtl.h"
extern void init_rtlanal (void);
extern int rtx_cost (rtx, enum rtx_code);
extern int address_cost (rtx, enum machine_mode);
extern unsigned int subreg_lsb (rtx);
extern unsigned int subreg_lsb_1 (enum machine_mode, enum machine_mode,
      unsigned int);
extern unsigned int subreg_regno_offset (unsigned int, enum machine_mode,
      unsigned int, enum machine_mode);
extern unsigned char subreg_offset_representable_p (unsigned int, enum machine_mode,
        unsigned int, enum machine_mode);
extern unsigned int subreg_regno (rtx);
extern unsigned long nonzero_bits (rtx, enum machine_mode);
extern unsigned int num_sign_bit_copies (rtx, enum machine_mode);
# 1326 "../.././gcc/rtl.h"
extern int generating_concat_p;


extern int currently_expanding_to_rtl;




extern int ceil_log2 (unsigned long);


extern rtx expand_builtin_expect_jump (tree, rtx, rtx);


extern void set_stack_check_libfunc (rtx);
extern long trunc_int_for_mode (long, enum machine_mode);
extern rtx plus_constant (rtx, long);


extern rtvec gen_rtvec (int, ...);
extern rtx copy_insn_1 (rtx);
extern rtx copy_insn (rtx);
extern rtx gen_int_mode (long, enum machine_mode);
extern rtx emit_copy_of_insn_after (rtx, rtx);
extern void set_reg_attrs_from_mem (rtx, rtx);
extern void set_mem_attrs_from_reg (rtx, rtx);
extern void set_reg_attrs_for_parm (rtx, rtx);
extern int mem_expr_equal_p (tree, tree);


extern rtx rtx_alloc_stat (enum rtx_code );


extern rtvec rtvec_alloc (int);
extern rtx copy_rtx (rtx);
extern void dump_rtx_statistics (void);


extern rtx copy_rtx_if_shared (rtx);


extern rtx shallow_copy_rtx_stat (rtx );

extern int rtx_equal_p (rtx, rtx);


extern rtvec gen_rtvec_v (int, rtx *);
extern rtx gen_reg_rtx (enum machine_mode);
extern rtx gen_rtx_REG_offset (rtx, enum machine_mode, unsigned int, int);
extern rtx gen_label_rtx (void);
extern rtx gen_lowpart_common (enum machine_mode, rtx);


extern rtx gen_lowpart_if_possible (enum machine_mode, rtx);


extern rtx gen_highpart (enum machine_mode, rtx);
extern rtx gen_highpart_mode (enum machine_mode, enum machine_mode, rtx);
extern rtx operand_subword (rtx, unsigned int, int, enum machine_mode);


extern rtx operand_subword_force (rtx, unsigned int, enum machine_mode);
extern int subreg_lowpart_p (rtx);
extern unsigned int subreg_lowpart_offset (enum machine_mode,
        enum machine_mode);
extern unsigned int subreg_highpart_offset (enum machine_mode,
         enum machine_mode);
extern rtx make_safe_from (rtx, rtx);
extern rtx convert_memory_address (enum machine_mode, rtx);
extern rtx get_insns (void);
extern const char *get_insn_name (int);
extern rtx get_last_insn (void);
extern rtx get_last_insn_anywhere (void);
extern rtx get_first_nonnote_insn (void);
extern rtx get_last_nonnote_insn (void);
extern void start_sequence (void);
extern void push_to_sequence (rtx);
extern void end_sequence (void);
extern rtx immed_double_const (long, long,
          enum machine_mode);



extern rtx lowpart_subreg (enum machine_mode, rtx, enum machine_mode);


extern rtx force_const_mem (enum machine_mode, rtx);



struct function;
extern rtx get_pool_constant (rtx);
extern rtx get_pool_constant_mark (rtx, unsigned char *);
extern enum machine_mode get_pool_mode (rtx);
extern rtx get_pool_constant_for_function (struct function *, rtx);
extern rtx simplify_subtraction (rtx);


extern rtx assign_stack_local (enum machine_mode, long, int);
extern rtx assign_stack_temp (enum machine_mode, long, int);
extern rtx assign_stack_temp_for_type (enum machine_mode,
           long, int, tree);
extern rtx assign_temp (tree, int, int, int);


extern rtx emit_insn_before (rtx, rtx);
extern rtx emit_insn_before_noloc (rtx, rtx);
extern rtx emit_insn_before_setloc (rtx, rtx, int);
extern rtx emit_jump_insn_before (rtx, rtx);
extern rtx emit_jump_insn_before_noloc (rtx, rtx);
extern rtx emit_jump_insn_before_setloc (rtx, rtx, int);
extern rtx emit_call_insn_before (rtx, rtx);
extern rtx emit_call_insn_before_noloc (rtx, rtx);
extern rtx emit_call_insn_before_setloc (rtx, rtx, int);
extern rtx emit_barrier_before (rtx);
extern rtx emit_label_before (rtx, rtx);
extern rtx emit_note_before (int, rtx);
extern rtx emit_insn_after (rtx, rtx);
extern rtx emit_insn_after_noloc (rtx, rtx);
extern rtx emit_insn_after_setloc (rtx, rtx, int);
extern rtx emit_jump_insn_after (rtx, rtx);
extern rtx emit_jump_insn_after_noloc (rtx, rtx);
extern rtx emit_jump_insn_after_setloc (rtx, rtx, int);
extern rtx emit_call_insn_after (rtx, rtx);
extern rtx emit_call_insn_after_noloc (rtx, rtx);
extern rtx emit_call_insn_after_setloc (rtx, rtx, int);
extern rtx emit_barrier_after (rtx);
extern rtx emit_label_after (rtx, rtx);
extern rtx emit_note_after (int, rtx);
extern rtx emit_note_copy_after (rtx, rtx);
extern rtx emit_insn (rtx);
extern rtx emit_jump_insn (rtx);
extern rtx emit_call_insn (rtx);
extern rtx emit_label (rtx);
extern rtx emit_barrier (void);
extern rtx emit_note (int);
extern rtx emit_note_copy (rtx);
extern rtx emit_line_note (location_t);
extern rtx make_insn_raw (rtx);
extern void add_function_usage_to (rtx, rtx);
extern rtx last_call_insn (void);
extern rtx previous_insn (rtx);
extern rtx next_insn (rtx);
extern rtx prev_nonnote_insn (rtx);
extern rtx next_nonnote_insn (rtx);
extern rtx prev_real_insn (rtx);
extern rtx next_real_insn (rtx);
extern rtx prev_active_insn (rtx);
extern rtx next_active_insn (rtx);
extern int active_insn_p (rtx);
extern rtx prev_label (rtx);
extern rtx next_label (rtx);
extern rtx skip_consecutive_labels (rtx);
extern rtx next_cc0_user (rtx);
extern rtx prev_cc0_setter (rtx);


extern int insn_line (rtx);
extern const char * insn_file (rtx);
extern int locator_line (int);
extern const char * locator_file (int);
extern int prologue_locator, epilogue_locator;


extern enum rtx_code reverse_condition (enum rtx_code);
extern enum rtx_code reverse_condition_maybe_unordered (enum rtx_code);
extern enum rtx_code swap_condition (enum rtx_code);
extern enum rtx_code unsigned_condition (enum rtx_code);
extern enum rtx_code signed_condition (enum rtx_code);
extern void mark_jump_label (rtx, rtx, int);
extern void cleanup_barriers (void);


extern unsigned char squeeze_notes (rtx *, rtx *);
extern rtx delete_related_insns (rtx);
extern void delete_jump (rtx);
extern rtx get_label_before (rtx);
extern rtx get_label_after (rtx);
extern rtx follow_jumps (rtx);


extern rtx *find_constant_term_loc (rtx *);


extern rtx try_split (rtx, rtx, int);
extern int split_branch_probability;


extern rtx split_insns (rtx, rtx);


extern rtx simplify_const_unary_operation (enum rtx_code, enum machine_mode,
        rtx, enum machine_mode);
extern rtx simplify_unary_operation (enum rtx_code, enum machine_mode, rtx,
         enum machine_mode);
extern rtx simplify_const_binary_operation (enum rtx_code, enum machine_mode,
         rtx, rtx);
extern rtx simplify_binary_operation (enum rtx_code, enum machine_mode, rtx,
          rtx);
extern rtx simplify_ternary_operation (enum rtx_code, enum machine_mode,
           enum machine_mode, rtx, rtx, rtx);
extern rtx simplify_const_relational_operation (enum rtx_code,
      enum machine_mode, rtx, rtx);
extern rtx simplify_relational_operation (enum rtx_code, enum machine_mode,
       enum machine_mode, rtx, rtx);
extern rtx simplify_gen_binary (enum rtx_code, enum machine_mode, rtx, rtx);
extern rtx simplify_gen_unary (enum rtx_code, enum machine_mode, rtx,
          enum machine_mode);
extern rtx simplify_gen_ternary (enum rtx_code, enum machine_mode,
     enum machine_mode, rtx, rtx, rtx);
extern rtx simplify_gen_relational (enum rtx_code, enum machine_mode,
        enum machine_mode, rtx, rtx);
extern rtx simplify_subreg (enum machine_mode, rtx, enum machine_mode,
       unsigned int);
extern rtx simplify_gen_subreg (enum machine_mode, rtx, enum machine_mode,
    unsigned int);
extern rtx simplify_replace_rtx (rtx, rtx, rtx);
extern rtx simplify_rtx (rtx);
extern rtx avoid_constant_pool_reference (rtx);
extern unsigned char constant_pool_reference_p (rtx x);
extern unsigned char mode_signbit_p (enum machine_mode, rtx);


extern enum machine_mode choose_hard_reg_mode (unsigned int, unsigned int,
            unsigned char);


extern rtx set_unique_reg_note (rtx, enum reg_note, rtx);
# 1565 "../.././gcc/rtl.h"
typedef struct replace_label_data
{
  rtx r1;
  rtx r2;
  unsigned char update_label_nuses;
} replace_label_data;

extern int rtx_addr_can_trap_p (rtx);
extern unsigned char nonzero_address_p (rtx);
extern int rtx_unstable_p (rtx);
extern int rtx_varies_p (rtx, int);
extern int rtx_addr_varies_p (rtx, int);
extern long get_integer_term (rtx);
extern rtx get_related_value (rtx);
extern int global_reg_mentioned_p (rtx);
extern int reg_mentioned_p (rtx, rtx);
extern int count_occurrences (rtx, rtx, int);
extern int reg_referenced_p (rtx, rtx);
extern int reg_used_between_p (rtx, rtx, rtx);
extern int reg_set_between_p (rtx, rtx, rtx);
extern int commutative_operand_precedence (rtx);
extern int swap_commutative_operands_p (rtx, rtx);
extern int modified_between_p (rtx, rtx, rtx);
extern int no_labels_between_p (rtx, rtx);
extern int modified_in_p (rtx, rtx);
extern int reg_set_p (rtx, rtx);
extern rtx single_set_2 (rtx, rtx);
extern int multiple_sets (rtx);
extern int set_noop_p (rtx);
extern int noop_move_p (rtx);
extern rtx find_last_value (rtx, rtx *, rtx, int);
extern int refers_to_regno_p (unsigned int, unsigned int, rtx, rtx *);
extern int reg_overlap_mentioned_p (rtx, rtx);
extern rtx set_of (rtx, rtx);
extern void note_stores (rtx, void (*) (rtx, rtx, void *), void *);
extern void note_uses (rtx *, void (*) (rtx *, void *), void *);
extern int dead_or_set_p (rtx, rtx);
extern int dead_or_set_regno_p (rtx, unsigned int);
extern rtx find_reg_note (rtx, enum reg_note, rtx);
extern rtx find_regno_note (rtx, enum reg_note, unsigned int);
extern rtx find_reg_equal_equiv_note (rtx);
extern int find_reg_fusage (rtx, enum rtx_code, rtx);
extern int find_regno_fusage (rtx, enum rtx_code, unsigned int);
extern int pure_call_p (rtx);
extern void remove_note (rtx, rtx);
extern int side_effects_p (rtx);
extern int volatile_refs_p (rtx);
extern int volatile_insn_p (rtx);
extern int may_trap_p (rtx);
extern int may_trap_or_fault_p (rtx);
extern int inequality_comparisons_p (rtx);
extern rtx replace_rtx (rtx, rtx, rtx);
extern rtx replace_regs (rtx, rtx *, unsigned int, int);
extern int replace_label (rtx *, void *);
extern int rtx_referenced_p (rtx, rtx);
extern unsigned char tablejump_p (rtx, rtx *, rtx *);
extern int computed_jump_p (rtx);
typedef int (*rtx_function) (rtx *, void *);
extern int for_each_rtx (rtx *, rtx_function, void *);
extern rtx regno_use_in (unsigned int, rtx);
extern int auto_inc_p (rtx);
extern int in_expr_list_p (rtx, rtx);
extern void remove_node_from_expr_list (rtx, rtx *);
extern int insns_safe_to_move_p (rtx, rtx, rtx *);
extern int loc_mentioned_in_p (rtx *, rtx);
extern rtx find_first_parameter_load (rtx, rtx);
extern unsigned char keep_with_call_p (rtx);
extern unsigned char label_is_jump_target_p (rtx, rtx);
extern int insn_rtx_cost (rtx);



extern rtx canonicalize_condition (rtx, rtx, int, rtx *, rtx, int, int);



extern rtx get_condition (rtx, rtx *, int, int);




extern rtx find_use_as_address (rtx, rtx, long);



void free_EXPR_LIST_list (rtx *);
void free_INSN_LIST_list (rtx *);
void free_EXPR_LIST_node (rtx);
void free_INSN_LIST_node (rtx);
rtx alloc_INSN_LIST (rtx, rtx);
rtx alloc_EXPR_LIST (int, rtx, rtx);







extern int max_parallel;


extern void free_reg_info (void);


extern int asm_noperands (rtx);
extern const char *decode_asm_operands (rtx, rtx *, rtx **, const char **,
     enum machine_mode *);

extern enum reg_class reg_preferred_class (int);
extern enum reg_class reg_alternate_class (int);

extern void split_all_insns (int);
extern void split_all_insns_noflow (void);


extern rtx const_int_rtx[64 * 2 + 1];





extern rtx const_true_rtx;

extern rtx const_tiny_rtx[3][(int) MAX_MACHINE_MODE];
# 1711 "../.././gcc/rtl.h"
enum global_rtl_index
{
  GR_PC,
  GR_CC0,
  GR_STACK_POINTER,
  GR_FRAME_POINTER,
# 1726 "../.././gcc/rtl.h"
  GR_HARD_FRAME_POINTER,





  GR_ARG_POINTER,


  GR_VIRTUAL_INCOMING_ARGS,
  GR_VIRTUAL_STACK_ARGS,
  GR_VIRTUAL_STACK_DYNAMIC,
  GR_VIRTUAL_OUTGOING_ARGS,
  GR_VIRTUAL_CFA,

  GR_MAX
};


extern rtx global_rtl[GR_MAX];
# 1759 "../.././gcc/rtl.h"
extern rtx pic_offset_table_rtx;
extern rtx static_chain_rtx;
extern rtx static_chain_incoming_rtx;
extern rtx return_address_pointer_rtx;




# 1 "./genrtl.h" 1





extern rtx gen_rtx_fmt_ee (enum rtx_code, enum machine_mode mode,
           rtx arg0, rtx arg1);
extern rtx gen_rtx_fmt_ue (enum rtx_code, enum machine_mode mode,
           rtx arg0, rtx arg1);
extern rtx gen_rtx_fmt_E (enum rtx_code, enum machine_mode mode,
           rtvec arg0);
extern rtx gen_rtx_fmt_e (enum rtx_code, enum machine_mode mode,
           rtx arg0);
extern rtx gen_rtx_fmt_iuuBieiee (enum rtx_code, enum machine_mode mode,
           int arg0, rtx arg1, rtx arg2,
           struct basic_block_def *arg3,
           int arg4, rtx arg5, int arg6,
           rtx arg7, rtx arg8);
extern rtx gen_rtx_fmt_iuuBieiee0 (enum rtx_code, enum machine_mode mode,
           int arg0, rtx arg1, rtx arg2,
           struct basic_block_def *arg3,
           int arg4, rtx arg5, int arg6,
           rtx arg7, rtx arg8);
extern rtx gen_rtx_fmt_iuuBieieee (enum rtx_code, enum machine_mode mode,
           int arg0, rtx arg1, rtx arg2,
           struct basic_block_def *arg3,
           int arg4, rtx arg5, int arg6,
           rtx arg7, rtx arg8, rtx arg9);
extern rtx gen_rtx_fmt_iuu000000 (enum rtx_code, enum machine_mode mode,
           int arg0, rtx arg1, rtx arg2);
extern rtx gen_rtx_fmt_iuuB00is (enum rtx_code, enum machine_mode mode,
           int arg0, rtx arg1, rtx arg2,
           struct basic_block_def *arg3,
           int arg4, const char *arg5);
extern rtx gen_rtx_fmt_s (enum rtx_code, enum machine_mode mode,
           const char *arg0);
extern rtx gen_rtx_fmt_ssiEEsi (enum rtx_code, enum machine_mode mode,
           const char *arg0, const char *arg1,
           int arg2, rtvec arg3, rtvec arg4,
           const char *arg5, int arg6);
extern rtx gen_rtx_fmt_Ei (enum rtx_code, enum machine_mode mode,
           rtvec arg0, int arg1);
extern rtx gen_rtx_fmt_eEee0 (enum rtx_code, enum machine_mode mode,
           rtx arg0, rtvec arg1, rtx arg2,
           rtx arg3);
extern rtx gen_rtx_fmt_eee (enum rtx_code, enum machine_mode mode,
           rtx arg0, rtx arg1, rtx arg2);
extern rtx gen_rtx_fmt_ (enum rtx_code, enum machine_mode mode);
extern rtx gen_rtx_fmt_i (enum rtx_code, enum machine_mode mode,
           int arg0);
extern rtx gen_rtx_fmt_w (enum rtx_code, enum machine_mode mode,
           long arg0);
extern rtx gen_rtx_fmt_0 (enum rtx_code, enum machine_mode mode);
extern rtx gen_rtx_fmt_i00 (enum rtx_code, enum machine_mode mode,
           int arg0);
extern rtx gen_rtx_fmt_ei (enum rtx_code, enum machine_mode mode,
           rtx arg0, int arg1);
extern rtx gen_rtx_fmt_e0 (enum rtx_code, enum machine_mode mode,
           rtx arg0);
extern rtx gen_rtx_fmt_u0 (enum rtx_code, enum machine_mode mode,
           rtx arg0);
extern rtx gen_rtx_fmt_s00 (enum rtx_code, enum machine_mode mode,
           const char *arg0);
extern rtx gen_rtx_fmt_te (enum rtx_code, enum machine_mode mode,
           union tree_node *arg0, rtx arg1);
extern rtx gen_rtx_fmt_iss (enum rtx_code, enum machine_mode mode,
           int arg0, const char *arg1,
           const char *arg2);
extern rtx gen_rtx_fmt_is (enum rtx_code, enum machine_mode mode,
           int arg0, const char *arg1);
extern rtx gen_rtx_fmt_isE (enum rtx_code, enum machine_mode mode,
           int arg0, const char *arg1,
           rtvec arg2);
extern rtx gen_rtx_fmt_iE (enum rtx_code, enum machine_mode mode,
           int arg0, rtvec arg1);
extern rtx gen_rtx_fmt_sEss (enum rtx_code, enum machine_mode mode,
           const char *arg0, rtvec arg1,
           const char *arg2, const char *arg3);
extern rtx gen_rtx_fmt_eE (enum rtx_code, enum machine_mode mode,
           rtx arg0, rtvec arg1);
extern rtx gen_rtx_fmt_Ess (enum rtx_code, enum machine_mode mode,
           rtvec arg0, const char *arg1,
           const char *arg2);
extern rtx gen_rtx_fmt_ses (enum rtx_code, enum machine_mode mode,
           const char *arg0, rtx arg1,
           const char *arg2);
extern rtx gen_rtx_fmt_ss (enum rtx_code, enum machine_mode mode,
           const char *arg0, const char *arg1);
extern rtx gen_rtx_fmt_sies (enum rtx_code, enum machine_mode mode,
           const char *arg0, int arg1,
           rtx arg2, const char *arg3);
extern rtx gen_rtx_fmt_sse (enum rtx_code, enum machine_mode mode,
           const char *arg0, const char *arg1,
           rtx arg2);
extern rtx gen_rtx_fmt_sE (enum rtx_code, enum machine_mode mode,
           const char *arg0, rtvec arg1);
extern rtx gen_rtx_fmt_ii (enum rtx_code, enum machine_mode mode,
           int arg0, int arg1);
extern rtx gen_rtx_fmt_Ee (enum rtx_code, enum machine_mode mode,
           rtvec arg0, rtx arg1);
# 1768 "../.././gcc/rtl.h" 2
# 1779 "../.././gcc/rtl.h"
extern rtx gen_rtx_CONST_INT (enum machine_mode, long);
extern rtx gen_rtx_CONST_VECTOR (enum machine_mode, rtvec);
extern rtx gen_raw_REG (enum machine_mode, int);
extern rtx gen_rtx_REG (enum machine_mode, unsigned);
extern rtx gen_rtx_SUBREG (enum machine_mode, rtx, int);
extern rtx gen_rtx_MEM (enum machine_mode, rtx);
# 1852 "../.././gcc/rtl.h"
extern rtx output_constant_def (tree, int);
extern rtx lookup_constant_def (tree);



extern int flow2_completed;




extern int reload_completed;


extern int epilogue_completed;




extern int reload_in_progress;







extern int cse_not_expected;



extern int no_new_pseudos;





extern int rtx_to_tree_code (enum rtx_code);


extern int delete_trivially_dead_insns (rtx, int);
extern int cse_main (rtx, int, FILE *);
extern void cse_condition_code_reg (void);
extern int exp_equiv_p (rtx, rtx, int, unsigned char);
extern unsigned hash_rtx (rtx x, enum machine_mode, int *, int *, unsigned char);


extern int comparison_dominates_p (enum rtx_code, enum rtx_code);
extern int condjump_p (rtx);
extern int any_condjump_p (rtx);
extern int any_uncondjump_p (rtx);
extern rtx pc_set (rtx);
extern rtx condjump_label (rtx);
extern int simplejump_p (rtx);
extern int returnjump_p (rtx);
extern int onlyjump_p (rtx);
extern int only_sets_cc0_p (rtx);
extern int sets_cc0_p (rtx);
extern int invert_jump_1 (rtx, rtx);
extern int invert_jump (rtx, rtx, int);
extern int rtx_renumbered_equal_p (rtx, rtx);
extern int true_regnum (rtx);
extern unsigned int reg_or_subregno (rtx);
extern int redirect_jump_1 (rtx, rtx);
extern void redirect_jump_2 (rtx, rtx, rtx, int, int);
extern int redirect_jump (rtx, rtx, int);
extern void rebuild_jump_labels (rtx);
extern rtx reversed_comparison (rtx, enum machine_mode);
extern enum rtx_code reversed_comparison_code (rtx, rtx);
extern enum rtx_code reversed_comparison_code_parts (enum rtx_code,
           rtx, rtx, rtx);
extern void delete_for_peephole (rtx, rtx);
extern int condjump_in_parallel_p (rtx);
extern void purge_line_number_notes (void);


extern int max_reg_num (void);
extern int max_label_num (void);
extern int get_first_label_num (void);
extern void maybe_set_first_label_num (rtx);
extern void delete_insns_since (rtx);
extern void mark_reg_pointer (rtx, int);
extern void mark_user_reg (rtx);
extern void reset_used_flags (rtx);
extern void set_used_flags (rtx);
extern void reorder_insns (rtx, rtx, rtx);
extern void reorder_insns_nobb (rtx, rtx, rtx);
extern int get_max_uid (void);
extern int in_sequence_p (void);
extern void force_next_line_note (void);
extern void init_emit (void);
extern void init_emit_once (int);
extern void push_topmost_sequence (void);
extern void pop_topmost_sequence (void);
extern void set_new_first_and_last_insn (rtx, rtx);
extern void unshare_all_rtl (void);
extern void unshare_all_rtl_again (rtx);
extern void unshare_all_rtl_in_chain (rtx);
extern void verify_rtl_sharing (void);
extern void set_first_insn (rtx);
extern void set_last_insn (rtx);
extern void link_cc0_insns (rtx);
extern void add_insn (rtx);
extern void add_insn_before (rtx, rtx);
extern void add_insn_after (rtx, rtx);
extern void remove_insn (rtx);
extern void emit_insn_after_with_line_notes (rtx, rtx, rtx);
extern rtx emit (rtx);
extern void renumber_insns (FILE *);
extern void remove_unnecessary_notes (void);
extern rtx delete_insn (rtx);
extern rtx entry_of_function (void);
extern void delete_insn_chain (rtx, rtx);
extern rtx unlink_insn_chain (rtx, rtx);
extern rtx delete_insn_and_edges (rtx);
extern void delete_insn_chain_and_edges (rtx, rtx);
extern rtx gen_lowpart_SUBREG (enum machine_mode, rtx);
extern rtx gen_const_mem (enum machine_mode, rtx);
extern rtx gen_frame_mem (enum machine_mode, rtx);
extern rtx gen_tmp_stack_mem (enum machine_mode, rtx);
extern unsigned char validate_subreg (enum machine_mode, enum machine_mode,
        rtx, unsigned int);


extern int combine_instructions (rtx, unsigned int);
extern unsigned int extended_count (rtx, enum machine_mode, int);
extern rtx remove_death (unsigned int, rtx);
extern void dump_combine_stats (FILE *);
extern void dump_combine_total_stats (FILE *);

extern void web_main (void);


extern void schedule_insns (FILE *);


extern void schedule_ebbs (FILE *);


extern void fix_sched_param (const char *, const char *);


extern const char *print_rtx_head;
extern void debug_rtx (rtx);
extern void debug_rtx_list (rtx, int);
extern void debug_rtx_range (rtx, rtx);
extern rtx debug_rtx_find (rtx, int);
extern void print_mem_expr (FILE *, tree);
extern void print_rtl (FILE *, rtx);
extern void print_simple_rtl (FILE *, rtx);
extern int print_rtl_single (FILE *, rtx);
extern void print_inline_rtx (FILE *, rtx, int);


extern void init_loop (void);
extern void loop_optimize (rtx, FILE *, int);


extern void branch_target_load_optimize (unsigned char);


extern void reposition_prologue_and_epilogue_notes (rtx);
extern void thread_prologue_and_epilogue_insns (rtx);
extern int prologue_epilogue_contains (rtx);
extern int sibcall_epilogue_contains (rtx);
extern void mark_temp_addr_taken (rtx);
extern void update_temp_slot_address (rtx, rtx);


extern void expand_null_return (void);
extern void expand_naked_return (void);
extern void emit_jump (rtx);


extern rtx move_by_pieces (rtx, rtx, unsigned long,
      unsigned int, int);


extern void recompute_reg_usage (void);
extern int initialize_uninitialized_subregs (void);
extern void delete_dead_jumptables (void);
extern void print_rtl_with_bb (FILE *, rtx);
extern void dump_flow_info (FILE *);


extern void init_expmed (void);
extern void expand_inc (rtx, rtx);
extern void expand_dec (rtx, rtx);


extern unsigned char can_copy_p (enum machine_mode);
extern rtx fis_get_condition (rtx);
extern int gcse_main (rtx, FILE *);
extern int bypass_jumps (FILE *);


extern void gcse_after_reload_main (rtx);


extern void mark_elimination (int, int);
extern int global_alloc (FILE *);
extern void dump_global_regs (FILE *);




extern void build_insn_chain (rtx);


extern int reg_classes_intersect_p (enum reg_class, enum reg_class);
extern int reg_class_subset_p (enum reg_class, enum reg_class);
extern void globalize_reg (int);
extern void init_reg_modes_once (void);
extern void init_regs (void);
extern void init_fake_stack_mems (void);
extern void init_reg_sets (void);
extern void regclass_init (void);
extern void regclass (rtx, int, FILE *);
extern void reg_scan (rtx, unsigned int);
extern void reg_scan_update (rtx, rtx, unsigned int);
extern void fix_register (const char *, int, int);
extern void init_subregs_of_mode (void);
extern void record_subregs_of_mode (rtx);




extern unsigned char invalid_mode_change_p (unsigned int, enum reg_class,
       enum machine_mode);


extern void regmove_optimize (rtx, int, FILE *);
extern void combine_stack_adjustments (void);


extern void dbr_schedule (rtx, FILE *);


extern void dump_local_alloc (FILE *);
extern int local_alloc (void);


extern int function_invariant_p (rtx);


extern unsigned char reg_to_stack (FILE *);


enum libcall_type
{
  LCT_NORMAL = 0,
  LCT_CONST = 1,
  LCT_PURE = 2,
  LCT_CONST_MAKE_BLOCK = 3,
  LCT_PURE_MAKE_BLOCK = 4,
  LCT_NORETURN = 5,
  LCT_THROW = 6,
  LCT_RETURNS_TWICE = 7
};

extern void emit_library_call (rtx, enum libcall_type, enum machine_mode, int,
          ...);
extern rtx emit_library_call_value (rtx, rtx, enum libcall_type,
        enum machine_mode, int, ...);


extern int in_data_section (void);
extern void init_varasm_once (void);
extern enum tls_model decl_default_tls_model (tree);


extern void traverse_md_constants (int (*) (void **, void *), void *);
struct md_constant { char *name, *value; };


extern int read_skip_spaces (FILE *);
extern unsigned char read_rtx (FILE *, rtx *, int *);
extern void copy_rtx_ptr_loc (const void *, const void *);
extern void print_rtx_ptr_loc (const void *);
extern const char *join_c_conditions (const char *, const char *);
extern void print_c_condition (const char *);
extern const char *read_rtx_filename;
extern int read_rtx_lineno;


extern void clear_reg_alias_info (rtx);
extern rtx canon_rtx (rtx);
extern int true_dependence (rtx, enum machine_mode, rtx, int (*)(rtx, int));
extern rtx get_addr (rtx);
extern int canon_true_dependence (rtx, enum machine_mode, rtx, rtx,
      int (*)(rtx, int));
extern int read_dependence (rtx, rtx);
extern int anti_dependence (rtx, rtx);
extern int output_dependence (rtx, rtx);
extern void mark_constant_function (void);
extern void init_alias_once (void);
extern void init_alias_analysis (void);
extern void end_alias_analysis (void);
extern unsigned char memory_modified_in_insn_p (rtx, rtx);
extern rtx find_base_term (rtx);
extern rtx gen_hard_reg_clobber (enum machine_mode, unsigned int);
extern rtx get_reg_known_value (unsigned int);
extern unsigned char get_reg_known_equiv_p (unsigned int);


extern int stack_regs_mentioned (rtx insn);



extern rtx stack_limit_rtx;


extern void regrename_optimize (void);
extern void copyprop_hardreg_forward (void);


extern void if_convert (int);


extern void invert_br_probabilities (rtx);
extern unsigned char expensive_function_p (int);

extern void tracer (unsigned int);


extern void variable_tracking_main (void);


extern void get_mode_bounds (enum machine_mode, int, enum machine_mode,
        rtx *, rtx *);


extern rtx reversed_condition (rtx);
extern rtx compare_and_jump_seq (rtx, rtx, enum rtx_code, rtx, int, rtx);


extern rtx canon_condition (rtx);
extern void simplify_using_condition (rtx, rtx *, struct bitmap_head_def *);


extern void reg_alloc (void);


extern void sms_schedule (FILE *);

struct rtl_hooks
{
  rtx (*gen_lowpart) (enum machine_mode, rtx);
  rtx (*gen_lowpart_no_emit) (enum machine_mode, rtx);
  rtx (*reg_nonzero_bits) (rtx, enum machine_mode, rtx, enum machine_mode,
      unsigned long, unsigned long *);
  rtx (*reg_num_sign_bit_copies) (rtx, enum machine_mode, rtx, enum machine_mode,
      unsigned int, unsigned int *);


};


extern struct rtl_hooks rtl_hooks;


extern const struct rtl_hooks general_rtl_hooks;
# 9 "insn-emit.c" 2
# 1 "tm_p.h" 1



# 1 "../.././gcc/config/i386/i386-protos.h" 1
# 23 "../.././gcc/config/i386/i386-protos.h"
extern void override_options (void);
extern void optimization_options (int, int);

extern int ix86_can_use_return_insn_p (void);
extern int ix86_frame_pointer_required (void);
extern void ix86_setup_frame_addresses (void);

extern void ix86_file_end (void);
extern long ix86_initial_elimination_offset (int, int);
extern void ix86_expand_prologue (void);
extern void ix86_expand_epilogue (int);

extern void ix86_output_addr_vec_elt (FILE *, int);
extern void ix86_output_addr_diff_elt (FILE *, int, int);


extern int ix86_aligned_p (rtx);

extern int standard_80387_constant_p (rtx);
extern const char *standard_80387_constant_opcode (rtx);
extern rtx standard_80387_constant_rtx (int);
extern int standard_sse_constant_p (rtx);
extern int symbolic_reference_mentioned_p (rtx);
extern unsigned char extended_reg_mentioned_p (rtx);
extern unsigned char x86_extended_QIreg_mentioned_p (rtx);
extern unsigned char x86_extended_reg_mentioned_p (rtx);
extern enum machine_mode ix86_cc_mode (enum rtx_code, rtx, rtx);

extern int ix86_expand_movmem (rtx, rtx, rtx, rtx);
extern int ix86_expand_clrmem (rtx, rtx, rtx);
extern int ix86_expand_strlen (rtx, rtx, rtx, rtx);

extern unsigned char legitimate_constant_p (rtx);
extern unsigned char constant_address_p (rtx);
extern unsigned char legitimate_pic_operand_p (rtx);
extern int legitimate_pic_address_disp_p (rtx);
extern int legitimate_address_p (enum machine_mode, rtx, int);
extern rtx legitimize_address (rtx, rtx, enum machine_mode);

extern void print_reg (rtx, int, FILE*);
extern void print_operand (FILE*, rtx, int);
extern void print_operand_address (FILE*, rtx);
extern unsigned char output_addr_const_extra (FILE*, rtx);

extern void split_di (rtx[], int, rtx[], rtx[]);
extern void split_ti (rtx[], int, rtx[], rtx[]);

extern const char *output_set_got (rtx);
extern const char *output_387_binary_op (rtx, rtx*);
extern const char *output_387_reg_move (rtx, rtx*);
extern const char *output_fix_trunc (rtx, rtx*, int);
extern const char *output_fp_compare (rtx, rtx*, int, int);

extern void ix86_expand_clear (rtx);
extern void ix86_expand_move (enum machine_mode, rtx[]);
extern void ix86_expand_vector_move (enum machine_mode, rtx[]);
extern void ix86_expand_vector_move_misalign (enum machine_mode, rtx[]);
extern void ix86_expand_push (enum machine_mode, rtx);
extern rtx ix86_fixup_binary_operands (enum rtx_code,
           enum machine_mode, rtx[]);
extern void ix86_fixup_binary_operands_no_copy (enum rtx_code,
      enum machine_mode, rtx[]);
extern void ix86_expand_binary_operator (enum rtx_code,
      enum machine_mode, rtx[]);
extern int ix86_binary_operator_ok (enum rtx_code, enum machine_mode, rtx[]);
extern void ix86_expand_unary_operator (enum rtx_code, enum machine_mode,
     rtx[]);
extern rtx ix86_build_signbit_mask (enum machine_mode, unsigned char, unsigned char);
extern void ix86_expand_fp_absneg_operator (enum rtx_code, enum machine_mode,
         rtx[]);
extern void ix86_expand_copysign (rtx []);
extern void ix86_split_copysign_const (rtx []);
extern void ix86_split_copysign_var (rtx []);
extern int ix86_unary_operator_ok (enum rtx_code, enum machine_mode, rtx[]);
extern int ix86_match_ccmode (rtx, enum machine_mode);
extern rtx ix86_expand_compare (enum rtx_code, rtx *, rtx *);
extern int ix86_use_fcomi_compare (enum rtx_code);
extern void ix86_expand_branch (enum rtx_code, rtx);
extern int ix86_expand_setcc (enum rtx_code, rtx);
extern int ix86_expand_int_movcc (rtx[]);
extern int ix86_expand_fp_movcc (rtx[]);
extern unsigned char ix86_expand_fp_vcond (rtx[]);
extern unsigned char ix86_expand_int_vcond (rtx[]);
extern int ix86_expand_int_addcc (rtx[]);
extern void ix86_expand_call (rtx, rtx, rtx, rtx, rtx, int);
extern void x86_initialize_trampoline (rtx, rtx, rtx);
extern rtx ix86_zero_extend_to_Pmode (rtx);
extern void ix86_split_long_move (rtx[]);
extern void ix86_split_ashl (rtx *, rtx, enum machine_mode);
extern void ix86_split_ashr (rtx *, rtx, enum machine_mode);
extern void ix86_split_lshr (rtx *, rtx, enum machine_mode);
extern rtx ix86_find_base_term (rtx);
extern int ix86_check_movabs (rtx, int);

extern rtx assign_386_stack_local (enum machine_mode, enum ix86_stack_slot);
extern int ix86_attr_length_immediate_default (rtx, int);
extern int ix86_attr_length_address_default (rtx);

extern enum machine_mode ix86_fp_compare_mode (enum rtx_code);

extern rtx ix86_libcall_value (enum machine_mode);
extern unsigned char ix86_function_value_regno_p (int);
extern unsigned char ix86_function_arg_regno_p (int);
extern int ix86_function_arg_boundary (enum machine_mode, tree);
extern int ix86_return_in_memory (tree);
extern void ix86_va_start (tree, rtx);
extern rtx ix86_va_arg (tree, tree);

extern rtx ix86_force_to_memory (enum machine_mode, rtx);
extern void ix86_free_from_memory (enum machine_mode);
extern void ix86_split_fp_branch (enum rtx_code code, rtx, rtx,
      rtx, rtx, rtx, rtx);
extern unsigned char ix86_hard_regno_mode_ok (int, enum machine_mode);
extern unsigned char ix86_modes_tieable_p (enum machine_mode, enum machine_mode);
extern int ix86_register_move_cost (enum machine_mode, enum reg_class,
        enum reg_class);
extern int ix86_secondary_memory_needed (enum reg_class, enum reg_class,
      enum machine_mode, int);
extern unsigned char ix86_cannot_change_mode_class (enum machine_mode,
        enum machine_mode, enum reg_class);
extern enum reg_class ix86_preferred_reload_class (rtx, enum reg_class);
extern int ix86_memory_move_cost (enum machine_mode, enum reg_class, int);
extern int ix86_mode_needed (int, rtx);
extern void emit_i387_cw_initialization (int);
extern unsigned char ix86_fp_jump_nontrivial_p (enum rtx_code);
extern void x86_order_regs_for_local_alloc (void);
extern void x86_function_profiler (FILE *, int);
extern void x86_emit_floatuns (rtx [2]);
extern void ix86_emit_fp_unordered_jump (rtx);

extern void ix86_emit_i387_log1p (rtx, rtx);

extern enum rtx_code ix86_reverse_condition (enum rtx_code, enum machine_mode);
# 181 "../.././gcc/config/i386/i386-protos.h"
extern rtx ix86_tls_get_addr (void);

extern void ix86_expand_vector_init (unsigned char, rtx, rtx);
extern void ix86_expand_vector_set (unsigned char, rtx, rtx, int);
extern void ix86_expand_vector_extract (unsigned char, rtx, rtx, int);
extern void ix86_expand_reduc_v4sf (rtx (*)(rtx, rtx, rtx), rtx, rtx);


extern int i386_pe_dllexport_name_p (const char *);
extern int i386_pe_dllimport_name_p (const char *);
extern void i386_pe_unique_section (tree, int);
extern void i386_pe_declare_function_type (FILE *, const char *, int);
extern void i386_pe_record_external_function (tree, const char *);
extern void i386_pe_record_exported_symbol (const char *, int);
extern void i386_pe_asm_file_end (FILE *);
extern void i386_pe_encode_section_info (tree, rtx, int);
extern const char *i386_pe_strip_name_encoding (const char *);
extern const char *i386_pe_strip_name_encoding_full (const char *);
extern void i386_pe_output_labelref (FILE *, const char *);
extern unsigned char i386_pe_valid_dllimport_attribute_p (tree);


extern void i386_pe_adjust_class_at_definition (tree);
extern unsigned char i386_pe_type_dllimport_p (tree);
extern unsigned char i386_pe_type_dllexport_p (tree);

extern rtx maybe_get_pool_constant (rtx);

extern char internal_label_prefix[16];
extern int internal_label_prefix_len;

enum ix86_address_seg { SEG_DEFAULT, SEG_FS, SEG_GS };
struct ix86_address
{
  rtx base, index, disp;
  long scale;
  enum ix86_address_seg seg;
};

extern int ix86_decompose_address (rtx, struct ix86_address *);
extern int memory_address_length (rtx addr);
extern void x86_output_aligned_bss (FILE *, tree, const char *,
        unsigned long, int);
extern void x86_elf_aligned_common (FILE *, const char *,
        unsigned long, int);


extern void ix86_fp_comparison_codes (enum rtx_code code, enum rtx_code *,
          enum rtx_code *, enum rtx_code *);
extern enum rtx_code ix86_fp_compare_code_to_integer (enum rtx_code);

extern int asm_preferred_eh_data_format (int, int);
# 5 "tm_p.h" 2
# 1 "tm-preds.h" 1







extern int general_operand (rtx, enum machine_mode);
extern int address_operand (rtx, enum machine_mode);
extern int register_operand (rtx, enum machine_mode);
extern int pmode_register_operand (rtx, enum machine_mode);
extern int scratch_operand (rtx, enum machine_mode);
extern int immediate_operand (rtx, enum machine_mode);
extern int const_int_operand (rtx, enum machine_mode);
extern int const_double_operand (rtx, enum machine_mode);
extern int nonimmediate_operand (rtx, enum machine_mode);
extern int nonmemory_operand (rtx, enum machine_mode);
extern int push_operand (rtx, enum machine_mode);
extern int pop_operand (rtx, enum machine_mode);
extern int memory_operand (rtx, enum machine_mode);
extern int indirect_operand (rtx, enum machine_mode);
extern int comparison_operator (rtx, enum machine_mode);
extern int any_fp_register_operand (rtx, enum machine_mode);
extern int fp_register_operand (rtx, enum machine_mode);
extern int register_and_not_any_fp_reg_operand (rtx, enum machine_mode);
extern int register_and_not_fp_reg_operand (rtx, enum machine_mode);
extern int mmx_reg_operand (rtx, enum machine_mode);
extern int q_regs_operand (rtx, enum machine_mode);
extern int non_q_regs_operand (rtx, enum machine_mode);
extern int ext_register_operand (rtx, enum machine_mode);
extern int flags_reg_operand (rtx, enum machine_mode);
extern int x86_64_immediate_operand (rtx, enum machine_mode);
extern int x86_64_zext_immediate_operand (rtx, enum machine_mode);
extern int x86_64_general_operand (rtx, enum machine_mode);
extern int x86_64_szext_general_operand (rtx, enum machine_mode);
extern int x86_64_nonmemory_operand (rtx, enum machine_mode);
extern int x86_64_szext_nonmemory_operand (rtx, enum machine_mode);
extern int pic_32bit_operand (rtx, enum machine_mode);
extern int x86_64_movabs_operand (rtx, enum machine_mode);
extern int symbolic_operand (rtx, enum machine_mode);
extern int pic_symbolic_operand (rtx, enum machine_mode);
extern int local_symbolic_operand (rtx, enum machine_mode);
extern int tls_symbolic_operand (rtx, enum machine_mode);
extern int constant_call_address_operand (rtx, enum machine_mode);
extern int register_no_elim_operand (rtx, enum machine_mode);
extern int index_register_operand (rtx, enum machine_mode);
extern int general_no_elim_operand (rtx, enum machine_mode);
extern int nonmemory_no_elim_operand (rtx, enum machine_mode);
extern int call_insn_operand (rtx, enum machine_mode);
extern int sibcall_insn_operand (rtx, enum machine_mode);
extern int const0_operand (rtx, enum machine_mode);
extern int const1_operand (rtx, enum machine_mode);
extern int const8_operand (rtx, enum machine_mode);
extern int const248_operand (rtx, enum machine_mode);
extern int const_0_to_1_operand (rtx, enum machine_mode);
extern int const_0_to_3_operand (rtx, enum machine_mode);
extern int const_0_to_7_operand (rtx, enum machine_mode);
extern int const_0_to_15_operand (rtx, enum machine_mode);
extern int const_0_to_63_operand (rtx, enum machine_mode);
extern int const_0_to_255_operand (rtx, enum machine_mode);
extern int const_0_to_255_mul_8_operand (rtx, enum machine_mode);
extern int const_1_to_31_operand (rtx, enum machine_mode);
extern int const_2_to_3_operand (rtx, enum machine_mode);
extern int const_4_to_7_operand (rtx, enum machine_mode);
extern int const_pow2_1_to_8_operand (rtx, enum machine_mode);
extern int const_pow2_1_to_128_operand (rtx, enum machine_mode);
extern int incdec_operand (rtx, enum machine_mode);
extern int reg_or_pm1_operand (rtx, enum machine_mode);
extern int shiftdi_operand (rtx, enum machine_mode);
extern int ashldi_input_operand (rtx, enum machine_mode);
extern int zero_extended_scalar_load_operand (rtx, enum machine_mode);
extern int vector_move_operand (rtx, enum machine_mode);
extern int reg_or_0_operand (rtx, enum machine_mode);
extern int no_seg_address_operand (rtx, enum machine_mode);
extern int aligned_operand (rtx, enum machine_mode);
extern int memory_displacement_operand (rtx, enum machine_mode);
extern int long_memory_operand (rtx, enum machine_mode);
extern int fcmov_comparison_operator (rtx, enum machine_mode);
extern int sse_comparison_operator (rtx, enum machine_mode);
extern int ix86_comparison_operator (rtx, enum machine_mode);
extern int ix86_carry_flag_operator (rtx, enum machine_mode);
extern int cmp_fp_expander_operand (rtx, enum machine_mode);
extern int binary_fp_operator (rtx, enum machine_mode);
extern int mult_operator (rtx, enum machine_mode);
extern int div_operator (rtx, enum machine_mode);
extern int float_operator (rtx, enum machine_mode);
extern int arith_or_logical_operator (rtx, enum machine_mode);
extern int promotable_binary_operator (rtx, enum machine_mode);
extern int cmpsi_operand_1 (rtx, enum machine_mode);
extern int cmpsi_operand (rtx, enum machine_mode);
extern int compare_operator (rtx, enum machine_mode);
extern int absneg_operator (rtx, enum machine_mode);
# 6 "tm_p.h" 2
# 10 "insn-emit.c" 2
# 1 "../.././gcc/function.h" 1
# 25 "../.././gcc/function.h"
struct var_refs_queue
{
  rtx modified;
  enum machine_mode promoted_mode;
  int unsignedp;
  struct var_refs_queue *next;
};






struct sequence_stack
{

  rtx first;
  rtx last;
  struct sequence_stack *next;
};

extern struct sequence_stack *sequence_stack;



struct simple_obstack_stack
{
  struct obstack *obstack;
  struct simple_obstack_stack *next;
};

struct emit_status
{


  int x_reg_rtx_no;


  int x_first_label_num;






  rtx x_first_insn;
  rtx x_last_insn;





  struct sequence_stack *sequence_stack;



  int x_cur_insn_uid;



  location_t x_last_location;





  int regno_pointer_align_length;




  unsigned char *
    regno_pointer_align;



  rtx * x_regno_reg_rtx;
};
# 111 "../.././gcc/function.h"
struct expr_status
{


  int x_pending_stack_adjust;
# 132 "../.././gcc/function.h"
  int x_inhibit_defer_pop;





  int x_stack_pointer_delta;




  rtx x_saveregs_value;


  rtx x_apply_args_value;


  rtx x_forced_labels;
};
# 162 "../.././gcc/function.h"
struct function
{
  struct eh_status *eh;
  struct eh_status *saved_eh;
  struct expr_status *expr;
  struct emit_status *emit;
  struct varasm_status *varasm;


  struct control_flow_graph *cfg;
  struct control_flow_graph *saved_cfg;
  unsigned char after_inlining;





  tree saved_args;
  tree saved_static_chain_decl;
  tree saved_blocks;
  tree saved_unexpanded_var_list;




  tree decl;


  struct function *outer;




  int pops_args;




  int args_size;




  int pretend_args_size;



  int outgoing_args_size;



  rtx arg_offset_rtx;



  CUMULATIVE_ARGS args_info;





  rtx return_rtx;


  rtx internal_arg_pointer;



  struct initial_value_struct *hard_reg_initial_vals;



  rtx x_nonlocal_goto_handler_labels;




  rtx x_return_label;




  rtx x_naked_return_label;



  rtx x_stack_slot_list;


  rtx x_tail_recursion_reentry;





  rtx x_arg_pointer_save_area;




  long x_frame_offset;



  tree static_chain_decl;




  tree nonlocal_goto_save_area;


  rtx x_parm_birth_insn;


  struct varray_head_tag * x_used_temp_slots;


  struct temp_slot *x_avail_temp_slots;


  int x_temp_slot_level;



  struct var_refs_queue *fixup_var_refs_queue;


  int inlinable;
  int no_debugging_symbols;
  rtvec original_arg_vector;
  tree original_decl_initial;


  int inl_max_label_num;


  int funcdef_no;






  int max_loop_depth;




  struct machine_function * machine;

  unsigned int stack_alignment_needed;

  unsigned int preferred_stack_boundary;

  unsigned char recursive_call_emit;

  unsigned char tail_call_emit;


  struct language_function * language;





  rtx epilogue_delay_list;



  enum function_frequency {


    FUNCTION_FREQUENCY_UNLIKELY_EXECUTED,

    FUNCTION_FREQUENCY_NORMAL,


    FUNCTION_FREQUENCY_HOT
  } function_frequency;



  int max_jumptable_ents;


  int last_label_uid;


  location_t function_end_locus;


  struct varray_head_tag *ib_boundaries_block;


  tree unexpanded_var_list;





  const char *hot_section_label;
  const char *cold_section_label;
  const char *hot_section_end_label;
  const char *cold_section_end_label;




  const char *unlikely_text_section_name;



  tree stack_protect_guard;





  unsigned int returns_struct : 1;



  unsigned int returns_pcc_struct : 1;


  unsigned int returns_pointer : 1;


  unsigned int calls_setjmp : 1;



  unsigned int calls_alloca : 1;



  unsigned int accesses_prior_frames : 1;


  unsigned int calls_eh_return : 1;



  unsigned int has_nonlocal_label : 1;



  unsigned int has_nonlocal_goto : 1;





  unsigned int is_thunk : 1;






  unsigned int all_throwers_are_sibcalls : 1;


  unsigned int profile : 1;



  unsigned int limit_stack : 1;


  unsigned int stdarg : 1;
# 442 "../.././gcc/function.h"
  unsigned int x_dont_save_pending_sizes_p : 1;


  unsigned int uses_const_pool : 1;


  unsigned int uses_pic_offset_table : 1;


  unsigned int uses_eh_lsda : 1;


  unsigned int arg_pointer_save_area_init : 1;




  unsigned int va_list_gpr_size : 8;



  unsigned int va_list_fpr_size : 8;
};







extern struct function *cfun;


extern struct function *outer_function_chain;


extern int virtuals_instantiated;


extern int trampolines_created;
# 524 "../.././gcc/function.h"
struct function *find_function_data (tree);



extern void reorder_blocks (void);


extern void number_blocks (tree);

extern void clear_block_marks (tree);
extern tree blocks_nreverse (tree);
extern void reset_block_changes (void);
extern void record_block_change (tree);
extern void finalize_block_changes (void);
extern void check_block_change (rtx, tree *);
extern void free_block_changes (void);




extern long get_frame_size (void);



extern struct machine_function * (*init_machine_status) (void);


extern void free_after_parsing (struct function *);
extern void free_after_compilation (struct function *);

extern void init_varasm_status (struct function *);


extern void diddle_return_value (void (*)(rtx, void*), void*);
extern void clobber_return_register (void);
extern void use_return_register (void);


extern rtx get_arg_pointer_save_area (struct function *);

extern void init_virtual_regs (struct emit_status *);
extern void instantiate_virtual_regs (void);


extern const char *current_function_name (void);

extern void do_warn_unused_parameter (tree);

extern unsigned char pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,
          tree, unsigned char);
extern unsigned char reference_callee_copied (CUMULATIVE_ARGS *, enum machine_mode,
         tree, unsigned char);
# 11 "insn-emit.c" 2
# 1 "../.././gcc/expr.h" 1
# 27 "../.././gcc/expr.h"
# 1 "../.././gcc/function.h" 1
# 28 "../.././gcc/expr.h" 2

# 1 "../.././gcc/rtl.h" 1
# 30 "../.././gcc/expr.h" 2

# 1 "../.././gcc/flags.h" 1
# 26 "../.././gcc/flags.h"
# 1 "./options.h" 1
# 27 "../.././gcc/flags.h" 2

enum debug_info_type
{
  NO_DEBUG,
  DBX_DEBUG,
  SDB_DEBUG,
  DWARF2_DEBUG,
  XCOFF_DEBUG,
  VMS_DEBUG,
  VMS_AND_DWARF2_DEBUG

};


extern enum debug_info_type write_symbols;


extern const char *const debug_type_names[];

enum debug_info_level
{
  DINFO_LEVEL_NONE,
  DINFO_LEVEL_TERSE,
  DINFO_LEVEL_NORMAL,
  DINFO_LEVEL_VERBOSE
};


extern enum debug_info_level debug_info_level;



extern unsigned char use_gnu_debug_info_extensions;




enum symbol_visibility
{
  VISIBILITY_DEFAULT,
  VISIBILITY_INTERNAL,
  VISIBILITY_HIDDEN,
  VISIBILITY_PROTECTED
};



extern enum symbol_visibility default_visibility;

struct visibility_flags
{
  unsigned inpragma : 1;
  unsigned inlines_hidden : 1;
};


extern struct visibility_flags visibility_options;



extern int optimize;



extern int optimize_size;




extern unsigned char extra_warnings;





extern void set_Wunused (int setting);





extern unsigned char warn_larger_than;
extern long larger_than_size;




extern int warn_strict_aliasing;




extern int in_system_header;




extern int flag_print_asm_name;





extern int flag_signed_char;




extern int flag_short_enums;



extern int flag_pcc_struct_return;





extern int flag_complex_method;




extern int flag_really_no_inline;



extern int rtl_dump_and_exit;



extern int flag_gen_aux_info;




extern int flag_dump_unnumbered;




extern int flag_pedantic_errors;




extern int flag_shlib;
# 182 "../.././gcc/flags.h"
extern int flag_debug_asm;



extern int flag_next_runtime;

extern int flag_dump_rtl_in_asm;




extern int flag_renumber_insns;







extern int frame_pointer_needed;


extern int flag_evaluation_order;


extern unsigned long g_switch_value;
extern unsigned char g_switch_set;






extern int align_loops_log;
extern int align_loops_max_skip;
extern int align_jumps_log;
extern int align_jumps_max_skip;
extern int align_labels_log;
extern int align_labels_max_skip;
extern int align_functions_log;



extern int force_align_functions_log;


extern int dump_for_graph;


enum graph_dump_types
{
  no_graph = 0,
  vcg
};
extern enum graph_dump_types graph_dump_format;



extern int flag_detailed_statistics;



extern int flag_remove_unreachable_functions;


extern int flag_var_tracking;



extern unsigned char flag_speculative_prefetching_set;




extern const char *flag_random_seed;
# 32 "../.././gcc/expr.h" 2


# 1 "../.././gcc/tree.h" 1
# 28 "../.././gcc/tree.h"
# 1 "../.././gcc/vec.h" 1
# 394 "../.././gcc/vec.h"
extern void *vec_gc_p_reserve (void *, int );
extern void *vec_gc_o_reserve (void *, int, size_t, size_t );
extern void ggc_free (void *);

extern void *vec_heap_p_reserve (void *, int );
extern void *vec_heap_o_reserve (void *, int, size_t, size_t );
# 29 "../.././gcc/tree.h" 2





enum tree_code {
# 1 "../.././gcc/tree.def" 1
# 43 "../.././gcc/tree.def"
ERROR_MARK,





IDENTIFIER_NODE,






TREE_LIST,


TREE_VEC,
# 81 "../.././gcc/tree.def"
BLOCK,
# 135 "../.././gcc/tree.def"
OFFSET_TYPE,
# 148 "../.././gcc/tree.def"
ENUMERAL_TYPE,



BOOLEAN_TYPE,


CHAR_TYPE,
# 165 "../.././gcc/tree.def"
INTEGER_TYPE,



REAL_TYPE,
# 178 "../.././gcc/tree.def"
POINTER_TYPE,



REFERENCE_TYPE,







COMPLEX_TYPE,




VECTOR_TYPE,
# 211 "../.././gcc/tree.def"
ARRAY_TYPE,
# 221 "../.././gcc/tree.def"
RECORD_TYPE,





UNION_TYPE,





QUAL_UNION_TYPE,






VOID_TYPE,







FUNCTION_TYPE,






METHOD_TYPE,





LANG_TYPE,
# 275 "../.././gcc/tree.def"
INTEGER_CST,


REAL_CST,



COMPLEX_CST,


VECTOR_CST,


STRING_CST,
# 348 "../.././gcc/tree.def"
FUNCTION_DECL,
LABEL_DECL,




FIELD_DECL,
VAR_DECL,
CONST_DECL,
PARM_DECL,
TYPE_DECL,
RESULT_DECL,



NAMESPACE_DECL,



TRANSLATION_UNIT_DECL,
# 377 "../.././gcc/tree.def"
COMPONENT_REF,
# 386 "../.././gcc/tree.def"
BIT_FIELD_REF,






INDIRECT_REF,



ALIGN_INDIRECT_REF,






MISALIGNED_INDIRECT_REF,






ARRAY_REF,




ARRAY_RANGE_REF,
# 428 "../.././gcc/tree.def"
OBJ_TYPE_REF,


EXC_PTR_EXPR,


FILTER_EXPR,
# 450 "../.././gcc/tree.def"
CONSTRUCTOR,
# 460 "../.././gcc/tree.def"
COMPOUND_EXPR,


MODIFY_EXPR,




INIT_EXPR,







TARGET_EXPR,
# 486 "../.././gcc/tree.def"
COND_EXPR,
# 498 "../.././gcc/tree.def"
VEC_COND_EXPR,
# 521 "../.././gcc/tree.def"
BIND_EXPR,





CALL_EXPR,






WITH_CLEANUP_EXPR,
# 551 "../.././gcc/tree.def"
CLEANUP_POINT_EXPR,
# 603 "../.././gcc/tree.def"
PLACEHOLDER_EXPR,


PLUS_EXPR,
MINUS_EXPR,
MULT_EXPR,


TRUNC_DIV_EXPR,


CEIL_DIV_EXPR,


FLOOR_DIV_EXPR,


ROUND_DIV_EXPR,


TRUNC_MOD_EXPR,
CEIL_MOD_EXPR,
FLOOR_MOD_EXPR,
ROUND_MOD_EXPR,


RDIV_EXPR,



EXACT_DIV_EXPR,






FIX_TRUNC_EXPR,
FIX_CEIL_EXPR,
FIX_FLOOR_EXPR,
FIX_ROUND_EXPR,


FLOAT_EXPR,


NEGATE_EXPR,




MIN_EXPR,
MAX_EXPR,





ABS_EXPR,
# 670 "../.././gcc/tree.def"
LSHIFT_EXPR,
RSHIFT_EXPR,
LROTATE_EXPR,
RROTATE_EXPR,


BIT_IOR_EXPR,
BIT_XOR_EXPR,
BIT_AND_EXPR,
BIT_NOT_EXPR,
# 690 "../.././gcc/tree.def"
TRUTH_ANDIF_EXPR,
TRUTH_ORIF_EXPR,
TRUTH_AND_EXPR,
TRUTH_OR_EXPR,
TRUTH_XOR_EXPR,
TRUTH_NOT_EXPR,







LT_EXPR,
LE_EXPR,
GT_EXPR,
GE_EXPR,
EQ_EXPR,
NE_EXPR,


UNORDERED_EXPR,
ORDERED_EXPR,


UNLT_EXPR,
UNLE_EXPR,
UNGT_EXPR,
UNGE_EXPR,
UNEQ_EXPR,


LTGT_EXPR,

RANGE_EXPR,




CONVERT_EXPR,


NOP_EXPR,


NON_LVALUE_EXPR,
# 747 "../.././gcc/tree.def"
VIEW_CONVERT_EXPR,




SAVE_EXPR,



ADDR_EXPR,



FDESC_EXPR,



COMPLEX_EXPR,


CONJ_EXPR,



REALPART_EXPR,
IMAGPART_EXPR,




PREDECREMENT_EXPR,
PREINCREMENT_EXPR,
POSTDECREMENT_EXPR,
POSTINCREMENT_EXPR,


VA_ARG_EXPR,






TRY_CATCH_EXPR,




TRY_FINALLY_EXPR,





DECL_EXPR,




LABEL_EXPR,



GOTO_EXPR,






RETURN_EXPR,



EXIT_EXPR,




LOOP_EXPR,
# 840 "../.././gcc/tree.def"
SWITCH_EXPR,





CASE_LABEL_EXPR,



RESX_EXPR,





ASM_EXPR,




SSA_NAME,







PHI_NODE,



CATCH_EXPR,





EH_FILTER_EXPR,



SCEV_KNOWN,



SCEV_NOT_KNOWN,



POLYNOMIAL_CHREC,



STATEMENT_LIST,





VALUE_HANDLE,
# 915 "../.././gcc/tree.def"
ASSERT_EXPR,



TREE_BINFO,






WITH_SIZE_EXPR,
# 937 "../.././gcc/tree.def"
REALIGN_LOAD_EXPR,
# 949 "../.././gcc/tree.def"
TARGET_MEM_REF,







REDUC_MAX_EXPR,
REDUC_MIN_EXPR,
REDUC_PLUS_EXPR,




VEC_LSHIFT_EXPR,
VEC_RSHIFT_EXPR,
# 36 "../.././gcc/tree.h" 2

  LAST_AND_UNUSED_TREE_CODE

};



extern unsigned char tree_contains_struct[256][64];
# 54 "../.././gcc/tree.h"
enum tree_code_class {
  tcc_exceptional,
  tcc_constant,

  tcc_type,
  tcc_declaration,
  tcc_reference,
  tcc_comparison,
  tcc_unary,
  tcc_binary,
  tcc_statement,

  tcc_expression
};




extern const char *const tree_code_class_strings[];







extern const enum tree_code_class tree_code_type[];
# 163 "../.././gcc/tree.h"
extern const unsigned char tree_code_length[];




extern const char *const tree_code_name[];


static __inline__ void VEC_tree_must_be_pointer_type (void) { (void)((tree)1 == (void *)1); } typedef struct VEC_tree_base { unsigned num; unsigned alloc; tree vec[1]; } VEC_tree_base; typedef struct VEC_tree_none { VEC_tree_base base; } VEC_tree_none; static __inline__ unsigned VEC_tree_base_length (const VEC_tree_base *vec_) { return vec_ ? vec_->num : 0; } static __inline__ tree VEC_tree_base_last (const VEC_tree_base *vec_ ) { (void)(vec_ && vec_->num); return vec_->vec[vec_->num - 1]; } static __inline__ tree VEC_tree_base_index (const VEC_tree_base *vec_, unsigned ix_ ) { (void)(vec_ && ix_ < vec_->num); return vec_->vec[ix_]; } static __inline__ int VEC_tree_base_iterate (const VEC_tree_base *vec_, unsigned ix_, tree *ptr) { if (vec_ && ix_ < vec_->num) { *ptr = vec_->vec[ix_]; return 1; } else { *ptr = 0; return 0; } } static __inline__ size_t VEC_tree_base_embedded_size (int alloc_) { return __builtin_offsetof (VEC_tree_base, vec) + alloc_ * sizeof(tree); } static __inline__ void VEC_tree_base_embedded_init (VEC_tree_base *vec_, int alloc_) { vec_->num = 0; vec_->alloc = alloc_; } static __inline__ int VEC_tree_base_space (VEC_tree_base *vec_, int alloc_ ) { (void)(alloc_ >= 0); return vec_ ? vec_->alloc - vec_->num >= (unsigned)alloc_ : !alloc_; } static __inline__ tree *VEC_tree_base_quick_push (VEC_tree_base *vec_, tree obj_ ) { tree *slot_; (void)(vec_->num < vec_->alloc); slot_ = &vec_->vec[vec_->num++]; *slot_ = obj_; return slot_; } static __inline__ tree VEC_tree_base_pop (VEC_tree_base *vec_ ) { tree obj_; (void)(vec_->num); obj_ = vec_->vec[--vec_->num]; return obj_; } static __inline__ void VEC_tree_base_truncate (VEC_tree_base *vec_, unsigned size_ ) { (void)(vec_ ? vec_->num >= size_ : !size_); if (vec_) vec_->num = size_; } static __inline__ tree VEC_tree_base_replace (VEC_tree_base *vec_, unsigned ix_, tree obj_ ) { tree old_obj_; (void)(ix_ < vec_->num); old_obj_ = vec_->vec[ix_]; vec_->vec[ix_] = obj_; return old_obj_; } static __inline__ tree *VEC_tree_base_quick_insert (VEC_tree_base *vec_, unsigned ix_, tree obj_ ) { tree *slot_; (void)(vec_->num < vec_->alloc); (void)(ix_ <= vec_->num); slot_ = &vec_->vec[ix_]; memmove (slot_ + 1, slot_, (vec_->num++ - ix_) * sizeof (tree)); *slot_ = obj_; return slot_; } static __inline__ tree VEC_tree_base_ordered_remove (VEC_tree_base *vec_, unsigned ix_ ) { tree *slot_; tree obj_; (void)(ix_ < vec_->num); slot_ = &vec_->vec[ix_]; obj_ = *slot_; memmove (slot_, slot_ + 1, (--vec_->num - ix_) * sizeof (tree)); return obj_; } static __inline__ tree VEC_tree_base_unordered_remove (VEC_tree_base *vec_, unsigned ix_ ) { tree *slot_; tree obj_; (void)(ix_ < vec_->num); slot_ = &vec_->vec[ix_]; obj_ = *slot_; *slot_ = vec_->vec[--vec_->num]; return obj_; } static __inline__ tree *VEC_tree_base_address (VEC_tree_base *vec_) { return vec_ ? vec_->vec : 0; } static __inline__ unsigned VEC_tree_base_lower_bound (VEC_tree_base *vec_, const tree obj_, unsigned char (*lessthan_)(const tree, const tree) ) { unsigned int len_ = VEC_tree_base_length (vec_); unsigned int half_, middle_; unsigned int first_ = 0; while (len_ > 0) { tree middle_elem_; half_ = len_ >> 1; middle_ = first_; middle_ += half_; middle_elem_ = VEC_tree_base_index (vec_, middle_ ); if (lessthan_ (middle_elem_, obj_)) { first_ = middle_; ++first_; len_ = len_ - half_ - 1; } else len_ = half_; } return first_; } struct vec_swallow_trailing_semi;
typedef struct VEC_tree_gc { VEC_tree_base base; } VEC_tree_gc; static __inline__ VEC_tree_gc *VEC_tree_gc_alloc (int alloc_ ) { return (VEC_tree_gc *) vec_gc_p_reserve (((void *)0), -alloc_ ); } static __inline__ void VEC_tree_gc_free (VEC_tree_gc **vec_) { if (*vec_) ggc_free (*vec_); *vec_ = ((void *)0); } static __inline__ VEC_tree_gc *VEC_tree_gc_copy (VEC_tree_base *vec_ ) { size_t len_ = vec_ ? vec_->num : 0; VEC_tree_gc *new_vec_ = ((void *)0); if (len_) { new_vec_ = (VEC_tree_gc *)(vec_gc_p_reserve (((void *)0), -len_ )); new_vec_->base.num = len_; memcpy (new_vec_->base.vec, vec_->vec, sizeof (tree) * len_); } return new_vec_; } static __inline__ int VEC_tree_gc_reserve (VEC_tree_gc **vec_, int alloc_ ) { int extend = !VEC_tree_base_space (((*vec_) ? &(*vec_)->base : 0), alloc_ < 0 ? -alloc_ : alloc_ ); if (extend) *vec_ = (VEC_tree_gc *) vec_gc_p_reserve (*vec_, alloc_ ); return extend; } static __inline__ void VEC_tree_gc_safe_grow (VEC_tree_gc **vec_, int size_ ) { (void)(size_ >= 0 && VEC_tree_base_length ((*vec_) ? &(*vec_)->base : 0) <= (unsigned)size_); VEC_tree_gc_reserve (vec_, (int)(*vec_ ? ((*vec_) ? &(*vec_)->base : 0)->num : 0) - size_ ); ((*vec_) ? &(*vec_)->base : 0)->num = size_; } static __inline__ tree *VEC_tree_gc_safe_push (VEC_tree_gc **vec_, tree obj_ ) { VEC_tree_gc_reserve (vec_, 1 ); return VEC_tree_base_quick_push (((*vec_) ? &(*vec_)->base : 0), obj_ ); } static __inline__ tree *VEC_tree_gc_safe_insert (VEC_tree_gc **vec_, unsigned ix_, tree obj_ ) { VEC_tree_gc_reserve (vec_, 1 ); return VEC_tree_base_quick_insert (((*vec_) ? &(*vec_)->base : 0), ix_, obj_ ); } struct vec_swallow_trailing_semi;
typedef struct VEC_tree_heap { VEC_tree_base base; } VEC_tree_heap; static __inline__ VEC_tree_heap *VEC_tree_heap_alloc (int alloc_ ) { return (VEC_tree_heap *) vec_heap_p_reserve (((void *)0), -alloc_ ); } static __inline__ void VEC_tree_heap_free (VEC_tree_heap **vec_) { if (*vec_) free (*vec_); *vec_ = ((void *)0); } static __inline__ VEC_tree_heap *VEC_tree_heap_copy (VEC_tree_base *vec_ ) { size_t len_ = vec_ ? vec_->num : 0; VEC_tree_heap *new_vec_ = ((void *)0); if (len_) { new_vec_ = (VEC_tree_heap *)(vec_heap_p_reserve (((void *)0), -len_ )); new_vec_->base.num = len_; memcpy (new_vec_->base.vec, vec_->vec, sizeof (tree) * len_); } return new_vec_; } static __inline__ int VEC_tree_heap_reserve (VEC_tree_heap **vec_, int alloc_ ) { int extend = !VEC_tree_base_space (((*vec_) ? &(*vec_)->base : 0), alloc_ < 0 ? -alloc_ : alloc_ ); if (extend) *vec_ = (VEC_tree_heap *) vec_heap_p_reserve (*vec_, alloc_ ); return extend; } static __inline__ void VEC_tree_heap_safe_grow (VEC_tree_heap **vec_, int size_ ) { (void)(size_ >= 0 && VEC_tree_base_length ((*vec_) ? &(*vec_)->base : 0) <= (unsigned)size_); VEC_tree_heap_reserve (vec_, (int)(*vec_ ? ((*vec_) ? &(*vec_)->base : 0)->num : 0) - size_ ); ((*vec_) ? &(*vec_)->base : 0)->num = size_; } static __inline__ tree *VEC_tree_heap_safe_push (VEC_tree_heap **vec_, tree obj_ ) { VEC_tree_heap_reserve (vec_, 1 ); return VEC_tree_base_quick_push (((*vec_) ? &(*vec_)->base : 0), obj_ ); } static __inline__ tree *VEC_tree_heap_safe_insert (VEC_tree_heap **vec_, unsigned ix_, tree obj_ ) { VEC_tree_heap_reserve (vec_, 1 ); return VEC_tree_base_quick_insert (((*vec_) ? &(*vec_)->base : 0), ix_, obj_ ); } struct vec_swallow_trailing_semi;




enum built_in_class
{
  NOT_BUILT_IN = 0,
  BUILT_IN_FRONTEND,
  BUILT_IN_MD,
  BUILT_IN_NORMAL
};


extern const char *const built_in_class_names[4];





enum built_in_function
{
# 1 "../.././gcc/builtins.def" 1
# 168 "../.././gcc/builtins.def"
BUILT_IN_ACOS,
BUILT_IN_ACOSF,
BUILT_IN_ACOSH,
BUILT_IN_ACOSHF,
BUILT_IN_ACOSHL,
BUILT_IN_ACOSL,
BUILT_IN_ASIN,
BUILT_IN_ASINF,
BUILT_IN_ASINH,
BUILT_IN_ASINHF,
BUILT_IN_ASINHL,
BUILT_IN_ASINL,
BUILT_IN_ATAN,
BUILT_IN_ATAN2,
BUILT_IN_ATAN2F,
BUILT_IN_ATAN2L,
BUILT_IN_ATANF,
BUILT_IN_ATANH,
BUILT_IN_ATANHF,
BUILT_IN_ATANHL,
BUILT_IN_ATANL,
BUILT_IN_CBRT,
BUILT_IN_CBRTF,
BUILT_IN_CBRTL,
BUILT_IN_CEIL,
BUILT_IN_CEILF,
BUILT_IN_CEILL,
BUILT_IN_COPYSIGN,
BUILT_IN_COPYSIGNF,
BUILT_IN_COPYSIGNL,
BUILT_IN_COS,
BUILT_IN_COSF,
BUILT_IN_COSH,
BUILT_IN_COSHF,
BUILT_IN_COSHL,
BUILT_IN_COSL,
BUILT_IN_DREM,
BUILT_IN_DREMF,
BUILT_IN_DREML,
BUILT_IN_ERF,
BUILT_IN_ERFC,
BUILT_IN_ERFCF,
BUILT_IN_ERFCL,
BUILT_IN_ERFF,
BUILT_IN_ERFL,
BUILT_IN_EXP,
BUILT_IN_EXP10,
BUILT_IN_EXP10F,
BUILT_IN_EXP10L,
BUILT_IN_EXP2,
BUILT_IN_EXP2F,
BUILT_IN_EXP2L,
BUILT_IN_EXPF,
BUILT_IN_EXPL,
BUILT_IN_EXPM1,
BUILT_IN_EXPM1F,
BUILT_IN_EXPM1L,
BUILT_IN_FABS,
BUILT_IN_FABSF,
BUILT_IN_FABSL,
BUILT_IN_FDIM,
BUILT_IN_FDIMF,
BUILT_IN_FDIML,
BUILT_IN_FLOOR,
BUILT_IN_FLOORF,
BUILT_IN_FLOORL,
BUILT_IN_FMA,
BUILT_IN_FMAF,
BUILT_IN_FMAL,
BUILT_IN_FMAX,
BUILT_IN_FMAXF,
BUILT_IN_FMAXL,
BUILT_IN_FMIN,
BUILT_IN_FMINF,
BUILT_IN_FMINL,
BUILT_IN_FMOD,
BUILT_IN_FMODF,
BUILT_IN_FMODL,
BUILT_IN_FREXP,
BUILT_IN_FREXPF,
BUILT_IN_FREXPL,
BUILT_IN_GAMMA,
BUILT_IN_GAMMAF,
BUILT_IN_GAMMAL,
BUILT_IN_HUGE_VAL,
BUILT_IN_HUGE_VALF,
BUILT_IN_HUGE_VALL,
BUILT_IN_HYPOT,
BUILT_IN_HYPOTF,
BUILT_IN_HYPOTL,
BUILT_IN_ILOGB,
BUILT_IN_ILOGBF,
BUILT_IN_ILOGBL,
BUILT_IN_INF,
BUILT_IN_INFF,
BUILT_IN_INFL,
BUILT_IN_J0,
BUILT_IN_J0F,
BUILT_IN_J0L,
BUILT_IN_J1,
BUILT_IN_J1F,
BUILT_IN_J1L,
BUILT_IN_JN,
BUILT_IN_JNF,
BUILT_IN_JNL,
BUILT_IN_LCEIL,
BUILT_IN_LCEILF,
BUILT_IN_LCEILL,
BUILT_IN_LDEXP,
BUILT_IN_LDEXPF,
BUILT_IN_LDEXPL,
BUILT_IN_LFLOOR,
BUILT_IN_LFLOORF,
BUILT_IN_LFLOORL,
BUILT_IN_LGAMMA,
BUILT_IN_LGAMMAF,
BUILT_IN_LGAMMAL,
BUILT_IN_LLCEIL,
BUILT_IN_LLCEILF,
BUILT_IN_LLCEILL,
BUILT_IN_LLFLOOR,
BUILT_IN_LLFLOORF,
BUILT_IN_LLFLOORL,
BUILT_IN_LLRINT,
BUILT_IN_LLRINTF,
BUILT_IN_LLRINTL,
BUILT_IN_LLROUND,
BUILT_IN_LLROUNDF,
BUILT_IN_LLROUNDL,
BUILT_IN_LOG,
BUILT_IN_LOG10,
BUILT_IN_LOG10F,
BUILT_IN_LOG10L,
BUILT_IN_LOG1P,
BUILT_IN_LOG1PF,
BUILT_IN_LOG1PL,
BUILT_IN_LOG2,
BUILT_IN_LOG2F,
BUILT_IN_LOG2L,
BUILT_IN_LOGB,
BUILT_IN_LOGBF,
BUILT_IN_LOGBL,
BUILT_IN_LOGF,
BUILT_IN_LOGL,
BUILT_IN_LRINT,
BUILT_IN_LRINTF,
BUILT_IN_LRINTL,
BUILT_IN_LROUND,
BUILT_IN_LROUNDF,
BUILT_IN_LROUNDL,
BUILT_IN_MODF,
BUILT_IN_MODFF,
BUILT_IN_MODFL,
BUILT_IN_NAN,
BUILT_IN_NANF,
BUILT_IN_NANL,
BUILT_IN_NANS,
BUILT_IN_NANSF,
BUILT_IN_NANSL,
BUILT_IN_NEARBYINT,
BUILT_IN_NEARBYINTF,
BUILT_IN_NEARBYINTL,
BUILT_IN_NEXTAFTER,
BUILT_IN_NEXTAFTERF,
BUILT_IN_NEXTAFTERL,
BUILT_IN_NEXTTOWARD,
BUILT_IN_NEXTTOWARDF,
BUILT_IN_NEXTTOWARDL,
BUILT_IN_POW,
BUILT_IN_POW10,
BUILT_IN_POW10F,
BUILT_IN_POW10L,
BUILT_IN_POWF,
BUILT_IN_POWI,
BUILT_IN_POWIF,
BUILT_IN_POWIL,
BUILT_IN_POWL,
BUILT_IN_REMAINDER,
BUILT_IN_REMAINDERF,
BUILT_IN_REMAINDERL,
BUILT_IN_REMQUO,
BUILT_IN_REMQUOF,
BUILT_IN_REMQUOL,
BUILT_IN_RINT,
BUILT_IN_RINTF,
BUILT_IN_RINTL,
BUILT_IN_ROUND,
BUILT_IN_ROUNDF,
BUILT_IN_ROUNDL,
BUILT_IN_SCALB,
BUILT_IN_SCALBF,
BUILT_IN_SCALBL,
BUILT_IN_SCALBLN,
BUILT_IN_SCALBLNF,
BUILT_IN_SCALBLNL,
BUILT_IN_SCALBN,
BUILT_IN_SCALBNF,
BUILT_IN_SCALBNL,
BUILT_IN_SIGNBIT,
BUILT_IN_SIGNBITF,
BUILT_IN_SIGNBITL,
BUILT_IN_SIGNIFICAND,
BUILT_IN_SIGNIFICANDF,
BUILT_IN_SIGNIFICANDL,
BUILT_IN_SIN,
BUILT_IN_SINCOS,
BUILT_IN_SINCOSF,
BUILT_IN_SINCOSL,
BUILT_IN_SINF,
BUILT_IN_SINH,
BUILT_IN_SINHF,
BUILT_IN_SINHL,
BUILT_IN_SINL,
BUILT_IN_SQRT,
BUILT_IN_SQRTF,
BUILT_IN_SQRTL,
BUILT_IN_TAN,
BUILT_IN_TANF,
BUILT_IN_TANH,
BUILT_IN_TANHF,
BUILT_IN_TANHL,
BUILT_IN_TANL,
BUILT_IN_TGAMMA,
BUILT_IN_TGAMMAF,
BUILT_IN_TGAMMAL,
BUILT_IN_TRUNC,
BUILT_IN_TRUNCF,
BUILT_IN_TRUNCL,
BUILT_IN_Y0,
BUILT_IN_Y0F,
BUILT_IN_Y0L,
BUILT_IN_Y1,
BUILT_IN_Y1F,
BUILT_IN_Y1L,
BUILT_IN_YN,
BUILT_IN_YNF,
BUILT_IN_YNL,


BUILT_IN_CABS,
BUILT_IN_CABSF,
BUILT_IN_CABSL,
BUILT_IN_CACOS,
BUILT_IN_CACOSF,
BUILT_IN_CACOSH,
BUILT_IN_CACOSHF,
BUILT_IN_CACOSHL,
BUILT_IN_CACOSL,
BUILT_IN_CARG,
BUILT_IN_CARGF,
BUILT_IN_CARGL,
BUILT_IN_CASIN,
BUILT_IN_CASINF,
BUILT_IN_CASINH,
BUILT_IN_CASINHF,
BUILT_IN_CASINHL,
BUILT_IN_CASINL,
BUILT_IN_CATAN,
BUILT_IN_CATANF,
BUILT_IN_CATANH,
BUILT_IN_CATANHF,
BUILT_IN_CATANHL,
BUILT_IN_CATANL,
BUILT_IN_CCOS,
BUILT_IN_CCOSF,
BUILT_IN_CCOSH,
BUILT_IN_CCOSHF,
BUILT_IN_CCOSHL,
BUILT_IN_CCOSL,
BUILT_IN_CEXP,
BUILT_IN_CEXPF,
BUILT_IN_CEXPL,
BUILT_IN_CIMAG,
BUILT_IN_CIMAGF,
BUILT_IN_CIMAGL,
BUILT_IN_CLOG,
BUILT_IN_CLOGF,
BUILT_IN_CLOGL,
BUILT_IN_CLOG10,
BUILT_IN_CLOG10F,
BUILT_IN_CLOG10L,
BUILT_IN_CONJ,
BUILT_IN_CONJF,
BUILT_IN_CONJL,
BUILT_IN_CPOW,
BUILT_IN_CPOWF,
BUILT_IN_CPOWL,
BUILT_IN_CPROJ,
BUILT_IN_CPROJF,
BUILT_IN_CPROJL,
BUILT_IN_CREAL,
BUILT_IN_CREALF,
BUILT_IN_CREALL,
BUILT_IN_CSIN,
BUILT_IN_CSINF,
BUILT_IN_CSINH,
BUILT_IN_CSINHF,
BUILT_IN_CSINHL,
BUILT_IN_CSINL,
BUILT_IN_CSQRT,
BUILT_IN_CSQRTF,
BUILT_IN_CSQRTL,
BUILT_IN_CTAN,
BUILT_IN_CTANF,
BUILT_IN_CTANH,
BUILT_IN_CTANHF,
BUILT_IN_CTANHL,
BUILT_IN_CTANL,




BUILT_IN_BCMP,
BUILT_IN_BCOPY,
BUILT_IN_BZERO,
BUILT_IN_INDEX,
BUILT_IN_MEMCMP,
BUILT_IN_MEMCPY,
BUILT_IN_MEMMOVE,
BUILT_IN_MEMPCPY,
BUILT_IN_MEMSET,
BUILT_IN_RINDEX,
BUILT_IN_STPCPY,
BUILT_IN_STPNCPY,
BUILT_IN_STRCASECMP,
BUILT_IN_STRCAT,
BUILT_IN_STRCHR,
BUILT_IN_STRCMP,
BUILT_IN_STRCPY,
BUILT_IN_STRCSPN,
BUILT_IN_STRDUP,
BUILT_IN_STRNDUP,
BUILT_IN_STRLEN,
BUILT_IN_STRNCASECMP,
BUILT_IN_STRNCAT,
BUILT_IN_STRNCMP,
BUILT_IN_STRNCPY,
BUILT_IN_STRPBRK,
BUILT_IN_STRRCHR,
BUILT_IN_STRSPN,
BUILT_IN_STRSTR,


BUILT_IN_FPRINTF,
BUILT_IN_FPRINTF_UNLOCKED,
BUILT_IN_FPUTC,
BUILT_IN_FPUTC_UNLOCKED,
BUILT_IN_FPUTS,
BUILT_IN_FPUTS_UNLOCKED,
BUILT_IN_FSCANF,
BUILT_IN_FWRITE,
BUILT_IN_FWRITE_UNLOCKED,
BUILT_IN_PRINTF,
BUILT_IN_PRINTF_UNLOCKED,
BUILT_IN_PUTCHAR,
BUILT_IN_PUTCHAR_UNLOCKED,
BUILT_IN_PUTS,
BUILT_IN_PUTS_UNLOCKED,
BUILT_IN_SCANF,
BUILT_IN_SNPRINTF,
BUILT_IN_SPRINTF,
BUILT_IN_SSCANF,
BUILT_IN_VFPRINTF,
BUILT_IN_VFSCANF,
BUILT_IN_VPRINTF,
BUILT_IN_VSCANF,
BUILT_IN_VSNPRINTF,
BUILT_IN_VSPRINTF,
BUILT_IN_VSSCANF,


BUILT_IN_ISALNUM,
BUILT_IN_ISALPHA,
BUILT_IN_ISASCII,
BUILT_IN_ISBLANK,
BUILT_IN_ISCNTRL,
BUILT_IN_ISDIGIT,
BUILT_IN_ISGRAPH,
BUILT_IN_ISLOWER,
BUILT_IN_ISPRINT,
BUILT_IN_ISPUNCT,
BUILT_IN_ISSPACE,
BUILT_IN_ISUPPER,
BUILT_IN_ISXDIGIT,
BUILT_IN_TOASCII,
BUILT_IN_TOLOWER,
BUILT_IN_TOUPPER,


BUILT_IN_ISWALNUM,
BUILT_IN_ISWALPHA,
BUILT_IN_ISWBLANK,
BUILT_IN_ISWCNTRL,
BUILT_IN_ISWDIGIT,
BUILT_IN_ISWGRAPH,
BUILT_IN_ISWLOWER,
BUILT_IN_ISWPRINT,
BUILT_IN_ISWPUNCT,
BUILT_IN_ISWSPACE,
BUILT_IN_ISWUPPER,
BUILT_IN_ISWXDIGIT,
BUILT_IN_TOWLOWER,
BUILT_IN_TOWUPPER,


BUILT_IN_ABORT,
BUILT_IN_ABS,
BUILT_IN_AGGREGATE_INCOMING_ADDRESS,
BUILT_IN_ALLOCA,
BUILT_IN_APPLY,
BUILT_IN_APPLY_ARGS,
BUILT_IN_ARGS_INFO,
BUILT_IN_CALLOC,
BUILT_IN_CLASSIFY_TYPE,
BUILT_IN_CLZ,
BUILT_IN_CLZIMAX,
BUILT_IN_CLZL,
BUILT_IN_CLZLL,
BUILT_IN_CONSTANT_P,
BUILT_IN_CTZ,
BUILT_IN_CTZIMAX,
BUILT_IN_CTZL,
BUILT_IN_CTZLL,
BUILT_IN_DCGETTEXT,
BUILT_IN_DGETTEXT,
BUILT_IN_DWARF_CFA,
BUILT_IN_DWARF_SP_COLUMN,
BUILT_IN_EH_RETURN,
BUILT_IN_EH_RETURN_DATA_REGNO,
BUILT_IN_EXECL,
BUILT_IN_EXECLP,
BUILT_IN_EXECLE,
BUILT_IN_EXECV,
BUILT_IN_EXECVP,
BUILT_IN_EXECVE,
BUILT_IN_EXIT,
BUILT_IN_EXPECT,
BUILT_IN_EXTEND_POINTER,
BUILT_IN_EXTRACT_RETURN_ADDR,
BUILT_IN_FFS,
BUILT_IN_FFSIMAX,
BUILT_IN_FFSL,
BUILT_IN_FFSLL,
BUILT_IN_FORK,
BUILT_IN_FRAME_ADDRESS,
BUILT_IN_FROB_RETURN_ADDR,
BUILT_IN_GETTEXT,
BUILT_IN_IMAXABS,
BUILT_IN_INIT_DWARF_REG_SIZES,
BUILT_IN_FINITE,
BUILT_IN_FINITEF,
BUILT_IN_FINITEL,
BUILT_IN_ISINF,
BUILT_IN_ISINFF,
BUILT_IN_ISINFL,
BUILT_IN_ISNAN,
BUILT_IN_ISNANF,
BUILT_IN_ISNANL,
BUILT_IN_ISGREATER,
BUILT_IN_ISGREATEREQUAL,
BUILT_IN_ISLESS,
BUILT_IN_ISLESSEQUAL,
BUILT_IN_ISLESSGREATER,
BUILT_IN_ISUNORDERED,
BUILT_IN_LABS,
BUILT_IN_LLABS,
BUILT_IN_LONGJMP,
BUILT_IN_MALLOC,
BUILT_IN_NEXT_ARG,
BUILT_IN_PARITY,
BUILT_IN_PARITYIMAX,
BUILT_IN_PARITYL,
BUILT_IN_PARITYLL,
BUILT_IN_POPCOUNT,
BUILT_IN_POPCOUNTIMAX,
BUILT_IN_POPCOUNTL,
BUILT_IN_POPCOUNTLL,
BUILT_IN_PREFETCH,
BUILT_IN_RETURN,
BUILT_IN_RETURN_ADDRESS,
BUILT_IN_SAVEREGS,
BUILT_IN_SETJMP,
BUILT_IN_STDARG_START,
BUILT_IN_STRFMON,
BUILT_IN_STRFTIME,
BUILT_IN_TRAP,
BUILT_IN_UNWIND_INIT,
BUILT_IN_UPDATE_SETJMP_BUF,
BUILT_IN_VA_COPY,
BUILT_IN_VA_END,
BUILT_IN_VA_START,
BUILT_IN__EXIT,
BUILT_IN__EXIT2,


BUILT_IN_INIT_TRAMPOLINE,
BUILT_IN_ADJUST_TRAMPOLINE,
BUILT_IN_NONLOCAL_GOTO,


BUILT_IN_STACK_SAVE,
BUILT_IN_STACK_RESTORE,


BUILT_IN_OBJECT_SIZE,
BUILT_IN_MEMCPY_CHK,
BUILT_IN_MEMMOVE_CHK,
BUILT_IN_MEMPCPY_CHK,
BUILT_IN_MEMSET_CHK,
BUILT_IN_STPCPY_CHK,
BUILT_IN_STRCAT_CHK,
BUILT_IN_STRCPY_CHK,
BUILT_IN_STRNCAT_CHK,
BUILT_IN_STRNCPY_CHK,
BUILT_IN_SNPRINTF_CHK,
BUILT_IN_SPRINTF_CHK,
BUILT_IN_VSNPRINTF_CHK,
BUILT_IN_VSPRINTF_CHK,
BUILT_IN_FPRINTF_CHK,
BUILT_IN_PRINTF_CHK,
BUILT_IN_VFPRINTF_CHK,
BUILT_IN_VPRINTF_CHK,


BUILT_IN_PROFILE_FUNC_ENTER,
BUILT_IN_PROFILE_FUNC_EXIT,





BUILT_IN_FETCH_AND_ADD_N,

BUILT_IN_FETCH_AND_ADD_1,

BUILT_IN_FETCH_AND_ADD_2,

BUILT_IN_FETCH_AND_ADD_4,

BUILT_IN_FETCH_AND_ADD_8,


BUILT_IN_FETCH_AND_SUB_N,

BUILT_IN_FETCH_AND_SUB_1,

BUILT_IN_FETCH_AND_SUB_2,

BUILT_IN_FETCH_AND_SUB_4,

BUILT_IN_FETCH_AND_SUB_8,


BUILT_IN_FETCH_AND_OR_N,

BUILT_IN_FETCH_AND_OR_1,

BUILT_IN_FETCH_AND_OR_2,

BUILT_IN_FETCH_AND_OR_4,

BUILT_IN_FETCH_AND_OR_8,


BUILT_IN_FETCH_AND_AND_N,

BUILT_IN_FETCH_AND_AND_1,

BUILT_IN_FETCH_AND_AND_2,

BUILT_IN_FETCH_AND_AND_4,

BUILT_IN_FETCH_AND_AND_8,


BUILT_IN_FETCH_AND_XOR_N,

BUILT_IN_FETCH_AND_XOR_1,

BUILT_IN_FETCH_AND_XOR_2,

BUILT_IN_FETCH_AND_XOR_4,

BUILT_IN_FETCH_AND_XOR_8,


BUILT_IN_FETCH_AND_NAND_N,

BUILT_IN_FETCH_AND_NAND_1,

BUILT_IN_FETCH_AND_NAND_2,

BUILT_IN_FETCH_AND_NAND_4,

BUILT_IN_FETCH_AND_NAND_8,


BUILT_IN_ADD_AND_FETCH_N,

BUILT_IN_ADD_AND_FETCH_1,

BUILT_IN_ADD_AND_FETCH_2,

BUILT_IN_ADD_AND_FETCH_4,

BUILT_IN_ADD_AND_FETCH_8,


BUILT_IN_SUB_AND_FETCH_N,

BUILT_IN_SUB_AND_FETCH_1,

BUILT_IN_SUB_AND_FETCH_2,

BUILT_IN_SUB_AND_FETCH_4,

BUILT_IN_SUB_AND_FETCH_8,


BUILT_IN_OR_AND_FETCH_N,

BUILT_IN_OR_AND_FETCH_1,

BUILT_IN_OR_AND_FETCH_2,

BUILT_IN_OR_AND_FETCH_4,

BUILT_IN_OR_AND_FETCH_8,


BUILT_IN_AND_AND_FETCH_N,

BUILT_IN_AND_AND_FETCH_1,

BUILT_IN_AND_AND_FETCH_2,

BUILT_IN_AND_AND_FETCH_4,

BUILT_IN_AND_AND_FETCH_8,


BUILT_IN_XOR_AND_FETCH_N,

BUILT_IN_XOR_AND_FETCH_1,

BUILT_IN_XOR_AND_FETCH_2,

BUILT_IN_XOR_AND_FETCH_4,

BUILT_IN_XOR_AND_FETCH_8,


BUILT_IN_NAND_AND_FETCH_N,

BUILT_IN_NAND_AND_FETCH_1,

BUILT_IN_NAND_AND_FETCH_2,

BUILT_IN_NAND_AND_FETCH_4,

BUILT_IN_NAND_AND_FETCH_8,


BUILT_IN_BOOL_COMPARE_AND_SWAP_N,


BUILT_IN_BOOL_COMPARE_AND_SWAP_1,


BUILT_IN_BOOL_COMPARE_AND_SWAP_2,


BUILT_IN_BOOL_COMPARE_AND_SWAP_4,


BUILT_IN_BOOL_COMPARE_AND_SWAP_8,



BUILT_IN_VAL_COMPARE_AND_SWAP_N,


BUILT_IN_VAL_COMPARE_AND_SWAP_1,


BUILT_IN_VAL_COMPARE_AND_SWAP_2,


BUILT_IN_VAL_COMPARE_AND_SWAP_4,


BUILT_IN_VAL_COMPARE_AND_SWAP_8,



BUILT_IN_LOCK_TEST_AND_SET_N,

BUILT_IN_LOCK_TEST_AND_SET_1,

BUILT_IN_LOCK_TEST_AND_SET_2,

BUILT_IN_LOCK_TEST_AND_SET_4,

BUILT_IN_LOCK_TEST_AND_SET_8,


BUILT_IN_LOCK_RELEASE_N,

BUILT_IN_LOCK_RELEASE_1,

BUILT_IN_LOCK_RELEASE_2,

BUILT_IN_LOCK_RELEASE_4,

BUILT_IN_LOCK_RELEASE_8,


BUILT_IN_SYNCHRONIZE,
# 196 "../.././gcc/tree.h" 2



  BUILT_IN_COMPLEX_MUL_MIN,
  BUILT_IN_COMPLEX_MUL_MAX
    = BUILT_IN_COMPLEX_MUL_MIN
      + MAX_MODE_COMPLEX_FLOAT
      - MIN_MODE_COMPLEX_FLOAT,

  BUILT_IN_COMPLEX_DIV_MIN,
  BUILT_IN_COMPLEX_DIV_MAX
    = BUILT_IN_COMPLEX_DIV_MIN
      + MAX_MODE_COMPLEX_FLOAT
      - MIN_MODE_COMPLEX_FLOAT,


  END_BUILTINS
};



extern const char * built_in_names[(int) END_BUILTINS];
# 238 "../.././gcc/tree.h"
extern tree built_in_decls[(int) END_BUILTINS];
extern tree implicit_built_in_decls[(int) END_BUILTINS];
# 262 "../.././gcc/tree.h"
union tree_ann_d;

struct tree_common
{
  tree chain;
  tree type;
  union tree_ann_d *ann;

  __extension__ enum tree_code code : 8;

  unsigned side_effects_flag : 1;
  unsigned constant_flag : 1;
  unsigned addressable_flag : 1;
  unsigned volatile_flag : 1;
  unsigned readonly_flag : 1;
  unsigned unsigned_flag : 1;
  unsigned asm_written_flag: 1;
  unsigned nowarning_flag : 1;

  unsigned used_flag : 1;
  unsigned nothrow_flag : 1;
  unsigned static_flag : 1;
  unsigned public_flag : 1;
  unsigned private_flag : 1;
  unsigned protected_flag : 1;
  unsigned deprecated_flag : 1;
  unsigned invariant_flag : 1;

  unsigned lang_flag_0 : 1;
  unsigned lang_flag_1 : 1;
  unsigned lang_flag_2 : 1;
  unsigned lang_flag_3 : 1;
  unsigned lang_flag_4 : 1;
  unsigned lang_flag_5 : 1;
  unsigned lang_flag_6 : 1;
  unsigned visited : 1;
};
# 450 "../.././gcc/tree.h"
enum tree_node_structure_enum {
# 1 "../.././gcc/treestruct.def" 1
# 31 "../.././gcc/treestruct.def"
TS_COMMON,
TS_INT_CST,
TS_REAL_CST,
TS_VECTOR,
TS_STRING,
TS_COMPLEX,
TS_IDENTIFIER,
TS_DECL_MINIMAL,
TS_DECL_COMMON,
TS_DECL_WRTL,
TS_DECL_NON_COMMON,
TS_DECL_WITH_VIS,
TS_FIELD_DECL,
TS_VAR_DECL,
TS_PARM_DECL,
TS_LABEL_DECL,
TS_RESULT_DECL,
TS_CONST_DECL,
TS_TYPE_DECL,
TS_FUNCTION_DECL,
TS_TYPE,
TS_LIST,
TS_VEC,
TS_EXP,
TS_SSA_NAME,
TS_PHI_NODE,
TS_BLOCK,
TS_BINFO,
TS_STATEMENT_LIST,
TS_VALUE_HANDLE,
TS_CONSTRUCTOR,
# 452 "../.././gcc/tree.h" 2
  LAST_TS_ENUM
};
# 689 "../.././gcc/tree.h"
# 1 "./tree-check.h" 1
# 690 "../.././gcc/tree.h" 2
# 1095 "../.././gcc/tree.h"
struct tree_int_cst
{
  struct tree_common common;



  struct tree_int_cst_lowhi {
    unsigned long low;
    long high;
  } int_cst;
};




struct real_value;




struct tree_real_cst
{
  struct tree_common common;
  struct real_value * real_cst_ptr;
};






struct tree_string
{
  struct tree_common common;
  int length;
  char str[1];
};





struct tree_complex
{
  struct tree_common common;
  tree real;
  tree imag;
};




struct tree_vector
{
  struct tree_common common;
  tree elements;
};

# 1 "../.././gcc/../libcpp/include/symtab.h" 1
# 21 "../.././gcc/../libcpp/include/symtab.h"
# 1 "../.././gcc/../include/obstack.h" 1
# 157 "../.././gcc/../include/obstack.h"
struct _obstack_chunk
{
  char *limit;
  struct _obstack_chunk *prev;
  char contents[4];
};

struct obstack
{
  long chunk_size;
  struct _obstack_chunk *chunk;
  char *object_base;
  char *next_free;
  char *chunk_limit;
  int temp;
  int alignment_mask;



  struct _obstack_chunk *(*chunkfun) (void *, long);
  void (*freefun) (void *, struct _obstack_chunk *);
  void *extra_arg;
  unsigned use_extra_arg:1;
  unsigned maybe_empty_object:1;



  unsigned alloc_failed:1;


};



extern void _obstack_newchunk (struct obstack *, int);
extern void _obstack_free (struct obstack *, void *);
extern int _obstack_begin (struct obstack *, int, int,
       void *(*) (long), void (*) (void *));
extern int _obstack_begin_1 (struct obstack *, int, int,
        void *(*) (void *, long),
        void (*) (void *, void *), void *);
extern int _obstack_memory_used (struct obstack *);




void obstack_init (struct obstack *obstack);

void * obstack_alloc (struct obstack *obstack, int size);

void * obstack_copy (struct obstack *obstack, void *address, int size);
void * obstack_copy0 (struct obstack *obstack, void *address, int size);

void obstack_free (struct obstack *obstack, void *block);

void obstack_blank (struct obstack *obstack, int size);

void obstack_grow (struct obstack *obstack, void *data, int size);
void obstack_grow0 (struct obstack *obstack, void *data, int size);

void obstack_1grow (struct obstack *obstack, int data_char);
void obstack_ptr_grow (struct obstack *obstack, void *data);
void obstack_int_grow (struct obstack *obstack, int data);

void * obstack_finish (struct obstack *obstack);

int obstack_object_size (struct obstack *obstack);

int obstack_room (struct obstack *obstack);
void obstack_make_room (struct obstack *obstack, int size);
void obstack_1grow_fast (struct obstack *obstack, int data_char);
void obstack_ptr_grow_fast (struct obstack *obstack, void *data);
void obstack_int_grow_fast (struct obstack *obstack, int data);
void obstack_blank_fast (struct obstack *obstack, int size);

void * obstack_base (struct obstack *obstack);
void * obstack_next_free (struct obstack *obstack);
int obstack_alignment_mask (struct obstack *obstack);
int obstack_chunk_size (struct obstack *obstack);
int obstack_memory_used (struct obstack *obstack);




extern void (*obstack_alloc_failed_handler) (void);


extern int obstack_exit_failure;
# 22 "../.././gcc/../libcpp/include/symtab.h" 2




typedef struct ht_identifier ht_identifier;
struct ht_identifier
{
  const unsigned char *str;
  unsigned int len;
  unsigned int hash_value;
};




typedef struct ht hash_table;
typedef struct ht_identifier *hashnode;

enum ht_lookup_option {HT_NO_INSERT = 0, HT_ALLOC, HT_ALLOCED};


struct ht
{

  struct obstack stack;

  hashnode *entries;

  hashnode (*alloc_node) (hash_table *);


  void * (*alloc_subobject) (size_t);

  unsigned int nslots;
  unsigned int nelements;


  struct cpp_reader *pfile;


  unsigned int searches;
  unsigned int collisions;


  unsigned char entries_owned;
};


extern hash_table *ht_create (unsigned int order);


extern void ht_destroy (hash_table *);

extern hashnode ht_lookup (hash_table *, const unsigned char *,
      size_t, enum ht_lookup_option);
extern hashnode ht_lookup_with_hash (hash_table *, const unsigned char *,
                                     size_t, unsigned int,
                                     enum ht_lookup_option);






typedef int (*ht_cb) (struct cpp_reader *, hashnode, const void *);
extern void ht_forall (hash_table *, ht_cb, const void *);


extern void ht_load (hash_table *ht, hashnode *entries,
       unsigned int nslots, unsigned int nelements, unsigned char own);


extern void ht_dump_statistics (hash_table *);
# 1154 "../.././gcc/tree.h" 2
# 1171 "../.././gcc/tree.h"
struct tree_identifier
{
  struct tree_common common;
  struct ht_identifier id;
};





struct tree_list
{
  struct tree_common common;
  tree purpose;
  tree value;
};
# 1195 "../.././gcc/tree.h"
struct tree_vec
{
  struct tree_common common;
  int length;
  tree a[1];
};
# 1238 "../.././gcc/tree.h"
typedef struct constructor_elt_d
{
  tree index;
  tree value;
} constructor_elt;

typedef struct VEC_constructor_elt_base { unsigned num; unsigned alloc; constructor_elt vec[1]; } VEC_constructor_elt_base; typedef struct VEC_constructor_elt_none { VEC_constructor_elt_base base; } VEC_constructor_elt_none; static __inline__ unsigned VEC_constructor_elt_base_length (const VEC_constructor_elt_base *vec_) { return vec_ ? vec_->num : 0; } static __inline__ constructor_elt *VEC_constructor_elt_base_last (VEC_constructor_elt_base *vec_ ) { (void)(vec_ && vec_->num); return &vec_->vec[vec_->num - 1]; } static __inline__ constructor_elt *VEC_constructor_elt_base_index (VEC_constructor_elt_base *vec_, unsigned ix_ ) { (void)(vec_ && ix_ < vec_->num); return &vec_->vec[ix_]; } static __inline__ int VEC_constructor_elt_base_iterate (VEC_constructor_elt_base *vec_, unsigned ix_, constructor_elt **ptr) { if (vec_ && ix_ < vec_->num) { *ptr = &vec_->vec[ix_]; return 1; } else { *ptr = 0; return 0; } } static __inline__ size_t VEC_constructor_elt_base_embedded_size (int alloc_) { return __builtin_offsetof (VEC_constructor_elt_base, vec) + alloc_ * sizeof(constructor_elt); } static __inline__ void VEC_constructor_elt_base_embedded_init (VEC_constructor_elt_base *vec_, int alloc_) { vec_->num = 0; vec_->alloc = alloc_; } static __inline__ int VEC_constructor_elt_base_space (VEC_constructor_elt_base *vec_, int alloc_ ) { (void)(alloc_ >= 0); return vec_ ? vec_->alloc - vec_->num >= (unsigned)alloc_ : !alloc_; } static __inline__ constructor_elt *VEC_constructor_elt_base_quick_push (VEC_constructor_elt_base *vec_, const constructor_elt *obj_ ) { constructor_elt *slot_; (void)(vec_->num < vec_->alloc); slot_ = &vec_->vec[vec_->num++]; if (obj_) *slot_ = *obj_; return slot_; } static __inline__ void VEC_constructor_elt_base_pop (VEC_constructor_elt_base *vec_ ) { (void)(vec_->num); --vec_->num; } static __inline__ void VEC_constructor_elt_base_truncate (VEC_constructor_elt_base *vec_, unsigned size_ ) { (void)(vec_ ? vec_->num >= size_ : !size_); if (vec_) vec_->num = size_; } static __inline__ constructor_elt *VEC_constructor_elt_base_replace (VEC_constructor_elt_base *vec_, unsigned ix_, const constructor_elt *obj_ ) { constructor_elt *slot_; (void)(ix_ < vec_->num); slot_ = &vec_->vec[ix_]; if (obj_) *slot_ = *obj_; return slot_; } static __inline__ constructor_elt *VEC_constructor_elt_base_quick_insert (VEC_constructor_elt_base *vec_, unsigned ix_, const constructor_elt *obj_ ) { constructor_elt *slot_; (void)(vec_->num < vec_->alloc); (void)(ix_ <= vec_->num); slot_ = &vec_->vec[ix_]; memmove (slot_ + 1, slot_, (vec_->num++ - ix_) * sizeof (constructor_elt)); if (obj_) *slot_ = *obj_; return slot_; } static __inline__ void VEC_constructor_elt_base_ordered_remove (VEC_constructor_elt_base *vec_, unsigned ix_ ) { constructor_elt *slot_; (void)(ix_ < vec_->num); slot_ = &vec_->vec[ix_]; memmove (slot_, slot_ + 1, (--vec_->num - ix_) * sizeof (constructor_elt)); } static __inline__ void VEC_constructor_elt_base_unordered_remove (VEC_constructor_elt_base *vec_, unsigned ix_ ) { (void)(ix_ < vec_->num); vec_->vec[ix_] = vec_->vec[--vec_->num]; } static __inline__ constructor_elt *VEC_constructor_elt_base_address (VEC_constructor_elt_base *vec_) { return vec_ ? vec_->vec : 0; } static __inline__ unsigned VEC_constructor_elt_base_lower_bound (VEC_constructor_elt_base *vec_, const constructor_elt *obj_, unsigned char (*lessthan_)(const constructor_elt *, const constructor_elt *) ) { unsigned int len_ = VEC_constructor_elt_base_length (vec_); unsigned int half_, middle_; unsigned int first_ = 0; while (len_ > 0) { constructor_elt *middle_elem_; half_ = len_ >> 1; middle_ = first_; middle_ += half_; middle_elem_ = VEC_constructor_elt_base_index (vec_, middle_ ); if (lessthan_ (middle_elem_, obj_)) { first_ = middle_; ++first_; len_ = len_ - half_ - 1; } else len_ = half_; } return first_; } struct vec_swallow_trailing_semi;
typedef struct VEC_constructor_elt_gc { VEC_constructor_elt_base base; } VEC_constructor_elt_gc; static __inline__ VEC_constructor_elt_gc *VEC_constructor_elt_gc_alloc (int alloc_ ) { return (VEC_constructor_elt_gc *) vec_gc_o_reserve (((void *)0), -alloc_, __builtin_offsetof (VEC_constructor_elt_gc, base.vec), sizeof (constructor_elt) ); } static __inline__ VEC_constructor_elt_gc *VEC_constructor_elt_gc_copy (VEC_constructor_elt_base *vec_ ) { size_t len_ = vec_ ? vec_->num : 0; VEC_constructor_elt_gc *new_vec_ = ((void *)0); if (len_) { new_vec_ = (VEC_constructor_elt_gc *)(vec_gc_o_reserve (((void *)0), -len_, __builtin_offsetof (VEC_constructor_elt_gc, base.vec), sizeof (constructor_elt) )); new_vec_->base.num = len_; memcpy (new_vec_->base.vec, vec_->vec, sizeof (constructor_elt) * len_); } return new_vec_; } static __inline__ void VEC_constructor_elt_gc_free (VEC_constructor_elt_gc **vec_) { if (*vec_) ggc_free (*vec_); *vec_ = ((void *)0); } static __inline__ int VEC_constructor_elt_gc_reserve (VEC_constructor_elt_gc **vec_, int alloc_ ) { int extend = !VEC_constructor_elt_base_space (((*vec_) ? &(*vec_)->base : 0), alloc_ < 0 ? -alloc_ : alloc_ ); if (extend) *vec_ = (VEC_constructor_elt_gc *) vec_gc_o_reserve (*vec_, alloc_, __builtin_offsetof (VEC_constructor_elt_gc, base.vec), sizeof (constructor_elt) ); return extend; } static __inline__ void VEC_constructor_elt_gc_safe_grow (VEC_constructor_elt_gc **vec_, int size_ ) { (void)(size_ >= 0 && VEC_constructor_elt_base_length ((*vec_) ? &(*vec_)->base : 0) <= (unsigned)size_); VEC_constructor_elt_gc_reserve (vec_, (int)(*vec_ ? ((*vec_) ? &(*vec_)->base : 0)->num : 0) - size_ ); ((*vec_) ? &(*vec_)->base : 0)->num = size_; ((*vec_) ? &(*vec_)->base : 0)->num = size_; } static __inline__ constructor_elt *VEC_constructor_elt_gc_safe_push (VEC_constructor_elt_gc **vec_, const constructor_elt *obj_ ) { VEC_constructor_elt_gc_reserve (vec_, 1 ); return VEC_constructor_elt_base_quick_push (((*vec_) ? &(*vec_)->base : 0), obj_ ); } static __inline__ constructor_elt *VEC_constructor_elt_gc_safe_insert (VEC_constructor_elt_gc **vec_, unsigned ix_, const constructor_elt *obj_ ) { VEC_constructor_elt_gc_reserve (vec_, 1 ); return VEC_constructor_elt_base_quick_insert (((*vec_) ? &(*vec_)->base : 0), ix_, obj_ ); } struct vec_swallow_trailing_semi;

struct tree_constructor
{
  struct tree_common common;
  VEC_constructor_elt_gc *elts;
};
# 1390 "../.././gcc/tree.h"
struct tree_exp
{
  struct tree_common common;
  source_locus locus;
  int complexity;
  tree block;
  tree

    operands[1];
};
# 1441 "../.././gcc/tree.h"
struct ptr_info_def;






typedef struct ssa_use_operand_d
{
  struct ssa_use_operand_d* prev;
  struct ssa_use_operand_d* next;
  tree stmt;
  tree * use;
} ssa_use_operand_t;




struct tree_ssa_name
{
  struct tree_common common;


  tree var;


  unsigned int version;


  struct ptr_info_def *ptr_info;






  tree value_handle;


  void * aux;


  struct ssa_use_operand_d imm_uses;
};
# 1510 "../.././gcc/tree.h"
struct phi_arg_d
{


  struct ssa_use_operand_d imm_use;
  tree def;
  unsigned char nonzero;
};

struct tree_phi_node
{
  struct tree_common common;
  tree result;
  int num_args;
  int capacity;


  struct basic_block_def *bb;



  struct phi_arg_d a[1];
};


struct varray_head_tag;
# 1588 "../.././gcc/tree.h"
struct tree_block
{
  struct tree_common common;

  unsigned handler_block_flag : 1;
  unsigned abstract_flag : 1;
  unsigned block_num : 30;

  tree vars;
  tree subblocks;
  tree supercontext;
  tree abstract_origin;
  tree fragment_origin;
  tree fragment_chain;
  location_t locus;
};
# 1799 "../.././gcc/tree.h"
struct die_struct;

struct tree_type
{
  struct tree_common common;
  tree values;
  tree size;
  tree size_unit;
  tree attributes;
  unsigned int uid;

  unsigned int precision : 9;
  __extension__ enum machine_mode mode : 7;

  unsigned string_flag : 1;
  unsigned no_force_blk_flag : 1;
  unsigned needs_constructing_flag : 1;
  unsigned transparent_union_flag : 1;
  unsigned packed_flag : 1;
  unsigned restrict_flag : 1;
  unsigned contains_placeholder_bits : 2;

  unsigned lang_flag_0 : 1;
  unsigned lang_flag_1 : 1;
  unsigned lang_flag_2 : 1;
  unsigned lang_flag_3 : 1;
  unsigned lang_flag_4 : 1;
  unsigned lang_flag_5 : 1;
  unsigned lang_flag_6 : 1;
  unsigned user_align : 1;

  unsigned int align;
  tree pointer_to;
  tree reference_to;
  union tree_type_symtab {
    int address;
    char * pointer;
    struct die_struct * die;
  } symtab;

  tree name;
  tree minval;
  tree maxval;
  tree next_variant;
  tree main_variant;
  tree binfo;
  tree context;
  long alias_set;

  struct lang_type *lang_specific;
};
# 1954 "../.././gcc/tree.h"
struct tree_binfo
{
  struct tree_common common;

  tree offset;
  tree vtable;
  tree virtuals;
  tree vptr_field;
  VEC_tree_gc *base_accesses;
  tree inheritance;

  tree vtt_subvtt;
  tree vtt_vptr;

  VEC_tree_none base_binfos;
};
# 1999 "../.././gcc/tree.h"
struct function;
# 2032 "../.././gcc/tree.h"
struct tree_decl_minimal
{
  struct tree_common common;
  location_t locus;
  unsigned int uid;
  tree name;
  tree context;
};
# 2183 "../.././gcc/tree.h"
struct tree_decl_common
{
  struct tree_decl_minimal common;
  tree size;

  __extension__ enum machine_mode mode : 8;

  unsigned nonlocal_flag : 1;
  unsigned virtual_flag : 1;
  unsigned ignored_flag : 1;
  unsigned abstract_flag : 1;
  unsigned artificial_flag : 1;
  unsigned user_align : 1;
  unsigned preserve_flag: 1;
  unsigned debug_expr_is_from : 1;

  unsigned lang_flag_0 : 1;
  unsigned lang_flag_1 : 1;
  unsigned lang_flag_2 : 1;
  unsigned lang_flag_3 : 1;
  unsigned lang_flag_4 : 1;
  unsigned lang_flag_5 : 1;
  unsigned lang_flag_6 : 1;
  unsigned lang_flag_7 : 1;



  unsigned decl_flag_0 : 1;

  unsigned decl_flag_1 : 1;



  unsigned decl_flag_2 : 1;


  unsigned decl_flag_3 : 1;


  unsigned gimple_reg_flag : 1;

  union tree_decl_u1 {


    enum built_in_function f;


    long i;


    struct tree_decl_u1_a {
      unsigned int align : 24;
      unsigned int off_align : 8;
    } a;
  } u1;

  tree size_unit;
  tree initial;
  tree attributes;
  tree abstract_origin;

  long pointer_alias_set;

  struct lang_decl *lang_specific;
};

extern tree decl_value_expr_lookup (tree);
extern void decl_value_expr_insert (tree, tree);
# 2291 "../.././gcc/tree.h"
struct tree_decl_with_rtl
{
  struct tree_decl_common common;
  rtx rtl;
};
# 2344 "../.././gcc/tree.h"
struct tree_field_decl
{
  struct tree_decl_common common;

  tree offset;
  tree bit_field_type;
  tree qualifier;
  tree bit_offset;
  tree fcontext;

};
# 2366 "../.././gcc/tree.h"
struct tree_label_decl
{
  struct tree_decl_with_rtl common;



  tree java_field_1;
  tree java_field_2;
  tree java_field_3;
  unsigned int java_field_4;

};

struct tree_result_decl
{
  struct tree_decl_with_rtl common;
};

struct tree_const_decl
{
  struct tree_decl_with_rtl common;
};
# 2397 "../.././gcc/tree.h"
struct tree_parm_decl
{
  struct tree_decl_with_rtl common;
  rtx incoming_rtl;
};
# 2441 "../.././gcc/tree.h"
extern tree decl_restrict_base_lookup (tree);
extern void decl_restrict_base_insert (tree, tree);
# 2505 "../.././gcc/tree.h"
struct tree_decl_with_vis
{
 struct tree_decl_with_rtl common;
 tree assembler_name;
 tree section_name;


 unsigned defer_output:1;
 unsigned hard_register:1;
 unsigned thread_local:1;
 unsigned common_flag:1;
 unsigned in_text_section : 1;
 unsigned gimple_formal_temp : 1;
 unsigned dllimport_flag : 1;
 unsigned based_on_restrict_p : 1;

 unsigned shadowed_for_var_p : 1;


 unsigned in_system_header_flag : 1;
 unsigned weak_flag:1;
 unsigned seen_in_bind_expr : 1;
 unsigned comdat_flag : 1;
 __extension__ enum symbol_visibility visibility : 2;
 unsigned visibility_specified : 1;

 unsigned one_only : 1;
 unsigned init_priority_p:1;


 __extension__ enum tls_model tls_model : 3;

};
# 2552 "../.././gcc/tree.h"
extern tree decl_debug_expr_lookup (tree);
extern void decl_debug_expr_insert (tree, tree);
# 2564 "../.././gcc/tree.h"
extern unsigned short decl_init_priority_lookup (tree);
extern void decl_init_priority_insert (tree, unsigned short);
# 2587 "../.././gcc/tree.h"
struct tree_var_decl
{
  struct tree_decl_with_vis common;
};
# 2607 "../.././gcc/tree.h"
struct tree_decl_non_common

{
  struct tree_decl_with_vis common;

  tree saved_tree;

  tree arguments;

  tree result;

  tree vindex;
};
# 2712 "../.././gcc/tree.h"
struct tree_function_decl
{
  struct tree_decl_non_common common;

  unsigned static_ctor_flag : 1;
  unsigned static_dtor_flag : 1;
  unsigned uninlinable : 1;
  unsigned possibly_inlined : 1;
  unsigned novops_flag : 1;
  unsigned returns_twice_flag : 1;
  unsigned malloc_flag : 1;
  unsigned pure_flag : 1;

  unsigned declared_inline_flag : 1;
  unsigned regdecl_flag : 1;
  unsigned inline_flag : 1;
  unsigned no_instrument_function_entry_exit : 1;
  unsigned no_limit_stack : 1;
  __extension__ enum built_in_class built_in_class : 2;

  struct function *f;
};
# 2744 "../.././gcc/tree.h"
struct tree_type_decl
{
  struct tree_decl_non_common common;

};
# 2761 "../.././gcc/tree.h"
struct tree_statement_list_node
 
{
  struct tree_statement_list_node *prev;
  struct tree_statement_list_node *next;
  tree stmt;
};

struct tree_statement_list
 
{
  struct tree_common common;
  struct tree_statement_list_node *head;
  struct tree_statement_list_node *tail;
};
# 2784 "../.././gcc/tree.h"
struct value_set;

struct tree_value_handle
{
  struct tree_common common;


  struct value_set * expr_set;




  unsigned int id;
};





union tree_node

{
  struct tree_common common;
  struct tree_int_cst int_cst;
  struct tree_real_cst real_cst;
  struct tree_vector vector;
  struct tree_string string;
  struct tree_complex complex;
  struct tree_identifier identifier;
  struct tree_decl_minimal decl_minimal;
  struct tree_decl_common decl_common;
  struct tree_decl_with_rtl decl_with_rtl;
  struct tree_decl_non_common decl_non_common;
  struct tree_parm_decl parm_decl;
  struct tree_decl_with_vis decl_with_vis;
  struct tree_var_decl var_decl;
  struct tree_field_decl field_decl;
  struct tree_label_decl label_decl;
  struct tree_result_decl result_decl;
  struct tree_const_decl const_decl;
  struct tree_type_decl type_decl;
  struct tree_function_decl function_decl;
  struct tree_type type;
  struct tree_list list;
  struct tree_vec vec;
  struct tree_exp exp;
  struct tree_ssa_name ssa_name;
  struct tree_phi_node phi;
  struct tree_block block;
  struct tree_binfo binfo;
  struct tree_statement_list stmt_list;
  struct tree_value_handle value_handle;
  struct tree_constructor constructor;
};



enum tree_index
{
  TI_ERROR_MARK,
  TI_INTQI_TYPE,
  TI_INTHI_TYPE,
  TI_INTSI_TYPE,
  TI_INTDI_TYPE,
  TI_INTTI_TYPE,

  TI_UINTQI_TYPE,
  TI_UINTHI_TYPE,
  TI_UINTSI_TYPE,
  TI_UINTDI_TYPE,
  TI_UINTTI_TYPE,

  TI_INTEGER_ZERO,
  TI_INTEGER_ONE,
  TI_INTEGER_MINUS_ONE,
  TI_NULL_POINTER,

  TI_SIZE_ZERO,
  TI_SIZE_ONE,

  TI_BITSIZE_ZERO,
  TI_BITSIZE_ONE,
  TI_BITSIZE_UNIT,

  TI_PUBLIC,
  TI_PROTECTED,
  TI_PRIVATE,

  TI_BOOLEAN_FALSE,
  TI_BOOLEAN_TRUE,

  TI_COMPLEX_INTEGER_TYPE,
  TI_COMPLEX_FLOAT_TYPE,
  TI_COMPLEX_DOUBLE_TYPE,
  TI_COMPLEX_LONG_DOUBLE_TYPE,

  TI_FLOAT_TYPE,
  TI_DOUBLE_TYPE,
  TI_LONG_DOUBLE_TYPE,

  TI_FLOAT_PTR_TYPE,
  TI_DOUBLE_PTR_TYPE,
  TI_LONG_DOUBLE_PTR_TYPE,
  TI_INTEGER_PTR_TYPE,

  TI_VOID_TYPE,
  TI_PTR_TYPE,
  TI_CONST_PTR_TYPE,
  TI_SIZE_TYPE,
  TI_PID_TYPE,
  TI_PTRDIFF_TYPE,
  TI_VA_LIST_TYPE,
  TI_VA_LIST_GPR_COUNTER_FIELD,
  TI_VA_LIST_FPR_COUNTER_FIELD,
  TI_BOOLEAN_TYPE,
  TI_FILEPTR_TYPE,

  TI_VOID_LIST_NODE,

  TI_MAIN_IDENTIFIER,

  TI_MAX
};

extern tree global_trees[TI_MAX];
# 2987 "../.././gcc/tree.h"
enum integer_type_kind
{
  itk_char,
  itk_signed_char,
  itk_unsigned_char,
  itk_short,
  itk_unsigned_short,
  itk_int,
  itk_unsigned_int,
  itk_long,
  itk_unsigned_long,
  itk_long_long,
  itk_unsigned_long_long,
  itk_none
};

typedef enum integer_type_kind integer_type_kind;



extern tree integer_types[itk_none];
# 3023 "../.././gcc/tree.h"
extern enum tls_model flag_tls_default;
# 3047 "../.././gcc/tree.h"
enum ptrmemfunc_vbit_where_t
{
  ptrmemfunc_vbit_in_pfn,
  ptrmemfunc_vbit_in_delta
};



extern tree decl_assembler_name (tree);




extern size_t tree_size (tree);




extern size_t tree_code_size (enum tree_code);





extern tree make_node_stat (enum tree_code );




extern tree copy_node_stat (tree );




extern tree copy_list (tree);


extern tree make_tree_binfo_stat (unsigned );




extern tree make_tree_vec_stat (int );




extern void init_phinodes (void);
extern void fini_phinodes (void);
extern void release_phi_node (tree);




extern void init_ssanames (void);
extern void fini_ssanames (void);
extern tree make_ssa_name (tree, tree);
extern tree duplicate_ssa_name (tree, tree);
extern void duplicate_ssa_name_ptr_info (tree, struct ptr_info_def *);
extern void release_ssa_name (tree);
extern void release_defs (tree);
extern void replace_ssa_name_symbol (tree, tree);
# 3117 "../.././gcc/tree.h"
extern tree get_identifier (const char *);
# 3130 "../.././gcc/tree.h"
extern tree get_identifier_with_length (const char *, size_t);





extern tree maybe_get_identifier (const char *);



extern tree build (enum tree_code, tree, ...);
extern tree build_nt (enum tree_code, ...);
# 3155 "../.././gcc/tree.h"
extern tree build0_stat (enum tree_code, tree );

extern tree build1_stat (enum tree_code, tree, tree );

extern tree build2_stat (enum tree_code, tree, tree, tree );

extern tree build3_stat (enum tree_code, tree, tree, tree, tree );

extern tree build4_stat (enum tree_code, tree, tree, tree, tree,
    tree );

extern tree build7_stat (enum tree_code, tree, tree, tree, tree, tree,
    tree, tree, tree );



extern tree build_int_cst (tree, long);
extern tree build_int_cst_type (tree, long);
extern tree build_int_cstu (tree, unsigned long);
extern tree build_int_cst_wide (tree, unsigned long, long);
extern tree build_vector (tree, tree);
extern tree build_vector_from_ctor (tree, VEC_constructor_elt_gc *);
extern tree build_constructor (tree, VEC_constructor_elt_gc *);
extern tree build_constructor_single (tree, tree, tree);
extern tree build_constructor_from_list (tree, tree);
extern tree build_real_from_int_cst (tree, tree);
extern tree build_complex (tree, tree, tree);
extern tree build_string (int, const char *);
extern tree build_tree_list_stat (tree, tree );

extern tree build_decl_stat (enum tree_code, tree, tree );
extern tree build_fn_decl (const char *, tree);

extern tree build_block (tree, tree, tree, tree);

extern void annotate_with_file_line (tree, const char *, int);
extern void annotate_with_locus (tree, location_t);

extern tree build_empty_stmt (void);



extern tree make_signed_type (int);
extern tree make_unsigned_type (int);
extern tree signed_type_for (tree);
extern tree unsigned_type_for (tree);
extern void initialize_sizetypes (unsigned char);
extern void set_sizetype (tree);
extern void fixup_unsigned_type (tree);
extern tree build_pointer_type_for_mode (tree, enum machine_mode, unsigned char);
extern tree build_pointer_type (tree);
extern tree build_reference_type_for_mode (tree, enum machine_mode, unsigned char);
extern tree build_reference_type (tree);
extern tree build_vector_type_for_mode (tree, enum machine_mode);
extern tree build_vector_type (tree innertype, int nunits);
extern tree build_type_no_quals (tree);
extern tree build_index_type (tree);
extern tree build_index_2_type (tree, tree);
extern tree build_array_type (tree, tree);
extern tree build_function_type (tree, tree);
extern tree build_function_type_list (tree, ...);
extern tree build_method_type_directly (tree, tree, tree);
extern tree build_method_type (tree, tree);
extern tree build_offset_type (tree, tree);
extern tree build_complex_type (tree);
extern tree build_resx (int);
extern tree array_type_nelts (tree);
extern unsigned char in_array_bounds_p (tree);

extern tree value_member (tree, tree);
extern tree purpose_member (tree, tree);

extern int attribute_list_equal (tree, tree);
extern int attribute_list_contained (tree, tree);
extern int tree_int_cst_equal (tree, tree);
extern int tree_int_cst_lt (tree, tree);
extern int tree_int_cst_compare (tree, tree);
extern int host_integerp (tree, int);
extern long tree_low_cst (tree, int);
extern int tree_int_cst_msb (tree);
extern int tree_int_cst_sgn (tree);
extern int tree_int_cst_sign_bit (tree);
extern int tree_expr_nonnegative_p (tree);
extern unsigned char may_negate_without_overflow_p (tree);
extern tree get_inner_array_type (tree);





extern tree make_tree (tree, rtx);







extern tree build_type_attribute_variant (tree, tree);
extern tree build_decl_attribute_variant (tree, tree);


struct attribute_spec
{


  const char *const name;

  const int min_length;


  const int max_length;







  const unsigned char decl_required;


  const unsigned char type_required;




  const unsigned char function_type_required;
# 3297 "../.././gcc/tree.h"
  tree (*const handler) (tree *node, tree name, tree args,
     int flags, unsigned char *no_add_attrs);
};



enum attribute_flags
{



  ATTR_FLAG_DECL_NEXT = 1,



  ATTR_FLAG_FUNCTION_NEXT = 2,



  ATTR_FLAG_ARRAY_NEXT = 4,


  ATTR_FLAG_TYPE_IN_PLACE = 8,



  ATTR_FLAG_BUILT_IN = 16
};



extern tree merge_decl_attributes (tree, tree);
extern tree merge_type_attributes (tree, tree);




extern int is_attribute_p (const char *, tree);




extern tree lookup_attribute (const char *, tree);



extern tree merge_attributes (tree, tree);
# 3357 "../.././gcc/tree.h"
extern unsigned char check_qualified_type (tree, tree, int);





extern tree get_qualified_type (tree, int);




extern tree build_qualified_type (tree, int);
# 3382 "../.././gcc/tree.h"
extern tree build_distinct_type_copy (tree);
extern tree build_variant_type_copy (tree);




extern void finish_builtin_struct (tree, const char *,
        tree, tree);





extern void layout_type (tree);
# 3404 "../.././gcc/tree.h"
typedef struct record_layout_info_s
{

  tree t;


  tree offset;

  unsigned int offset_align;

  tree bitpos;

  unsigned int record_align;


  unsigned int unpacked_align;

  tree prev_field;


  tree pending_statics;

  int remaining_in_alignment;


  int prev_packed;


  int packed_maybe_necessary;
} *record_layout_info;

extern void set_lang_adjust_rli (void (*) (record_layout_info));
extern record_layout_info start_record_layout (tree);
extern tree bit_from_pos (tree, tree);
extern tree byte_from_pos (tree, tree);
extern void pos_from_bit (tree *, tree *, unsigned int, tree);
extern void normalize_offset (tree *, tree *, unsigned int);
extern tree rli_size_unit_so_far (record_layout_info);
extern tree rli_size_so_far (record_layout_info);
extern void normalize_rli (record_layout_info);
extern void place_field (record_layout_info, tree);
extern void compute_record_mode (tree);
extern void finish_record_layout (record_layout_info, int);






extern tree type_hash_canon (unsigned int, tree);
# 3463 "../.././gcc/tree.h"
extern void layout_decl (tree, unsigned);




extern void relayout_decl (tree);






extern enum machine_mode mode_for_size_tree (tree, enum mode_class, int);



extern tree non_lvalue (tree);

extern tree convert (tree, tree);
extern unsigned int expr_align (tree);
extern tree expr_first (tree);
extern tree expr_last (tree);
extern tree expr_only (tree);
extern tree size_in_bytes (tree);
extern long int_size_in_bytes (tree);
extern tree bit_position (tree);
extern long int_bit_position (tree);
extern tree byte_position (tree);
extern long int_byte_position (tree);




enum size_type_kind
{
  SIZETYPE,
  SSIZETYPE,
  BITSIZETYPE,
  SBITSIZETYPE,
  TYPE_KIND_LAST};

extern tree sizetype_tab[(int) TYPE_KIND_LAST];






extern tree size_int_kind (long, enum size_type_kind);
extern tree size_binop (enum tree_code, tree, tree);
extern tree size_diffop (tree, tree);






extern tree round_up (tree, int);
extern tree round_down (tree, int);
extern tree get_pending_sizes (void);
extern void put_pending_size (tree);
extern void put_pending_sizes (tree);
# 3534 "../.././gcc/tree.h"
extern unsigned int maximum_field_alignment;

extern unsigned int initial_max_fld_align;





extern tree chainon (tree, tree);



extern tree tree_cons_stat (tree, tree, tree );




extern tree tree_last (tree);



extern tree nreverse (tree);




extern int list_length (tree);



extern int fields_length (tree);




extern unsigned char initializer_zerop (tree);

extern void categorize_ctor_elements (tree, long *, long *,
          long *, unsigned char *);
extern long count_type_elements (tree, unsigned char);



extern void add_var_to_bind_expr (tree, tree);



extern int integer_zerop (tree);



extern int integer_onep (tree);




extern int integer_all_onesp (tree);




extern int integer_pow2p (tree);




extern int integer_nonzerop (tree);

extern unsigned char zero_p (tree);
extern unsigned char cst_and_fits_in_hwi (tree);
extern tree num_ending_zeros (tree);




extern tree staticp (tree);





extern tree save_expr (tree);




extern tree skip_simple_arithmetic (tree);



enum tree_node_structure_enum tree_node_structure (tree);







extern unsigned char contains_placeholder_p (tree);
# 3644 "../.././gcc/tree.h"
extern unsigned char type_contains_placeholder_p (tree);






extern tree substitute_in_expr (tree, tree, tree);
# 3662 "../.././gcc/tree.h"
extern tree substitute_placeholder_in_expr (tree, tree);
# 3677 "../.././gcc/tree.h"
extern tree variable_size (tree);





extern tree stabilize_reference (tree);





extern tree stabilize_reference_1 (tree);






extern tree get_unwidened (tree, tree);






extern tree get_narrower (tree, int *);





extern tree get_inner_reference (tree, long *, long *,
     tree *, enum machine_mode *, int *, int *,
     unsigned char);



extern int handled_component_p (tree);




extern tree array_ref_element_size (tree);




extern tree array_ref_low_bound (tree);




extern tree array_ref_up_bound (tree);




extern tree component_ref_field_offset (tree);




extern tree get_containing_scope (tree);



extern tree decl_function_context (tree);



extern tree decl_type_context (tree);


extern int real_zerop (tree);






extern int pedantic_lvalues;



extern tree current_function_decl;


extern const char * current_function_func_begin_label;


extern unsigned crc32_string (unsigned, const char *);
extern void clean_symbol_name (char *);
extern tree get_file_function_name_long (const char *);
extern tree get_callee_fndecl (tree);
extern void change_decl_assembler_name (tree, tree);
extern int type_num_arguments (tree);
extern unsigned char associative_tree_code (enum tree_code);
extern unsigned char commutative_tree_code (enum tree_code);
extern tree upper_bound_in_type (tree, tree);
extern tree lower_bound_in_type (tree, tree);
extern int operand_equal_for_phi_arg_p (tree, tree);



extern void expand_expr_stmt (tree);
extern int warn_if_unused_value (tree, location_t);
extern void expand_label (tree);
extern void expand_goto (tree);

extern rtx expand_stack_save (void);
extern void expand_stack_restore (tree);
extern void expand_return (tree);
extern int is_body_block (tree);


extern void using_eh_for_cleanups (void);
# 3803 "../.././gcc/tree.h"
extern tree fold (tree);
extern tree fold_unary (enum tree_code, tree, tree);
extern tree fold_binary (enum tree_code, tree, tree, tree);
extern tree fold_ternary (enum tree_code, tree, tree, tree, tree);
extern tree fold_build1_stat (enum tree_code, tree, tree );

extern tree fold_build2_stat (enum tree_code, tree, tree, tree );

extern tree fold_build3_stat (enum tree_code, tree, tree, tree, tree );

extern tree fold_build1_initializer (enum tree_code, tree, tree);
extern tree fold_build2_initializer (enum tree_code, tree, tree, tree);
extern tree fold_build3_initializer (enum tree_code, tree, tree, tree, tree);
extern tree fold_convert (tree, tree);
extern tree fold_single_bit_test (enum tree_code, tree, tree, tree);
extern tree fold_ignored_result (tree);
extern tree fold_abs_const (tree, tree);
extern tree fold_indirect_ref_1 (tree, tree);

extern tree force_fit_type (tree, int, unsigned char, unsigned char);

extern int add_double (unsigned long, long,
         unsigned long, long,
         unsigned long *, long *);
extern int neg_double (unsigned long, long,
         unsigned long *, long *);
extern int mul_double (unsigned long, long,
         unsigned long, long,
         unsigned long *, long *);
extern void lshift_double (unsigned long, long,
      long, unsigned int,
      unsigned long *, long *, int);
extern void rshift_double (unsigned long, long,
      long, unsigned int,
      unsigned long *, long *, int);
extern void lrotate_double (unsigned long, long,
       long, unsigned int,
       unsigned long *, long *);
extern void rrotate_double (unsigned long, long,
       long, unsigned int,
       unsigned long *, long *);

extern int div_and_round_double (enum tree_code, int, unsigned long,
     long, unsigned long,
     long, unsigned long *,
     long *, unsigned long *,
     long *);

enum operand_equal_flag
{
  OEP_ONLY_CONST = 1,
  OEP_PURE_SAME = 2
};

extern int operand_equal_p (tree, tree, unsigned int);

extern tree omit_one_operand (tree, tree, tree);
extern tree omit_two_operands (tree, tree, tree, tree);
extern tree invert_truthvalue (tree);
extern tree fold_unary_to_constant (enum tree_code, tree, tree);
extern tree fold_binary_to_constant (enum tree_code, tree, tree, tree);
extern tree fold_read_from_constant_string (tree);
extern tree int_const_binop (enum tree_code, tree, tree, int);
extern tree build_fold_addr_expr (tree);
extern tree fold_build_cleanup_point_expr (tree type, tree expr);
extern tree fold_strip_sign_ops (tree);
extern tree build_fold_addr_expr_with_type (tree, tree);
extern tree build_fold_indirect_ref (tree);
extern tree fold_indirect_ref (tree);
extern tree constant_boolean_node (int, tree);
extern tree build_low_bits_mask (tree, unsigned);

extern unsigned char tree_swap_operands_p (tree, tree, unsigned char);
extern void swap_tree_operands (tree, tree *, tree *);
extern enum tree_code swap_tree_comparison (enum tree_code);

extern unsigned char ptr_difference_const (tree, tree, long *);
extern enum tree_code invert_tree_comparison (enum tree_code, unsigned char);

extern unsigned char tree_expr_nonzero_p (tree);


extern tree fold_builtin (tree, tree, unsigned char);
extern tree fold_builtin_fputs (tree, unsigned char, unsigned char, tree);
extern tree fold_builtin_strcpy (tree, tree, tree);
extern tree fold_builtin_strncpy (tree, tree, tree);
extern tree fold_builtin_memory_chk (tree, tree, tree, unsigned char,
         enum built_in_function);
extern tree fold_builtin_stxcpy_chk (tree, tree, tree, unsigned char,
         enum built_in_function);
extern tree fold_builtin_strncpy_chk (tree, tree);
extern tree fold_builtin_snprintf_chk (tree, tree, enum built_in_function);
extern unsigned char fold_builtin_next_arg (tree);
extern enum built_in_function builtin_mathfn_code (tree);
extern tree build_function_call_expr (tree, tree);
extern tree mathfn_built_in (tree, enum built_in_function fn);
extern tree strip_float_extensions (tree);
extern tree c_strlen (tree, int);
extern tree std_gimplify_va_arg_expr (tree, tree, tree *, tree *);
extern tree build_va_arg_indirect_ref (tree);


extern tree strip_float_extensions (tree);


extern void record_component_aliases (tree);
extern long get_alias_set (tree);
extern int alias_sets_conflict_p (long, long);
extern int alias_sets_might_conflict_p (long, long);
extern int objects_must_conflict_p (tree, tree);


extern int really_constant_p (tree);
extern int int_fits_type_p (tree, tree);
extern unsigned char variably_modified_type_p (tree, tree);
extern int tree_log2 (tree);
extern int tree_floor_log2 (tree);
extern int simple_cst_equal (tree, tree);
extern unsigned int iterative_hash_expr (tree, unsigned int);
extern int compare_tree_int (tree, unsigned long);
extern int type_list_equal (tree, tree);
extern int chain_member (tree, tree);
extern tree type_hash_lookup (unsigned int, tree);
extern void type_hash_add (unsigned int, tree);
extern int simple_cst_list_equal (tree, tree);
extern void dump_tree_statistics (void);
extern void expand_function_end (void);
extern void expand_function_start (tree);
extern void stack_protect_prologue (void);
extern void stack_protect_epilogue (void);
extern void recompute_tree_invarant_for_addr_expr (tree);
extern unsigned char is_global_var (tree t);
extern unsigned char needs_to_live_in_memory (tree);
extern tree reconstruct_complex_type (tree, tree);

extern int real_onep (tree);
extern int real_twop (tree);
extern int real_minus_onep (tree);
extern void init_ttree (void);
extern void build_common_tree_nodes (unsigned char, unsigned char);
extern void build_common_tree_nodes_2 (int);
extern void build_common_builtin_nodes (void);
extern tree build_nonstandard_integer_type (unsigned long, int);
extern tree build_range_type (tree, tree, tree);
extern long int_cst_value (tree);
extern tree tree_fold_gcd (tree, tree);
extern tree build_addr (tree, tree);

extern unsigned char fields_compatible_p (tree, tree);
extern tree find_compatible_field (tree, tree);


extern void expand_main_function (void);
extern void init_dummy_function_start (void);
extern void expand_dummy_function_end (void);
extern void init_function_for_compilation (void);
extern void allocate_struct_function (tree);
extern void init_function_start (tree);
extern unsigned char use_register_for_decl (tree);
extern void setjmp_vars_warning (tree);
extern void setjmp_args_warning (void);
extern void init_temp_slots (void);
extern void free_temp_slots (void);
extern void pop_temp_slots (void);
extern void push_temp_slots (void);
extern void preserve_temp_slots (rtx);
extern int aggregate_value_p (tree, tree);
extern void push_function_context (void);
extern void pop_function_context (void);
extern void push_function_context_to (tree);
extern void pop_function_context_from (tree);
extern tree gimplify_parameters (void);



extern void print_rtl (FILE *, rtx);



extern void debug_tree (tree);

extern void print_node (FILE *, const char *, tree, int);
extern void print_node_brief (FILE *, const char *, tree, int);
extern void indent_to (FILE *, int);



extern unsigned char debug_find_tree (tree, tree);


extern tree unsave_expr_now (tree);
extern tree build_duplicate_type (tree);


extern rtx emit_line_note (location_t);
# 4029 "../.././gcc/tree.h"
extern int flags_from_decl_or_type (tree);
extern int call_expr_flags (tree);

extern int setjmp_call_p (tree);
extern unsigned char alloca_call_p (tree);
extern unsigned char must_pass_in_stack_var_size (enum machine_mode, tree);
extern unsigned char must_pass_in_stack_var_size_or_pad (enum machine_mode, tree);
# 4047 "../.././gcc/tree.h"
extern tree decl_attributes (tree *, tree, int);


extern void set_decl_abstract_flags (tree, int);
extern void set_decl_origin_self (tree);


extern void set_min_and_max_values_for_integral_type (tree, int, unsigned char);
extern void fixup_signed_type (tree);
extern void internal_reference_types (void);
extern unsigned int update_alignment_for_field (record_layout_info, tree,
                                                unsigned int);

extern void make_decl_rtl (tree);
extern void make_decl_one_only (tree);
extern int supports_one_only (void);
extern void variable_section (tree, int);
extern void resolve_unique_section (tree, int, int);
extern void mark_referenced (tree);
extern void mark_decl_referenced (tree);
extern void notice_global_symbol (tree);
extern void set_user_assembler_name (tree, const char *);
extern void process_pending_assemble_externals (void);
extern void finish_aliases_1 (void);
extern void finish_aliases_2 (void);


extern void expand_computed_goto (tree);
extern unsigned char parse_output_constraint (const char **, int, int, int,
         unsigned char *, unsigned char *, unsigned char *);
extern unsigned char parse_input_constraint (const char **, int, int, int, int,
        const char * const *, unsigned char *, unsigned char *);
extern void expand_asm_expr (tree);
extern tree resolve_asm_operand_names (tree, tree, tree);
extern void expand_case (tree);
extern void expand_decl (tree);
extern void expand_anon_union_decl (tree, tree, tree);






extern tree create_artificial_label (void);
extern void gimplify_function_tree (tree);
extern const char *get_name (tree);
extern tree unshare_expr (tree);
extern void sort_case_labels (tree);



extern tree get_file_function_name (int);





extern char *dwarf2out_cfi_label (void);



extern void dwarf2out_def_cfa (const char *, unsigned, long);



extern void dwarf2out_window_save (const char *);




extern void dwarf2out_args_size (const char *, long);



extern void dwarf2out_reg_save (const char *, unsigned, long);



extern void dwarf2out_return_save (const char *, long);



extern void dwarf2out_return_reg (const char *, unsigned);



extern void dwarf2out_reg_save_reg (const char *, rtx, rtx);





struct pointer_set_t;



typedef tree (*walk_tree_fn) (tree *, int *, void *);
extern tree walk_tree (tree*, walk_tree_fn, void*, struct pointer_set_t*);
extern tree walk_tree_without_duplicates (tree*, walk_tree_fn, void*);



extern void set_decl_rtl (tree, rtx);
extern void set_decl_incoming_rtl (tree, rtx);



typedef enum
{
  d_kind,
  t_kind,
  b_kind,
  s_kind,
  r_kind,
  e_kind,
  c_kind,
  id_kind,
  perm_list_kind,
  temp_list_kind,
  vec_kind,
  binfo_kind,
  phi_kind,
  ssa_name_kind,
  constr_kind,
  x_kind,
  lang_decl,
  lang_type,
  all_kinds
} tree_node_kind;

extern int tree_node_counts[];
extern int tree_node_sizes[];




extern unsigned char in_gimple_form;


extern tree get_base_address (tree t);


extern void vect_set_verbosity_level (const char *);

struct tree_map
{
  unsigned int hash;
  tree from;
  tree to;
};

extern unsigned int tree_map_hash (const void *);
extern int tree_map_marked_p (const void *);
extern int tree_map_eq (const void *, const void *);


extern tree tree_mem_ref_addr (tree, tree);
extern void copy_mem_ref_info (tree, tree);


extern void init_object_sizes (void);
extern void fini_object_sizes (void);
extern unsigned long compute_builtin_object_size (tree, int);


extern unsigned long highest_pow2_factor (tree);
# 35 "../.././gcc/expr.h" 2
# 53 "../.././gcc/expr.h"
enum expand_modifier {EXPAND_NORMAL = 0, EXPAND_STACK_PARM, EXPAND_SUM,
        EXPAND_CONST_ADDRESS, EXPAND_INITIALIZER, EXPAND_WRITE,
        EXPAND_MEMORY};
# 89 "../.././gcc/expr.h"
enum direction {none, upward, downward};






struct args_size
{
  long constant;
  tree var;
};



struct locate_and_pad_arg_data
{



  struct args_size size;

  struct args_size offset;


  struct args_size slot_offset;


  struct args_size alignment_pad;

  enum direction where_pad;

  unsigned int boundary;
};
# 253 "../.././gcc/expr.h"
enum optab_methods
{
  OPTAB_DIRECT,
  OPTAB_LIB,
  OPTAB_WIDEN,
  OPTAB_LIB_WIDEN,
  OPTAB_MUST_WIDEN
};




extern rtx expand_simple_binop (enum machine_mode, enum rtx_code, rtx,
    rtx, rtx, int, enum optab_methods);
extern rtx expand_simple_unop (enum machine_mode, enum rtx_code, rtx, rtx,
          int);



extern int have_insn_for (enum rtx_code, enum machine_mode);


extern void emit_libcall_block (rtx, rtx, rtx, rtx);




extern rtx gen_add2_insn (rtx, rtx);
extern rtx gen_add3_insn (rtx, rtx, rtx);
extern rtx gen_sub2_insn (rtx, rtx);
extern rtx gen_sub3_insn (rtx, rtx, rtx);
extern rtx gen_move_insn (rtx, rtx);
extern int have_add2_insn (rtx, rtx);
extern int have_sub2_insn (rtx, rtx);



extern void emit_cmp_and_jump_insns (rtx, rtx, enum rtx_code, rtx,
         enum machine_mode, int, rtx);


extern void emit_indirect_jump (rtx);


extern rtx gen_cond_trap (enum rtx_code, rtx, rtx, rtx);

# 1 "./insn-config.h" 1
# 300 "../.././gcc/expr.h" 2



rtx emit_conditional_move (rtx, enum rtx_code, rtx, rtx, enum machine_mode,
      rtx, rtx, enum machine_mode, int);


int can_conditionally_move_p (enum machine_mode mode);


rtx emit_conditional_add (rtx, enum rtx_code, rtx, rtx, enum machine_mode,
     rtx, rtx, enum machine_mode, int);

rtx expand_val_compare_and_swap (rtx, rtx, rtx, rtx);
rtx expand_bool_compare_and_swap (rtx, rtx, rtx, rtx);
rtx expand_sync_operation (rtx, rtx, enum rtx_code);
rtx expand_sync_fetch_operation (rtx, rtx, enum rtx_code, unsigned char, rtx);
rtx expand_sync_lock_test_and_set (rtx, rtx, rtx);





extern rtx negate_rtx (enum machine_mode, rtx);


extern rtx expand_and (enum machine_mode, rtx, rtx, rtx);


extern rtx emit_store_flag (rtx, enum rtx_code, rtx, rtx, enum machine_mode,
       int, int);


extern rtx emit_store_flag_force (rtx, enum rtx_code, rtx, rtx,
      enum machine_mode, int, int);


extern rtx expand_builtin (tree, rtx, rtx, enum machine_mode, int);
extern tree std_build_builtin_va_list (void);
extern void std_expand_builtin_va_start (tree, rtx);
extern rtx default_expand_builtin (tree, rtx, rtx, enum machine_mode, int);
extern void expand_builtin_setjmp_setup (rtx, rtx);
extern void expand_builtin_setjmp_receiver (rtx);
extern rtx expand_builtin_saveregs (void);
extern void expand_builtin_trap (void);





extern void init_expr_once (void);


extern void init_expr (void);



extern void convert_move (rtx, rtx, int);


extern rtx convert_to_mode (enum machine_mode, rtx, int);


extern rtx convert_modes (enum machine_mode, enum machine_mode, rtx, int);



enum block_op_methods
{
  BLOCK_OP_NORMAL,
  BLOCK_OP_NO_LIBCALL,
  BLOCK_OP_CALL_PARM,

  BLOCK_OP_TAILCALL
};

extern void init_block_move_fn (const char *);
extern void init_block_clear_fn (const char *);

extern rtx emit_block_move (rtx, rtx, rtx, enum block_op_methods);



extern void move_block_to_reg (int, rtx, int, enum machine_mode);



extern void move_block_from_reg (int, rtx, int);


extern rtx gen_group_rtx (rtx);



extern void emit_group_load (rtx, rtx, tree, int);


extern rtx emit_group_load_into_temps (rtx, rtx, tree, int);



extern void emit_group_move (rtx, rtx);


extern rtx emit_group_move_into_temps (rtx);



extern void emit_group_store (rtx, rtx, tree, int);


extern rtx copy_blkmode_from_reg (rtx, rtx, tree);


extern void use_reg (rtx *, rtx);



extern void use_regs (rtx *, int, int);


extern void use_group_regs (rtx *, rtx);



extern rtx clear_storage (rtx, rtx, enum block_op_methods);


extern unsigned char set_storage_via_setmem (rtx, rtx, rtx, unsigned int);




extern int can_move_by_pieces (unsigned long, unsigned int);






extern int can_store_by_pieces (unsigned long,
    rtx (*) (void *, long,
      enum machine_mode),
    void *, unsigned int);






extern rtx store_by_pieces (rtx, unsigned long,
       rtx (*) (void *, long, enum machine_mode),
       void *, unsigned int, int);


extern rtx emit_move_insn (rtx, rtx);


extern rtx emit_move_insn_1 (rtx, rtx);



extern rtx push_block (rtx, int, int);


extern void emit_push_insn (rtx, enum machine_mode, tree, rtx, unsigned int,
       int, rtx, int, rtx, rtx, int, rtx);


extern void expand_assignment (tree, tree);





extern rtx store_expr (tree, rtx, int);




extern rtx force_operand (rtx, rtx);


extern rtx expand_expr_real (tree, rtx, enum machine_mode,
        enum expand_modifier, rtx *);




static __inline__ rtx
expand_expr (tree exp, rtx target, enum machine_mode mode,
      enum expand_modifier modifier)
{
  return expand_expr_real (exp, target, mode, modifier, ((void *)0));
}

extern void expand_var (tree);



extern void init_pending_stack_adjust (void);


extern void discard_pending_stack_adjust (void);



extern void clear_pending_stack_adjust (void);


extern void do_pending_stack_adjust (void);



extern tree string_constant (tree, tree *);


extern void jumpifnot (tree, rtx);


extern void jumpif (tree, rtx);



extern void do_jump (tree, rtx, rtx);


extern rtx compare_from_rtx (rtx, rtx, enum rtx_code, int, enum machine_mode,
        rtx);
extern void do_compare_rtx_and_jump (rtx, rtx, enum rtx_code, int,
         enum machine_mode, rtx, rtx, rtx);


extern int try_casesi (tree, tree, tree, tree, rtx, rtx);
extern int try_tablejump (tree, tree, tree, tree, rtx, rtx);



extern unsigned int case_values_threshold (void);


# 1 "../.././gcc/alias.h" 1
# 24 "../.././gcc/alias.h"
extern long new_alias_set (void);
extern long get_varargs_alias_set (void);
extern long get_frame_alias_set (void);
extern void record_base_value (unsigned int, rtx, int);
extern unsigned char component_uses_parent_alias_set (tree);
# 542 "../.././gcc/expr.h" 2




extern rtx expr_size (tree);



extern long int_expr_size (tree);



extern rtx hard_function_value (tree, tree, tree, int);

extern rtx prepare_call_address (rtx, rtx, rtx *, int, int);

extern unsigned char shift_return_value (enum machine_mode, unsigned char, rtx);

extern rtx expand_call (tree, rtx, int);

extern void fixup_tail_calls (void);


extern rtx expand_shift (enum tree_code, enum machine_mode, rtx, tree, rtx,
    int);
extern rtx expand_divmod (int, enum tree_code, enum machine_mode, rtx, rtx,
     rtx, int);


extern void locate_and_pad_parm (enum machine_mode, tree, int, int, tree,
     struct args_size *,
     struct locate_and_pad_arg_data *);


extern rtx label_rtx (tree);




extern rtx force_label_rtx (tree);


extern rtx promoted_input_arg (unsigned int, enum machine_mode *, int *);




extern rtx eliminate_constant_term (rtx, rtx *);



extern rtx memory_address (enum machine_mode, rtx);


extern rtx memory_address_noforce (enum machine_mode, rtx);





extern rtx change_address (rtx, enum machine_mode, rtx);
# 623 "../.././gcc/expr.h"
extern rtx adjust_address_1 (rtx, enum machine_mode, long, int, int);
extern rtx adjust_automodify_address_1 (rtx, enum machine_mode, rtx,
     long, int);




extern rtx offset_address (rtx, rtx, unsigned long);


# 1 "../.././gcc/emit-rtl.h" 1
# 25 "../.././gcc/emit-rtl.h"
extern void set_mem_alias_set (rtx, long);


extern void set_mem_align (rtx, unsigned int);


extern void set_mem_expr (rtx, tree);


extern void set_mem_offset (rtx, rtx);


extern void set_mem_size (rtx, rtx);





extern rtx replace_equiv_address (rtx, rtx);


extern rtx replace_equiv_address_nv (rtx, rtx);
# 634 "../.././gcc/expr.h" 2



extern rtx widen_memory_access (rtx, enum machine_mode, long);



extern rtx validize_mem (rtx);




extern void set_mem_attributes (rtx, tree, int);




extern void set_mem_attributes_minus_bitpos (rtx, tree, int, long);


extern rtx assemble_trampoline_template (void);


extern rtx copy_to_reg (rtx);


extern rtx copy_addr_to_reg (rtx);


extern rtx copy_to_mode_reg (enum machine_mode, rtx);


extern rtx copy_to_suggested_reg (rtx, rtx, enum machine_mode);



extern rtx force_reg (enum machine_mode, rtx);


extern rtx force_not_mem (rtx);


extern enum machine_mode promote_mode (tree, enum machine_mode, int *, int);


extern void adjust_stack (rtx);


extern void anti_adjust_stack (rtx);


enum save_level {SAVE_BLOCK, SAVE_FUNCTION, SAVE_NONLOCAL};


extern void emit_stack_save (enum save_level, rtx *, rtx);


extern void emit_stack_restore (enum save_level, rtx, rtx);


extern void update_nonlocal_goto_save_area (void);



extern rtx allocate_dynamic_stack_space (rtx, rtx, int);






extern void probe_stack_range (long, rtx);



extern rtx hard_libcall_value (enum machine_mode);





enum extraction_pattern { EP_insv, EP_extv, EP_extzv };
extern enum machine_mode
mode_for_extraction (enum extraction_pattern, int);

extern rtx store_bit_field (rtx, unsigned long,
       unsigned long, enum machine_mode, rtx);
extern rtx extract_bit_field (rtx, unsigned long,
         unsigned long, int, rtx,
         enum machine_mode, enum machine_mode);
extern rtx expand_mult (enum machine_mode, rtx, rtx, rtx, int);
extern unsigned char const_mult_add_overflow_p (rtx, rtx, rtx, enum machine_mode, int);
extern rtx expand_mult_add (rtx, rtx, rtx, rtx,enum machine_mode, int);
extern rtx expand_mult_highpart_adjust (enum machine_mode, rtx, rtx, rtx, rtx, int);

extern rtx assemble_static_space (unsigned long);
extern int safe_from_p (rtx, tree, int);



extern void init_optabs (void);
extern void init_all_optabs (void);


extern rtx init_one_libfunc (const char *);

extern void do_jump_by_parts_equality_rtx (rtx, rtx, rtx);
extern void do_jump_by_parts_greater_rtx (enum machine_mode, int, rtx, rtx,
       rtx, rtx);

extern int vector_mode_valid_p (enum machine_mode);
# 12 "insn-emit.c" 2
# 1 "../.././gcc/optabs.h" 1
# 24 "../.././gcc/optabs.h"
# 1 "./insn-codes.h" 1






enum insn_code {


  CODE_FOR_cmpqi_ext_3_insn = 11,

  CODE_FOR_x86_fnstsw_1 = 20,
  CODE_FOR_x86_sahf_1 = 21,
  CODE_FOR_popsi1 = 31,
  CODE_FOR_movsi_insv_1 = 53,


  CODE_FOR_swapxf = 70,
  CODE_FOR_zero_extendhisi2_and = 71,
  CODE_FOR_zero_extendsidi2_32 = 79,






  CODE_FOR_extendhisi2 = 81,
  CODE_FOR_extendqihi2 = 82,
  CODE_FOR_extendqisi2 = 83,
  CODE_FOR_truncxfsf2_i387_noop = 96,
  CODE_FOR_truncxfdf2_i387_noop = 100,


  CODE_FOR_fix_truncsfsi_sse = 103,
  CODE_FOR_fix_truncdfsi_sse = 104,
  CODE_FOR_fix_trunchi_fisttp_i387_1 = 105,
  CODE_FOR_fix_truncsi_fisttp_i387_1 = 106,
  CODE_FOR_fix_truncdi_fisttp_i387_1 = 107,
  CODE_FOR_fix_trunchi_i387_fisttp = 108,
  CODE_FOR_fix_truncsi_i387_fisttp = 109,
  CODE_FOR_fix_truncdi_i387_fisttp = 110,
  CODE_FOR_fix_trunchi_i387_fisttp_with_temp = 111,
  CODE_FOR_fix_truncsi_i387_fisttp_with_temp = 112,
  CODE_FOR_fix_truncdi_i387_fisttp_with_temp = 113,
  CODE_FOR_fix_truncdi_i387 = 117,
  CODE_FOR_fix_truncdi_i387_with_temp = 118,
  CODE_FOR_fix_trunchi_i387 = 119,
  CODE_FOR_fix_truncsi_i387 = 120,
  CODE_FOR_fix_trunchi_i387_with_temp = 121,
  CODE_FOR_fix_truncsi_i387_with_temp = 122,
  CODE_FOR_x86_fnstcw_1 = 123,
  CODE_FOR_x86_fldcw_1 = 124,
  CODE_FOR_floathixf2 = 135,
  CODE_FOR_floatsixf2 = 136,
  CODE_FOR_floatdixf2 = 137,

  CODE_FOR_addqi3_carry = 139,
  CODE_FOR_addhi3_carry = 140,
  CODE_FOR_addsi3_carry = 141,
  CODE_FOR_addqi3_cc = 143,

  CODE_FOR_addqi_ext_1 = 166,

  CODE_FOR_subqi3_carry = 169,
  CODE_FOR_subhi3_carry = 170,
  CODE_FOR_subsi3_carry = 171,

  CODE_FOR_divqi3 = 191,
  CODE_FOR_udivqi3 = 192,
  CODE_FOR_divmodhi4 = 196,

  CODE_FOR_udivmodsi4 = 197,
  CODE_FOR_testsi_1 = 200,
  CODE_FOR_andqi_ext_0 = 217,
  CODE_FOR_iorqi_ext_0 = 232,
  CODE_FOR_xorqi_ext_0 = 243,
  CODE_FOR_copysignsf3_const = 260,
  CODE_FOR_copysignsf3_var = 261,
  CODE_FOR_copysigndf3_const = 265,
  CODE_FOR_copysigndf3_var = 266,


  CODE_FOR_x86_shld_1 = 287,


  CODE_FOR_x86_shrd_1 = 297,
  CODE_FOR_ashrsi3_31 = 298,

  CODE_FOR_ix86_rotldi3 = 328,
  CODE_FOR_ix86_rotrdi3 = 337,
  CODE_FOR_jump = 365,
  CODE_FOR_blockage = 373,
  CODE_FOR_return_internal = 374,
  CODE_FOR_return_internal_long = 375,
  CODE_FOR_return_pop_internal = 376,
  CODE_FOR_return_indirect_internal = 377,
  CODE_FOR_nop = 378,
  CODE_FOR_align = 379,
  CODE_FOR_set_got = 380,

  CODE_FOR_eh_return_si = 381,

  CODE_FOR_leave = 382,

  CODE_FOR_ctzsi2 = 386,

  CODE_FOR_sqrtxf2 = 434,
  CODE_FOR_fpremxf4 = 437,
  CODE_FOR_fprem1xf4 = 438,
  CODE_FOR_sincosdf3 = 447,
  CODE_FOR_sincossf3 = 448,
  CODE_FOR_sincosxf3 = 450,
  CODE_FOR_atan2df3_1 = 454,
  CODE_FOR_atan2sf3_1 = 455,
  CODE_FOR_atan2xf3_1 = 456,
  CODE_FOR_fyl2x_xf3 = 457,
  CODE_FOR_fyl2xp1_xf3 = 458,
  CODE_FOR_frndintxf2 = 462,
  CODE_FOR_fistdi2 = 464,
  CODE_FOR_fistdi2_with_temp = 465,
  CODE_FOR_fisthi2 = 468,
  CODE_FOR_fistsi2 = 469,
  CODE_FOR_fisthi2_with_temp = 470,
  CODE_FOR_fistsi2_with_temp = 471,
  CODE_FOR_frndintxf2_floor = 472,
  CODE_FOR_frndintxf2_floor_i387 = 473,
  CODE_FOR_fistdi2_floor = 477,
  CODE_FOR_fistdi2_floor_with_temp = 478,
  CODE_FOR_fisthi2_floor = 479,
  CODE_FOR_fistsi2_floor = 480,
  CODE_FOR_fisthi2_floor_with_temp = 481,
  CODE_FOR_fistsi2_floor_with_temp = 482,
  CODE_FOR_frndintxf2_ceil = 483,
  CODE_FOR_frndintxf2_ceil_i387 = 484,
  CODE_FOR_fistdi2_ceil = 488,
  CODE_FOR_fistdi2_ceil_with_temp = 489,
  CODE_FOR_fisthi2_ceil = 490,
  CODE_FOR_fistsi2_ceil = 491,
  CODE_FOR_fisthi2_ceil_with_temp = 492,
  CODE_FOR_fistsi2_ceil_with_temp = 493,
  CODE_FOR_frndintxf2_trunc = 494,
  CODE_FOR_frndintxf2_trunc_i387 = 495,
  CODE_FOR_frndintxf2_mask_pm = 496,
  CODE_FOR_frndintxf2_mask_pm_i387 = 497,
  CODE_FOR_cld = 498,

  CODE_FOR_x86_movsicc_0_m1 = 512,
  CODE_FOR_sminsf3 = 519,
  CODE_FOR_smaxsf3 = 520,
  CODE_FOR_smindf3 = 521,
  CODE_FOR_smaxdf3 = 522,
  CODE_FOR_pro_epilogue_adjust_stack_1 = 527,


  CODE_FOR_allocate_stack_worker_1 = 528,

  CODE_FOR_trap = 534,
  CODE_FOR_stack_protect_set_si = 537,

  CODE_FOR_stack_tls_protect_set_si = 538,

  CODE_FOR_stack_protect_test_si = 539,

  CODE_FOR_stack_tls_protect_test_si = 540,

  CODE_FOR_sse_movups = 547,
  CODE_FOR_sse2_movupd = 548,
  CODE_FOR_sse2_movdqu = 549,
  CODE_FOR_sse_movntv4sf = 550,
  CODE_FOR_sse2_movntv2df = 551,
  CODE_FOR_sse2_movntv2di = 552,
  CODE_FOR_sse2_movntsi = 553,
  CODE_FOR_sse3_lddqu = 554,
  CODE_FOR_sse_vmaddv4sf3 = 556,
  CODE_FOR_sse_vmsubv4sf3 = 558,
  CODE_FOR_sse_vmmulv4sf3 = 560,
  CODE_FOR_sse_vmdivv4sf3 = 562,
  CODE_FOR_sse_rcpv4sf2 = 563,
  CODE_FOR_sse_vmrcpv4sf2 = 564,
  CODE_FOR_sse_rsqrtv4sf2 = 565,
  CODE_FOR_sse_vmrsqrtv4sf2 = 566,
  CODE_FOR_sqrtv4sf2 = 567,
  CODE_FOR_sse_vmsqrtv4sf2 = 568,
  CODE_FOR_sse_vmsmaxv4sf3 = 572,
  CODE_FOR_sse_vmsminv4sf3 = 576,
  CODE_FOR_sse3_addsubv4sf3 = 581,
  CODE_FOR_sse3_haddv4sf3 = 582,
  CODE_FOR_sse3_hsubv4sf3 = 583,
  CODE_FOR_sse_maskcmpv4sf3 = 584,
  CODE_FOR_sse_vmmaskcmpv4sf3 = 585,
  CODE_FOR_sse_comi = 586,
  CODE_FOR_sse_ucomi = 587,
  CODE_FOR_sse_nandv4sf3 = 589,
  CODE_FOR_sse_cvtpi2ps = 596,
  CODE_FOR_sse_cvtps2pi = 597,
  CODE_FOR_sse_cvttps2pi = 598,
  CODE_FOR_sse_cvtsi2ss = 599,

  CODE_FOR_sse_cvtss2si = 600,

  CODE_FOR_sse_cvttss2si = 601,

  CODE_FOR_sse2_cvtdq2ps = 602,
  CODE_FOR_sse2_cvtps2dq = 603,
  CODE_FOR_sse2_cvttps2dq = 604,
  CODE_FOR_sse_movhlps = 605,
  CODE_FOR_sse_movlhps = 606,
  CODE_FOR_sse_unpckhps = 607,
  CODE_FOR_sse_unpcklps = 608,
  CODE_FOR_sse3_movshdup = 609,
  CODE_FOR_sse3_movsldup = 610,
  CODE_FOR_sse_shufps_1 = 611,
  CODE_FOR_sse_storehps = 612,
  CODE_FOR_sse_loadhps = 613,
  CODE_FOR_sse_storelps = 614,
  CODE_FOR_sse_loadlps = 615,
  CODE_FOR_sse_movss = 616,
  CODE_FOR_sse2_vmaddv2df3 = 623,
  CODE_FOR_sse2_vmsubv2df3 = 625,
  CODE_FOR_sse2_vmmulv2df3 = 627,
  CODE_FOR_sse2_vmdivv2df3 = 629,
  CODE_FOR_sqrtv2df2 = 630,
  CODE_FOR_sse2_vmsqrtv2df2 = 631,
  CODE_FOR_sse2_vmsmaxv2df3 = 635,
  CODE_FOR_sse2_vmsminv2df3 = 639,
  CODE_FOR_sse3_addsubv2df3 = 640,
  CODE_FOR_sse3_haddv2df3 = 641,
  CODE_FOR_sse3_hsubv2df3 = 642,
  CODE_FOR_sse2_maskcmpv2df3 = 643,
  CODE_FOR_sse2_vmmaskcmpv2df3 = 644,
  CODE_FOR_sse2_comi = 645,
  CODE_FOR_sse2_ucomi = 646,
  CODE_FOR_sse2_nandv2df3 = 648,
  CODE_FOR_sse2_cvtpi2pd = 655,
  CODE_FOR_sse2_cvtpd2pi = 656,
  CODE_FOR_sse2_cvttpd2pi = 657,
  CODE_FOR_sse2_cvtsi2sd = 658,

  CODE_FOR_sse2_cvtsd2si = 659,

  CODE_FOR_sse2_cvttsd2si = 660,

  CODE_FOR_sse2_cvtdq2pd = 661,
  CODE_FOR_sse2_cvtsd2ss = 664,
  CODE_FOR_sse2_cvtss2sd = 665,
  CODE_FOR_sse2_cvtps2pd = 667,
  CODE_FOR_sse2_unpckhpd = 668,
  CODE_FOR_sse2_unpcklpd = 670,
  CODE_FOR_sse2_shufpd_1 = 671,
  CODE_FOR_sse2_storehpd = 672,
  CODE_FOR_sse2_storelpd = 673,
  CODE_FOR_sse2_loadhpd = 674,
  CODE_FOR_sse2_loadlpd = 675,
  CODE_FOR_sse2_movsd = 676,
  CODE_FOR_sse2_ssaddv16qi3 = 685,
  CODE_FOR_sse2_ssaddv8hi3 = 686,
  CODE_FOR_sse2_usaddv16qi3 = 687,
  CODE_FOR_sse2_usaddv8hi3 = 688,
  CODE_FOR_sse2_sssubv16qi3 = 693,
  CODE_FOR_sse2_sssubv8hi3 = 694,
  CODE_FOR_sse2_ussubv16qi3 = 695,
  CODE_FOR_sse2_ussubv8hi3 = 696,
  CODE_FOR_sse2_smulv8hi3_highpart = 698,
  CODE_FOR_sse2_umulv8hi3_highpart = 699,
  CODE_FOR_sse2_umulv2siv2di3 = 700,
  CODE_FOR_sse2_pmaddwd = 701,
  CODE_FOR_ashrv8hi3 = 702,
  CODE_FOR_ashrv4si3 = 703,
  CODE_FOR_lshrv8hi3 = 704,
  CODE_FOR_lshrv4si3 = 705,
  CODE_FOR_lshrv2di3 = 706,
  CODE_FOR_ashlv8hi3 = 707,
  CODE_FOR_ashlv4si3 = 708,
  CODE_FOR_ashlv2di3 = 709,
  CODE_FOR_sse2_ashlti3 = 710,
  CODE_FOR_sse2_lshrti3 = 711,
  CODE_FOR_sse2_eqv16qi3 = 716,
  CODE_FOR_sse2_eqv8hi3 = 717,
  CODE_FOR_sse2_eqv4si3 = 718,
  CODE_FOR_sse2_gtv16qi3 = 719,
  CODE_FOR_sse2_gtv8hi3 = 720,
  CODE_FOR_sse2_gtv4si3 = 721,
  CODE_FOR_sse2_nandv16qi3 = 726,
  CODE_FOR_sse2_nandv8hi3 = 727,
  CODE_FOR_sse2_nandv4si3 = 728,
  CODE_FOR_sse2_nandv2di3 = 729,
  CODE_FOR_sse2_packsswb = 738,
  CODE_FOR_sse2_packssdw = 739,
  CODE_FOR_sse2_packuswb = 740,
  CODE_FOR_sse2_punpckhbw = 741,
  CODE_FOR_sse2_punpcklbw = 742,
  CODE_FOR_sse2_punpckhwd = 743,
  CODE_FOR_sse2_punpcklwd = 744,
  CODE_FOR_sse2_punpckhdq = 745,
  CODE_FOR_sse2_punpckldq = 746,
  CODE_FOR_sse2_punpckhqdq = 747,
  CODE_FOR_sse2_punpcklqdq = 748,
  CODE_FOR_sse2_pextrw = 750,
  CODE_FOR_sse2_pshufd_1 = 751,
  CODE_FOR_sse2_pshuflw_1 = 752,
  CODE_FOR_sse2_pshufhw_1 = 753,
  CODE_FOR_sse2_loadld = 754,
  CODE_FOR_sse2_stored = 755,
  CODE_FOR_sse2_uavgv16qi3 = 763,
  CODE_FOR_sse2_uavgv8hi3 = 764,
  CODE_FOR_sse2_psadbw = 765,
  CODE_FOR_sse_movmskps = 766,
  CODE_FOR_sse2_movmskpd = 767,
  CODE_FOR_sse2_pmovmskb = 768,
  CODE_FOR_sse_ldmxcsr = 770,
  CODE_FOR_sse_stmxcsr = 771,
  CODE_FOR_sse2_clflush = 773,
  CODE_FOR_sse3_mwait = 776,
  CODE_FOR_sse3_monitor = 777,
  CODE_FOR_sse_movntdi = 782,
  CODE_FOR_mmx_addv2sf3 = 783,
  CODE_FOR_mmx_subv2sf3 = 784,
  CODE_FOR_mmx_mulv2sf3 = 785,
  CODE_FOR_mmx_smaxv2sf3 = 786,
  CODE_FOR_mmx_sminv2sf3 = 787,
  CODE_FOR_mmx_rcpv2sf2 = 788,
  CODE_FOR_mmx_rcpit1v2sf3 = 789,
  CODE_FOR_mmx_rcpit2v2sf3 = 790,
  CODE_FOR_mmx_rsqrtv2sf2 = 791,
  CODE_FOR_mmx_rsqit1v2sf3 = 792,
  CODE_FOR_mmx_haddv2sf3 = 793,
  CODE_FOR_mmx_hsubv2sf3 = 794,
  CODE_FOR_mmx_addsubv2sf3 = 795,
  CODE_FOR_mmx_gtv2sf3 = 796,
  CODE_FOR_mmx_gev2sf3 = 797,
  CODE_FOR_mmx_eqv2sf3 = 798,
  CODE_FOR_mmx_pf2id = 799,
  CODE_FOR_mmx_pf2iw = 800,
  CODE_FOR_mmx_pi2fw = 801,
  CODE_FOR_mmx_floatv2si2 = 802,
  CODE_FOR_mmx_pswapdv2sf2 = 803,
  CODE_FOR_mmx_addv8qi3 = 808,
  CODE_FOR_mmx_addv4hi3 = 809,
  CODE_FOR_mmx_addv2si3 = 810,
  CODE_FOR_mmx_adddi3 = 811,
  CODE_FOR_mmx_ssaddv8qi3 = 812,
  CODE_FOR_mmx_ssaddv4hi3 = 813,
  CODE_FOR_mmx_usaddv8qi3 = 814,
  CODE_FOR_mmx_usaddv4hi3 = 815,
  CODE_FOR_mmx_subv8qi3 = 816,
  CODE_FOR_mmx_subv4hi3 = 817,
  CODE_FOR_mmx_subv2si3 = 818,
  CODE_FOR_mmx_subdi3 = 819,
  CODE_FOR_mmx_sssubv8qi3 = 820,
  CODE_FOR_mmx_sssubv4hi3 = 821,
  CODE_FOR_mmx_ussubv8qi3 = 822,
  CODE_FOR_mmx_ussubv4hi3 = 823,
  CODE_FOR_mmx_mulv4hi3 = 824,
  CODE_FOR_mmx_smulv4hi3_highpart = 825,
  CODE_FOR_mmx_umulv4hi3_highpart = 826,
  CODE_FOR_mmx_pmaddwd = 827,
  CODE_FOR_mmx_pmulhrwv4hi3 = 828,
  CODE_FOR_sse2_umulsidi3 = 829,
  CODE_FOR_mmx_umaxv8qi3 = 830,
  CODE_FOR_mmx_smaxv4hi3 = 831,
  CODE_FOR_mmx_uminv8qi3 = 832,
  CODE_FOR_mmx_sminv4hi3 = 833,
  CODE_FOR_mmx_ashrv4hi3 = 834,
  CODE_FOR_mmx_ashrv2si3 = 835,
  CODE_FOR_mmx_lshrv4hi3 = 836,
  CODE_FOR_mmx_lshrv2si3 = 837,
  CODE_FOR_mmx_lshrdi3 = 838,
  CODE_FOR_mmx_ashlv4hi3 = 839,
  CODE_FOR_mmx_ashlv2si3 = 840,
  CODE_FOR_mmx_ashldi3 = 841,
  CODE_FOR_mmx_eqv8qi3 = 842,
  CODE_FOR_mmx_eqv4hi3 = 843,
  CODE_FOR_mmx_eqv2si3 = 844,
  CODE_FOR_mmx_gtv8qi3 = 845,
  CODE_FOR_mmx_gtv4hi3 = 846,
  CODE_FOR_mmx_gtv2si3 = 847,
  CODE_FOR_mmx_andv8qi3 = 848,
  CODE_FOR_mmx_andv4hi3 = 849,
  CODE_FOR_mmx_andv2si3 = 850,
  CODE_FOR_mmx_nandv8qi3 = 851,
  CODE_FOR_mmx_nandv4hi3 = 852,
  CODE_FOR_mmx_nandv2si3 = 853,
  CODE_FOR_mmx_iorv8qi3 = 854,
  CODE_FOR_mmx_iorv4hi3 = 855,
  CODE_FOR_mmx_iorv2si3 = 856,
  CODE_FOR_mmx_xorv8qi3 = 857,
  CODE_FOR_mmx_xorv4hi3 = 858,
  CODE_FOR_mmx_xorv2si3 = 859,
  CODE_FOR_mmx_packsswb = 860,
  CODE_FOR_mmx_packssdw = 861,
  CODE_FOR_mmx_packuswb = 862,
  CODE_FOR_mmx_punpckhbw = 863,
  CODE_FOR_mmx_punpcklbw = 864,
  CODE_FOR_mmx_punpckhwd = 865,
  CODE_FOR_mmx_punpcklwd = 866,
  CODE_FOR_mmx_punpckhdq = 867,
  CODE_FOR_mmx_punpckldq = 868,
  CODE_FOR_mmx_pextrw = 870,
  CODE_FOR_mmx_pshufw_1 = 871,
  CODE_FOR_mmx_pswapdv2si2 = 872,
  CODE_FOR_mmx_uavgv8qi3 = 878,
  CODE_FOR_mmx_uavgv4hi3 = 879,
  CODE_FOR_mmx_psadbw = 880,
  CODE_FOR_mmx_pmovmskb = 881,
  CODE_FOR_mmx_emms = 883,
  CODE_FOR_mmx_femms = 884,
  CODE_FOR_sync_compare_and_swapqi = 885,
  CODE_FOR_sync_compare_and_swaphi = 886,
  CODE_FOR_sync_compare_and_swapsi = 887,

  CODE_FOR_sync_old_addqi = 891,
  CODE_FOR_sync_old_addhi = 892,
  CODE_FOR_sync_old_addsi = 893,

  CODE_FOR_sync_lock_test_and_setqi = 894,
  CODE_FOR_sync_lock_test_and_sethi = 895,
  CODE_FOR_sync_lock_test_and_setsi = 896,

  CODE_FOR_sync_addqi = 897,
  CODE_FOR_sync_addhi = 898,
  CODE_FOR_sync_addsi = 899,

  CODE_FOR_sync_subqi = 900,
  CODE_FOR_sync_subhi = 901,
  CODE_FOR_sync_subsi = 902,

  CODE_FOR_sync_iorqi = 903,
  CODE_FOR_sync_iorhi = 904,
  CODE_FOR_sync_iorsi = 905,

  CODE_FOR_sync_andqi = 906,
  CODE_FOR_sync_andhi = 907,
  CODE_FOR_sync_andsi = 908,

  CODE_FOR_sync_xorqi = 909,
  CODE_FOR_sync_xorhi = 910,
  CODE_FOR_sync_xorsi = 911,


  CODE_FOR_cmpdi = 912,
  CODE_FOR_cmpsi = 913,
  CODE_FOR_cmphi = 914,
  CODE_FOR_cmpqi = 915,

  CODE_FOR_cmpsi_1 = 916,
  CODE_FOR_cmpqi_ext_3 = 917,
  CODE_FOR_cmpxf = 918,
  CODE_FOR_cmpdf = 919,
  CODE_FOR_cmpsf = 920,
  CODE_FOR_movsi = 921,
  CODE_FOR_movhi = 922,
  CODE_FOR_movstricthi = 923,
  CODE_FOR_movqi = 924,
  CODE_FOR_reload_outqi = 925,
  CODE_FOR_movstrictqi = 926,
  CODE_FOR_movdi = 927,
  CODE_FOR_movti = 930,
  CODE_FOR_movsf = 932,
  CODE_FOR_movdf = 935,
  CODE_FOR_movxf = 939,

  CODE_FOR_zero_extendhisi2 = 945,
  CODE_FOR_zero_extendqihi2 = 947,
  CODE_FOR_zero_extendqisi2 = 951,
  CODE_FOR_zero_extendsidi2 = 955,
  CODE_FOR_extendsidi2 = 958,
  CODE_FOR_extendsfdf2 = 965,
  CODE_FOR_extendsfxf2 = 966,
  CODE_FOR_extenddfxf2 = 967,
  CODE_FOR_truncdfsf2 = 968,
  CODE_FOR_truncdfsf2_with_temp = 969,
  CODE_FOR_truncxfsf2 = 971,
  CODE_FOR_truncxfdf2 = 974,
  CODE_FOR_fix_truncxfdi2 = 977,
  CODE_FOR_fix_truncsfdi2 = 978,
  CODE_FOR_fix_truncdfdi2 = 979,
  CODE_FOR_fix_truncxfsi2 = 980,
  CODE_FOR_fix_truncsfsi2 = 981,
  CODE_FOR_fix_truncdfsi2 = 982,
  CODE_FOR_fix_truncsfhi2 = 983,
  CODE_FOR_fix_truncdfhi2 = 984,
  CODE_FOR_fix_truncxfhi2 = 985,
  CODE_FOR_floathisf2 = 1008,
  CODE_FOR_floatsisf2 = 1009,
  CODE_FOR_floatdisf2 = 1010,
  CODE_FOR_floathidf2 = 1011,
  CODE_FOR_floatsidf2 = 1012,
  CODE_FOR_floatdidf2 = 1013,
  CODE_FOR_floatunssisf2 = 1015,



  CODE_FOR_adddi3 = 1016,
  CODE_FOR_addsi3 = 1018,
  CODE_FOR_addhi3 = 1023,
  CODE_FOR_addqi3 = 1024,
  CODE_FOR_addxf3 = 1025,
  CODE_FOR_adddf3 = 1026,
  CODE_FOR_addsf3 = 1027,

  CODE_FOR_subdi3 = 1028,
  CODE_FOR_subsi3 = 1030,
  CODE_FOR_subhi3 = 1031,
  CODE_FOR_subqi3 = 1032,
  CODE_FOR_subxf3 = 1033,
  CODE_FOR_subdf3 = 1034,
  CODE_FOR_subsf3 = 1035,

  CODE_FOR_mulsi3 = 1036,
  CODE_FOR_mulhi3 = 1037,
  CODE_FOR_mulqi3 = 1038,
  CODE_FOR_umulqihi3 = 1039,
  CODE_FOR_mulqihi3 = 1040,

  CODE_FOR_umulsidi3 = 1041,

  CODE_FOR_mulsidi3 = 1042,

  CODE_FOR_umulsi3_highpart = 1043,

  CODE_FOR_smulsi3_highpart = 1044,
  CODE_FOR_mulxf3 = 1045,
  CODE_FOR_muldf3 = 1046,
  CODE_FOR_mulsf3 = 1047,
  CODE_FOR_divxf3 = 1048,
  CODE_FOR_divdf3 = 1049,
  CODE_FOR_divsf3 = 1050,

  CODE_FOR_divmodsi4 = 1051,
  CODE_FOR_udivmodhi4 = 1054,
  CODE_FOR_testsi_ccno_1 = 1055,
  CODE_FOR_testqi_ccz_1 = 1056,
  CODE_FOR_testqi_ext_ccno_0 = 1057,

  CODE_FOR_andsi3 = 1061,
  CODE_FOR_andhi3 = 1065,
  CODE_FOR_andqi3 = 1066,

  CODE_FOR_iorsi3 = 1069,
  CODE_FOR_iorhi3 = 1070,
  CODE_FOR_iorqi3 = 1071,

  CODE_FOR_xorsi3 = 1074,
  CODE_FOR_xorhi3 = 1075,
  CODE_FOR_xorqi3 = 1076,
  CODE_FOR_xorqi_cc_ext_1 = 1077,

  CODE_FOR_negdi2 = 1080,
  CODE_FOR_negsi2 = 1082,
  CODE_FOR_neghi2 = 1083,
  CODE_FOR_negqi2 = 1084,
  CODE_FOR_negsf2 = 1085,
  CODE_FOR_abssf2 = 1086,
  CODE_FOR_copysignsf3 = 1087,
  CODE_FOR_negdf2 = 1090,
  CODE_FOR_absdf2 = 1091,
  CODE_FOR_copysigndf3 = 1092,
  CODE_FOR_negxf2 = 1095,
  CODE_FOR_absxf2 = 1096,

  CODE_FOR_one_cmplsi2 = 1103,
  CODE_FOR_one_cmplhi2 = 1106,
  CODE_FOR_one_cmplqi2 = 1108,


  CODE_FOR_ashldi3 = 1110,
  CODE_FOR_x86_shift_adj_1 = 1113,
  CODE_FOR_x86_shift_adj_2 = 1114,
  CODE_FOR_ashlsi3 = 1115,
  CODE_FOR_ashlhi3 = 1118,
  CODE_FOR_ashlqi3 = 1119,

  CODE_FOR_ashrdi3 = 1120,
  CODE_FOR_x86_shift_adj_3 = 1123,
  CODE_FOR_ashrsi3 = 1124,
  CODE_FOR_ashrhi3 = 1125,
  CODE_FOR_ashrqi3 = 1126,

  CODE_FOR_lshrdi3 = 1127,
  CODE_FOR_lshrsi3 = 1130,
  CODE_FOR_lshrhi3 = 1131,
  CODE_FOR_lshrqi3 = 1132,
  CODE_FOR_rotldi3 = 1133,
  CODE_FOR_rotlsi3 = 1135,
  CODE_FOR_rotlhi3 = 1136,
  CODE_FOR_rotlqi3 = 1137,
  CODE_FOR_rotrdi3 = 1138,
  CODE_FOR_rotrsi3 = 1140,
  CODE_FOR_rotrhi3 = 1141,
  CODE_FOR_rotrqi3 = 1142,
  CODE_FOR_extv = 1143,
  CODE_FOR_extzv = 1144,
  CODE_FOR_insv = 1145,
  CODE_FOR_seq = 1146,
  CODE_FOR_sne = 1147,
  CODE_FOR_sgt = 1148,
  CODE_FOR_sgtu = 1149,
  CODE_FOR_slt = 1150,
  CODE_FOR_sltu = 1151,
  CODE_FOR_sge = 1152,
  CODE_FOR_sgeu = 1153,
  CODE_FOR_sle = 1154,
  CODE_FOR_sleu = 1155,
  CODE_FOR_sunordered = 1156,
  CODE_FOR_sordered = 1157,
  CODE_FOR_suneq = 1158,
  CODE_FOR_sunge = 1159,
  CODE_FOR_sungt = 1160,
  CODE_FOR_sunle = 1161,
  CODE_FOR_sunlt = 1162,
  CODE_FOR_sltgt = 1163,
  CODE_FOR_beq = 1168,
  CODE_FOR_bne = 1169,
  CODE_FOR_bgt = 1170,
  CODE_FOR_bgtu = 1171,
  CODE_FOR_blt = 1172,
  CODE_FOR_bltu = 1173,
  CODE_FOR_bge = 1174,
  CODE_FOR_bgeu = 1175,
  CODE_FOR_ble = 1176,
  CODE_FOR_bleu = 1177,
  CODE_FOR_bunordered = 1178,
  CODE_FOR_bordered = 1179,
  CODE_FOR_buneq = 1180,
  CODE_FOR_bunge = 1181,
  CODE_FOR_bungt = 1182,
  CODE_FOR_bunle = 1183,
  CODE_FOR_bunlt = 1184,
  CODE_FOR_bltgt = 1185,
  CODE_FOR_indirect_jump = 1194,
  CODE_FOR_tablejump = 1195,
  CODE_FOR_call_pop = 1198,
  CODE_FOR_call = 1199,
  CODE_FOR_sibcall = 1200,
  CODE_FOR_call_value_pop = 1201,
  CODE_FOR_call_value = 1202,
  CODE_FOR_sibcall_value = 1203,
  CODE_FOR_untyped_call = 1204,
  CODE_FOR_return = 1205,
  CODE_FOR_prologue = 1206,
  CODE_FOR_epilogue = 1207,
  CODE_FOR_sibcall_epilogue = 1208,
  CODE_FOR_eh_return = 1209,
  CODE_FOR_ffssi2 = 1212,

  CODE_FOR_clzsi2 = 1215,

  CODE_FOR_tls_global_dynamic_32 = 1216,
  CODE_FOR_tls_global_dynamic_64 = 1217,
  CODE_FOR_tls_local_dynamic_base_32 = 1218,
  CODE_FOR_tls_local_dynamic_base_64 = 1219,
  CODE_FOR_sqrtsf2 = 1225,
  CODE_FOR_sqrtdf2 = 1226,
  CODE_FOR_fmodsf3 = 1227,
  CODE_FOR_fmoddf3 = 1228,
  CODE_FOR_fmodxf3 = 1229,
  CODE_FOR_dremsf3 = 1230,
  CODE_FOR_dremdf3 = 1231,
  CODE_FOR_dremxf3 = 1232,
  CODE_FOR_tandf2 = 1242,
  CODE_FOR_tansf2 = 1244,
  CODE_FOR_tanxf2 = 1246,
  CODE_FOR_atan2df3 = 1247,
  CODE_FOR_atandf2 = 1248,
  CODE_FOR_atan2sf3 = 1249,
  CODE_FOR_atansf2 = 1250,
  CODE_FOR_atan2xf3 = 1251,
  CODE_FOR_atanxf2 = 1252,
  CODE_FOR_asindf2 = 1253,
  CODE_FOR_asinsf2 = 1254,
  CODE_FOR_asinxf2 = 1255,
  CODE_FOR_acosdf2 = 1256,
  CODE_FOR_acossf2 = 1257,
  CODE_FOR_acosxf2 = 1258,
  CODE_FOR_logsf2 = 1259,
  CODE_FOR_logdf2 = 1260,
  CODE_FOR_logxf2 = 1261,
  CODE_FOR_log10sf2 = 1262,
  CODE_FOR_log10df2 = 1263,
  CODE_FOR_log10xf2 = 1264,
  CODE_FOR_log2sf2 = 1265,
  CODE_FOR_log2df2 = 1266,
  CODE_FOR_log2xf2 = 1267,
  CODE_FOR_log1psf2 = 1268,
  CODE_FOR_log1pdf2 = 1269,
  CODE_FOR_log1pxf2 = 1270,
  CODE_FOR_logbsf2 = 1271,
  CODE_FOR_logbdf2 = 1272,
  CODE_FOR_logbxf2 = 1273,
  CODE_FOR_ilogbsi2 = 1274,
  CODE_FOR_expsf2 = 1275,
  CODE_FOR_expdf2 = 1276,
  CODE_FOR_expxf2 = 1277,
  CODE_FOR_exp10sf2 = 1278,
  CODE_FOR_exp10df2 = 1279,
  CODE_FOR_exp10xf2 = 1280,
  CODE_FOR_exp2sf2 = 1281,
  CODE_FOR_exp2df2 = 1282,
  CODE_FOR_exp2xf2 = 1283,
  CODE_FOR_expm1df2 = 1284,
  CODE_FOR_expm1sf2 = 1285,
  CODE_FOR_expm1xf2 = 1286,
  CODE_FOR_ldexpdf3 = 1287,
  CODE_FOR_ldexpsf3 = 1288,
  CODE_FOR_ldexpxf3 = 1289,
  CODE_FOR_rintdf2 = 1290,
  CODE_FOR_rintsf2 = 1291,
  CODE_FOR_rintxf2 = 1292,
  CODE_FOR_lrinthi2 = 1302,
  CODE_FOR_lrintsi2 = 1303,
  CODE_FOR_lrintdi2 = 1304,
  CODE_FOR_floorxf2 = 1306,
  CODE_FOR_floordf2 = 1307,
  CODE_FOR_floorsf2 = 1308,
  CODE_FOR_lfloorhi2 = 1318,
  CODE_FOR_lfloorsi2 = 1319,
  CODE_FOR_lfloordi2 = 1320,
  CODE_FOR_ceilxf2 = 1322,
  CODE_FOR_ceildf2 = 1323,
  CODE_FOR_ceilsf2 = 1324,
  CODE_FOR_lceilhi2 = 1334,
  CODE_FOR_lceilsi2 = 1335,
  CODE_FOR_lceildi2 = 1336,
  CODE_FOR_btruncxf2 = 1338,
  CODE_FOR_btruncdf2 = 1339,
  CODE_FOR_btruncsf2 = 1340,
  CODE_FOR_nearbyintxf2 = 1342,
  CODE_FOR_nearbyintdf2 = 1343,
  CODE_FOR_nearbyintsf2 = 1344,
  CODE_FOR_movmemsi = 1345,

  CODE_FOR_strmov = 1346,
  CODE_FOR_strmov_singleop = 1347,
  CODE_FOR_rep_mov = 1348,
  CODE_FOR_setmemsi = 1349,

  CODE_FOR_strset = 1350,
  CODE_FOR_strset_singleop = 1351,
  CODE_FOR_rep_stos = 1352,
  CODE_FOR_cmpstrnsi = 1353,
  CODE_FOR_cmpintqi = 1354,
  CODE_FOR_cmpstrnqi_nz_1 = 1355,
  CODE_FOR_cmpstrnqi_1 = 1356,
  CODE_FOR_strlensi = 1357,
  CODE_FOR_strlendi = 1358,
  CODE_FOR_strlenqi_1 = 1359,

  CODE_FOR_movsicc = 1362,
  CODE_FOR_movhicc = 1363,
  CODE_FOR_movqicc = 1364,
  CODE_FOR_movsfcc = 1366,
  CODE_FOR_movdfcc = 1367,
  CODE_FOR_movxfcc = 1369,
  CODE_FOR_addqicc = 1370,
  CODE_FOR_addhicc = 1371,
  CODE_FOR_addsicc = 1372,

  CODE_FOR_allocate_stack_worker = 1373,
  CODE_FOR_allocate_stack_worker_postreload = 1374,
  CODE_FOR_allocate_stack_worker_rex64_postreload = 1375,
  CODE_FOR_allocate_stack = 1376,
  CODE_FOR_builtin_setjmp_receiver = 1377,

  CODE_FOR_prefetch = 1445,
  CODE_FOR_stack_protect_set = 1446,
  CODE_FOR_stack_protect_test = 1447,
  CODE_FOR_movv16qi = 1448,
  CODE_FOR_movv8hi = 1449,
  CODE_FOR_movv4si = 1450,
  CODE_FOR_movv2di = 1451,
  CODE_FOR_movv4sf = 1452,
  CODE_FOR_movv2df = 1454,
  CODE_FOR_pushv16qi1 = 1456,
  CODE_FOR_pushv8hi1 = 1457,
  CODE_FOR_pushv4si1 = 1458,
  CODE_FOR_pushv2di1 = 1459,
  CODE_FOR_pushv4sf1 = 1460,
  CODE_FOR_pushv2df1 = 1461,
  CODE_FOR_movmisalignv16qi = 1462,
  CODE_FOR_movmisalignv8hi = 1463,
  CODE_FOR_movmisalignv4si = 1464,
  CODE_FOR_movmisalignv2di = 1465,
  CODE_FOR_movmisalignv4sf = 1466,
  CODE_FOR_movmisalignv2df = 1467,
  CODE_FOR_negv4sf2 = 1468,
  CODE_FOR_absv4sf2 = 1469,
  CODE_FOR_addv4sf3 = 1470,
  CODE_FOR_subv4sf3 = 1471,
  CODE_FOR_mulv4sf3 = 1472,
  CODE_FOR_divv4sf3 = 1473,
  CODE_FOR_smaxv4sf3 = 1474,
  CODE_FOR_sminv4sf3 = 1475,
  CODE_FOR_reduc_splus_v4sf = 1476,
  CODE_FOR_reduc_smax_v4sf = 1477,
  CODE_FOR_reduc_smin_v4sf = 1478,
  CODE_FOR_vcondv4sf = 1479,
  CODE_FOR_andv4sf3 = 1480,
  CODE_FOR_iorv4sf3 = 1481,
  CODE_FOR_xorv4sf3 = 1482,
  CODE_FOR_sse_shufps = 1483,
  CODE_FOR_vec_initv4sf = 1484,
  CODE_FOR_vec_setv4sf = 1486,
  CODE_FOR_vec_extractv4sf = 1488,
  CODE_FOR_negv2df2 = 1489,
  CODE_FOR_absv2df2 = 1490,
  CODE_FOR_addv2df3 = 1491,
  CODE_FOR_subv2df3 = 1492,
  CODE_FOR_mulv2df3 = 1493,
  CODE_FOR_divv2df3 = 1494,
  CODE_FOR_smaxv2df3 = 1495,
  CODE_FOR_sminv2df3 = 1496,
  CODE_FOR_reduc_splus_v2df = 1497,
  CODE_FOR_vcondv2df = 1498,
  CODE_FOR_andv2df3 = 1499,
  CODE_FOR_iorv2df3 = 1500,
  CODE_FOR_xorv2df3 = 1501,
  CODE_FOR_sse2_cvtpd2dq = 1502,
  CODE_FOR_sse2_cvttpd2dq = 1503,
  CODE_FOR_sse2_cvtpd2ps = 1504,
  CODE_FOR_sse2_shufpd = 1506,
  CODE_FOR_vec_setv2df = 1511,
  CODE_FOR_vec_extractv2df = 1512,
  CODE_FOR_vec_initv2df = 1513,
  CODE_FOR_negv16qi2 = 1514,
  CODE_FOR_negv8hi2 = 1515,
  CODE_FOR_negv4si2 = 1516,
  CODE_FOR_negv2di2 = 1517,
  CODE_FOR_addv16qi3 = 1518,
  CODE_FOR_addv8hi3 = 1519,
  CODE_FOR_addv4si3 = 1520,
  CODE_FOR_addv2di3 = 1521,
  CODE_FOR_subv16qi3 = 1522,
  CODE_FOR_subv8hi3 = 1523,
  CODE_FOR_subv4si3 = 1524,
  CODE_FOR_subv2di3 = 1525,
  CODE_FOR_mulv16qi3 = 1526,
  CODE_FOR_mulv8hi3 = 1527,
  CODE_FOR_mulv4si3 = 1528,
  CODE_FOR_mulv2di3 = 1529,
  CODE_FOR_vec_shl_v16qi = 1530,
  CODE_FOR_vec_shl_v8hi = 1531,
  CODE_FOR_vec_shl_v4si = 1532,
  CODE_FOR_vec_shl_v2di = 1533,
  CODE_FOR_vec_shr_v16qi = 1534,
  CODE_FOR_vec_shr_v8hi = 1535,
  CODE_FOR_vec_shr_v4si = 1536,
  CODE_FOR_vec_shr_v2di = 1537,
  CODE_FOR_umaxv16qi3 = 1538,
  CODE_FOR_smaxv8hi3 = 1539,
  CODE_FOR_umaxv8hi3 = 1540,
  CODE_FOR_smaxv16qi3 = 1541,
  CODE_FOR_smaxv4si3 = 1542,
  CODE_FOR_umaxv4si3 = 1543,
  CODE_FOR_uminv16qi3 = 1544,
  CODE_FOR_sminv8hi3 = 1545,
  CODE_FOR_sminv16qi3 = 1546,
  CODE_FOR_sminv4si3 = 1547,
  CODE_FOR_uminv8hi3 = 1548,
  CODE_FOR_uminv4si3 = 1549,
  CODE_FOR_vcondv16qi = 1550,
  CODE_FOR_vcondv8hi = 1551,
  CODE_FOR_vcondv4si = 1552,
  CODE_FOR_vconduv16qi = 1553,
  CODE_FOR_vconduv8hi = 1554,
  CODE_FOR_vconduv4si = 1555,
  CODE_FOR_one_cmplv16qi2 = 1556,
  CODE_FOR_one_cmplv8hi2 = 1557,
  CODE_FOR_one_cmplv4si2 = 1558,
  CODE_FOR_one_cmplv2di2 = 1559,
  CODE_FOR_andv16qi3 = 1560,
  CODE_FOR_andv8hi3 = 1561,
  CODE_FOR_andv4si3 = 1562,
  CODE_FOR_andv2di3 = 1563,
  CODE_FOR_iorv16qi3 = 1564,
  CODE_FOR_iorv8hi3 = 1565,
  CODE_FOR_iorv4si3 = 1566,
  CODE_FOR_iorv2di3 = 1567,
  CODE_FOR_xorv16qi3 = 1568,
  CODE_FOR_xorv8hi3 = 1569,
  CODE_FOR_xorv4si3 = 1570,
  CODE_FOR_xorv2di3 = 1571,
  CODE_FOR_sse2_pinsrw = 1572,
  CODE_FOR_sse2_pshufd = 1573,
  CODE_FOR_sse2_pshuflw = 1574,
  CODE_FOR_sse2_pshufhw = 1575,
  CODE_FOR_sse2_loadd = 1576,
  CODE_FOR_sse_storeq = 1578,
  CODE_FOR_vec_setv2di = 1580,
  CODE_FOR_vec_extractv2di = 1581,
  CODE_FOR_vec_initv2di = 1582,
  CODE_FOR_vec_setv4si = 1583,
  CODE_FOR_vec_extractv4si = 1584,
  CODE_FOR_vec_initv4si = 1585,
  CODE_FOR_vec_setv8hi = 1586,
  CODE_FOR_vec_extractv8hi = 1587,
  CODE_FOR_vec_initv8hi = 1588,
  CODE_FOR_vec_setv16qi = 1589,
  CODE_FOR_vec_extractv16qi = 1590,
  CODE_FOR_vec_initv16qi = 1591,
  CODE_FOR_sse2_maskmovdqu = 1592,
  CODE_FOR_sse_sfence = 1593,
  CODE_FOR_sse2_mfence = 1594,
  CODE_FOR_sse2_lfence = 1595,
  CODE_FOR_movv8qi = 1596,
  CODE_FOR_movv4hi = 1597,
  CODE_FOR_movv2si = 1598,
  CODE_FOR_movv2sf = 1599,
  CODE_FOR_pushv8qi1 = 1604,
  CODE_FOR_pushv4hi1 = 1605,
  CODE_FOR_pushv2si1 = 1606,
  CODE_FOR_pushv2sf1 = 1607,
  CODE_FOR_movmisalignv8qi = 1608,
  CODE_FOR_movmisalignv4hi = 1609,
  CODE_FOR_movmisalignv2si = 1610,
  CODE_FOR_movmisalignv2sf = 1611,
  CODE_FOR_mmx_subrv2sf3 = 1612,
  CODE_FOR_vec_setv2sf = 1613,
  CODE_FOR_vec_extractv2sf = 1616,
  CODE_FOR_vec_initv2sf = 1617,
  CODE_FOR_mmx_pinsrw = 1618,
  CODE_FOR_mmx_pshufw = 1619,
  CODE_FOR_vec_setv2si = 1620,
  CODE_FOR_vec_extractv2si = 1623,
  CODE_FOR_vec_initv2si = 1624,
  CODE_FOR_vec_setv4hi = 1625,
  CODE_FOR_vec_extractv4hi = 1626,
  CODE_FOR_vec_initv4hi = 1627,
  CODE_FOR_vec_setv8qi = 1628,
  CODE_FOR_vec_extractv8qi = 1629,
  CODE_FOR_vec_initv8qi = 1630,
  CODE_FOR_mmx_maskmovq = 1631,
  CODE_FOR_sync_compare_and_swap_ccqi = 1632,
  CODE_FOR_sync_compare_and_swap_cchi = 1633,
  CODE_FOR_sync_compare_and_swap_ccsi = 1634,

  CODE_FOR_nothing
};
# 25 "../.././gcc/optabs.h" 2
# 41 "../.././gcc/optabs.h"
struct optab_handlers
{
  enum insn_code insn_code;
  rtx libfunc;
};

struct optab
{
  enum rtx_code code;
  struct optab_handlers handlers[NUM_MACHINE_MODES];
};
typedef struct optab * optab;




struct convert_optab
{
  enum rtx_code code;
  struct optab_handlers handlers[NUM_MACHINE_MODES][NUM_MACHINE_MODES];
};
typedef struct convert_optab *convert_optab;






enum optab_index
{
  OTI_add,
  OTI_addv,
  OTI_sub,
  OTI_subv,


  OTI_smul,
  OTI_smulv,

  OTI_smul_highpart,
  OTI_umul_highpart,

  OTI_smul_widen,
  OTI_umul_widen,


  OTI_sdiv,
  OTI_sdivv,

  OTI_sdivmod,
  OTI_udiv,
  OTI_udivmod,

  OTI_smod,
  OTI_umod,

  OTI_fmod,
  OTI_drem,

  OTI_ftrunc,


  OTI_and,

  OTI_ior,

  OTI_xor,


  OTI_ashl,

  OTI_lshr,

  OTI_ashr,

  OTI_rotl,

  OTI_rotr,

  OTI_smin,

  OTI_smax,

  OTI_umin,

  OTI_umax,

  OTI_pow,

  OTI_atan2,


  OTI_mov,

  OTI_movstrict,

  OTI_movmisalign,



  OTI_neg,
  OTI_negv,

  OTI_abs,
  OTI_absv,

  OTI_one_cmpl,

  OTI_ffs,
  OTI_clz,
  OTI_ctz,
  OTI_popcount,
  OTI_parity,

  OTI_sqrt,

  OTI_sincos,

  OTI_sin,

  OTI_asin,

  OTI_cos,

  OTI_acos,

  OTI_exp,

  OTI_exp10,

  OTI_exp2,

  OTI_expm1,

  OTI_ldexp,

  OTI_logb,
  OTI_ilogb,

  OTI_log,

  OTI_log10,

  OTI_log2,

  OTI_log1p,

  OTI_floor,
  OTI_lfloor,
  OTI_ceil,
  OTI_lceil,
  OTI_btrunc,
  OTI_round,
  OTI_nearbyint,
  OTI_rint,
  OTI_lrint,

  OTI_tan,

  OTI_atan,

  OTI_copysign,


  OTI_cmp,

  OTI_ucmp,

  OTI_tst,


  OTI_eq,
  OTI_ne,
  OTI_gt,
  OTI_ge,
  OTI_lt,
  OTI_le,
  OTI_unord,


  OTI_strlen,


  OTI_cbranch,
  OTI_cmov,
  OTI_cstore,


  OTI_push,


  OTI_addcc,


  OTI_reduc_smax,
  OTI_reduc_umax,
  OTI_reduc_smin,
  OTI_reduc_umin,
  OTI_reduc_splus,
  OTI_reduc_uplus,


  OTI_vec_set,

  OTI_vec_extract,

  OTI_vec_init,

  OTI_vec_shl,
  OTI_vec_shr,

  OTI_vec_realign_load,


  OTI_powi,

  OTI_MAX
};

extern optab optab_table[OTI_MAX];
# 378 "../.././gcc/optabs.h"
enum convert_optab_index
{
  COI_sext,
  COI_zext,
  COI_trunc,

  COI_sfix,
  COI_ufix,

  COI_sfixtrunc,
  COI_ufixtrunc,

  COI_sfloat,
  COI_ufloat,

  COI_MAX
};

extern convert_optab convert_optab_table[COI_MAX];
# 411 "../.././gcc/optabs.h"
extern enum insn_code reload_in_optab[NUM_MACHINE_MODES];
extern enum insn_code reload_out_optab[NUM_MACHINE_MODES];


extern optab code_to_optab[((int) LAST_AND_UNUSED_RTX_CODE) + 1];


typedef rtx (*rtxfun) (rtx);




extern rtxfun bcc_gen_fctn[((int) LAST_AND_UNUSED_RTX_CODE)];





extern enum insn_code setcc_gen_code[((int) LAST_AND_UNUSED_RTX_CODE)];





extern enum insn_code movcc_gen_code[NUM_MACHINE_MODES];





extern enum insn_code vcond_gen_code[NUM_MACHINE_MODES];
extern enum insn_code vcondu_gen_code[NUM_MACHINE_MODES];


extern enum insn_code movmem_optab[NUM_MACHINE_MODES];


extern enum insn_code setmem_optab[NUM_MACHINE_MODES];



extern enum insn_code cmpstr_optab[NUM_MACHINE_MODES];
extern enum insn_code cmpstrn_optab[NUM_MACHINE_MODES];
extern enum insn_code cmpmem_optab[NUM_MACHINE_MODES];



extern enum insn_code sync_add_optab[NUM_MACHINE_MODES];
extern enum insn_code sync_sub_optab[NUM_MACHINE_MODES];
extern enum insn_code sync_ior_optab[NUM_MACHINE_MODES];
extern enum insn_code sync_and_optab[NUM_MACHINE_MODES];
extern enum insn_code sync_xor_optab[NUM_MACHINE_MODES];
extern enum insn_code sync_nand_optab[NUM_MACHINE_MODES];



extern enum insn_code sync_old_add_optab[NUM_MACHINE_MODES];
extern enum insn_code sync_old_sub_optab[NUM_MACHINE_MODES];
extern enum insn_code sync_old_ior_optab[NUM_MACHINE_MODES];
extern enum insn_code sync_old_and_optab[NUM_MACHINE_MODES];
extern enum insn_code sync_old_xor_optab[NUM_MACHINE_MODES];
extern enum insn_code sync_old_nand_optab[NUM_MACHINE_MODES];



extern enum insn_code sync_new_add_optab[NUM_MACHINE_MODES];
extern enum insn_code sync_new_sub_optab[NUM_MACHINE_MODES];
extern enum insn_code sync_new_ior_optab[NUM_MACHINE_MODES];
extern enum insn_code sync_new_and_optab[NUM_MACHINE_MODES];
extern enum insn_code sync_new_xor_optab[NUM_MACHINE_MODES];
extern enum insn_code sync_new_nand_optab[NUM_MACHINE_MODES];


extern enum insn_code sync_compare_and_swap[NUM_MACHINE_MODES];
extern enum insn_code sync_compare_and_swap_cc[NUM_MACHINE_MODES];


extern enum insn_code sync_lock_test_and_set[NUM_MACHINE_MODES];


extern enum insn_code sync_lock_release[NUM_MACHINE_MODES];



extern rtx expand_ternary_op (enum machine_mode mode, optab ternary_optab,
         rtx op0, rtx op1, rtx op2, rtx target,
         int unsignedp);


extern rtx expand_binop (enum machine_mode, optab, rtx, rtx, rtx, int,
    enum optab_methods);

extern unsigned char force_expand_binop (enum machine_mode, optab, rtx, rtx, rtx, int,
    enum optab_methods);


extern rtx sign_expand_binop (enum machine_mode, optab, optab, rtx, rtx,
         rtx, int, enum optab_methods);


extern int expand_twoval_unop (optab, rtx, rtx, rtx, int);


extern int expand_twoval_binop (optab, rtx, rtx, rtx, rtx, int);



extern unsigned char expand_twoval_binop_libfunc (optab, rtx, rtx, rtx, rtx,
      enum rtx_code);


extern rtx expand_unop (enum machine_mode, optab, rtx, rtx, int);


extern rtx expand_abs_nojump (enum machine_mode, rtx, rtx, int);
extern rtx expand_abs (enum machine_mode, rtx, rtx, int, int);


extern rtx expand_copysign (rtx, rtx, rtx);



extern void emit_unop_insn (int, rtx, rtx, enum rtx_code);



extern rtx emit_no_conflict_block (rtx, rtx, rtx, rtx, rtx);


extern void emit_cmp_insn (rtx, rtx, enum rtx_code, rtx, enum machine_mode,
      int);



enum can_compare_purpose
{
  ccp_jump,
  ccp_cmov,
  ccp_store_flag
};



extern optab optab_for_tree_code (enum tree_code, tree);



extern int can_compare_p (enum rtx_code, enum machine_mode,
     enum can_compare_purpose);


extern enum insn_code can_extend_p (enum machine_mode, enum machine_mode, int);



extern rtx gen_extend_insn (rtx, rtx, enum machine_mode,
       enum machine_mode, int);


extern void set_optab_libfunc (optab, enum machine_mode, const char *);
extern void set_conv_libfunc (convert_optab, enum machine_mode,
         enum machine_mode, const char *);


extern void expand_float (rtx, rtx, int);


extern void expand_fix (rtx, rtx, int);


unsigned char expand_vec_cond_expr_p (tree, enum machine_mode);


extern rtx expand_vec_cond_expr (tree, rtx);


extern rtx expand_vec_shift_expr (tree, rtx);
# 13 "insn-emit.c" 2
# 1 "../.././gcc/real.h" 1
# 14 "insn-emit.c" 2
# 1 "../.././gcc/flags.h" 1
# 15 "insn-emit.c" 2
# 1 "../.././gcc/output.h" 1
# 27 "../.././gcc/output.h"
extern void compute_alignments (void);


extern void init_final (const char *);



extern void app_enable (void);



extern void app_disable (void);




extern int dbr_sequence_length (void);


extern void init_insn_lengths (void);



extern int get_attr_length (rtx);



extern int get_attr_min_length (rtx);



extern void shorten_branches (rtx);






extern void final_start_function (rtx, FILE *, int);




extern void final_end_function (void);


extern void final (rtx, FILE *, int);




extern rtx final_scan_insn (rtx, FILE *, int, int, int *);



extern rtx alter_subreg (rtx *);



extern void output_operand_lossage (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2))) __attribute__ ((__nonnull__ (1)));



extern void output_asm_insn (const char *, rtx *);




extern int insn_current_reference_address (rtx);



extern int label_to_alignment (rtx);


extern void output_asm_label (rtx);



extern void output_address (rtx);




extern void output_addr_const (FILE *, rtx);
# 120 "../.././gcc/output.h"
typedef long __gcc_host_wide_int__;




extern void asm_fprintf (FILE *file, const char *p, ...)
     __attribute__ ((__format__ (__asm_fprintf__, 2, 3))) __attribute__ ((__nonnull__ (2)));



extern void split_double (rtx, rtx *, rtx *);


extern int leaf_function_p (void);




extern int final_forward_branch_p (rtx);



extern int only_leaf_regs_used (void);



extern void leaf_renumber_regs_insn (rtx);


extern const char *get_insn_template (int, rtx);


extern int regno_clobbered_at_setjmp (int);




extern void text_section (void);


extern void unlikely_text_section (void);


extern void data_section (void);



extern void readonly_data_section (void);


extern int in_text_section (void);


extern int in_unlikely_text_section (void);
# 184 "../.././gcc/output.h"
extern void bss_section (void);



extern void init_section (void);



extern void fini_section (void);
# 211 "../.././gcc/output.h"
extern void named_section (tree, const char *, int);


extern void function_section (tree);


extern void current_function_section (tree);


extern void mergeable_string_section (tree, unsigned long,
          unsigned int);


extern void mergeable_constant_section (enum machine_mode,
     unsigned long, unsigned int);


extern void declare_weak (tree);

extern void merge_weak (tree, tree);


extern void weak_finish (void);
# 242 "../.././gcc/output.h"
extern int decode_reg_name (const char *);



extern void make_var_volatile (tree);

extern void assemble_alias (tree, tree);

extern void default_assemble_visibility (tree, int);



extern void assemble_asm (tree);





extern void assemble_start_function (tree, const char *);



extern void assemble_end_function (tree, const char *);
# 275 "../.././gcc/output.h"
extern void assemble_variable (tree, int, int, int);




extern void assemble_external (tree);


extern void assemble_zeros (unsigned long);


extern void assemble_align (int);


extern void assemble_string (const char *, int);


extern void assemble_external_libcall (rtx);


extern void assemble_label (const char *);





extern void assemble_name_raw (FILE *, const char *);





extern void assemble_name (FILE *, const char *);
# 316 "../.././gcc/output.h"
extern const char *integer_asm_op (int, int);



extern void assemble_integer_with_op (const char *, rtx);


extern unsigned char default_assemble_integer (rtx, unsigned int, int);





extern unsigned char assemble_integer (rtx, unsigned, unsigned, int);
# 339 "../.././gcc/output.h"
extern void assemble_real (struct real_value, enum machine_mode, unsigned);



extern int get_pool_size (void);






extern void output_constant_pool (const char *, tree);
# 361 "../.././gcc/output.h"
extern tree initializer_constant_valid_p (tree, tree);
# 371 "../.././gcc/output.h"
extern void output_constant (tree, unsigned long, unsigned int);







extern rtx final_sequence;
# 391 "../.././gcc/output.h"
extern FILE *asm_out_file;



extern const char *first_global_object_name;


extern const char *weak_global_object_name;






extern int current_function_is_leaf;





extern int current_function_sp_is_unchanging;





extern int current_function_uses_only_leaf_regs;




extern FILE *dump_file;



extern rtx current_insn_predicate;


extern rtx current_output_insn;




extern rtx this_is_asm_operands;



extern int size_directive_output;
extern tree last_assemble_variable_decl;

enum in_section { no_section, in_text, in_unlikely_executed_text, in_data,
                 in_named

  , in_bss
# 453 "../.././gcc/output.h"
  , in_readonly_data




};

extern const char *last_text_section_name;
extern enum in_section last_text_section;
extern unsigned char first_function_block_is_cold;



extern unsigned char decl_readonly_section (tree, int);
extern unsigned char decl_readonly_section_1 (tree, int, int);



extern int compute_reloc_for_constant (tree);


extern const char *user_label_prefix;


extern void default_function_pro_epilogue (FILE *, long);


extern void default_exception_section (void);


extern void named_section_eh_frame_section (void);
extern void collect2_eh_frame_section (void);
extern void default_eh_frame_section (void);


extern void no_asm_to_stream (FILE *);
# 510 "../.././gcc/output.h"
enum section_category
{
  SECCAT_TEXT,

  SECCAT_RODATA,
  SECCAT_RODATA_MERGE_STR,
  SECCAT_RODATA_MERGE_STR_INIT,
  SECCAT_RODATA_MERGE_CONST,
  SECCAT_SRODATA,

  SECCAT_DATA,
# 531 "../.././gcc/output.h"
  SECCAT_DATA_REL,
  SECCAT_DATA_REL_LOCAL,
  SECCAT_DATA_REL_RO,
  SECCAT_DATA_REL_RO_LOCAL,

  SECCAT_SDATA,
  SECCAT_TDATA,

  SECCAT_BSS,
  SECCAT_SBSS,
  SECCAT_TBSS
};


extern unsigned char set_named_section_flags (const char *, unsigned int);


extern void named_section_real (const char *, unsigned int, tree);
extern unsigned char named_section_first_declaration (const char *);
extern unsigned int default_section_type_flags (tree, const char *, int);
extern unsigned int default_section_type_flags_1 (tree, const char *, int, int);

extern void default_no_named_section (const char *, unsigned int, tree);
extern void default_elf_asm_named_section (const char *, unsigned int, tree);
extern enum section_category categorize_decl_for_section (tree, int, int);
extern void default_coff_asm_named_section (const char *, unsigned int, tree);
extern void default_pe_asm_named_section (const char *, unsigned int, tree);

extern void default_stabs_asm_out_destructor (rtx, int);
extern void default_named_section_asm_out_destructor (rtx, int);
extern void default_dtor_section_asm_out_destructor (rtx, int);
extern void default_stabs_asm_out_constructor (rtx, int);
extern void default_named_section_asm_out_constructor (rtx, int);
extern void default_ctor_section_asm_out_constructor (rtx, int);

extern void default_select_section (tree, int, unsigned long);
extern void default_elf_select_section (tree, int, unsigned long);
extern void default_elf_select_section_1 (tree, int,
       unsigned long, int);
extern void default_unique_section (tree, int);
extern void default_unique_section_1 (tree, int, int);
extern void default_function_rodata_section (tree);
extern void default_no_function_rodata_section (tree);
extern void default_select_rtx_section (enum machine_mode, rtx,
     unsigned long);
extern void default_elf_select_rtx_section (enum machine_mode, rtx,
         unsigned long);
extern void default_encode_section_info (tree, rtx, int);
extern const char *default_strip_name_encoding (const char *);
extern unsigned char default_binds_local_p (tree);
extern unsigned char default_binds_local_p_1 (tree, int);
extern void default_globalize_label (FILE *, const char *);
extern void default_emit_unwind_label (FILE *, tree, int, int);
extern void default_internal_label (FILE *, const char *, unsigned long);
extern void default_file_start (void);
extern void file_end_indicate_exec_stack (void);
extern unsigned char default_valid_pointer_mode (enum machine_mode);

extern int default_address_cost (rtx);




extern void dbxout_int (int);
extern void dbxout_stabd (int, int);
extern void dbxout_begin_stabn (int);
extern void dbxout_begin_stabn_sline (int);
extern void dbxout_begin_empty_stabs (int);
extern void dbxout_begin_simple_stabs (const char *, int);
extern void dbxout_begin_simple_stabs_desc (const char *, int, int);

extern void dbxout_stab_value_zero (void);
extern void dbxout_stab_value_label (const char *);
extern void dbxout_stab_value_label_diff (const char *, const char *);
extern void dbxout_stab_value_internal_label (const char *, int *);
extern void dbxout_stab_value_internal_label_diff (const char *, int *,
         const char *);
# 16 "insn-emit.c" 2
# 1 "insn-config.h" 1
# 17 "insn-emit.c" 2
# 1 "../.././gcc/hard-reg-set.h" 1
# 43 "../.././gcc/hard-reg-set.h"
typedef unsigned long HARD_REG_ELT_TYPE;
# 54 "../.././gcc/hard-reg-set.h"
typedef HARD_REG_ELT_TYPE HARD_REG_SET[((53 + (8 * 4) - 1) / (8 * 4))];
# 397 "../.././gcc/hard-reg-set.h"
extern char fixed_regs[53];



extern HARD_REG_SET fixed_reg_set;






extern char call_used_regs[53];







extern HARD_REG_SET call_used_reg_set;


extern HARD_REG_SET losing_caller_save_reg_set;







extern char call_fixed_regs[53];



extern HARD_REG_SET call_fixed_reg_set;






extern char global_regs[53];
# 447 "../.././gcc/hard-reg-set.h"
extern HARD_REG_SET regs_invalidated_by_call;




extern int reg_alloc_order[53];



extern int inv_reg_alloc_order[53];




extern HARD_REG_SET reg_class_contents[((int) LIM_REG_CLASSES)];



extern unsigned int reg_class_size[((int) LIM_REG_CLASSES)];




extern enum reg_class reg_class_subunion[((int) LIM_REG_CLASSES)][((int) LIM_REG_CLASSES)];




extern enum reg_class reg_class_superunion[((int) LIM_REG_CLASSES)][((int) LIM_REG_CLASSES)];



extern int n_non_fixed_regs;



extern const char * reg_names[53];



extern const char * reg_class_names[];
# 18 "insn-emit.c" 2
# 1 "../.././gcc/recog.h" 1
# 26 "../.././gcc/recog.h"
enum op_type {
  OP_IN,
  OP_OUT,
  OP_INOUT
};

struct operand_alternative
{


  const char *constraint;


  enum reg_class cl;



  unsigned int reject;


  int matches;



  int matched;


  unsigned int earlyclobber:1;

  unsigned int memory_ok:1;

  unsigned int offmem_ok:1;

  unsigned int nonoffmem_ok:1;

  unsigned int decmem_ok:1;

  unsigned int incmem_ok:1;

  unsigned int is_address:1;


  unsigned int anything_ok:1;
};


extern void init_recog (void);
extern void init_recog_no_volatile (void);
extern int check_asm_operands (rtx);
extern int asm_operand_ok (rtx, const char *);
extern int validate_change (rtx, rtx *, rtx, int);
extern int validate_change_maybe_volatile (rtx, rtx *, rtx);
extern int insn_invalid_p (rtx);
extern void confirm_change_group (void);
extern int apply_change_group (void);
extern int num_validated_changes (void);
extern void cancel_changes (int);
extern int constrain_operands (int);
extern int constrain_operands_cached (int);
extern int memory_address_p (enum machine_mode, rtx);
extern int strict_memory_address_p (enum machine_mode, rtx);
extern int validate_replace_rtx_subexp (rtx, rtx, rtx, rtx *);
extern int validate_replace_rtx (rtx, rtx, rtx);
extern void validate_replace_rtx_group (rtx, rtx, rtx);
extern void validate_replace_src_group (rtx, rtx, rtx);
extern int num_changes_pending (void);



extern int reg_fits_class_p (rtx, enum reg_class, int, enum machine_mode);
extern rtx *find_single_use (rtx, rtx, rtx *);

extern int offsettable_memref_p (rtx);
extern int offsettable_nonstrict_memref_p (rtx);
extern int offsettable_address_p (int, enum machine_mode, rtx);
extern int mode_dependent_address_p (rtx);

extern int recog (rtx, rtx, int *);

static __inline__ int recog_memoized (rtx insn);

extern void add_clobbers (rtx, int);
extern int added_clobbers_hard_reg_p (int);
extern void insn_extract (rtx);
extern void extract_insn (rtx);
extern void extract_constrain_insn_cached (rtx);
extern void extract_insn_cached (rtx);
extern void preprocess_constraints (void);
extern rtx peep2_next_insn (int);
extern int peep2_regno_dead_p (int, int);
extern int peep2_reg_dead_p (int, rtx);

extern rtx peep2_find_free_register (int, int, const char *,
         enum machine_mode, HARD_REG_SET *);

extern void peephole2_optimize (FILE *);
extern rtx peephole2_insns (rtx, rtx, int *);

extern int store_data_bypass_p (rtx, rtx);
extern int if_test_bypass_p (rtx, rtx);
# 137 "../.././gcc/recog.h"
static __inline__ int
recog_memoized (rtx insn)
{
  if ((((insn)->u.fld[6]).rt_int) < 0)
    (((insn)->u.fld[6]).rt_int) = recog ((((insn)->u.fld[5]).rt_rtx), insn, 0);
  return (((insn)->u.fld[6]).rt_int);
}



extern int volatile_ok;



extern int which_alternative;



struct recog_data
{







  rtx operand[30];


  rtx *operand_loc[30];


  const char *constraints[30];


  enum machine_mode operand_mode[30];


  enum op_type operand_type[30];



  rtx *dup_loc[6];



  char dup_num[6];
# 197 "../.././gcc/recog.h"
  char n_operands;


  char n_dups;


  char n_alternatives;


  rtx insn;
};

extern struct recog_data recog_data;



extern struct operand_alternative recog_op_alt[30][30];




typedef int (*insn_operand_predicate_fn) (rtx, enum machine_mode);
typedef const char * (*insn_output_fn) (rtx *, rtx);
typedef rtx (*insn_gen_fn) (rtx, ...);

struct insn_operand_data
{
  const insn_operand_predicate_fn predicate;

  const char *const constraint;

  __extension__ enum machine_mode const mode : 16;

  const char strict_low;

  const char eliminable;
};
# 242 "../.././gcc/recog.h"
struct insn_data
{
  const char *const name;

  union {
    const char *single;
    const char *const *multi;
    insn_output_fn function;
  } output;







  const insn_gen_fn genfun;
  const struct insn_operand_data *const operand;

  const char n_operands;
  const char n_dups;
  const char n_alternatives;
  const char output_format;
};

extern const struct insn_data insn_data[];
extern int peep2_current_count;
# 19 "insn-emit.c" 2
# 1 "../.././gcc/resource.h" 1
# 24 "../.././gcc/resource.h"
# 1 "../.././gcc/hard-reg-set.h" 1
# 25 "../.././gcc/resource.h" 2







struct resources
{
  char memory;
  char unch_memory;
  char volatil;
  char cc;
  HARD_REG_SET regs;
};


enum mark_resource_type
{
  MARK_SRC_DEST = 0,
  MARK_SRC_DEST_CALL = 1
};

extern void mark_target_live_regs (rtx, rtx, struct resources *);
extern void mark_set_resources (rtx, struct resources *, int,
    enum mark_resource_type);
extern void mark_referenced_resources (rtx, struct resources *, int);
extern void clear_hashed_info_for_insn (rtx);
extern void incr_ticks_for_insn (rtx);
extern void mark_end_of_function_resources (rtx, int);
extern void init_resource_info (rtx);
extern void free_resource_info (void);
# 20 "insn-emit.c" 2
# 1 "../.././gcc/reload.h" 1
# 47 "../.././gcc/reload.h"
extern int memory_move_secondary_cost (enum machine_mode, enum reg_class, int);
# 76 "../.././gcc/reload.h"
enum reload_type
{
  RELOAD_FOR_INPUT, RELOAD_FOR_OUTPUT, RELOAD_FOR_INSN,
  RELOAD_FOR_INPUT_ADDRESS, RELOAD_FOR_INPADDR_ADDRESS,
  RELOAD_FOR_OUTPUT_ADDRESS, RELOAD_FOR_OUTADDR_ADDRESS,
  RELOAD_FOR_OPERAND_ADDRESS, RELOAD_FOR_OPADDR_ADDR,
  RELOAD_OTHER, RELOAD_FOR_OTHER_ADDRESS
};



struct reload
{

  rtx in;


  rtx out;


  enum reg_class class;


  enum machine_mode inmode;

  enum machine_mode outmode;


  enum machine_mode mode;


  unsigned int nregs;




  int inc;




  rtx in_reg;
  rtx out_reg;


  int regno;




  rtx reg_rtx;




  int opnum;



  int secondary_in_reload;


  int secondary_out_reload;



  enum insn_code secondary_in_icode;

  enum insn_code secondary_out_icode;




  enum reload_type when_needed;



  unsigned int optional:1;

  unsigned int nocombine:1;

  unsigned int secondary_p:1;


  unsigned int nongroup:1;
};

extern struct reload rld[(2 * 30 * (2 + 1))];
extern int n_reloads;


extern struct varray_head_tag *reg_equiv_memory_loc_varray;
extern rtx *reg_equiv_constant;
extern rtx *reg_equiv_invariant;
extern rtx *reg_equiv_memory_loc;
extern rtx *reg_equiv_address;
extern rtx *reg_equiv_mem;



extern rtx *reg_equiv_init;


extern int reg_equiv_init_size;



extern int n_earlyclobbers;
extern rtx reload_earlyclobbers[30];


extern int reload_n_operands;



extern int reload_first_uid;





extern char indirect_symref_ok;


extern char double_reg_address_ok;

extern int num_not_at_initial_offset;
# 259 "../.././gcc/reload.h"
extern rtx get_secondary_mem (rtx, enum machine_mode, int, enum reload_type);


extern void clear_secondary_mem (void);



extern void transfer_replacements (int, int);





extern int remove_address_replacements (rtx in_rtx);




extern int operands_match_p (rtx, rtx);


extern int safe_from_earlyclobber (rtx, rtx);




extern int find_reloads (rtx, int, int, int, short *);





extern rtx form_sum (rtx, rtx);



extern void subst_reloads (rtx);




extern void copy_replacements (rtx, rtx);


extern void move_replacements (rtx *x, rtx *y);



extern rtx find_replacement (rtx *);


extern int reg_overlap_mentioned_for_reload_p (rtx, rtx);



extern rtx find_equiv_reg (rtx, rtx, enum reg_class, int, short *,
      int, enum machine_mode);


extern int regno_clobbered_p (unsigned int, rtx, enum machine_mode, int);


extern int earlyclobber_operand_p (rtx);


extern int push_reload (rtx, rtx, rtx *, rtx *, enum reg_class,
   enum machine_mode, enum machine_mode,
   int, int, int, enum reload_type);


extern void reload_cse_regs (rtx);




extern void init_reload (void);


extern int reload (rtx, int);



extern void mark_home_live (int);



extern rtx eliminate_regs (rtx, enum machine_mode, rtx);


extern void deallocate_reload_reg (int r);




extern void init_caller_save (void);


extern void init_save_areas (void);


extern void setup_save_areas (void);


extern void save_call_clobbered_regs (void);


extern void cleanup_subreg_operands (rtx);


extern void debug_reload_to_stream (FILE *);
extern void debug_reload (void);



extern rtx reload_adjust_reg_for_mode (rtx, enum machine_mode);
# 21 "insn-emit.c" 2
# 1 "../.././gcc/toplev.h" 1
# 30 "../.././gcc/toplev.h"
extern int toplev_main (unsigned int, const char **);
extern int read_integral_parameter (const char *, const char *, const int);
extern void strip_off_ending (char *, int);
extern const char *trim_filename (const char *);
extern void _fatal_insn_not_found (rtx, const char *, int, const char *)
     __attribute__ ((__noreturn__));
extern void _fatal_insn (const char *, rtx, const char *, int, const char *)
     __attribute__ ((__noreturn__));
# 57 "../.././gcc/toplev.h"
extern void internal_error (const char *, ...) __attribute__ ((__format__ (__gcc_tdiag__, 1, 2))) __attribute__ ((__nonnull__ (1)))
     __attribute__ ((__noreturn__));
extern void warning0 (const char *, ...) __attribute__ ((__format__ (__gcc_tdiag__, 1, 2))) __attribute__ ((__nonnull__ (1)));

extern void warning (int, const char *, ...) __attribute__ ((__format__ (__gcc_tdiag__, 2, 3))) __attribute__ ((__nonnull__ (2)));
extern void error (const char *, ...) __attribute__ ((__format__ (__gcc_tdiag__, 1, 2))) __attribute__ ((__nonnull__ (1)));
extern void fatal_error (const char *, ...) __attribute__ ((__format__ (__gcc_tdiag__, 1, 2))) __attribute__ ((__nonnull__ (1)))
     __attribute__ ((__noreturn__));
extern void pedwarn (const char *, ...) __attribute__ ((__format__ (__gcc_tdiag__, 1, 2))) __attribute__ ((__nonnull__ (1)));
extern void sorry (const char *, ...) __attribute__ ((__format__ (__gcc_tdiag__, 1, 2))) __attribute__ ((__nonnull__ (1)));
extern void inform (const char *, ...) __attribute__ ((__format__ (__gcc_tdiag__, 1, 2))) __attribute__ ((__nonnull__ (1)));
extern void verbatim (const char *, ...) __attribute__ ((__format__ (__gcc_tdiag__, 1, 2))) __attribute__ ((__nonnull__ (1)));

extern void rest_of_decl_compilation (tree, int, int);
extern void rest_of_type_compilation (tree, int);
extern void tree_rest_of_compilation (tree);
extern void init_optimization_passes (void);
extern void finish_optimization_passes (void);
extern unsigned char enable_rtl_dump_file (int);

extern void announce_function (tree);

extern void error_for_asm (rtx, const char *, ...) __attribute__ ((__format__ (__gcc_tdiag__, 2, 3))) __attribute__ ((__nonnull__ (2)));
extern void warning_for_asm (rtx, const char *, ...) __attribute__ ((__format__ (__gcc_tdiag__, 2, 3))) __attribute__ ((__nonnull__ (2)));
extern void warn_deprecated_use (tree);


extern void output_quoted_string (FILE *, const char *);
extern void output_file_directive (FILE *, const char *);





extern void fnotice (FILE *, const char *, ...)
     __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__nonnull__ (2)));


extern void wrapup_global_declaration_1 (tree);
extern unsigned char wrapup_global_declaration_2 (tree);
extern unsigned char wrapup_global_declarations (tree *, int);
extern void check_global_declaration_1 (tree);
extern void check_global_declarations (tree *, int);
extern void emit_debug_global_declarations (tree *, int);
extern void write_global_declarations (void);


extern unsigned local_tick;

extern const char *progname;
extern const char *dump_base_name;
extern const char *aux_base_name;
extern const char *aux_info_file_name;
extern const char *asm_file_name;
extern unsigned char exit_after_options;

extern int target_flags_explicit;




extern unsigned char user_defined_section_attribute;


extern int flag_loop_optimize;
extern int flag_crossjumping;
extern int flag_if_conversion;
extern int flag_if_conversion2;
extern int flag_keep_static_consts;
extern int flag_peel_loops;
extern int flag_rerun_cse_after_loop;
extern int flag_thread_jumps;
extern int flag_tracer;
extern int flag_unroll_loops;
extern int flag_unroll_all_loops;
extern int flag_unswitch_loops;
extern int flag_cprop_registers;
extern int time_report;


extern void print_version (FILE *, const char *);
extern void * default_get_pch_validity (size_t *);
extern const char * default_pch_valid_p (const void *, size_t);


extern struct ht *ident_hash;




extern void set_fast_math_flags (int);


extern void decode_d_option (const char *);


extern unsigned char fast_math_flags_set_p (void);


extern int exact_log2 (unsigned long);


extern int floor_log2 (unsigned long);
# 174 "../.././gcc/toplev.h"
extern __inline__ int
floor_log2 (unsigned long x)
{
  return x ? (8 * 4) - 1 - (int) __builtin_clzl (x) : -1;
}

extern __inline__ int
exact_log2 (unsigned long x)
{
  return x == (x & -x) && x ? (int) __builtin_ctzl (x) : -1;
}





extern const char *get_src_pwd (void);
extern unsigned char set_src_pwd (const char *);
# 22 "insn-emit.c" 2
# 1 "../.././gcc/ggc.h" 1
# 30 "../.././gcc/ggc.h"
extern const char empty_string[];
extern const char digit_vector[];






typedef void (*gt_pointer_operator) (void *, void *);

# 1 "./gtype-desc.h" 1
# 24 "./gtype-desc.h"
enum gt_types_enum {
 gt_ggc_e_11align_stack,
 gt_ggc_e_7c_scope,
 gt_ggc_e_9c_binding,
 gt_ggc_e_12nesting_info,
 gt_ggc_e_11var_map_elt,
 gt_ggc_e_20ssa_operand_memory_d,
 gt_ggc_e_8c_parser,
 gt_ggc_e_12int_tree_map,
 gt_ggc_e_6subvar,
 gt_ggc_e_17VEC_alias_pair_gc,
 gt_ggc_e_23constant_descriptor_rtx,
 gt_ggc_e_24constant_descriptor_tree,
 gt_ggc_e_14in_named_entry,
 gt_ggc_e_17rtx_constant_pool,
 gt_ggc_e_12tree_int_map,
 gt_ggc_e_9type_hash,
 gt_ggc_e_16string_pool_data,
 gt_ggc_e_15throw_stmt_node,
 gt_ggc_e_16VEC_eh_region_gc,
 gt_ggc_e_9eh_region,
 gt_ggc_e_13ehl_map_entry,
 gt_ggc_e_16var_loc_list_def,
 gt_ggc_e_12var_loc_node,
 gt_ggc_e_16limbo_die_struct,
 gt_ggc_e_16dw_ranges_struct,
 gt_ggc_e_14pubname_struct,
 gt_ggc_e_28dw_separate_line_info_struct,
 gt_ggc_e_19dw_line_info_struct,
 gt_ggc_e_14dw_attr_struct,
 gt_ggc_e_18dw_loc_list_struct,
 gt_ggc_e_15queued_reg_save,
 gt_ggc_e_20indirect_string_node,
 gt_ggc_e_19dw_loc_descr_struct,
 gt_ggc_e_13dw_fde_struct,
 gt_ggc_e_13dw_cfi_struct,
 gt_ggc_e_10VEC_rtx_gc,
 gt_ggc_e_8typeinfo,
 gt_ggc_e_15alias_set_entry,
 gt_ggc_e_10c_arg_info,
 gt_ggc_e_8c_switch,
 gt_ggc_e_18sorted_fields_type,
 gt_ggc_e_19cgraph_varpool_node,
 gt_ggc_e_11cgraph_edge,
 gt_ggc_e_11cgraph_node,
 gt_ggc_e_15edge_prediction,
 gt_ggc_e_11rtl_bb_info,
 gt_ggc_e_7et_node,
 gt_ggc_e_4loop,
 gt_ggc_e_11VEC_edge_gc,
 gt_ggc_e_12elt_loc_list,
 gt_ggc_e_17cselib_val_struct,
 gt_ggc_e_25ipa_reference_vars_info_d,
 gt_ggc_e_8edge_def,
 gt_ggc_e_8elt_list,
 gt_ggc_e_12reg_info_def,
 gt_ggc_e_8tree_map,
 gt_ggc_e_14lang_tree_node,
 gt_ggc_e_9value_set,
 gt_ggc_e_24tree_statement_list_node,
 gt_ggc_e_9lang_decl,
 gt_ggc_e_9lang_type,
 gt_ggc_e_10die_struct,
 gt_ggc_e_12ptr_info_def,
 gt_ggc_e_17ssa_use_operand_d,
 gt_ggc_e_22VEC_constructor_elt_gc,
 gt_ggc_e_10tree_ann_d,
 gt_ggc_e_11VEC_tree_gc,
 gt_ggc_e_13convert_optab,
 gt_ggc_e_5optab,
 gt_ggc_e_15basic_block_def,
 gt_ggc_e_10real_value,
 gt_ggc_e_9reg_attrs,
 gt_ggc_e_9mem_attrs,
 gt_ggc_e_17language_function,
 gt_ggc_e_9temp_slot,
 gt_ggc_e_15varray_head_tag,
 gt_ggc_e_20initial_value_struct,
 gt_ggc_e_18control_flow_graph,
 gt_ggc_e_13varasm_status,
 gt_ggc_e_9eh_status,
 gt_ggc_e_8function,
 gt_ggc_e_11expr_status,
 gt_ggc_e_11emit_status,
 gt_ggc_e_14sequence_stack,
 gt_ggc_e_14var_refs_queue,
 gt_ggc_e_15bitmap_head_def,
 gt_ggc_e_18bitmap_element_def,
 gt_ggc_e_14bitmap_obstack,
 gt_ggc_e_17stack_local_entry,
 gt_ggc_e_16machine_function,
 gt_ggc_e_6answer,
 gt_ggc_e_9cpp_macro,
 gt_ggc_e_9cpp_token,
 gt_ggc_e_9tree_node,
 gt_ggc_e_9rtvec_def,
 gt_ggc_e_7rtx_def,
 gt_ggc_e_10location_s,
 gt_e_II17splay_tree_node_s,
 gt_e_SP9tree_node17splay_tree_node_s,
 gt_e_IP9tree_node17splay_tree_node_s,
 gt_e_IP9tree_node12splay_tree_s,
 gt_e_P11var_map_elt4htab,
 gt_e_P12int_tree_map4htab,
 gt_e_P23constant_descriptor_rtx4htab,
 gt_e_P24constant_descriptor_tree4htab,
 gt_e_P14in_named_entry4htab,
 gt_e_P12tree_int_map4htab,
 gt_e_P8tree_map4htab,
 gt_e_P9type_hash4htab,
 gt_e_P13ehl_map_entry4htab,
 gt_e_P15throw_stmt_node4htab,
 gt_e_P9tree_node4htab,
 gt_e_P9reg_attrs4htab,
 gt_e_P9mem_attrs4htab,
 gt_e_P7rtx_def4htab,
 gt_e_SP9tree_node12splay_tree_s,
 gt_e_P16var_loc_list_def4htab,
 gt_e_P10die_struct4htab,
 gt_e_P20indirect_string_node4htab,
 gt_e_P19cgraph_varpool_node4htab,
 gt_e_P11cgraph_node4htab,
 gt_e_P15alias_set_entry15varray_head_tag,
 gt_e_II12splay_tree_s,
 gt_e_P9temp_slot15varray_head_tag,
 gt_types_enum_last
};





extern void gt_ggc_mx_align_stack (void *);



extern void gt_ggc_mx_c_scope (void *);



extern void gt_ggc_mx_c_binding (void *);



extern void gt_ggc_mx_nesting_info (void *);



extern void gt_ggc_mx_var_map_elt (void *);



extern void gt_ggc_mx_ssa_operand_memory_d (void *);



extern void gt_ggc_mx_c_parser (void *);



extern void gt_ggc_mx_int_tree_map (void *);



extern void gt_ggc_mx_subvar (void *);



extern void gt_ggc_mx_VEC_alias_pair_gc (void *);



extern void gt_ggc_mx_constant_descriptor_rtx (void *);



extern void gt_ggc_mx_constant_descriptor_tree (void *);



extern void gt_ggc_mx_in_named_entry (void *);



extern void gt_ggc_mx_rtx_constant_pool (void *);



extern void gt_ggc_mx_tree_int_map (void *);



extern void gt_ggc_mx_type_hash (void *);



extern void gt_ggc_mx_string_pool_data (void *);



extern void gt_ggc_mx_throw_stmt_node (void *);



extern void gt_ggc_mx_VEC_eh_region_gc (void *);



extern void gt_ggc_mx_eh_region (void *);



extern void gt_ggc_mx_ehl_map_entry (void *);



extern void gt_ggc_mx_var_loc_list_def (void *);



extern void gt_ggc_mx_var_loc_node (void *);



extern void gt_ggc_mx_limbo_die_struct (void *);



extern void gt_ggc_mx_dw_ranges_struct (void *);



extern void gt_ggc_mx_pubname_struct (void *);



extern void gt_ggc_mx_dw_separate_line_info_struct (void *);



extern void gt_ggc_mx_dw_line_info_struct (void *);



extern void gt_ggc_mx_dw_attr_struct (void *);



extern void gt_ggc_mx_dw_loc_list_struct (void *);



extern void gt_ggc_mx_queued_reg_save (void *);



extern void gt_ggc_mx_indirect_string_node (void *);



extern void gt_ggc_mx_dw_loc_descr_struct (void *);



extern void gt_ggc_mx_dw_fde_struct (void *);



extern void gt_ggc_mx_dw_cfi_struct (void *);



extern void gt_ggc_mx_VEC_rtx_gc (void *);



extern void gt_ggc_mx_typeinfo (void *);



extern void gt_ggc_mx_alias_set_entry (void *);



extern void gt_ggc_mx_c_arg_info (void *);



extern void gt_ggc_mx_c_switch (void *);



extern void gt_ggc_mx_sorted_fields_type (void *);



extern void gt_ggc_mx_cgraph_varpool_node (void *);



extern void gt_ggc_mx_cgraph_edge (void *);



extern void gt_ggc_mx_cgraph_node (void *);



extern void gt_ggc_mx_edge_prediction (void *);



extern void gt_ggc_mx_rtl_bb_info (void *);



extern void gt_ggc_mx_et_node (void *);



extern void gt_ggc_mx_loop (void *);



extern void gt_ggc_mx_VEC_edge_gc (void *);



extern void gt_ggc_mx_elt_loc_list (void *);



extern void gt_ggc_mx_cselib_val_struct (void *);



extern void gt_ggc_mx_ipa_reference_vars_info_d (void *);



extern void gt_ggc_mx_edge_def (void *);



extern void gt_ggc_mx_elt_list (void *);



extern void gt_ggc_mx_reg_info_def (void *);



extern void gt_ggc_mx_tree_map (void *);



extern void gt_ggc_mx_lang_tree_node (void *);



extern void gt_ggc_mx_value_set (void *);



extern void gt_ggc_mx_tree_statement_list_node (void *);



extern void gt_ggc_mx_lang_decl (void *);



extern void gt_ggc_mx_lang_type (void *);



extern void gt_ggc_mx_die_struct (void *);



extern void gt_ggc_mx_ptr_info_def (void *);



extern void gt_ggc_mx_ssa_use_operand_d (void *);



extern void gt_ggc_mx_VEC_constructor_elt_gc (void *);



extern void gt_ggc_mx_tree_ann_d (void *);



extern void gt_ggc_mx_VEC_tree_gc (void *);



extern void gt_ggc_mx_convert_optab (void *);



extern void gt_ggc_mx_optab (void *);



extern void gt_ggc_mx_basic_block_def (void *);



extern void gt_ggc_mx_real_value (void *);



extern void gt_ggc_mx_reg_attrs (void *);



extern void gt_ggc_mx_mem_attrs (void *);



extern void gt_ggc_mx_language_function (void *);



extern void gt_ggc_mx_temp_slot (void *);



extern void gt_ggc_mx_varray_head_tag (void *);



extern void gt_ggc_mx_initial_value_struct (void *);



extern void gt_ggc_mx_control_flow_graph (void *);



extern void gt_ggc_mx_varasm_status (void *);



extern void gt_ggc_mx_eh_status (void *);



extern void gt_ggc_mx_function (void *);



extern void gt_ggc_mx_expr_status (void *);



extern void gt_ggc_mx_emit_status (void *);



extern void gt_ggc_mx_sequence_stack (void *);



extern void gt_ggc_mx_var_refs_queue (void *);



extern void gt_ggc_mx_bitmap_head_def (void *);



extern void gt_ggc_mx_bitmap_element_def (void *);



extern void gt_ggc_mx_bitmap_obstack (void *);



extern void gt_ggc_mx_stack_local_entry (void *);



extern void gt_ggc_mx_machine_function (void *);



extern void gt_ggc_mx_answer (void *);



extern void gt_ggc_mx_cpp_macro (void *);



extern void gt_ggc_mx_cpp_token (void *);







extern void gt_ggc_mx_rtvec_def (void *);



extern void gt_ggc_mx_rtx_def (void *);



extern void gt_ggc_mx_location_s (void *);
extern void gt_ggc_m_II17splay_tree_node_s (void *);
extern void gt_ggc_m_SP9tree_node17splay_tree_node_s (void *);
extern void gt_ggc_m_IP9tree_node17splay_tree_node_s (void *);
extern void gt_ggc_m_IP9tree_node12splay_tree_s (void *);
extern void gt_ggc_m_P11var_map_elt4htab (void *);
extern void gt_ggc_m_P12int_tree_map4htab (void *);
extern void gt_ggc_m_P23constant_descriptor_rtx4htab (void *);
extern void gt_ggc_m_P24constant_descriptor_tree4htab (void *);
extern void gt_ggc_m_P14in_named_entry4htab (void *);
extern void gt_ggc_m_P12tree_int_map4htab (void *);
extern void gt_ggc_m_P8tree_map4htab (void *);
extern void gt_ggc_m_P9type_hash4htab (void *);
extern void gt_ggc_m_P13ehl_map_entry4htab (void *);
extern void gt_ggc_m_P15throw_stmt_node4htab (void *);
extern void gt_ggc_m_P9tree_node4htab (void *);
extern void gt_ggc_m_P9reg_attrs4htab (void *);
extern void gt_ggc_m_P9mem_attrs4htab (void *);
extern void gt_ggc_m_P7rtx_def4htab (void *);
extern void gt_ggc_m_SP9tree_node12splay_tree_s (void *);
extern void gt_ggc_m_P16var_loc_list_def4htab (void *);
extern void gt_ggc_m_P10die_struct4htab (void *);
extern void gt_ggc_m_P20indirect_string_node4htab (void *);
extern void gt_ggc_m_P19cgraph_varpool_node4htab (void *);
extern void gt_ggc_m_P11cgraph_node4htab (void *);
extern void gt_ggc_m_P15alias_set_entry15varray_head_tag (void *);
extern void gt_ggc_m_II12splay_tree_s (void *);
extern void gt_ggc_m_P9temp_slot15varray_head_tag (void *);





extern void gt_pch_nx_align_stack (void *);



extern void gt_pch_nx_c_scope (void *);



extern void gt_pch_nx_c_binding (void *);



extern void gt_pch_nx_nesting_info (void *);



extern void gt_pch_nx_var_map_elt (void *);



extern void gt_pch_nx_ssa_operand_memory_d (void *);



extern void gt_pch_nx_c_parser (void *);



extern void gt_pch_nx_int_tree_map (void *);



extern void gt_pch_nx_subvar (void *);



extern void gt_pch_nx_VEC_alias_pair_gc (void *);



extern void gt_pch_nx_constant_descriptor_rtx (void *);



extern void gt_pch_nx_constant_descriptor_tree (void *);



extern void gt_pch_nx_in_named_entry (void *);



extern void gt_pch_nx_rtx_constant_pool (void *);



extern void gt_pch_nx_tree_int_map (void *);



extern void gt_pch_nx_type_hash (void *);



extern void gt_pch_nx_string_pool_data (void *);



extern void gt_pch_nx_throw_stmt_node (void *);



extern void gt_pch_nx_VEC_eh_region_gc (void *);



extern void gt_pch_nx_eh_region (void *);



extern void gt_pch_nx_ehl_map_entry (void *);



extern void gt_pch_nx_var_loc_list_def (void *);



extern void gt_pch_nx_var_loc_node (void *);



extern void gt_pch_nx_limbo_die_struct (void *);



extern void gt_pch_nx_dw_ranges_struct (void *);



extern void gt_pch_nx_pubname_struct (void *);



extern void gt_pch_nx_dw_separate_line_info_struct (void *);



extern void gt_pch_nx_dw_line_info_struct (void *);



extern void gt_pch_nx_dw_attr_struct (void *);



extern void gt_pch_nx_dw_loc_list_struct (void *);



extern void gt_pch_nx_queued_reg_save (void *);



extern void gt_pch_nx_indirect_string_node (void *);



extern void gt_pch_nx_dw_loc_descr_struct (void *);



extern void gt_pch_nx_dw_fde_struct (void *);



extern void gt_pch_nx_dw_cfi_struct (void *);



extern void gt_pch_nx_VEC_rtx_gc (void *);



extern void gt_pch_nx_typeinfo (void *);



extern void gt_pch_nx_alias_set_entry (void *);



extern void gt_pch_nx_c_arg_info (void *);



extern void gt_pch_nx_c_switch (void *);



extern void gt_pch_nx_sorted_fields_type (void *);



extern void gt_pch_nx_cgraph_varpool_node (void *);



extern void gt_pch_nx_cgraph_edge (void *);



extern void gt_pch_nx_cgraph_node (void *);



extern void gt_pch_nx_edge_prediction (void *);



extern void gt_pch_nx_rtl_bb_info (void *);



extern void gt_pch_nx_et_node (void *);



extern void gt_pch_nx_loop (void *);



extern void gt_pch_nx_VEC_edge_gc (void *);



extern void gt_pch_nx_elt_loc_list (void *);



extern void gt_pch_nx_cselib_val_struct (void *);



extern void gt_pch_nx_ipa_reference_vars_info_d (void *);



extern void gt_pch_nx_edge_def (void *);



extern void gt_pch_nx_elt_list (void *);



extern void gt_pch_nx_reg_info_def (void *);



extern void gt_pch_nx_tree_map (void *);



extern void gt_pch_nx_lang_tree_node (void *);



extern void gt_pch_nx_value_set (void *);



extern void gt_pch_nx_tree_statement_list_node (void *);



extern void gt_pch_nx_lang_decl (void *);



extern void gt_pch_nx_lang_type (void *);



extern void gt_pch_nx_die_struct (void *);



extern void gt_pch_nx_ptr_info_def (void *);



extern void gt_pch_nx_ssa_use_operand_d (void *);



extern void gt_pch_nx_VEC_constructor_elt_gc (void *);



extern void gt_pch_nx_tree_ann_d (void *);



extern void gt_pch_nx_VEC_tree_gc (void *);



extern void gt_pch_nx_convert_optab (void *);



extern void gt_pch_nx_optab (void *);



extern void gt_pch_nx_basic_block_def (void *);



extern void gt_pch_nx_real_value (void *);



extern void gt_pch_nx_reg_attrs (void *);



extern void gt_pch_nx_mem_attrs (void *);



extern void gt_pch_nx_language_function (void *);



extern void gt_pch_nx_temp_slot (void *);



extern void gt_pch_nx_varray_head_tag (void *);



extern void gt_pch_nx_initial_value_struct (void *);



extern void gt_pch_nx_control_flow_graph (void *);



extern void gt_pch_nx_varasm_status (void *);



extern void gt_pch_nx_eh_status (void *);



extern void gt_pch_nx_function (void *);



extern void gt_pch_nx_expr_status (void *);



extern void gt_pch_nx_emit_status (void *);



extern void gt_pch_nx_sequence_stack (void *);



extern void gt_pch_nx_var_refs_queue (void *);



extern void gt_pch_nx_bitmap_head_def (void *);



extern void gt_pch_nx_bitmap_element_def (void *);



extern void gt_pch_nx_bitmap_obstack (void *);



extern void gt_pch_nx_stack_local_entry (void *);



extern void gt_pch_nx_machine_function (void *);



extern void gt_pch_nx_answer (void *);



extern void gt_pch_nx_cpp_macro (void *);



extern void gt_pch_nx_cpp_token (void *);







extern void gt_pch_nx_rtvec_def (void *);



extern void gt_pch_nx_rtx_def (void *);



extern void gt_pch_nx_location_s (void *);
extern void gt_pch_n_II17splay_tree_node_s (void *);
extern void gt_pch_n_SP9tree_node17splay_tree_node_s (void *);
extern void gt_pch_n_IP9tree_node17splay_tree_node_s (void *);
extern void gt_pch_n_IP9tree_node12splay_tree_s (void *);
extern void gt_pch_n_P11var_map_elt4htab (void *);
extern void gt_pch_n_P12int_tree_map4htab (void *);
extern void gt_pch_n_P23constant_descriptor_rtx4htab (void *);
extern void gt_pch_n_P24constant_descriptor_tree4htab (void *);
extern void gt_pch_n_P14in_named_entry4htab (void *);
extern void gt_pch_n_P12tree_int_map4htab (void *);
extern void gt_pch_n_P8tree_map4htab (void *);
extern void gt_pch_n_P9type_hash4htab (void *);
extern void gt_pch_n_P13ehl_map_entry4htab (void *);
extern void gt_pch_n_P15throw_stmt_node4htab (void *);
extern void gt_pch_n_P9tree_node4htab (void *);
extern void gt_pch_n_P9reg_attrs4htab (void *);
extern void gt_pch_n_P9mem_attrs4htab (void *);
extern void gt_pch_n_P7rtx_def4htab (void *);
extern void gt_pch_n_SP9tree_node12splay_tree_s (void *);
extern void gt_pch_n_P16var_loc_list_def4htab (void *);
extern void gt_pch_n_P10die_struct4htab (void *);
extern void gt_pch_n_P20indirect_string_node4htab (void *);
extern void gt_pch_n_P19cgraph_varpool_node4htab (void *);
extern void gt_pch_n_P11cgraph_node4htab (void *);
extern void gt_pch_n_P15alias_set_entry15varray_head_tag (void *);
extern void gt_pch_n_II12splay_tree_s (void *);
extern void gt_pch_n_P9temp_slot15varray_head_tag (void *);


extern void gt_pch_p_11align_stack
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7c_scope
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9c_binding
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12nesting_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11var_map_elt
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20ssa_operand_memory_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8c_parser
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12int_tree_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6subvar
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17VEC_alias_pair_gc
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23constant_descriptor_rtx
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24constant_descriptor_tree
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14in_named_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17rtx_constant_pool
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12tree_int_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9type_hash
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16string_pool_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15throw_stmt_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16VEC_eh_region_gc
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9eh_region
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13ehl_map_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16var_loc_list_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12var_loc_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16limbo_die_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16dw_ranges_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14pubname_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28dw_separate_line_info_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19dw_line_info_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14dw_attr_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18dw_loc_list_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15queued_reg_save
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20indirect_string_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19dw_loc_descr_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13dw_fde_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13dw_cfi_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10VEC_rtx_gc
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8typeinfo
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15alias_set_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18sorted_fields_type
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19cgraph_varpool_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11cgraph_edge
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11cgraph_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15edge_prediction
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11rtl_bb_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11VEC_edge_gc
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12elt_loc_list
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17cselib_val_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8edge_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8elt_list
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8tree_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14lang_tree_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24tree_statement_list_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9lang_decl
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9lang_type
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10die_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12ptr_info_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17ssa_use_operand_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22VEC_constructor_elt_gc
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10tree_ann_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11VEC_tree_gc
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13convert_optab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_5optab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15basic_block_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10real_value
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9reg_attrs
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9mem_attrs
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17language_function
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9temp_slot
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15varray_head_tag
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20initial_value_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18control_flow_graph
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13varasm_status
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9eh_status
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8function
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11expr_status
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11emit_status
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14sequence_stack
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14var_refs_queue
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15bitmap_head_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18bitmap_element_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14bitmap_obstack
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17stack_local_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16machine_function
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6answer
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9cpp_macro
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9cpp_token
    (void *, void *, gt_pointer_operator, void *);

extern void gt_pch_p_9rtvec_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10location_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_II17splay_tree_node_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_SP9tree_node17splay_tree_node_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_IP9tree_node17splay_tree_node_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_IP9tree_node12splay_tree_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P11var_map_elt4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P12int_tree_map4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P23constant_descriptor_rtx4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P24constant_descriptor_tree4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P14in_named_entry4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P12tree_int_map4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P8tree_map4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P9type_hash4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P13ehl_map_entry4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P15throw_stmt_node4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P9tree_node4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P9reg_attrs4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P9mem_attrs4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P7rtx_def4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_SP9tree_node12splay_tree_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P16var_loc_list_def4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P10die_struct4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P20indirect_string_node4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P19cgraph_varpool_node4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P11cgraph_node4htab
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P15alias_set_entry15varray_head_tag
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_II12splay_tree_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_P9temp_slot15varray_head_tag
    (void *, void *, gt_pointer_operator, void *);
# 41 "../.././gcc/ggc.h" 2




typedef void (*gt_note_pointers) (void *, void *, gt_pointer_operator,
      void *);






typedef void (*gt_handle_reorder) (void *, void *, gt_pointer_operator,
       void *);


extern int gt_pch_note_object (void *, void *, gt_note_pointers,
          enum gt_types_enum);



extern void gt_pch_note_reorder (void *, void *, gt_handle_reorder);


typedef void (*gt_pointer_walker) (void *);



struct ggc_root_tab {
  void *base;
  size_t nelt;
  size_t stride;
  gt_pointer_walker cb;
  gt_pointer_walker pchw;
};


extern const struct ggc_root_tab * const gt_ggc_rtab[];
extern const struct ggc_root_tab * const gt_ggc_deletable_rtab[];
extern const struct ggc_root_tab * const gt_pch_cache_rtab[];
extern const struct ggc_root_tab * const gt_pch_scalar_rtab[];


struct htab;
struct ggc_cache_tab {
  struct htab * *base;
  size_t nelt;
  size_t stride;
  gt_pointer_walker cb;
  gt_pointer_walker pchw;
  int (*marked_p) (const void *);
};


extern const struct ggc_cache_tab * const gt_ggc_cache_rtab[];
# 114 "../.././gcc/ggc.h"
extern int ggc_set_mark (const void *);




extern int ggc_marked_p (const void *);


extern void ggc_mark_stringpool (void);



extern void ggc_mark_roots (void);



extern void gt_pch_save_stringpool (void);
extern void gt_pch_fixup_stringpool (void);
extern void gt_pch_restore_stringpool (void);



extern void gt_pch_p_S (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_n_S (const void *);
extern void gt_ggc_m_S (void *);


extern void init_stringpool (void);





struct alloc_zone;


extern void init_ggc (void);


extern struct alloc_zone *new_ggc_zone (const char *);


extern void destroy_ggc_zone (struct alloc_zone *);

struct ggc_pch_data;


extern struct ggc_pch_data *init_ggc_pch (void);





extern void ggc_pch_count_object (struct ggc_pch_data *, void *, size_t, unsigned char,
      enum gt_types_enum);



extern size_t ggc_pch_total_size (struct ggc_pch_data *);



extern void ggc_pch_this_base (struct ggc_pch_data *, void *);




extern char *ggc_pch_alloc_object (struct ggc_pch_data *, void *, size_t, unsigned char,
       enum gt_types_enum);


extern void ggc_pch_prepare_write (struct ggc_pch_data *, FILE *);


extern void ggc_pch_write_object (struct ggc_pch_data *, FILE *, void *,
      void *, size_t, unsigned char);


extern void ggc_pch_finish (struct ggc_pch_data *, FILE *);



extern void ggc_pch_read (FILE *, void *);





extern unsigned char ggc_force_collect;


extern void *ggc_alloc_stat (size_t );


extern void *ggc_alloc_typed_stat (enum gt_types_enum, size_t );


extern void *ggc_alloc_cleared_stat (size_t );


extern void *ggc_realloc_stat (void *, size_t );


extern void *ggc_calloc (size_t, size_t);

extern void ggc_free (void *);

extern void ggc_record_overhead (size_t, size_t, void * );
extern void ggc_free_overhead (void *);
extern void ggc_prune_overhead_list (void);

extern void dump_ggc_loc_statistics (void);
# 248 "../.././gcc/ggc.h"
extern void *ggc_splay_alloc (int, void *);
extern void ggc_splay_dont_free (void *, void *);




extern const char *ggc_alloc_string (const char *contents, int length);






extern void ggc_collect (void);


extern size_t ggc_get_size (const void *);


extern void gt_pch_save (FILE *f);


extern void gt_pch_restore (FILE *f);





typedef struct ggc_statistics
{

  int unused;
} ggc_statistics;



extern void ggc_print_common_statistics (FILE *, ggc_statistics *);


extern void ggc_print_statistics (void);
extern void stringpool_statistics (void);


extern int ggc_min_expand_heuristic (void);
extern int ggc_min_heapsize_heuristic (void);
extern void init_ggc_heuristics (void);
# 23 "insn-emit.c" 2

# 1 "../.././gcc/basic-block.h" 1
# 25 "../.././gcc/basic-block.h"
# 1 "../.././gcc/bitmap.h" 1
# 27 "../.././gcc/bitmap.h"
typedef unsigned long BITMAP_WORD;
# 43 "../.././gcc/bitmap.h"
typedef struct bitmap_obstack
{
  struct bitmap_element_def *elements;
  struct bitmap_head_def *heads;
  struct obstack obstack;
} bitmap_obstack;
# 62 "../.././gcc/bitmap.h"
typedef struct bitmap_element_def
{
  struct bitmap_element_def *next;
  struct bitmap_element_def *prev;
  unsigned int indx;
  BITMAP_WORD bits[((128 + (8 * 4 * 1u) - 1) / (8 * 4 * 1u))];
} bitmap_element;


typedef struct bitmap_head_def {
  bitmap_element *first;
  bitmap_element *current;
  unsigned int indx;
  bitmap_obstack *obstack;

} bitmap_head;


typedef struct bitmap_head_def *bitmap;


extern bitmap_element bitmap_zero_bits;
extern bitmap_obstack bitmap_default_obstack;


extern void bitmap_clear (bitmap);


extern void bitmap_copy (bitmap, bitmap);


extern unsigned char bitmap_equal_p (bitmap, bitmap);


extern unsigned char bitmap_intersect_p (bitmap, bitmap);



extern unsigned char bitmap_intersect_compl_p (bitmap, bitmap);
# 109 "../.././gcc/bitmap.h"
extern void bitmap_and (bitmap, bitmap, bitmap);
extern void bitmap_and_into (bitmap, bitmap);
extern void bitmap_and_compl (bitmap, bitmap, bitmap);
extern unsigned char bitmap_and_compl_into (bitmap, bitmap);
extern unsigned char bitmap_ior (bitmap, bitmap, bitmap);
extern unsigned char bitmap_ior_into (bitmap, bitmap);
extern void bitmap_xor (bitmap, bitmap, bitmap);
extern void bitmap_xor_into (bitmap, bitmap);


extern unsigned char bitmap_ior_and_compl (bitmap DST, bitmap A, bitmap B, bitmap C);

extern unsigned char bitmap_ior_and_compl_into (bitmap DST, bitmap B, bitmap C);


extern void bitmap_clear_bit (bitmap, int);


extern void bitmap_set_bit (bitmap, int);


extern int bitmap_bit_p (bitmap, int);


extern void debug_bitmap (bitmap);
extern void debug_bitmap_file (FILE *, bitmap);


extern void bitmap_print (FILE *, bitmap, const char *, const char *);


extern void bitmap_obstack_initialize (bitmap_obstack *);
extern void bitmap_obstack_release (bitmap_obstack *);




static __inline__ void
bitmap_initialize (bitmap head, bitmap_obstack *obstack)
{
  head->first = head->current = ((void *)0);
  head->obstack = obstack;
}


extern bitmap bitmap_obstack_alloc (bitmap_obstack *obstack);
extern bitmap bitmap_gc_alloc (void);
extern void bitmap_obstack_free (bitmap);




extern unsigned bitmap_first_set_bit (bitmap);
# 175 "../.././gcc/bitmap.h"
typedef struct
{

  bitmap_element *elt1;


  bitmap_element *elt2;


  unsigned word_no;




  BITMAP_WORD bits;
} bitmap_iterator;




static __inline__ void
bmp_iter_set_init (bitmap_iterator *bi, bitmap map,
     unsigned start_bit, unsigned *bit_no)
{
  bi->elt1 = map->first;
  bi->elt2 = ((void *)0);


  while (1)
    {
      if (!bi->elt1)
 {
   bi->elt1 = &bitmap_zero_bits;
   break;
 }

      if (bi->elt1->indx >= start_bit / (((128 + (8 * 4 * 1u) - 1) / (8 * 4 * 1u)) * (8 * 4 * 1u)))
 break;
      bi->elt1 = bi->elt1->next;
    }


  if (bi->elt1->indx != start_bit / (((128 + (8 * 4 * 1u) - 1) / (8 * 4 * 1u)) * (8 * 4 * 1u)))
    start_bit = bi->elt1->indx * (((128 + (8 * 4 * 1u) - 1) / (8 * 4 * 1u)) * (8 * 4 * 1u));


  bi->word_no = start_bit / (8 * 4 * 1u) % ((128 + (8 * 4 * 1u) - 1) / (8 * 4 * 1u));
  bi->bits = bi->elt1->bits[bi->word_no];
  bi->bits >>= start_bit % (8 * 4 * 1u);





  start_bit += !bi->bits;

  *bit_no = start_bit;
}




static __inline__ void
bmp_iter_and_init (bitmap_iterator *bi, bitmap map1, bitmap map2,
     unsigned start_bit, unsigned *bit_no)
{
  bi->elt1 = map1->first;
  bi->elt2 = map2->first;



  while (1)
    {
      if (!bi->elt1)
 {
   bi->elt2 = ((void *)0);
   break;
 }

      if (bi->elt1->indx >= start_bit / (((128 + (8 * 4 * 1u) - 1) / (8 * 4 * 1u)) * (8 * 4 * 1u)))
 break;
      bi->elt1 = bi->elt1->next;
    }


  while (1)
    {
      if (!bi->elt2)
 {
   bi->elt1 = bi->elt2 = &bitmap_zero_bits;
   break;
 }

      if (bi->elt2->indx >= bi->elt1->indx)
 break;
      bi->elt2 = bi->elt2->next;
    }


  if (bi->elt1->indx == bi->elt2->indx)
    {


      if (bi->elt1->indx != start_bit / (((128 + (8 * 4 * 1u) - 1) / (8 * 4 * 1u)) * (8 * 4 * 1u)))
 start_bit = bi->elt1->indx * (((128 + (8 * 4 * 1u) - 1) / (8 * 4 * 1u)) * (8 * 4 * 1u));

      bi->word_no = start_bit / (8 * 4 * 1u) % ((128 + (8 * 4 * 1u) - 1) / (8 * 4 * 1u));
      bi->bits = bi->elt1->bits[bi->word_no] & bi->elt2->bits[bi->word_no];
      bi->bits >>= start_bit % (8 * 4 * 1u);
    }
  else
    {


      bi->word_no = ((128 + (8 * 4 * 1u) - 1) / (8 * 4 * 1u)) - 1;
      bi->bits = 0;
    }





  start_bit += !bi->bits;

  *bit_no = start_bit;
}




static __inline__ void
bmp_iter_and_compl_init (bitmap_iterator *bi, bitmap map1, bitmap map2,
    unsigned start_bit, unsigned *bit_no)
{
  bi->elt1 = map1->first;
  bi->elt2 = map2->first;


  while (1)
    {
      if (!bi->elt1)
 {
   bi->elt1 = &bitmap_zero_bits;
   break;
 }

      if (bi->elt1->indx >= start_bit / (((128 + (8 * 4 * 1u) - 1) / (8 * 4 * 1u)) * (8 * 4 * 1u)))
 break;
      bi->elt1 = bi->elt1->next;
    }


  while (bi->elt2 && bi->elt2->indx < bi->elt1->indx)
    bi->elt2 = bi->elt2->next;



  if (bi->elt1->indx != start_bit / (((128 + (8 * 4 * 1u) - 1) / (8 * 4 * 1u)) * (8 * 4 * 1u)))
    start_bit = bi->elt1->indx * (((128 + (8 * 4 * 1u) - 1) / (8 * 4 * 1u)) * (8 * 4 * 1u));

  bi->word_no = start_bit / (8 * 4 * 1u) % ((128 + (8 * 4 * 1u) - 1) / (8 * 4 * 1u));
  bi->bits = bi->elt1->bits[bi->word_no];
  if (bi->elt2 && bi->elt1->indx == bi->elt2->indx)
    bi->bits &= ~bi->elt2->bits[bi->word_no];
  bi->bits >>= start_bit % (8 * 4 * 1u);





  start_bit += !bi->bits;

  *bit_no = start_bit;
}




static __inline__ void
bmp_iter_next (bitmap_iterator *bi, unsigned *bit_no)
{
  bi->bits >>= 1;
  *bit_no += 1;
}





static __inline__ unsigned char
bmp_iter_set (bitmap_iterator *bi, unsigned *bit_no)
{

  if (bi->bits)
    {
    next_bit:
      while (!(bi->bits & 1))
 {
   bi->bits >>= 1;
   *bit_no += 1;
 }
      return 1;
    }




  *bit_no = ((*bit_no + (8 * 4 * 1u) - 1)
      / (8 * 4 * 1u) * (8 * 4 * 1u));
  bi->word_no++;

  while (1)
    {

      while (bi->word_no != ((128 + (8 * 4 * 1u) - 1) / (8 * 4 * 1u)))
 {
   bi->bits = bi->elt1->bits[bi->word_no];
   if (bi->bits)
     goto next_bit;
   *bit_no += (8 * 4 * 1u);
   bi->word_no++;
 }


      bi->elt1 = bi->elt1->next;
      if (!bi->elt1)
 return 0;
      *bit_no = bi->elt1->indx * (((128 + (8 * 4 * 1u) - 1) / (8 * 4 * 1u)) * (8 * 4 * 1u));
      bi->word_no = 0;
    }
}





static __inline__ unsigned char
bmp_iter_and (bitmap_iterator *bi, unsigned *bit_no)
{

  if (bi->bits)
    {
    next_bit:
      while (!(bi->bits & 1))
 {
   bi->bits >>= 1;
   *bit_no += 1;
 }
      return 1;
    }




  *bit_no = ((*bit_no + (8 * 4 * 1u) - 1)
      / (8 * 4 * 1u) * (8 * 4 * 1u));
  bi->word_no++;

  while (1)
    {

      while (bi->word_no != ((128 + (8 * 4 * 1u) - 1) / (8 * 4 * 1u)))
 {
   bi->bits = bi->elt1->bits[bi->word_no] & bi->elt2->bits[bi->word_no];
   if (bi->bits)
     goto next_bit;
   *bit_no += (8 * 4 * 1u);
   bi->word_no++;
 }


      do
 {


   do
     {
       bi->elt1 = bi->elt1->next;
       if (!bi->elt1)
  return 0;
     }
   while (bi->elt1->indx < bi->elt2->indx);



   while (bi->elt2->indx < bi->elt1->indx)
     {
       bi->elt2 = bi->elt2->next;
       if (!bi->elt2)
  return 0;
     }
 }
      while (bi->elt1->indx != bi->elt2->indx);

      *bit_no = bi->elt1->indx * (((128 + (8 * 4 * 1u) - 1) / (8 * 4 * 1u)) * (8 * 4 * 1u));
      bi->word_no = 0;
    }
}





static __inline__ unsigned char
bmp_iter_and_compl (bitmap_iterator *bi, unsigned *bit_no)
{

  if (bi->bits)
    {
    next_bit:
      while (!(bi->bits & 1))
 {
   bi->bits >>= 1;
   *bit_no += 1;
 }
      return 1;
    }




  *bit_no = ((*bit_no + (8 * 4 * 1u) - 1)
      / (8 * 4 * 1u) * (8 * 4 * 1u));
  bi->word_no++;

  while (1)
    {

      while (bi->word_no != ((128 + (8 * 4 * 1u) - 1) / (8 * 4 * 1u)))
 {
   bi->bits = bi->elt1->bits[bi->word_no];
   if (bi->elt2 && bi->elt2->indx == bi->elt1->indx)
     bi->bits &= ~bi->elt2->bits[bi->word_no];
   if (bi->bits)
     goto next_bit;
   *bit_no += (8 * 4 * 1u);
   bi->word_no++;
 }


      bi->elt1 = bi->elt1->next;
      if (!bi->elt1)
 return 0;


      while (bi->elt2 && bi->elt2->indx < bi->elt1->indx)
 bi->elt2 = bi->elt2->next;

      *bit_no = bi->elt1->indx * (((128 + (8 * 4 * 1u) - 1) / (8 * 4 * 1u)) * (8 * 4 * 1u));
      bi->word_no = 0;
    }
}
# 26 "../.././gcc/basic-block.h" 2
# 1 "../.././gcc/sbitmap.h" 1
# 31 "../.././gcc/sbitmap.h"
typedef struct simple_bitmap_def
{
  unsigned int n_bits;
  unsigned int size;
  unsigned int bytes;
  unsigned long elms[1];
} *sbitmap;

typedef unsigned long *sbitmap_ptr;
# 59 "../.././gcc/sbitmap.h"
typedef struct {

  unsigned long *ptr;


  unsigned int size;


  unsigned int word_num;


  unsigned int bit_num;


  unsigned long word;
} sbitmap_iterator;




static __inline__ void
sbitmap_iter_init (sbitmap_iterator *i, sbitmap bmp, unsigned int min)
{
  i->word_num = min / (unsigned int) ((unsigned) (8 * 4));
  i->bit_num = min;
  i->size = bmp->size;
  i->ptr = bmp->elms;

  if (i->word_num >= i->size)
    i->word = 0;
  else
    i->word = (i->ptr[i->word_num]
        >> (i->bit_num % (unsigned int) ((unsigned) (8 * 4))));
}





static __inline__ unsigned char
sbitmap_iter_cond (sbitmap_iterator *i, unsigned int *n)
{

  for (; i->word == 0; i->word = i->ptr[i->word_num])
    {
      i->word_num++;


      if (i->word_num >= i->size)
 return 0;

      i->bit_num = i->word_num * ((unsigned) (8 * 4));
    }


  for (; (i->word & 1) == 0; i->word >>= 1)
    i->bit_num++;

  *n = i->bit_num;

  return 1;
}



static __inline__ void
sbitmap_iter_next (sbitmap_iterator *i)
{
  i->word >>= 1;
  i->bit_num++;
}
# 171 "../.././gcc/sbitmap.h"
struct int_list;

extern void dump_sbitmap (FILE *, sbitmap);
extern void dump_sbitmap_file (FILE *, sbitmap);
extern void dump_sbitmap_vector (FILE *, const char *, const char *, sbitmap *,
     int);
extern sbitmap sbitmap_alloc (unsigned int);
extern sbitmap *sbitmap_vector_alloc (unsigned int, unsigned int);
extern sbitmap sbitmap_resize (sbitmap, unsigned int, int);
extern void sbitmap_copy (sbitmap, sbitmap);
extern int sbitmap_equal (sbitmap, sbitmap);
extern void sbitmap_zero (sbitmap);
extern void sbitmap_ones (sbitmap);
extern void sbitmap_vector_zero (sbitmap *, unsigned int);
extern void sbitmap_vector_ones (sbitmap *, unsigned int);

extern void sbitmap_union_of_diff (sbitmap, sbitmap, sbitmap, sbitmap);
extern unsigned char sbitmap_union_of_diff_cg (sbitmap, sbitmap, sbitmap, sbitmap);
extern void sbitmap_difference (sbitmap, sbitmap, sbitmap);
extern void sbitmap_not (sbitmap, sbitmap);
extern void sbitmap_a_or_b_and_c (sbitmap, sbitmap, sbitmap, sbitmap);
extern unsigned char sbitmap_a_or_b_and_c_cg (sbitmap, sbitmap, sbitmap, sbitmap);
extern void sbitmap_a_and_b_or_c (sbitmap, sbitmap, sbitmap, sbitmap);
extern unsigned char sbitmap_a_and_b_or_c_cg (sbitmap, sbitmap, sbitmap, sbitmap);
extern unsigned char sbitmap_any_common_bits (sbitmap, sbitmap);
extern void sbitmap_a_and_b (sbitmap, sbitmap, sbitmap);
extern unsigned char sbitmap_a_and_b_cg (sbitmap, sbitmap, sbitmap);
extern void sbitmap_a_or_b (sbitmap, sbitmap, sbitmap);
extern unsigned char sbitmap_a_or_b_cg (sbitmap, sbitmap, sbitmap);
extern void sbitmap_a_xor_b (sbitmap, sbitmap, sbitmap);
extern unsigned char sbitmap_a_xor_b_cg (sbitmap, sbitmap, sbitmap);
extern unsigned char sbitmap_a_subset_b_p (sbitmap, sbitmap);

extern int sbitmap_first_set_bit (sbitmap);
extern int sbitmap_last_set_bit (sbitmap);

extern void sbitmap_intersect_of_predsucc (sbitmap, sbitmap *, int,
        struct int_list **);



extern void sbitmap_union_of_predsucc (sbitmap, sbitmap *, int,
           struct int_list **);






extern void sbitmap_intersection_of_succs (sbitmap, sbitmap *, int);
extern void sbitmap_intersection_of_preds (sbitmap, sbitmap *, int);
extern void sbitmap_union_of_succs (sbitmap, sbitmap *, int);
extern void sbitmap_union_of_preds (sbitmap, sbitmap *, int);

extern void debug_sbitmap (sbitmap);
extern sbitmap sbitmap_realloc (sbitmap, unsigned int);
# 27 "../.././gcc/basic-block.h" 2
# 1 "../.././gcc/varray.h" 1
# 39 "../.././gcc/varray.h"
enum varray_data_enum {
  VARRAY_DATA_C,
  VARRAY_DATA_UC,
  VARRAY_DATA_S,
  VARRAY_DATA_US,
  VARRAY_DATA_I,
  VARRAY_DATA_U,
  VARRAY_DATA_L,
  VARRAY_DATA_UL,
  VARRAY_DATA_HINT,
  VARRAY_DATA_UHINT,
  VARRAY_DATA_GENERIC,
  VARRAY_DATA_GENERIC_NOGC,
  VARRAY_DATA_CPTR,
  VARRAY_DATA_RTX,
  VARRAY_DATA_RTVEC,
  VARRAY_DATA_TREE,
  VARRAY_DATA_BITMAP,
  VARRAY_DATA_REG,
  VARRAY_DATA_BB,
  VARRAY_DATA_TE,
  VARRAY_DATA_EDGE,
  VARRAY_DATA_TREE_PTR,
  NUM_VARRAY_DATA
};


typedef union varray_data_tag {
  char c[1];

  unsigned char uc[1];

  short s[1];

  unsigned short us[1];

  int i[1];

  unsigned int u[1];

  long l[1];

  unsigned long ul[1];

  long hint[1];

  unsigned long uhint[1];

  void * generic[1];

  void * generic_nogc[1];

  char * cptr[1];

  rtx rtx[1];

  rtvec rtvec[1];

  tree tree[1];

  struct bitmap_head_def * bitmap[1];

  struct reg_info_def * reg[1];

  struct basic_block_def * bb[1];

  struct elt_list * te[1];

  struct edge_def * e[1];

  tree * tp[1];

} varray_data;


struct varray_head_tag {
  size_t num_elements;
  size_t elements_used;

  enum varray_data_enum type;
  const char *name;
  varray_data data;

};
typedef struct varray_head_tag *varray_type;



extern varray_type varray_init (size_t, enum varray_data_enum, const char *);
# 201 "../.././gcc/varray.h"
extern varray_type varray_grow (varray_type, size_t);
# 212 "../.././gcc/varray.h"
extern void varray_clear (varray_type);
extern void dump_varray_statistics (void);
# 28 "../.././gcc/basic-block.h" 2
# 1 "../.././gcc/../include/partition.h" 1
# 46 "../.././gcc/../include/partition.h"
struct partition_elem
{


  int class_element;


  struct partition_elem* next;


  unsigned class_count;
};

typedef struct partition_def
{

  int num_elements;

  struct partition_elem elements[1];
} *partition;

extern partition partition_new (int);
extern void partition_delete (partition);
extern int partition_union (partition, int, int);
extern void partition_print (partition, FILE*);
# 29 "../.././gcc/basic-block.h" 2

# 1 "../.././gcc/predict.h" 1
# 25 "../.././gcc/predict.h"
enum br_predictor
{
# 1 "../.././gcc/predict.def" 1
# 39 "../.././gcc/predict.def"
PRED_COMBINED,


PRED_DS_THEORY,



PRED_FIRST_MATCH,


PRED_NO_PREDICTION,


PRED_UNCONDITIONAL,





PRED_LOOP_ITERATIONS,



PRED_BUILTIN_EXPECT,



PRED_CONTINUE,


PRED_NORETURN,



PRED_LOOP_BRANCH,



PRED_LOOP_EXIT,




PRED_LOOP_CONDITION,


PRED_LOOP_PRECONDITIONING,


PRED_LOOP_HEADER,


PRED_POINTER,
PRED_TREE_POINTER,


PRED_OPCODE_POSITIVE,
PRED_OPCODE_NONEQUAL,
PRED_FPOPCODE,
PRED_TREE_OPCODE_POSITIVE,
PRED_TREE_OPCODE_NONEQUAL,
PRED_TREE_FPOPCODE,


PRED_CALL,


PRED_EARLY_RETURN,
PRED_TREE_EARLY_RETURN,


PRED_GOTO,


PRED_CONST_RETURN,


PRED_NEGATIVE_RETURN,


PRED_NULL_RETURN,


PRED_MUDFLAP,
# 28 "../.././gcc/predict.h" 2


  END_PREDICTORS
};

enum prediction
{
   NOT_TAKEN,
   TAKEN
};

extern void predict_insn_def (rtx, enum br_predictor, enum prediction);
extern int counts_to_freqs (void);
# 31 "../.././gcc/basic-block.h" 2




typedef bitmap_head regset_head;


typedef bitmap regset;
# 84 "../.././gcc/basic-block.h"
extern void reg_set_to_hard_reg_set (HARD_REG_SET *, bitmap);






typedef bitmap_iterator reg_set_iterator;
# 115 "../.././gcc/basic-block.h"
typedef long long gcov_type;


struct edge_def
{

  struct basic_block_def *src;
  struct basic_block_def *dest;


  union edge_def_insns {
    rtx r;
    tree t;
  } insns;


  void * aux;


  source_locus goto_locus;

  int flags;
  int probability;
  gcov_type count;




  unsigned int dest_idx;
};

typedef struct edge_def *edge;
static __inline__ void VEC_edge_must_be_pointer_type (void) { (void)((edge)1 == (void *)1); } typedef struct VEC_edge_base { unsigned num; unsigned alloc; edge vec[1]; } VEC_edge_base; typedef struct VEC_edge_none { VEC_edge_base base; } VEC_edge_none; static __inline__ unsigned VEC_edge_base_length (const VEC_edge_base *vec_) { return vec_ ? vec_->num : 0; } static __inline__ edge VEC_edge_base_last (const VEC_edge_base *vec_ ) { (void)(vec_ && vec_->num); return vec_->vec[vec_->num - 1]; } static __inline__ edge VEC_edge_base_index (const VEC_edge_base *vec_, unsigned ix_ ) { (void)(vec_ && ix_ < vec_->num); return vec_->vec[ix_]; } static __inline__ int VEC_edge_base_iterate (const VEC_edge_base *vec_, unsigned ix_, edge *ptr) { if (vec_ && ix_ < vec_->num) { *ptr = vec_->vec[ix_]; return 1; } else { *ptr = 0; return 0; } } static __inline__ size_t VEC_edge_base_embedded_size (int alloc_) { return __builtin_offsetof (VEC_edge_base, vec) + alloc_ * sizeof(edge); } static __inline__ void VEC_edge_base_embedded_init (VEC_edge_base *vec_, int alloc_) { vec_->num = 0; vec_->alloc = alloc_; } static __inline__ int VEC_edge_base_space (VEC_edge_base *vec_, int alloc_ ) { (void)(alloc_ >= 0); return vec_ ? vec_->alloc - vec_->num >= (unsigned)alloc_ : !alloc_; } static __inline__ edge *VEC_edge_base_quick_push (VEC_edge_base *vec_, edge obj_ ) { edge *slot_; (void)(vec_->num < vec_->alloc); slot_ = &vec_->vec[vec_->num++]; *slot_ = obj_; return slot_; } static __inline__ edge VEC_edge_base_pop (VEC_edge_base *vec_ ) { edge obj_; (void)(vec_->num); obj_ = vec_->vec[--vec_->num]; return obj_; } static __inline__ void VEC_edge_base_truncate (VEC_edge_base *vec_, unsigned size_ ) { (void)(vec_ ? vec_->num >= size_ : !size_); if (vec_) vec_->num = size_; } static __inline__ edge VEC_edge_base_replace (VEC_edge_base *vec_, unsigned ix_, edge obj_ ) { edge old_obj_; (void)(ix_ < vec_->num); old_obj_ = vec_->vec[ix_]; vec_->vec[ix_] = obj_; return old_obj_; } static __inline__ edge *VEC_edge_base_quick_insert (VEC_edge_base *vec_, unsigned ix_, edge obj_ ) { edge *slot_; (void)(vec_->num < vec_->alloc); (void)(ix_ <= vec_->num); slot_ = &vec_->vec[ix_]; memmove (slot_ + 1, slot_, (vec_->num++ - ix_) * sizeof (edge)); *slot_ = obj_; return slot_; } static __inline__ edge VEC_edge_base_ordered_remove (VEC_edge_base *vec_, unsigned ix_ ) { edge *slot_; edge obj_; (void)(ix_ < vec_->num); slot_ = &vec_->vec[ix_]; obj_ = *slot_; memmove (slot_, slot_ + 1, (--vec_->num - ix_) * sizeof (edge)); return obj_; } static __inline__ edge VEC_edge_base_unordered_remove (VEC_edge_base *vec_, unsigned ix_ ) { edge *slot_; edge obj_; (void)(ix_ < vec_->num); slot_ = &vec_->vec[ix_]; obj_ = *slot_; *slot_ = vec_->vec[--vec_->num]; return obj_; } static __inline__ edge *VEC_edge_base_address (VEC_edge_base *vec_) { return vec_ ? vec_->vec : 0; } static __inline__ unsigned VEC_edge_base_lower_bound (VEC_edge_base *vec_, const edge obj_, unsigned char (*lessthan_)(const edge, const edge) ) { unsigned int len_ = VEC_edge_base_length (vec_); unsigned int half_, middle_; unsigned int first_ = 0; while (len_ > 0) { edge middle_elem_; half_ = len_ >> 1; middle_ = first_; middle_ += half_; middle_elem_ = VEC_edge_base_index (vec_, middle_ ); if (lessthan_ (middle_elem_, obj_)) { first_ = middle_; ++first_; len_ = len_ - half_ - 1; } else len_ = half_; } return first_; } struct vec_swallow_trailing_semi;
typedef struct VEC_edge_gc { VEC_edge_base base; } VEC_edge_gc; static __inline__ VEC_edge_gc *VEC_edge_gc_alloc (int alloc_ ) { return (VEC_edge_gc *) vec_gc_p_reserve (((void *)0), -alloc_ ); } static __inline__ void VEC_edge_gc_free (VEC_edge_gc **vec_) { if (*vec_) ggc_free (*vec_); *vec_ = ((void *)0); } static __inline__ VEC_edge_gc *VEC_edge_gc_copy (VEC_edge_base *vec_ ) { size_t len_ = vec_ ? vec_->num : 0; VEC_edge_gc *new_vec_ = ((void *)0); if (len_) { new_vec_ = (VEC_edge_gc *)(vec_gc_p_reserve (((void *)0), -len_ )); new_vec_->base.num = len_; memcpy (new_vec_->base.vec, vec_->vec, sizeof (edge) * len_); } return new_vec_; } static __inline__ int VEC_edge_gc_reserve (VEC_edge_gc **vec_, int alloc_ ) { int extend = !VEC_edge_base_space (((*vec_) ? &(*vec_)->base : 0), alloc_ < 0 ? -alloc_ : alloc_ ); if (extend) *vec_ = (VEC_edge_gc *) vec_gc_p_reserve (*vec_, alloc_ ); return extend; } static __inline__ void VEC_edge_gc_safe_grow (VEC_edge_gc **vec_, int size_ ) { (void)(size_ >= 0 && VEC_edge_base_length ((*vec_) ? &(*vec_)->base : 0) <= (unsigned)size_); VEC_edge_gc_reserve (vec_, (int)(*vec_ ? ((*vec_) ? &(*vec_)->base : 0)->num : 0) - size_ ); ((*vec_) ? &(*vec_)->base : 0)->num = size_; } static __inline__ edge *VEC_edge_gc_safe_push (VEC_edge_gc **vec_, edge obj_ ) { VEC_edge_gc_reserve (vec_, 1 ); return VEC_edge_base_quick_push (((*vec_) ? &(*vec_)->base : 0), obj_ ); } static __inline__ edge *VEC_edge_gc_safe_insert (VEC_edge_gc **vec_, unsigned ix_, edge obj_ ) { VEC_edge_gc_reserve (vec_, 1 ); return VEC_edge_base_quick_insert (((*vec_) ? &(*vec_)->base : 0), ix_, obj_ ); } struct vec_swallow_trailing_semi;
# 178 "../.././gcc/basic-block.h"
extern const struct gcov_ctr_summary *profile_info;


struct loop;
struct loops;


struct edge_prediction;
struct rtl_bb_info;
# 214 "../.././gcc/basic-block.h"
struct basic_block_def
{

  tree stmt_list;


  VEC_edge_gc *preds;
  VEC_edge_gc *succs;


  void * aux;


  struct loop * loop_father;


  struct et_node * dom[2];


  struct basic_block_def *prev_bb;
  struct basic_block_def *next_bb;

  union basic_block_il_dependent {
      struct rtl_bb_info * rtl;
    } il;


  tree phi_nodes;


  struct edge_prediction *predictions;


  gcov_type count;


  int index;


  int loop_depth;


  int frequency;


  int flags;
};

struct rtl_bb_info
{

  rtx head_;
  rtx end_;


  bitmap global_live_at_start;


  bitmap global_live_at_end;



  rtx header;
  rtx footer;


  int visited;
};

typedef struct basic_block_def *basic_block;
# 295 "../.././gcc/basic-block.h"
enum bb_flags
{


  BB_DIRTY = 1,


  BB_NEW = 2,



  BB_REACHABLE = 4,


  BB_IRREDUCIBLE_LOOP = 8,


  BB_SUPERBLOCK = 16,



  BB_DISABLE_SCHEDULE = 32,


  BB_HOT_PARTITION = 64,


  BB_COLD_PARTITION = 128,


  BB_DUPLICATED = 256,


  BB_RTL = 1024,



  BB_FORWARDER_BLOCK = 2048,



  BB_NONTHREADABLE_BLOCK = 4096
};
# 358 "../.././gcc/basic-block.h"
struct control_flow_graph
{


  basic_block x_entry_block_ptr;
  basic_block x_exit_block_ptr;


  varray_type x_basic_block_info;


  int x_n_basic_blocks;


  int x_n_edges;


  int x_last_basic_block;



  varray_type x_label_to_block_map;

  enum profile_status {
    PROFILE_ABSENT,
    PROFILE_GUESSED,
    PROFILE_READ
  } x_profile_status;
};
# 414 "../.././gcc/basic-block.h"
extern unsigned char rediscover_loops_after_threading;
# 450 "../.././gcc/basic-block.h"
extern bitmap_obstack reg_obstack;
# 479 "../.././gcc/basic-block.h"
extern void compute_bb_for_insn (void);
extern void free_bb_for_insn (void);
extern void update_bb_for_insn (basic_block);

extern void free_basic_block_vars (void);

extern void insert_insn_on_edge (rtx, edge);
unsigned char safe_insert_insn_on_edge (rtx, edge);

extern void commit_edge_insertions (void);
extern void commit_edge_insertions_watch_calls (void);

extern void remove_fake_edges (void);
extern void remove_fake_exit_edges (void);
extern void add_noreturn_fake_exit_edges (void);
extern void connect_infinite_loops_to_exit (void);
extern edge unchecked_make_edge (basic_block, basic_block, int);
extern edge cached_make_edge (sbitmap, basic_block, basic_block, int);
extern edge make_edge (basic_block, basic_block, int);
extern edge make_single_succ_edge (basic_block, basic_block, int);
extern void remove_edge (edge);
extern void redirect_edge_succ (edge, basic_block);
extern edge redirect_edge_succ_nodup (edge, basic_block);
extern void redirect_edge_pred (edge, basic_block);
extern basic_block create_basic_block_structure (rtx, rtx, rtx, basic_block);
extern void clear_bb_flags (void);
extern void flow_reverse_top_sort_order_compute (int *);
extern int flow_depth_first_order_compute (int *, int *);
extern int dfs_enumerate_from (basic_block, int,
          unsigned char (*)(basic_block, void *),
          basic_block *, int, void *);
extern void compute_dominance_frontiers (bitmap *);
extern void dump_edge_info (FILE *, edge, int);
extern void brief_dump_cfg (FILE *);
extern void clear_edges (void);
extern rtx first_insn_after_basic_block_note (basic_block);
extern void scale_bbs_frequencies_int (basic_block *, int, int, int);
extern void scale_bbs_frequencies_gcov_type (basic_block *, int, gcov_type,
          gcov_type);






typedef struct ce_if_block
{
  basic_block test_bb;
  basic_block then_bb;
  basic_block else_bb;
  basic_block join_bb;
  basic_block last_test_bb;
  int num_multiple_test_blocks;
  int num_and_and_blocks;
  int num_or_or_blocks;
  int num_multiple_test_insns;
  int and_and_p;
  int num_then_insns;
  int num_else_insns;
  int pass;





} ce_if_block_t;


struct edge_list
{
  int num_blocks;
  int num_edges;
  edge *index_to_edge;
};
# 600 "../.././gcc/basic-block.h"
static __inline__ unsigned char
single_succ_p (basic_block bb)
{
  return (VEC_edge_base_length((((bb->succs)) ? &((bb->succs))->base : 0))) == 1;
}



static __inline__ unsigned char
single_pred_p (basic_block bb)
{
  return (VEC_edge_base_length((((bb->preds)) ? &((bb->preds))->base : 0))) == 1;
}




static __inline__ edge
single_succ_edge (basic_block bb)
{
  ((void)(!(single_succ_p (bb)) ? fancy_abort ("../.././gcc/basic-block.h", 620, __FUNCTION__), 0 : 0));
  return (VEC_edge_base_index((((bb)->succs) ? &((bb)->succs)->base : 0),(0) ));
}




static __inline__ edge
single_pred_edge (basic_block bb)
{
  ((void)(!(single_pred_p (bb)) ? fancy_abort ("../.././gcc/basic-block.h", 630, __FUNCTION__), 0 : 0));
  return (VEC_edge_base_index((((bb)->preds) ? &((bb)->preds)->base : 0),(0) ));
}




static __inline__ basic_block
single_succ (basic_block bb)
{
  return single_succ_edge (bb)->dest;
}




static __inline__ basic_block
single_pred (basic_block bb)
{
  return single_pred_edge (bb)->src;
}



typedef struct {
  unsigned index;
  VEC_edge_gc **container;
} edge_iterator;

static __inline__ VEC_edge_gc *
ei_container (edge_iterator i)
{
  ((void)(!(i.container) ? fancy_abort ("../.././gcc/basic-block.h", 662, __FUNCTION__), 0 : 0));
  return *i.container;
}





static __inline__ edge_iterator
ei_start_1 (VEC_edge_gc **ev)
{
  edge_iterator i;

  i.index = 0;
  i.container = ev;

  return i;
}



static __inline__ edge_iterator
ei_last_1 (VEC_edge_gc **ev)
{
  edge_iterator i;

  i.index = (VEC_edge_base_length((((*ev)) ? &((*ev))->base : 0))) - 1;
  i.container = ev;

  return i;
}


static __inline__ unsigned char
ei_end_p (edge_iterator i)
{
  return (i.index == (VEC_edge_base_length((((ei_container (i))) ? &((ei_container (i)))->base : 0))));
}



static __inline__ unsigned char
ei_one_before_end_p (edge_iterator i)
{
  return (i.index + 1 == (VEC_edge_base_length((((ei_container (i))) ? &((ei_container (i)))->base : 0))));
}


static __inline__ void
ei_next (edge_iterator *i)
{
  ((void)(!(i->index < (VEC_edge_base_length((((ei_container (*i))) ? &((ei_container (*i)))->base : 0)))) ? fancy_abort ("../.././gcc/basic-block.h", 713, __FUNCTION__), 0 : 0));
  i->index++;
}


static __inline__ void
ei_prev (edge_iterator *i)
{
  ((void)(!(i->index > 0) ? fancy_abort ("../.././gcc/basic-block.h", 721, __FUNCTION__), 0 : 0));
  i->index--;
}


static __inline__ edge
ei_edge (edge_iterator i)
{
  return (VEC_edge_base_index((((ei_container (i))) ? &((ei_container (i)))->base : 0),(i.index) ));
}




static __inline__ edge
ei_safe_edge (edge_iterator i)
{
  return !ei_end_p (i) ? ei_edge (i) : ((void *)0);
}





static __inline__ unsigned char
ei_cond (edge_iterator ei, edge *p)
{
  if (!ei_end_p (ei))
    {
      *p = ei_edge (ei);
      return 1;
    }
  else
    {
      *p = ((void *)0);
      return 0;
    }
}
# 780 "../.././gcc/basic-block.h"
struct edge_list * create_edge_list (void);
void free_edge_list (struct edge_list *);
void print_edge_list (FILE *, struct edge_list *);
void verify_edge_list (FILE *, struct edge_list *);
int find_edge_index (struct edge_list *, basic_block, basic_block);
edge find_edge (basic_block, basic_block);


enum update_life_extent
{
  UPDATE_LIFE_LOCAL = 0,
  UPDATE_LIFE_GLOBAL = 1,
  UPDATE_LIFE_GLOBAL_RM_NOTES = 2
};
# 834 "../.././gcc/basic-block.h"
extern void life_analysis (FILE *, int);
extern int update_life_info (sbitmap, enum update_life_extent, int);
extern int update_life_info_in_dirty_blocks (enum update_life_extent, int);
extern int count_or_remove_death_notes (sbitmap, int);
extern int propagate_block (basic_block, regset, regset, regset, int);

struct propagate_block_info;
extern rtx propagate_one_insn (struct propagate_block_info *, rtx);
extern struct propagate_block_info *init_propagate_block_info
 (basic_block, regset, regset, regset, int);
extern void free_propagate_block_info (struct propagate_block_info *);


extern struct edge_list *pre_edge_lcm (FILE *, int, sbitmap *, sbitmap *,
           sbitmap *, sbitmap *, sbitmap **,
           sbitmap **);
extern struct edge_list *pre_edge_rev_lcm (FILE *, int, sbitmap *,
        sbitmap *, sbitmap *,
        sbitmap *, sbitmap **,
        sbitmap **);
extern void compute_available (sbitmap *, sbitmap *, sbitmap *, sbitmap *);
extern int optimize_mode_switching (FILE *);


extern void estimate_probability (struct loops *);
extern void expected_value_to_br_prob (void);
extern unsigned char maybe_hot_bb_p (basic_block);
extern unsigned char probably_cold_bb_p (basic_block);
extern unsigned char probably_never_executed_bb_p (basic_block);
extern unsigned char tree_predicted_by_p (basic_block, enum br_predictor);
extern unsigned char rtl_predicted_by_p (basic_block, enum br_predictor);
extern void tree_predict_edge (edge, enum br_predictor, int);
extern void rtl_predict_edge (edge, enum br_predictor, int);
extern void predict_edge_def (edge, enum br_predictor, enum prediction);
extern void guess_outgoing_edge_probabilities (basic_block);
extern void remove_predictions_associated_with_edge (edge);


extern void init_flow (void);
extern void debug_bb (basic_block);
extern basic_block debug_bb_n (int);
extern void dump_regset (regset, FILE *);
extern void debug_regset (regset);
extern void allocate_reg_life_data (void);
extern void expunge_block (basic_block);
extern void link_block (basic_block, basic_block);
extern void unlink_block (basic_block);
extern void compact_blocks (void);
extern basic_block alloc_block (void);
extern void find_unreachable_blocks (void);
extern int delete_noop_moves (void);
extern basic_block force_nonfallthru (edge);
extern rtx block_label (basic_block);
extern unsigned char forwarder_block_p (basic_block);
extern unsigned char purge_all_dead_edges (void);
extern unsigned char purge_dead_edges (basic_block);
extern void find_many_sub_basic_blocks (sbitmap);
extern void rtl_make_eh_edge (sbitmap, basic_block, rtx);
extern unsigned char can_fallthru (basic_block, basic_block);
extern unsigned char could_fall_through (basic_block, basic_block);
extern void flow_nodes_print (const char *, const sbitmap, FILE *);
extern void flow_edge_list_print (const char *, const edge *, int, FILE *);
extern void alloc_aux_for_block (basic_block, int);
extern void alloc_aux_for_blocks (int);
extern void clear_aux_for_blocks (void);
extern void free_aux_for_blocks (void);
extern void alloc_aux_for_edge (edge, int);
extern void alloc_aux_for_edges (int);
extern void clear_aux_for_edges (void);
extern void free_aux_for_edges (void);
extern void find_basic_blocks (rtx);
extern unsigned char cleanup_cfg (int);
extern unsigned char delete_unreachable_blocks (void);
extern unsigned char merge_seq_blocks (void);

typedef struct conflict_graph_def *conflict_graph;




typedef int (*conflict_graph_enum_fn) (int, int, void *);




extern conflict_graph conflict_graph_new
 (int);
extern void conflict_graph_delete (conflict_graph);
extern int conflict_graph_add (conflict_graph, int, int);
extern int conflict_graph_conflict_p (conflict_graph, int, int);
extern void conflict_graph_enum (conflict_graph, int, conflict_graph_enum_fn,
     void *);
extern void conflict_graph_merge_regs (conflict_graph, int, int);
extern void conflict_graph_print (conflict_graph, FILE*);
extern unsigned char mark_dfs_back_edges (void);
extern void set_edge_can_fallthru_flag (void);
extern void update_br_prob_note (basic_block);
extern void fixup_abnormal_edges (void);
extern unsigned char inside_basic_block_p (rtx);
extern unsigned char control_flow_insn_p (rtx);


extern void reorder_basic_blocks (unsigned int);
extern void partition_hot_cold_basic_blocks (void);



enum cdi_direction
{
  CDI_DOMINATORS,
  CDI_POST_DOMINATORS
};

enum dom_state
{
  DOM_NONE,
  DOM_NO_FAST_QUERY,
  DOM_OK
};

extern enum dom_state dom_computed[2];

extern unsigned char dom_info_available_p (enum cdi_direction);
extern void calculate_dominance_info (enum cdi_direction);
extern void free_dominance_info (enum cdi_direction);
extern basic_block nearest_common_dominator (enum cdi_direction,
          basic_block, basic_block);
extern basic_block nearest_common_dominator_for_set (enum cdi_direction,
           bitmap);
extern void set_immediate_dominator (enum cdi_direction, basic_block,
         basic_block);
extern basic_block get_immediate_dominator (enum cdi_direction, basic_block);
extern unsigned char dominated_by_p (enum cdi_direction, basic_block, basic_block);
extern int get_dominated_by (enum cdi_direction, basic_block, basic_block **);
extern unsigned get_dominated_by_region (enum cdi_direction, basic_block *,
      unsigned, basic_block *);
extern void add_to_dominance_info (enum cdi_direction, basic_block);
extern void delete_from_dominance_info (enum cdi_direction, basic_block);
basic_block recount_dominator (enum cdi_direction, basic_block);
extern void redirect_immediate_dominators (enum cdi_direction, basic_block,
        basic_block);
extern void iterate_fix_dominators (enum cdi_direction, basic_block *, int);
extern void verify_dominators (enum cdi_direction);
extern basic_block first_dom_son (enum cdi_direction, basic_block);
extern basic_block next_dom_son (enum cdi_direction, basic_block);
extern edge try_redirect_by_replacing_jump (edge, basic_block, unsigned char);
extern void break_superblocks (void);
extern void check_bb_profile (basic_block, FILE *);
extern void update_bb_profile_for_threading (basic_block, int, gcov_type, edge);
extern void init_rtl_bb_info (basic_block);

extern void initialize_original_copy_tables (void);
extern void free_original_copy_tables (void);
extern void set_bb_original (basic_block, basic_block);
extern basic_block get_bb_original (basic_block);
extern void set_bb_copy (basic_block, basic_block);
extern basic_block get_bb_copy (basic_block);

# 1 "../.././gcc/cfghooks.h" 1
# 25 "../.././gcc/cfghooks.h"
struct cfg_hooks
{

  const char *name;


  int (*verify_flow_info) (void);
  void (*dump_bb) (basic_block, FILE *, int);




  basic_block (*create_basic_block) (void *head, void *end, basic_block after);





  edge (*redirect_edge_and_branch) (edge e, basic_block b);




  basic_block (*redirect_edge_and_branch_force) (edge, basic_block);


  void (*delete_basic_block) (basic_block);



  basic_block (*split_block) (basic_block b, void * i);


  unsigned char (*move_block_after) (basic_block b, basic_block a);


  unsigned char (*can_merge_blocks_p) (basic_block a, basic_block b);


  void (*merge_blocks) (basic_block a, basic_block b);


  void (*predict_edge) (edge e, enum br_predictor predictor, int probability);



  unsigned char (*predicted_by_p) (basic_block bb, enum br_predictor predictor);


  unsigned char (*can_duplicate_block_p) (basic_block a);


  basic_block (*duplicate_block) (basic_block a);



  basic_block (*split_edge) (edge);
  void (*make_forwarder_block) (edge);


  void (*tidy_fallthru_edge) (edge);



  unsigned char (*block_ends_with_call_p) (basic_block);



  unsigned char (*block_ends_with_condjump_p) (basic_block);
# 102 "../.././gcc/cfghooks.h"
  int (*flow_call_edges_add) (sbitmap);



  void (*execute_on_growing_pred) (edge);



  void (*execute_on_shrinking_pred) (edge);



  unsigned char (*cfg_hook_duplicate_loop_to_header_edge) (struct loop *loop, edge e,
        struct loops *loops,
        unsigned int ndupl,
        sbitmap wont_exit,
        edge orig, edge *to_remove,
        unsigned int *n_to_remove,
        int flags);



  void (*lv_add_condition_to_bb) (basic_block, basic_block, basic_block,
        void *);

  void (*lv_adjust_loop_header_phi) (basic_block, basic_block,
         basic_block, edge);



  void (*extract_cond_bb_edges) (basic_block, edge *, edge *);




  void (*flush_pending_stmts) (edge);
};

extern void verify_flow_info (void);
extern void dump_bb (basic_block, FILE *, int);
extern edge redirect_edge_and_branch (edge, basic_block);
extern basic_block redirect_edge_and_branch_force (edge, basic_block);
extern edge split_block (basic_block, void *);
extern edge split_block_after_labels (basic_block);
extern unsigned char move_block_after (basic_block, basic_block);
extern void delete_basic_block (basic_block);
extern basic_block split_edge (edge);
extern basic_block create_basic_block (void *, void *, basic_block);
extern basic_block create_empty_bb (basic_block);
extern unsigned char can_merge_blocks_p (basic_block, basic_block);
extern void merge_blocks (basic_block, basic_block);
extern edge make_forwarder_block (basic_block, unsigned char (*)(edge),
      void (*) (basic_block));
extern void tidy_fallthru_edge (edge);
extern void tidy_fallthru_edges (void);
extern void predict_edge (edge e, enum br_predictor predictor, int probability);
extern unsigned char predicted_by_p (basic_block bb, enum br_predictor predictor);
extern unsigned char can_duplicate_block_p (basic_block);
extern basic_block duplicate_block (basic_block, edge, basic_block);
extern unsigned char block_ends_with_call_p (basic_block bb);
extern unsigned char block_ends_with_condjump_p (basic_block bb);
extern int flow_call_edges_add (sbitmap);
extern void execute_on_growing_pred (edge);
extern void execute_on_shrinking_pred (edge);
extern unsigned char cfg_hook_duplicate_loop_to_header_edge (struct loop *loop, edge,
          struct loops *loops,
          unsigned int ndupl,
          sbitmap wont_exit,
          edge orig, edge *to_remove,
          unsigned int *n_to_remove,
          int flags);

extern void lv_flush_pending_stmts (edge);
extern void extract_cond_bb_edges (basic_block, edge *, edge*);
extern void lv_adjust_loop_header_phi (basic_block, basic_block, basic_block,
           edge);
extern void lv_add_condition_to_bb (basic_block, basic_block, basic_block,
        void *);


extern struct cfg_hooks tree_cfg_hooks;
extern struct cfg_hooks rtl_cfg_hooks;
extern struct cfg_hooks cfg_layout_rtl_cfg_hooks;


extern int ir_type (void);
extern void rtl_register_cfg_hooks (void);
extern void cfg_layout_rtl_register_cfg_hooks (void);
extern void tree_register_cfg_hooks (void);
# 993 "../.././gcc/basic-block.h" 2
# 25 "insn-emit.c" 2





rtx
gen_cmpqi_ext_3_insn (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (VOIDmode, 17)), (gen_rtx_fmt_ee (COMPARE, (VOIDmode), (gen_rtx_SUBREG (QImode, gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand0), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)])), 0)), (operand1))));
# 45 "insn-emit.c"
}


rtx
gen_x86_fnstsw_1 (rtx operand0 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (HImode), (gen_rtvec (1, gen_rtx_REG (CCFPmode, 18))), (21))));






}


rtx
gen_x86_sahf_1 (rtx operand0 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCmode, 17)), (gen_rtx_fmt_Ei (UNSPEC, (CCmode), (gen_rtvec (1, operand0)), (22))));






}


rtx
gen_popsi1 (rtx operand0 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_MEM (SImode, gen_rtx_REG (SImode, 7)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 7)), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_REG (SImode, 7)), (const_int_rtx[64 + (4)])))))));
# 90 "insn-emit.c"
}


rtx
gen_movsi_insv_1 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand0), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (operand1));





}


rtx
gen_swapxf (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (operand0)))));






}


rtx
gen_zero_extendhisi2_and (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (ZERO_EXTEND, (SImode), (operand1)))), gen_hard_reg_clobber (CCmode, 17))));





}


rtx
gen_zero_extendsidi2_32 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (ZERO_EXTEND, (DImode), (operand1)))), gen_hard_reg_clobber (CCmode, 17))));





}


rtx
gen_extendhisi2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (SIGN_EXTEND, (SImode), (operand1))));



}


rtx
gen_extendqihi2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (SIGN_EXTEND, (HImode), (operand1))));



}


rtx
gen_extendqisi2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (SIGN_EXTEND, (SImode), (operand1))));



}


rtx
gen_truncxfsf2_i387_noop (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (SFmode), (operand1))));



}


rtx
gen_truncxfdf2_i387_noop (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (DFmode), (operand1))));



}


rtx
gen_fix_truncsfsi_sse (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (SImode), (operand1))));



}


rtx
gen_fix_truncdfsi_sse (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (SImode), (operand1))));



}


rtx
gen_fix_trunchi_fisttp_i387_1 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (HImode), (operand1))));



}


rtx
gen_fix_truncsi_fisttp_i387_1 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (SImode), (operand1))));



}


rtx
gen_fix_truncdi_fisttp_i387_1 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (DImode), (operand1))));



}


rtx
gen_fix_trunchi_i387_fisttp (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (HImode), (operand1)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode)))))));






}


rtx
gen_fix_truncsi_i387_fisttp (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (SImode), (operand1)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode)))))));






}


rtx
gen_fix_truncdi_i387_fisttp (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (DImode), (operand1)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode)))))));






}


rtx
gen_fix_trunchi_i387_fisttp_with_temp (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (HImode), (operand1)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand2)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode)))))));
# 312 "insn-emit.c"
}


rtx
gen_fix_truncsi_i387_fisttp_with_temp (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (SImode), (operand1)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand2)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode)))))));
# 329 "insn-emit.c"
}


rtx
gen_fix_truncdi_i387_fisttp_with_temp (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (DImode), (operand1)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand2)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode)))))));
# 346 "insn-emit.c"
}


rtx
gen_fix_truncdi_i387 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (DImode), (operand1)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode)))))));
# 366 "insn-emit.c"
}


rtx
gen_fix_truncdi_i387_with_temp (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)),
 rtx operand4 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (5, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (DImode), (operand1)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand4)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode)))))));
# 389 "insn-emit.c"
}


rtx
gen_fix_trunchi_i387 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (HImode), (operand1)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)))));
# 407 "insn-emit.c"
}


rtx
gen_fix_truncsi_i387 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (SImode), (operand1)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)))));
# 425 "insn-emit.c"
}


rtx
gen_fix_trunchi_i387_with_temp (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)),
 rtx operand4 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (HImode), (operand1)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand4)))));
# 446 "insn-emit.c"
}


rtx
gen_fix_truncsi_i387_with_temp (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)),
 rtx operand4 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (SImode), (operand1)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand4)))));
# 467 "insn-emit.c"
}


rtx
gen_x86_fnstcw_1 (rtx operand0 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (HImode), (gen_rtvec (1, gen_rtx_REG (HImode, 18))), (23))));






}


rtx
gen_x86_fldcw_1 (rtx operand0 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (HImode, 18)), (gen_rtx_fmt_Ei (UNSPEC, (HImode), (gen_rtvec (1, operand0)), (25))));






}


rtx
gen_floathixf2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT, (XFmode), (operand1))));



}


rtx
gen_floatsixf2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT, (XFmode), (operand1))));



}


rtx
gen_floatdixf2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT, (XFmode), (operand1))));



}


rtx
gen_addqi3_carry (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (QImode), (gen_rtx_fmt_ee (PLUS, (QImode), (operand3), (operand1))), (operand2)))), gen_hard_reg_clobber (CCmode, 17))));
# 544 "insn-emit.c"
}


rtx
gen_addhi3_carry (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (HImode), (gen_rtx_fmt_ee (PLUS, (HImode), (operand3), (operand1))), (operand2)))), gen_hard_reg_clobber (CCmode, 17))));
# 562 "insn-emit.c"
}


rtx
gen_addsi3_carry (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_fmt_ee (PLUS, (SImode), (operand3), (operand1))), (operand2)))), gen_hard_reg_clobber (CCmode, 17))));
# 580 "insn-emit.c"
}


rtx
gen_addqi3_cc (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCmode, 17)), (gen_rtx_fmt_Ei (UNSPEC, (CCmode), (gen_rtvec (2, operand1, operand2)), (24)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (QImode), (operand1), (operand2)))))));
# 602 "insn-emit.c"
}


rtx
gen_addqi_ext_1 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand0), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand1), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (operand2)))), gen_hard_reg_clobber (CCmode, 17))));
# 623 "insn-emit.c"
}


rtx
gen_subqi3_carry (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (QImode), (operand1), (gen_rtx_fmt_ee (PLUS, (QImode), (operand3), (operand2)))))), gen_hard_reg_clobber (CCmode, 17))));
# 641 "insn-emit.c"
}


rtx
gen_subhi3_carry (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (HImode), (operand1), (gen_rtx_fmt_ee (PLUS, (HImode), (operand3), (operand2)))))), gen_hard_reg_clobber (CCmode, 17))));
# 659 "insn-emit.c"
}


rtx
gen_subsi3_carry (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (SImode), (operand1), (gen_rtx_fmt_ee (PLUS, (SImode), (operand3), (operand2)))))), gen_hard_reg_clobber (CCmode, 17))));
# 677 "insn-emit.c"
}


rtx
gen_divqi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (DIV, (QImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17))));






}


rtx
gen_udivqi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (UDIV, (QImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17))));






}


rtx
gen_divmodhi4 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (DIV, (HImode), (operand1), (operand2)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_ee (MOD, (HImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17))));
# 728 "insn-emit.c"
}


rtx
gen_udivmodsi4 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (UDIV, (SImode), (operand1), (operand2)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_ee (UMOD, (SImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17))));
# 749 "insn-emit.c"
}


rtx
gen_testsi_1 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (VOIDmode, 17)), (gen_rtx_fmt_ee (COMPARE, (VOIDmode), (gen_rtx_fmt_ee (AND, (SImode), (operand0), (operand1))), ((const_int_rtx[64])))));







}


rtx
gen_andqi_ext_0 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand0), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (gen_rtx_fmt_ee (AND, (SImode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand1), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (operand2)))), gen_hard_reg_clobber (CCmode, 17))));
# 785 "insn-emit.c"
}


rtx
gen_iorqi_ext_0 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand0), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (gen_rtx_fmt_ee (IOR, (SImode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand1), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (operand2)))), gen_hard_reg_clobber (CCmode, 17))));
# 806 "insn-emit.c"
}


rtx
gen_xorqi_ext_0 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand0), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (gen_rtx_fmt_ee (XOR, (SImode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand1), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (operand2)))), gen_hard_reg_clobber (CCmode, 17))));
# 827 "insn-emit.c"
}


rtx
gen_copysignsf3_const (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SFmode), (gen_rtvec (3, operand1, operand2, operand3)), (50))));







}


rtx
gen_copysignsf3_var (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)),
 rtx operand4 __attribute__ ((__unused__)),
 rtx operand5 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SFmode), (gen_rtvec (4, operand2, operand3, operand4, operand5)), (50)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (V4SFmode)))))));
# 867 "insn-emit.c"
}


rtx
gen_copysigndf3_const (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DFmode), (gen_rtvec (3, operand1, operand2, operand3)), (50))));







}


rtx
gen_copysigndf3_var (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)),
 rtx operand4 __attribute__ ((__unused__)),
 rtx operand5 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DFmode), (gen_rtvec (4, operand2, operand3, operand4, operand5)), (50)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (V2DFmode)))))));
# 907 "insn-emit.c"
}


rtx
gen_x86_shld_1 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (IOR, (SImode), (gen_rtx_fmt_ee (ASHIFT, (SImode), (operand0), (operand2))), (gen_rtx_fmt_ee (LSHIFTRT, (SImode), (operand1), (gen_rtx_fmt_ee (MINUS, (QImode), (const_int_rtx[64 + (32)]), (operand2)))))))), gen_hard_reg_clobber (CCmode, 17))));
# 928 "insn-emit.c"
}


rtx
gen_x86_shrd_1 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (IOR, (SImode), (gen_rtx_fmt_ee (ASHIFTRT, (SImode), (operand0), (operand2))), (gen_rtx_fmt_ee (ASHIFT, (SImode), (operand1), (gen_rtx_fmt_ee (MINUS, (QImode), (const_int_rtx[64 + (32)]), (operand2)))))))), gen_hard_reg_clobber (CCmode, 17))));
# 949 "insn-emit.c"
}


rtx
gen_ashrsi3_31 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFTRT, (SImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17))));






}


rtx
gen_ix86_rotldi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ROTATE, (DImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (SImode)))))));
# 981 "insn-emit.c"
}


rtx
gen_ix86_rotrdi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ROTATERT, (DImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (SImode)))))));
# 998 "insn-emit.c"
}


rtx
gen_jump (rtx operand0 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (operand0))));



}


rtx
gen_blockage (rtx operand0 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (VOIDmode), (gen_rtvec (1, operand0)), (0));



}


rtx
gen_return_internal (void)
{
  return gen_rtx_fmt_ (RETURN, (VOIDmode));
}


rtx
gen_return_internal_long (void)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ (RETURN, (VOIDmode)), gen_rtx_fmt_Ei (UNSPEC, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))), (26)))));





}


rtx
gen_return_pop_internal (rtx operand0 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ (RETURN, (VOIDmode)), gen_rtx_fmt_e (USE, (VOIDmode), (operand0)))));



}


rtx
gen_return_indirect_internal (rtx operand0 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ (RETURN, (VOIDmode)), gen_rtx_fmt_e (USE, (VOIDmode), (operand0)))));



}


rtx
gen_nop (void)
{
  return (const_int_rtx[64]);
}


rtx
gen_align (rtx operand0 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (VOIDmode), (gen_rtvec (1, operand0)), (7));



}


rtx
gen_set_got (rtx operand0 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, (const_int_rtx[64]))), (12)))), gen_hard_reg_clobber (CCmode, 17))));







}


rtx
gen_eh_return_si (rtx operand0 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (gen_rtx_fmt_Ei (UNSPEC, (VOIDmode), (gen_rtvec (1, operand0)), (27))));





}


rtx
gen_leave (void)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 7)), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_REG (SImode, 6)), (const_int_rtx[64 + (4)])))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 6)), (gen_rtx_MEM (SImode, gen_rtx_REG (SImode, 6)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_MEM (BLKmode, gen_rtx_fmt_0 (SCRATCH, (VOIDmode))))))));
# 1123 "insn-emit.c"
}


rtx
gen_ctzsi2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (CTZ, (SImode), (operand1)))), gen_hard_reg_clobber (CCmode, 17))));





}


rtx
gen_sqrtxf2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (SQRT, (XFmode), (operand1))));



}


rtx
gen_fpremxf4 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand2, operand3)), (88)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand2, operand3)), (89)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCFPmode, 18)), (gen_rtx_fmt_Ei (UNSPEC, (CCFPmode), (gen_rtvec (1, (const_int_rtx[64]))), (38)))))));
# 1178 "insn-emit.c"
}


rtx
gen_fprem1xf4 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand2, operand3)), (90)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand2, operand3)), (91)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCFPmode, 18)), (gen_rtx_fmt_Ei (UNSPEC, (CCFPmode), (gen_rtvec (1, (const_int_rtx[64]))), (38)))))));
# 1209 "insn-emit.c"
}


rtx
gen_sincosdf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DFmode), (gen_rtvec (1, operand2)), (80)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_Ei (UNSPEC, (DFmode), (gen_rtvec (1, operand2)), (81)))))));
# 1230 "insn-emit.c"
}


rtx
gen_sincossf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SFmode), (gen_rtvec (1, operand2)), (80)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_Ei (UNSPEC, (SFmode), (gen_rtvec (1, operand2)), (81)))))));
# 1251 "insn-emit.c"
}


rtx
gen_sincosxf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand2)), (80)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand2)), (81)))))));
# 1272 "insn-emit.c"
}


rtx
gen_atan2df3_1 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DFmode), (gen_rtvec (2, operand2, operand1)), (62)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (DFmode)))))));
# 1290 "insn-emit.c"
}


rtx
gen_atan2sf3_1 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SFmode), (gen_rtvec (2, operand2, operand1)), (62)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (SFmode)))))));
# 1308 "insn-emit.c"
}


rtx
gen_atan2xf3_1 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand2, operand1)), (62)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode)))))));
# 1326 "insn-emit.c"
}


rtx
gen_fyl2x_xf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand2, operand1)), (63)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode)))))));
# 1344 "insn-emit.c"
}


rtx
gen_fyl2xp1_xf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand2, operand1)), (64)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode)))))));
# 1362 "insn-emit.c"
}


rtx
gen_frndintxf2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand1)), (65))));





}


rtx
gen_fistdi2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DImode), (gen_rtvec (1, operand1)), (66)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode)))))));
# 1391 "insn-emit.c"
}


rtx
gen_fistdi2_with_temp (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DImode), (gen_rtvec (1, operand1)), (66)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand2)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode)))))));
# 1410 "insn-emit.c"
}


rtx
gen_fisthi2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (HImode), (gen_rtvec (1, operand1)), (66))));





}


rtx
gen_fistsi2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, operand1)), (66))));





}


rtx
gen_fisthi2_with_temp (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (HImode), (gen_rtvec (1, operand1)), (66)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand2)))));
# 1453 "insn-emit.c"
}


rtx
gen_fistsi2_with_temp (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, operand1)), (66)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand2)))));
# 1470 "insn-emit.c"
}


rtx
gen_frndintxf2_floor (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand1)), (70)))), gen_hard_reg_clobber (CCmode, 17))));







}


rtx
gen_frndintxf2_floor_i387 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand1)), (70)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)))));
# 1505 "insn-emit.c"
}


rtx
gen_fistdi2_floor (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DImode), (gen_rtvec (1, operand1)), (74)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode)))))));
# 1527 "insn-emit.c"
}


rtx
gen_fistdi2_floor_with_temp (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)),
 rtx operand4 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (5, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DImode), (gen_rtvec (1, operand1)), (74)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand4)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode)))))));
# 1552 "insn-emit.c"
}


rtx
gen_fisthi2_floor (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (HImode), (gen_rtvec (1, operand1)), (74)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)))));
# 1572 "insn-emit.c"
}


rtx
gen_fistsi2_floor (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, operand1)), (74)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)))));
# 1592 "insn-emit.c"
}


rtx
gen_fisthi2_floor_with_temp (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)),
 rtx operand4 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (HImode), (gen_rtvec (1, operand1)), (74)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand4)))));
# 1615 "insn-emit.c"
}


rtx
gen_fistsi2_floor_with_temp (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)),
 rtx operand4 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, operand1)), (74)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand4)))));
# 1638 "insn-emit.c"
}


rtx
gen_frndintxf2_ceil (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand1)), (71)))), gen_hard_reg_clobber (CCmode, 17))));







}


rtx
gen_frndintxf2_ceil_i387 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand1)), (71)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)))));
# 1673 "insn-emit.c"
}


rtx
gen_fistdi2_ceil (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DImode), (gen_rtvec (1, operand1)), (75)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode)))))));
# 1695 "insn-emit.c"
}


rtx
gen_fistdi2_ceil_with_temp (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)),
 rtx operand4 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (5, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DImode), (gen_rtvec (1, operand1)), (75)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand4)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode)))))));
# 1720 "insn-emit.c"
}


rtx
gen_fisthi2_ceil (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (HImode), (gen_rtvec (1, operand1)), (75)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)))));
# 1740 "insn-emit.c"
}


rtx
gen_fistsi2_ceil (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, operand1)), (75)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)))));
# 1760 "insn-emit.c"
}


rtx
gen_fisthi2_ceil_with_temp (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)),
 rtx operand4 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (HImode), (gen_rtvec (1, operand1)), (75)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand4)))));
# 1783 "insn-emit.c"
}


rtx
gen_fistsi2_ceil_with_temp (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)),
 rtx operand4 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, operand1)), (75)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand4)))));
# 1806 "insn-emit.c"
}


rtx
gen_frndintxf2_trunc (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand1)), (72)))), gen_hard_reg_clobber (CCmode, 17))));







}


rtx
gen_frndintxf2_trunc_i387 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand1)), (72)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)))));
# 1841 "insn-emit.c"
}


rtx
gen_frndintxf2_mask_pm (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand1)), (73)))), gen_hard_reg_clobber (CCmode, 17))));







}


rtx
gen_frndintxf2_mask_pm_i387 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand1)), (73)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)))));
# 1876 "insn-emit.c"
}


rtx
gen_cld (void)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 19)), ((const_int_rtx[64])));



}


rtx
gen_x86_movsicc_0_m1 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (IF_THEN_ELSE, (SImode), (operand1), ((const_int_rtx[64 -1])), ((const_int_rtx[64]))))), gen_hard_reg_clobber (CCmode, 17))));







}


rtx
gen_sminsf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SMIN, (SFmode), (operand1), (operand2))));




}


rtx
gen_smaxsf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SMAX, (SFmode), (operand1), (operand2))));




}


rtx
gen_smindf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SMIN, (DFmode), (operand1), (operand2))));




}


rtx
gen_smaxdf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SMAX, (DFmode), (operand1), (operand2))));




}


rtx
gen_pro_epilogue_adjust_stack_1 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (SImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_MEM (BLKmode, gen_rtx_fmt_0 (SCRATCH, (VOIDmode))))))));
# 1971 "insn-emit.c"
}


rtx
gen_allocate_stack_worker_1 (rtx operand0 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (SImode), (gen_rtvec (1, operand0)), (1)), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 7)), (gen_rtx_fmt_ee (MINUS, (SImode), (gen_rtx_REG (SImode, 7)), (operand0)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (SImode)))), gen_hard_reg_clobber (CCmode, 17))));
# 1992 "insn-emit.c"
}


rtx
gen_trap (void)
{
  return gen_rtx_fmt_ee (TRAP_IF, (VOIDmode), ((const_int_rtx[64 +1])), (const_int_rtx[64 + (6)]));


}


rtx
gen_stack_protect_set_si (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, operand1)), (100)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (SImode))), ((const_int_rtx[64]))), gen_hard_reg_clobber (CCmode, 17))));
# 2019 "insn-emit.c"
}


rtx
gen_stack_tls_protect_set_si (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, operand1)), (102)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (SImode))), ((const_int_rtx[64]))), gen_hard_reg_clobber (CCmode, 17))));
# 2037 "insn-emit.c"
}


rtx
gen_stack_protect_test_si (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (CCZmode), (gen_rtvec (2, operand1, operand2)), (101)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (SImode)))))));
# 2055 "insn-emit.c"
}


rtx
gen_stack_tls_protect_test_si (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (CCZmode), (gen_rtvec (2, operand1, operand2)), (103)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (SImode)))))));
# 2073 "insn-emit.c"
}


rtx
gen_sse_movups (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (V4SFmode), (gen_rtvec (1, operand1)), (34))));





}


rtx
gen_sse2_movupd (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (V2DFmode), (gen_rtvec (1, operand1)), (34))));





}


rtx
gen_sse2_movdqu (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (V16QImode), (gen_rtvec (1, operand1)), (34))));





}


rtx
gen_sse_movntv4sf (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (V4SFmode), (gen_rtvec (1, operand1)), (33))));





}


rtx
gen_sse2_movntv2df (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (V2DFmode), (gen_rtvec (1, operand1)), (33))));





}


rtx
gen_sse2_movntv2di (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (V2DImode), (gen_rtvec (1, operand1)), (33))));





}


rtx
gen_sse2_movntsi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, operand1)), (33))));





}


rtx
gen_sse3_lddqu (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (V16QImode), (gen_rtvec (1, operand1)), (47))));





}


rtx
gen_sse_vmaddv4sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V4SFmode), (gen_rtx_fmt_ee (PLUS, (V4SFmode), (operand1), (operand2))), (operand1), ((const_int_rtx[64 +1])))));







}


rtx
gen_sse_vmsubv4sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V4SFmode), (gen_rtx_fmt_ee (MINUS, (V4SFmode), (operand1), (operand2))), (operand1), ((const_int_rtx[64 +1])))));







}


rtx
gen_sse_vmmulv4sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V4SFmode), (gen_rtx_fmt_ee (MULT, (V4SFmode), (operand1), (operand2))), (operand1), ((const_int_rtx[64 +1])))));







}


rtx
gen_sse_vmdivv4sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V4SFmode), (gen_rtx_fmt_ee (DIV, (V4SFmode), (operand1), (operand2))), (operand1), ((const_int_rtx[64 +1])))));







}


rtx
gen_sse_rcpv4sf2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (V4SFmode), (gen_rtvec (1, operand1)), (35))));





}


rtx
gen_sse_vmrcpv4sf2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V4SFmode), (gen_rtx_fmt_Ei (UNSPEC, (V4SFmode), (gen_rtvec (1, operand1)), (35))), (operand2), ((const_int_rtx[64 +1])))));
# 2271 "insn-emit.c"
}


rtx
gen_sse_rsqrtv4sf2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (V4SFmode), (gen_rtvec (1, operand1)), (36))));





}


rtx
gen_sse_vmrsqrtv4sf2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V4SFmode), (gen_rtx_fmt_Ei (UNSPEC, (V4SFmode), (gen_rtvec (1, operand1)), (36))), (operand2), ((const_int_rtx[64 +1])))));
# 2301 "insn-emit.c"
}


rtx
gen_sqrtv4sf2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (SQRT, (V4SFmode), (operand1))));



}


rtx
gen_sse_vmsqrtv4sf2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V4SFmode), (gen_rtx_fmt_e (SQRT, (V4SFmode), (operand1))), (operand2), ((const_int_rtx[64 +1])))));






}


rtx
gen_sse_vmsmaxv4sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V4SFmode), (gen_rtx_fmt_ee (SMAX, (V4SFmode), (operand1), (operand2))), (operand1), ((const_int_rtx[64 +1])))));







}


rtx
gen_sse_vmsminv4sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V4SFmode), (gen_rtx_fmt_ee (SMIN, (V4SFmode), (operand1), (operand2))), (operand1), ((const_int_rtx[64 +1])))));







}


rtx
gen_sse3_addsubv4sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V4SFmode), (gen_rtx_fmt_ee (PLUS, (V4SFmode), (operand1), (operand2))), (gen_rtx_fmt_ee (MINUS, (V4SFmode), (operand1), (operand2))), (const_int_rtx[64 + (5)]))));
# 2377 "insn-emit.c"
}


rtx
gen_sse3_haddv4sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_CONCAT, (V4SFmode), (gen_rtx_fmt_ee (VEC_CONCAT, (V2SFmode), (gen_rtx_fmt_ee (PLUS, (SFmode), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64 +1]))))))))), (gen_rtx_fmt_ee (PLUS, (SFmode), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, const_int_rtx[64 + (2)])))))), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, const_int_rtx[64 + (3)])))))))))), (gen_rtx_fmt_ee (VEC_CONCAT, (V2SFmode), (gen_rtx_fmt_ee (PLUS, (SFmode), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand2), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand2), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64 +1]))))))))), (gen_rtx_fmt_ee (PLUS, (SFmode), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand2), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, const_int_rtx[64 + (2)])))))), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand2), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, const_int_rtx[64 + (3)])))))))))))));
# 2434 "insn-emit.c"
}


rtx
gen_sse3_hsubv4sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_CONCAT, (V4SFmode), (gen_rtx_fmt_ee (VEC_CONCAT, (V2SFmode), (gen_rtx_fmt_ee (MINUS, (SFmode), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64 +1]))))))))), (gen_rtx_fmt_ee (MINUS, (SFmode), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, const_int_rtx[64 + (2)])))))), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, const_int_rtx[64 + (3)])))))))))), (gen_rtx_fmt_ee (VEC_CONCAT, (V2SFmode), (gen_rtx_fmt_ee (MINUS, (SFmode), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand2), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand2), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64 +1]))))))))), (gen_rtx_fmt_ee (MINUS, (SFmode), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand2), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, const_int_rtx[64 + (2)])))))), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand2), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, const_int_rtx[64 + (3)])))))))))))));
# 2491 "insn-emit.c"
}


rtx
gen_sse_maskcmpv4sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (((enum rtx_code) (operand3)->code), V4SFmode, operand1, operand2)));




}


rtx
gen_sse_vmmaskcmpv4sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V4SFmode), (gen_rtx_fmt_ee (((enum rtx_code) (operand3)->code), V4SFmode, operand1, operand2)), (operand1), ((const_int_rtx[64 +1])))));







}


rtx
gen_sse_comi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCFPmode, 17)), (gen_rtx_fmt_ee (COMPARE, (CCFPmode), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand0), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))))));
# 2543 "insn-emit.c"
}


rtx
gen_sse_ucomi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCFPUmode, 17)), (gen_rtx_fmt_ee (COMPARE, (CCFPUmode), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand0), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))))));
# 2564 "insn-emit.c"
}


rtx
gen_sse_nandv4sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (AND, (V4SFmode), (gen_rtx_fmt_e (NOT, (V4SFmode), (operand1))), (operand2))));





}


rtx
gen_sse_cvtpi2ps (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V4SFmode), (gen_rtx_fmt_e (VEC_DUPLICATE, (V4SFmode), (gen_rtx_fmt_e (FLOAT, (V2SFmode), (operand2))))), (operand1), (const_int_rtx[64 + (3)]))));







}


rtx
gen_sse_cvtps2pi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V2SImode), (gen_rtx_fmt_Ei (UNSPEC, (V4SImode), (gen_rtvec (1, operand1)), (30))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, (const_int_rtx[64]), (const_int_rtx[64 +1]))))))));
# 2612 "insn-emit.c"
}


rtx
gen_sse_cvttps2pi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V2SImode), (gen_rtx_fmt_e (FIX, (V4SImode), (operand1))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, (const_int_rtx[64]), (const_int_rtx[64 +1]))))))));
# 2628 "insn-emit.c"
}


rtx
gen_sse_cvtsi2ss (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V4SFmode), (gen_rtx_fmt_e (VEC_DUPLICATE, (V4SFmode), (gen_rtx_fmt_e (FLOAT, (SFmode), (operand2))))), (operand1), ((const_int_rtx[64 +1])))));







}


rtx
gen_sse_cvtss2si (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64])))))))), (30))));
# 2661 "insn-emit.c"
}


rtx
gen_sse_cvttss2si (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (SImode), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))))));







}


rtx
gen_sse2_cvtdq2ps (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT, (V4SFmode), (operand1))));



}


rtx
gen_sse2_cvtps2dq (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (V4SImode), (gen_rtvec (1, operand1)), (30))));





}


rtx
gen_sse2_cvttps2dq (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (V4SImode), (operand1))));



}


rtx
gen_sse_movhlps (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V4SFmode), (gen_rtx_fmt_ee (VEC_CONCAT, (V8SFmode), (operand1), (operand2))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, const_int_rtx[64 + (6)], const_int_rtx[64 + (7)], const_int_rtx[64 + (2)], const_int_rtx[64 + (3)])))))));
# 2731 "insn-emit.c"
}


rtx
gen_sse_movlhps (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V4SFmode), (gen_rtx_fmt_ee (VEC_CONCAT, (V8SFmode), (operand1), (operand2))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, (const_int_rtx[64]), (const_int_rtx[64 +1]), const_int_rtx[64 + (4)], const_int_rtx[64 + (5)])))))));
# 2751 "insn-emit.c"
}


rtx
gen_sse_unpckhps (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V4SFmode), (gen_rtx_fmt_ee (VEC_CONCAT, (V8SFmode), (operand1), (operand2))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, const_int_rtx[64 + (2)], const_int_rtx[64 + (6)], const_int_rtx[64 + (3)], const_int_rtx[64 + (7)])))))));
# 2771 "insn-emit.c"
}


rtx
gen_sse_unpcklps (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V4SFmode), (gen_rtx_fmt_ee (VEC_CONCAT, (V8SFmode), (operand1), (operand2))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, (const_int_rtx[64]), const_int_rtx[64 + (4)], (const_int_rtx[64 +1]), const_int_rtx[64 + (5)])))))));
# 2791 "insn-emit.c"
}


rtx
gen_sse3_movshdup (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V4SFmode), (gen_rtx_fmt_ee (VEC_CONCAT, (V8SFmode), (operand1), (operand1))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), const_int_rtx[64 + (7)], const_int_rtx[64 + (7)])))))));
# 2810 "insn-emit.c"
}


rtx
gen_sse3_movsldup (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V4SFmode), (gen_rtx_fmt_ee (VEC_CONCAT, (V8SFmode), (operand1), (operand1))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, (const_int_rtx[64]), (const_int_rtx[64]), const_int_rtx[64 + (6)], const_int_rtx[64 + (6)])))))));
# 2829 "insn-emit.c"
}


rtx
gen_sse_shufps_1 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)),
 rtx operand4 __attribute__ ((__unused__)),
 rtx operand5 __attribute__ ((__unused__)),
 rtx operand6 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V4SFmode), (gen_rtx_fmt_ee (VEC_CONCAT, (V8SFmode), (operand1), (operand2))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, operand3, operand4, operand5, operand6)))))));
# 2853 "insn-emit.c"
}


rtx
gen_sse_storehps (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V2SFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, const_int_rtx[64 + (2)], const_int_rtx[64 + (3)])))))));







}


rtx
gen_sse_loadhps (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_CONCAT, (V4SFmode), (gen_rtx_fmt_ee (VEC_SELECT, (V2SFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, (const_int_rtx[64]), (const_int_rtx[64 +1]))))))), (operand2))));
# 2886 "insn-emit.c"
}


rtx
gen_sse_storelps (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V2SFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, (const_int_rtx[64]), (const_int_rtx[64 +1]))))))));







}


rtx
gen_sse_loadlps (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_CONCAT, (V4SFmode), (operand2), (gen_rtx_fmt_ee (VEC_SELECT, (V2SFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, const_int_rtx[64 + (2)], const_int_rtx[64 + (3)])))))))));
# 2919 "insn-emit.c"
}


rtx
gen_sse_movss (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V4SFmode), (operand2), (operand1), ((const_int_rtx[64 +1])))));





}


rtx
gen_sse2_vmaddv2df3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V2DFmode), (gen_rtx_fmt_ee (PLUS, (V2DFmode), (operand1), (operand2))), (operand1), ((const_int_rtx[64 +1])))));







}


rtx
gen_sse2_vmsubv2df3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V2DFmode), (gen_rtx_fmt_ee (MINUS, (V2DFmode), (operand1), (operand2))), (operand1), ((const_int_rtx[64 +1])))));







}


rtx
gen_sse2_vmmulv2df3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V2DFmode), (gen_rtx_fmt_ee (MULT, (V2DFmode), (operand1), (operand2))), (operand1), ((const_int_rtx[64 +1])))));







}


rtx
gen_sse2_vmdivv2df3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V2DFmode), (gen_rtx_fmt_ee (DIV, (V2DFmode), (operand1), (operand2))), (operand1), ((const_int_rtx[64 +1])))));







}


rtx
gen_sqrtv2df2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (SQRT, (V2DFmode), (operand1))));



}


rtx
gen_sse2_vmsqrtv2df2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V2DFmode), (gen_rtx_fmt_e (SQRT, (V2DFmode), (operand1))), (operand2), ((const_int_rtx[64 +1])))));






}


rtx
gen_sse2_vmsmaxv2df3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V2DFmode), (gen_rtx_fmt_ee (SMAX, (V2DFmode), (operand1), (operand2))), (operand1), ((const_int_rtx[64 +1])))));







}


rtx
gen_sse2_vmsminv2df3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V2DFmode), (gen_rtx_fmt_ee (SMIN, (V2DFmode), (operand1), (operand2))), (operand1), ((const_int_rtx[64 +1])))));







}


rtx
gen_sse3_addsubv2df3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V2DFmode), (gen_rtx_fmt_ee (PLUS, (V2DFmode), (operand1), (operand2))), (gen_rtx_fmt_ee (MINUS, (V2DFmode), (operand1), (operand2))), ((const_int_rtx[64 +1])))));
# 3073 "insn-emit.c"
}


rtx
gen_sse3_haddv2df3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_CONCAT, (V2DFmode), (gen_rtx_fmt_ee (PLUS, (DFmode), (gen_rtx_fmt_ee (VEC_SELECT, (DFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))), (gen_rtx_fmt_ee (VEC_SELECT, (DFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64 +1]))))))))), (gen_rtx_fmt_ee (PLUS, (DFmode), (gen_rtx_fmt_ee (VEC_SELECT, (DFmode), (operand2), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))), (gen_rtx_fmt_ee (VEC_SELECT, (DFmode), (operand2), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64 +1]))))))))))));
# 3106 "insn-emit.c"
}


rtx
gen_sse3_hsubv2df3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_CONCAT, (V2DFmode), (gen_rtx_fmt_ee (MINUS, (DFmode), (gen_rtx_fmt_ee (VEC_SELECT, (DFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))), (gen_rtx_fmt_ee (VEC_SELECT, (DFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64 +1]))))))))), (gen_rtx_fmt_ee (MINUS, (DFmode), (gen_rtx_fmt_ee (VEC_SELECT, (DFmode), (operand2), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))), (gen_rtx_fmt_ee (VEC_SELECT, (DFmode), (operand2), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64 +1]))))))))))));
# 3139 "insn-emit.c"
}


rtx
gen_sse2_maskcmpv2df3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (((enum rtx_code) (operand3)->code), V2DFmode, operand1, operand2)));




}


rtx
gen_sse2_vmmaskcmpv2df3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V2DFmode), (gen_rtx_fmt_ee (((enum rtx_code) (operand3)->code), V2DFmode, operand1, operand2)), (operand1), ((const_int_rtx[64 +1])))));







}


rtx
gen_sse2_comi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCFPmode, 17)), (gen_rtx_fmt_ee (COMPARE, (CCFPmode), (gen_rtx_fmt_ee (VEC_SELECT, (DFmode), (operand0), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))), (gen_rtx_fmt_ee (VEC_SELECT, (DFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))))));
# 3191 "insn-emit.c"
}


rtx
gen_sse2_ucomi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCFPUmode, 17)), (gen_rtx_fmt_ee (COMPARE, (CCFPUmode), (gen_rtx_fmt_ee (VEC_SELECT, (DFmode), (operand0), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))), (gen_rtx_fmt_ee (VEC_SELECT, (DFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))))));
# 3212 "insn-emit.c"
}


rtx
gen_sse2_nandv2df3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (AND, (V2DFmode), (gen_rtx_fmt_e (NOT, (V2DFmode), (operand1))), (operand2))));





}


rtx
gen_sse2_cvtpi2pd (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT, (V2DFmode), (operand1))));



}


rtx
gen_sse2_cvtpd2pi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (V2SImode), (gen_rtvec (1, operand1)), (30))));





}


rtx
gen_sse2_cvttpd2pi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (V2SImode), (operand1))));



}


rtx
gen_sse2_cvtsi2sd (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V2DFmode), (gen_rtx_fmt_e (VEC_DUPLICATE, (V2DFmode), (gen_rtx_fmt_e (FLOAT, (DFmode), (operand2))))), (operand1), ((const_int_rtx[64 +1])))));







}


rtx
gen_sse2_cvtsd2si (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, gen_rtx_fmt_ee (VEC_SELECT, (DFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64])))))))), (30))));
# 3294 "insn-emit.c"
}


rtx
gen_sse2_cvttsd2si (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (SImode), (gen_rtx_fmt_ee (VEC_SELECT, (DFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))))));







}


rtx
gen_sse2_cvtdq2pd (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT, (V2DFmode), (gen_rtx_fmt_ee (VEC_SELECT, (V2SImode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, (const_int_rtx[64]), (const_int_rtx[64 +1]))))))))));
# 3325 "insn-emit.c"
}


rtx
gen_sse2_cvtsd2ss (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V4SFmode), (gen_rtx_fmt_e (VEC_DUPLICATE, (V4SFmode), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (V2SFmode), (operand2))))), (operand1), ((const_int_rtx[64 +1])))));







}


rtx
gen_sse2_cvtss2sd (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V2DFmode), (gen_rtx_fmt_e (FLOAT_EXTEND, (V2DFmode), (gen_rtx_fmt_ee (VEC_SELECT, (V2SFmode), (operand2), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, (const_int_rtx[64]), (const_int_rtx[64 +1]))))))))), (operand1), ((const_int_rtx[64 +1])))));
# 3361 "insn-emit.c"
}


rtx
gen_sse2_cvtps2pd (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_EXTEND, (V2DFmode), (gen_rtx_fmt_ee (VEC_SELECT, (V2SFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, (const_int_rtx[64]), (const_int_rtx[64 +1]))))))))));
# 3377 "insn-emit.c"
}


rtx
gen_sse2_unpckhpd (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V2DFmode), (gen_rtx_fmt_ee (VEC_CONCAT, (V4DFmode), (operand1), (operand2))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, (const_int_rtx[64 +1]), const_int_rtx[64 + (3)])))))));
# 3395 "insn-emit.c"
}


rtx
gen_sse2_unpcklpd (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V2DFmode), (gen_rtx_fmt_ee (VEC_CONCAT, (V4DFmode), (operand1), (operand2))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, (const_int_rtx[64]), const_int_rtx[64 + (2)])))))));
# 3413 "insn-emit.c"
}


rtx
gen_sse2_shufpd_1 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)),
 rtx operand4 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V2DFmode), (gen_rtx_fmt_ee (VEC_CONCAT, (V4DFmode), (operand1), (operand2))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, operand3, operand4)))))));
# 3433 "insn-emit.c"
}


rtx
gen_sse2_storehpd (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (DFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64 +1]))))))));






}


rtx
gen_sse2_storelpd (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (DFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))));






}


rtx
gen_sse2_loadhpd (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_CONCAT, (V2DFmode), (gen_rtx_fmt_ee (VEC_SELECT, (DFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))), (operand2))));
# 3478 "insn-emit.c"
}


rtx
gen_sse2_loadlpd (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_CONCAT, (V2DFmode), (operand2), (gen_rtx_fmt_ee (VEC_SELECT, (DFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64 +1]))))))))));
# 3495 "insn-emit.c"
}


rtx
gen_sse2_movsd (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V2DFmode), (operand2), (operand1), ((const_int_rtx[64 +1])))));





}


rtx
gen_sse2_ssaddv16qi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SS_PLUS, (V16QImode), (operand1), (operand2))));




}


rtx
gen_sse2_ssaddv8hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SS_PLUS, (V8HImode), (operand1), (operand2))));




}


rtx
gen_sse2_usaddv16qi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (US_PLUS, (V16QImode), (operand1), (operand2))));




}


rtx
gen_sse2_usaddv8hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (US_PLUS, (V8HImode), (operand1), (operand2))));




}


rtx
gen_sse2_sssubv16qi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SS_MINUS, (V16QImode), (operand1), (operand2))));




}


rtx
gen_sse2_sssubv8hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SS_MINUS, (V8HImode), (operand1), (operand2))));




}


rtx
gen_sse2_ussubv16qi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (US_MINUS, (V16QImode), (operand1), (operand2))));




}


rtx
gen_sse2_ussubv8hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (US_MINUS, (V8HImode), (operand1), (operand2))));




}


rtx
gen_sse2_smulv8hi3_highpart (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (TRUNCATE, (V8HImode), (gen_rtx_fmt_ee (LSHIFTRT, (V8SImode), (gen_rtx_fmt_ee (MULT, (V8SImode), (gen_rtx_fmt_e (SIGN_EXTEND, (V8SImode), (operand1))), (gen_rtx_fmt_e (SIGN_EXTEND, (V8SImode), (operand2))))), (const_int_rtx[64 + (16)]))))));
# 3631 "insn-emit.c"
}


rtx
gen_sse2_umulv8hi3_highpart (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (TRUNCATE, (V8HImode), (gen_rtx_fmt_ee (LSHIFTRT, (V8SImode), (gen_rtx_fmt_ee (MULT, (V8SImode), (gen_rtx_fmt_e (ZERO_EXTEND, (V8SImode), (operand1))), (gen_rtx_fmt_e (ZERO_EXTEND, (V8SImode), (operand2))))), (const_int_rtx[64 + (16)]))))));
# 3649 "insn-emit.c"
}


rtx
gen_sse2_umulv2siv2di3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (V2DImode), (gen_rtx_fmt_e (ZERO_EXTEND, (V2DImode), (gen_rtx_fmt_ee (VEC_SELECT, (V2SImode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, (const_int_rtx[64]), const_int_rtx[64 + (2)])))))))), (gen_rtx_fmt_e (ZERO_EXTEND, (V2DImode), (gen_rtx_fmt_ee (VEC_SELECT, (V2SImode), (operand2), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, (const_int_rtx[64]), const_int_rtx[64 + (2)])))))))))));
# 3674 "insn-emit.c"
}


rtx
gen_sse2_pmaddwd (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (V4SImode), (gen_rtx_fmt_ee (MULT, (V4SImode), (gen_rtx_fmt_e (SIGN_EXTEND, (V4SImode), (gen_rtx_fmt_ee (VEC_SELECT, (V4HImode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, (const_int_rtx[64]), const_int_rtx[64 + (2)], const_int_rtx[64 + (4)], const_int_rtx[64 + (6)])))))))), (gen_rtx_fmt_e (SIGN_EXTEND, (V4SImode), (gen_rtx_fmt_ee (VEC_SELECT, (V4HImode), (operand2), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, (const_int_rtx[64]), const_int_rtx[64 + (2)], const_int_rtx[64 + (4)], const_int_rtx[64 + (6)])))))))))), (gen_rtx_fmt_ee (MULT, (V4SImode), (gen_rtx_fmt_e (SIGN_EXTEND, (V4SImode), (gen_rtx_fmt_ee (VEC_SELECT, (V4HImode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, (const_int_rtx[64 +1]), const_int_rtx[64 + (3)], const_int_rtx[64 + (5)], const_int_rtx[64 + (7)])))))))), (gen_rtx_fmt_e (SIGN_EXTEND, (V4SImode), (gen_rtx_fmt_ee (VEC_SELECT, (V4HImode), (operand2), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, (const_int_rtx[64 +1]), const_int_rtx[64 + (3)], const_int_rtx[64 + (5)], const_int_rtx[64 + (7)])))))))))))));
# 3723 "insn-emit.c"
}


rtx
gen_ashrv8hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFTRT, (V8HImode), (operand1), (operand2))));




}


rtx
gen_ashrv4si3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFTRT, (V4SImode), (operand1), (operand2))));




}


rtx
gen_lshrv8hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (LSHIFTRT, (V8HImode), (operand1), (operand2))));




}


rtx
gen_lshrv4si3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (LSHIFTRT, (V4SImode), (operand1), (operand2))));




}


rtx
gen_lshrv2di3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (LSHIFTRT, (V2DImode), (operand1), (operand2))));




}


rtx
gen_ashlv8hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFT, (V8HImode), (operand1), (operand2))));




}


rtx
gen_ashlv4si3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFT, (V4SImode), (operand1), (operand2))));




}


rtx
gen_ashlv2di3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFT, (V2DImode), (operand1), (operand2))));




}


rtx
gen_sse2_ashlti3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFT, (TImode), (operand1), (operand2))));




}


rtx
gen_sse2_lshrti3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (LSHIFTRT, (TImode), (operand1), (operand2))));




}


rtx
gen_sse2_eqv16qi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (EQ, (V16QImode), (operand1), (operand2))));




}


rtx
gen_sse2_eqv8hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (EQ, (V8HImode), (operand1), (operand2))));




}


rtx
gen_sse2_eqv4si3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (EQ, (V4SImode), (operand1), (operand2))));




}


rtx
gen_sse2_gtv16qi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (GT, (V16QImode), (operand1), (operand2))));




}


rtx
gen_sse2_gtv8hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (GT, (V8HImode), (operand1), (operand2))));




}


rtx
gen_sse2_gtv4si3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (GT, (V4SImode), (operand1), (operand2))));




}


rtx
gen_sse2_nandv16qi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (AND, (V16QImode), (gen_rtx_fmt_e (NOT, (V16QImode), (operand1))), (operand2))));





}


rtx
gen_sse2_nandv8hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (AND, (V8HImode), (gen_rtx_fmt_e (NOT, (V8HImode), (operand1))), (operand2))));





}


rtx
gen_sse2_nandv4si3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (AND, (V4SImode), (gen_rtx_fmt_e (NOT, (V4SImode), (operand1))), (operand2))));





}


rtx
gen_sse2_nandv2di3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (AND, (V2DImode), (gen_rtx_fmt_e (NOT, (V2DImode), (operand1))), (operand2))));





}


rtx
gen_sse2_packsswb (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_CONCAT, (V16QImode), (gen_rtx_fmt_e (SS_TRUNCATE, (V8QImode), (operand1))), (gen_rtx_fmt_e (SS_TRUNCATE, (V8QImode), (operand2))))));






}


rtx
gen_sse2_packssdw (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_CONCAT, (V8HImode), (gen_rtx_fmt_e (SS_TRUNCATE, (V4HImode), (operand1))), (gen_rtx_fmt_e (SS_TRUNCATE, (V4HImode), (operand2))))));






}


rtx
gen_sse2_packuswb (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_CONCAT, (V16QImode), (gen_rtx_fmt_e (US_TRUNCATE, (V8QImode), (operand1))), (gen_rtx_fmt_e (US_TRUNCATE, (V8QImode), (operand2))))));






}


rtx
gen_sse2_punpckhbw (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V16QImode), (gen_rtx_fmt_ee (VEC_CONCAT, (V32QImode), (operand1), (operand2))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (16, const_int_rtx[64 + (8)], const_int_rtx[64 + (24)], const_int_rtx[64 + (9)], const_int_rtx[64 + (25)], const_int_rtx[64 + (10)], const_int_rtx[64 + (26)], const_int_rtx[64 + (11)], const_int_rtx[64 + (27)], const_int_rtx[64 + (12)], const_int_rtx[64 + (28)], const_int_rtx[64 + (13)], const_int_rtx[64 + (29)], const_int_rtx[64 + (14)], const_int_rtx[64 + (30)], const_int_rtx[64 + (15)], const_int_rtx[64 + (31)])))))));
# 4064 "insn-emit.c"
}


rtx
gen_sse2_punpcklbw (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V16QImode), (gen_rtx_fmt_ee (VEC_CONCAT, (V32QImode), (operand1), (operand2))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (16, (const_int_rtx[64]), const_int_rtx[64 + (16)], (const_int_rtx[64 +1]), const_int_rtx[64 + (17)], const_int_rtx[64 + (2)], const_int_rtx[64 + (18)], const_int_rtx[64 + (3)], const_int_rtx[64 + (19)], const_int_rtx[64 + (4)], const_int_rtx[64 + (20)], const_int_rtx[64 + (5)], const_int_rtx[64 + (21)], const_int_rtx[64 + (6)], const_int_rtx[64 + (22)], const_int_rtx[64 + (7)], const_int_rtx[64 + (23)])))))));
# 4096 "insn-emit.c"
}


rtx
gen_sse2_punpckhwd (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V8HImode), (gen_rtx_fmt_ee (VEC_CONCAT, (V16HImode), (operand1), (operand2))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (8, const_int_rtx[64 + (4)], const_int_rtx[64 + (12)], const_int_rtx[64 + (5)], const_int_rtx[64 + (13)], const_int_rtx[64 + (6)], const_int_rtx[64 + (14)], const_int_rtx[64 + (7)], const_int_rtx[64 + (15)])))))));
# 4120 "insn-emit.c"
}


rtx
gen_sse2_punpcklwd (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V8HImode), (gen_rtx_fmt_ee (VEC_CONCAT, (V16HImode), (operand1), (operand2))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (8, (const_int_rtx[64]), const_int_rtx[64 + (8)], (const_int_rtx[64 +1]), const_int_rtx[64 + (9)], const_int_rtx[64 + (2)], const_int_rtx[64 + (10)], const_int_rtx[64 + (3)], const_int_rtx[64 + (11)])))))));
# 4144 "insn-emit.c"
}


rtx
gen_sse2_punpckhdq (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V4SImode), (gen_rtx_fmt_ee (VEC_CONCAT, (V8SImode), (operand1), (operand2))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, const_int_rtx[64 + (2)], const_int_rtx[64 + (6)], const_int_rtx[64 + (3)], const_int_rtx[64 + (7)])))))));
# 4164 "insn-emit.c"
}


rtx
gen_sse2_punpckldq (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V4SImode), (gen_rtx_fmt_ee (VEC_CONCAT, (V8SImode), (operand1), (operand2))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, (const_int_rtx[64]), const_int_rtx[64 + (4)], (const_int_rtx[64 +1]), const_int_rtx[64 + (5)])))))));
# 4184 "insn-emit.c"
}


rtx
gen_sse2_punpckhqdq (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V2DImode), (gen_rtx_fmt_ee (VEC_CONCAT, (V4DImode), (operand1), (operand2))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, (const_int_rtx[64 +1]), const_int_rtx[64 + (3)])))))));
# 4202 "insn-emit.c"
}


rtx
gen_sse2_punpcklqdq (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V2DImode), (gen_rtx_fmt_ee (VEC_CONCAT, (V4DImode), (operand1), (operand2))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, (const_int_rtx[64]), const_int_rtx[64 + (2)])))))));
# 4220 "insn-emit.c"
}


rtx
gen_sse2_pextrw (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (ZERO_EXTEND, (SImode), (gen_rtx_fmt_ee (VEC_SELECT, (HImode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, operand2)))))))));







}


rtx
gen_sse2_pshufd_1 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)),
 rtx operand4 __attribute__ ((__unused__)),
 rtx operand5 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V4SImode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, operand2, operand3, operand4, operand5)))))));
# 4257 "insn-emit.c"
}


rtx
gen_sse2_pshuflw_1 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)),
 rtx operand4 __attribute__ ((__unused__)),
 rtx operand5 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V8HImode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (8, operand2, operand3, operand4, operand5, const_int_rtx[64 + (4)], const_int_rtx[64 + (5)], const_int_rtx[64 + (6)], const_int_rtx[64 + (7)])))))));
# 4282 "insn-emit.c"
}


rtx
gen_sse2_pshufhw_1 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)),
 rtx operand4 __attribute__ ((__unused__)),
 rtx operand5 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V8HImode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (8, (const_int_rtx[64]), (const_int_rtx[64 +1]), const_int_rtx[64 + (2)], const_int_rtx[64 + (3)], operand2, operand3, operand4, operand5)))))));
# 4307 "insn-emit.c"
}


rtx
gen_sse2_loadld (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V4SImode), (gen_rtx_fmt_e (VEC_DUPLICATE, (V4SImode), (operand2))), (operand1), ((const_int_rtx[64 +1])))));






}


rtx
gen_sse2_stored (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (SImode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))));






}


rtx
gen_sse2_uavgv16qi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (TRUNCATE, (V16QImode), (gen_rtx_fmt_ee (LSHIFTRT, (V16HImode), (gen_rtx_fmt_ee (PLUS, (V16HImode), (gen_rtx_fmt_ee (PLUS, (V16HImode), (gen_rtx_fmt_e (ZERO_EXTEND, (V16HImode), (operand1))), (gen_rtx_fmt_e (ZERO_EXTEND, (V16HImode), (operand2))))), (gen_rtx_CONST_VECTOR (V16QImode, gen_rtvec (16, (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1])))))), ((const_int_rtx[64 +1])))))));
# 4373 "insn-emit.c"
}


rtx
gen_sse2_uavgv8hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (TRUNCATE, (V8HImode), (gen_rtx_fmt_ee (LSHIFTRT, (V8SImode), (gen_rtx_fmt_ee (PLUS, (V8SImode), (gen_rtx_fmt_ee (PLUS, (V8SImode), (gen_rtx_fmt_e (ZERO_EXTEND, (V8SImode), (operand1))), (gen_rtx_fmt_e (ZERO_EXTEND, (V8SImode), (operand2))))), (gen_rtx_CONST_VECTOR (V8HImode, gen_rtvec (8, (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1])))))), ((const_int_rtx[64 +1])))))));
# 4402 "insn-emit.c"
}


rtx
gen_sse2_psadbw (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (V2DImode), (gen_rtvec (2, operand1, operand2)), (46))));






}


rtx
gen_sse_movmskps (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, operand1)), (32))));





}


rtx
gen_sse2_movmskpd (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, operand1)), (32))));





}


rtx
gen_sse2_pmovmskb (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, operand1)), (32))));





}


rtx
gen_sse_ldmxcsr (rtx operand0 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (VOIDmode), (gen_rtvec (1, operand0)), (3));



}


rtx
gen_sse_stmxcsr (rtx operand0 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (SImode), (gen_rtvec (1, (const_int_rtx[64]))), (4))));





}


rtx
gen_sse2_clflush (rtx operand0 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (VOIDmode), (gen_rtvec (1, operand0)), (6));



}


rtx
gen_sse3_mwait (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (VOIDmode), (gen_rtvec (2, operand0, operand1)), (9));




}


rtx
gen_sse3_monitor (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (VOIDmode), (gen_rtvec (3, operand0, operand1, operand2)), (8));





}


rtx
gen_sse_movntdi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DImode), (gen_rtvec (1, operand1)), (33))));





}


rtx
gen_mmx_addv2sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (V2SFmode), (operand1), (operand2))));




}


rtx
gen_mmx_subv2sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (V2SFmode), (operand1), (operand2))));




}


rtx
gen_mmx_mulv2sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (V2SFmode), (operand1), (operand2))));




}


rtx
gen_mmx_smaxv2sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SMAX, (V2SFmode), (operand1), (operand2))));




}


rtx
gen_mmx_sminv2sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SMIN, (V2SFmode), (operand1), (operand2))));




}


rtx
gen_mmx_rcpv2sf2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (V2SFmode), (gen_rtvec (1, operand1)), (39))));





}


rtx
gen_mmx_rcpit1v2sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (V2SFmode), (gen_rtvec (2, operand1, operand2)), (40))));






}


rtx
gen_mmx_rcpit2v2sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (V2SFmode), (gen_rtvec (2, operand1, operand2)), (41))));






}


rtx
gen_mmx_rsqrtv2sf2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (V2SFmode), (gen_rtvec (1, operand1)), (42))));





}


rtx
gen_mmx_rsqit1v2sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (V2SFmode), (gen_rtvec (2, operand1, operand2)), (43))));






}


rtx
gen_mmx_haddv2sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_CONCAT, (V2SFmode), (gen_rtx_fmt_ee (PLUS, (SFmode), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64 +1]))))))))), (gen_rtx_fmt_ee (PLUS, (SFmode), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand2), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand2), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64 +1]))))))))))));
# 4696 "insn-emit.c"
}


rtx
gen_mmx_hsubv2sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_CONCAT, (V2SFmode), (gen_rtx_fmt_ee (MINUS, (SFmode), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64 +1]))))))))), (gen_rtx_fmt_ee (MINUS, (SFmode), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand2), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))), (gen_rtx_fmt_ee (VEC_SELECT, (SFmode), (operand2), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64 +1]))))))))))));
# 4729 "insn-emit.c"
}


rtx
gen_mmx_addsubv2sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V2SFmode), (gen_rtx_fmt_ee (PLUS, (V2SFmode), (operand1), (operand2))), (gen_rtx_fmt_ee (MINUS, (V2SFmode), (operand1), (operand2))), ((const_int_rtx[64 +1])))));
# 4747 "insn-emit.c"
}


rtx
gen_mmx_gtv2sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (GT, (V2SImode), (operand1), (operand2))));




}


rtx
gen_mmx_gev2sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (GE, (V2SImode), (operand1), (operand2))));




}


rtx
gen_mmx_eqv2sf3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (EQ, (V2SImode), (operand1), (operand2))));




}


rtx
gen_mmx_pf2id (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (V2SImode), (operand1))));



}


rtx
gen_mmx_pf2iw (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (SIGN_EXTEND, (V2SImode), (gen_rtx_fmt_e (SS_TRUNCATE, (V2HImode), (gen_rtx_fmt_e (FIX, (V2SImode), (operand1))))))));





}


rtx
gen_mmx_pi2fw (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT, (V2SFmode), (gen_rtx_fmt_e (SIGN_EXTEND, (V2SImode), (gen_rtx_fmt_e (TRUNCATE, (V2HImode), (operand1))))))));





}


rtx
gen_mmx_floatv2si2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT, (V2SFmode), (operand1))));



}


rtx
gen_mmx_pswapdv2sf2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V2SFmode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, (const_int_rtx[64 +1]), (const_int_rtx[64]))))))));







}


rtx
gen_mmx_addv8qi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (V8QImode), (operand1), (operand2))));




}


rtx
gen_mmx_addv4hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (V4HImode), (operand1), (operand2))));




}


rtx
gen_mmx_addv2si3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (V2SImode), (operand1), (operand2))));




}


rtx
gen_mmx_adddi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DImode), (gen_rtvec (1, gen_rtx_fmt_ee (PLUS, (DImode), (operand1), (operand2)))), (38))));







}


rtx
gen_mmx_ssaddv8qi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SS_PLUS, (V8QImode), (operand1), (operand2))));




}


rtx
gen_mmx_ssaddv4hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SS_PLUS, (V4HImode), (operand1), (operand2))));




}


rtx
gen_mmx_usaddv8qi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (US_PLUS, (V8QImode), (operand1), (operand2))));




}


rtx
gen_mmx_usaddv4hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (US_PLUS, (V4HImode), (operand1), (operand2))));




}


rtx
gen_mmx_subv8qi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (V8QImode), (operand1), (operand2))));




}


rtx
gen_mmx_subv4hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (V4HImode), (operand1), (operand2))));




}


rtx
gen_mmx_subv2si3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (V2SImode), (operand1), (operand2))));




}


rtx
gen_mmx_subdi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DImode), (gen_rtvec (1, gen_rtx_fmt_ee (MINUS, (DImode), (operand1), (operand2)))), (38))));







}


rtx
gen_mmx_sssubv8qi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SS_MINUS, (V8QImode), (operand1), (operand2))));




}


rtx
gen_mmx_sssubv4hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SS_MINUS, (V4HImode), (operand1), (operand2))));




}


rtx
gen_mmx_ussubv8qi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (US_MINUS, (V8QImode), (operand1), (operand2))));




}


rtx
gen_mmx_ussubv4hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (US_MINUS, (V4HImode), (operand1), (operand2))));




}


rtx
gen_mmx_mulv4hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (V4HImode), (operand1), (operand2))));




}


rtx
gen_mmx_smulv4hi3_highpart (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (TRUNCATE, (V4HImode), (gen_rtx_fmt_ee (LSHIFTRT, (V4SImode), (gen_rtx_fmt_ee (MULT, (V4SImode), (gen_rtx_fmt_e (SIGN_EXTEND, (V4SImode), (operand1))), (gen_rtx_fmt_e (SIGN_EXTEND, (V4SImode), (operand2))))), (const_int_rtx[64 + (16)]))))));
# 5094 "insn-emit.c"
}


rtx
gen_mmx_umulv4hi3_highpart (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (TRUNCATE, (V4HImode), (gen_rtx_fmt_ee (LSHIFTRT, (V4SImode), (gen_rtx_fmt_ee (MULT, (V4SImode), (gen_rtx_fmt_e (ZERO_EXTEND, (V4SImode), (operand1))), (gen_rtx_fmt_e (ZERO_EXTEND, (V4SImode), (operand2))))), (const_int_rtx[64 + (16)]))))));
# 5112 "insn-emit.c"
}


rtx
gen_mmx_pmaddwd (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (V2SImode), (gen_rtx_fmt_ee (MULT, (V2SImode), (gen_rtx_fmt_e (SIGN_EXTEND, (V2SImode), (gen_rtx_fmt_ee (VEC_SELECT, (V2HImode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, (const_int_rtx[64]), const_int_rtx[64 + (2)])))))))), (gen_rtx_fmt_e (SIGN_EXTEND, (V2SImode), (gen_rtx_fmt_ee (VEC_SELECT, (V2HImode), (operand2), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, (const_int_rtx[64]), const_int_rtx[64 + (2)])))))))))), (gen_rtx_fmt_ee (MULT, (V2SImode), (gen_rtx_fmt_e (SIGN_EXTEND, (V2SImode), (gen_rtx_fmt_ee (VEC_SELECT, (V2HImode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, (const_int_rtx[64 +1]), const_int_rtx[64 + (3)])))))))), (gen_rtx_fmt_e (SIGN_EXTEND, (V2SImode), (gen_rtx_fmt_ee (VEC_SELECT, (V2HImode), (operand2), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, (const_int_rtx[64 +1]), const_int_rtx[64 + (3)])))))))))))));
# 5153 "insn-emit.c"
}


rtx
gen_mmx_pmulhrwv4hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (TRUNCATE, (V4HImode), (gen_rtx_fmt_ee (LSHIFTRT, (V4SImode), (gen_rtx_fmt_ee (PLUS, (V4SImode), (gen_rtx_fmt_ee (MULT, (V4SImode), (gen_rtx_fmt_e (SIGN_EXTEND, (V4SImode), (operand1))), (gen_rtx_fmt_e (SIGN_EXTEND, (V4SImode), (operand2))))), (gen_rtx_CONST_VECTOR (V4SImode, gen_rtvec (4, gen_rtx_CONST_INT (VOIDmode, (32768L)), gen_rtx_CONST_INT (VOIDmode, (32768L)), gen_rtx_CONST_INT (VOIDmode, (32768L)), gen_rtx_CONST_INT (VOIDmode, (32768L))))))), (const_int_rtx[64 + (16)]))))));
# 5178 "insn-emit.c"
}


rtx
gen_sse2_umulsidi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (DImode), (gen_rtx_fmt_e (ZERO_EXTEND, (DImode), (gen_rtx_fmt_ee (VEC_SELECT, (SImode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))))), (gen_rtx_fmt_e (ZERO_EXTEND, (DImode), (gen_rtx_fmt_ee (VEC_SELECT, (SImode), (operand2), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))))))));
# 5201 "insn-emit.c"
}


rtx
gen_mmx_umaxv8qi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (UMAX, (V8QImode), (operand1), (operand2))));




}


rtx
gen_mmx_smaxv4hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SMAX, (V4HImode), (operand1), (operand2))));




}


rtx
gen_mmx_uminv8qi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (UMIN, (V8QImode), (operand1), (operand2))));




}


rtx
gen_mmx_sminv4hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SMIN, (V4HImode), (operand1), (operand2))));




}


rtx
gen_mmx_ashrv4hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFTRT, (V4HImode), (operand1), (operand2))));




}


rtx
gen_mmx_ashrv2si3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFTRT, (V2SImode), (operand1), (operand2))));




}


rtx
gen_mmx_lshrv4hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (LSHIFTRT, (V4HImode), (operand1), (operand2))));




}


rtx
gen_mmx_lshrv2si3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (LSHIFTRT, (V2SImode), (operand1), (operand2))));




}


rtx
gen_mmx_lshrdi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DImode), (gen_rtvec (1, gen_rtx_fmt_ee (LSHIFTRT, (DImode), (operand1), (operand2)))), (38))));







}


rtx
gen_mmx_ashlv4hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFT, (V4HImode), (operand1), (operand2))));




}


rtx
gen_mmx_ashlv2si3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFT, (V2SImode), (operand1), (operand2))));




}


rtx
gen_mmx_ashldi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DImode), (gen_rtvec (1, gen_rtx_fmt_ee (ASHIFT, (DImode), (operand1), (operand2)))), (38))));







}


rtx
gen_mmx_eqv8qi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (EQ, (V8QImode), (operand1), (operand2))));




}


rtx
gen_mmx_eqv4hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (EQ, (V4HImode), (operand1), (operand2))));




}


rtx
gen_mmx_eqv2si3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (EQ, (V2SImode), (operand1), (operand2))));




}


rtx
gen_mmx_gtv8qi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (GT, (V8QImode), (operand1), (operand2))));




}


rtx
gen_mmx_gtv4hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (GT, (V4HImode), (operand1), (operand2))));




}


rtx
gen_mmx_gtv2si3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (GT, (V2SImode), (operand1), (operand2))));




}


rtx
gen_mmx_andv8qi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (AND, (V8QImode), (operand1), (operand2))));




}


rtx
gen_mmx_andv4hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (AND, (V4HImode), (operand1), (operand2))));




}


rtx
gen_mmx_andv2si3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (AND, (V2SImode), (operand1), (operand2))));




}


rtx
gen_mmx_nandv8qi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (AND, (V8QImode), (gen_rtx_fmt_e (NOT, (V8QImode), (operand1))), (operand2))));





}


rtx
gen_mmx_nandv4hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (AND, (V4HImode), (gen_rtx_fmt_e (NOT, (V4HImode), (operand1))), (operand2))));





}


rtx
gen_mmx_nandv2si3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (AND, (V2SImode), (gen_rtx_fmt_e (NOT, (V2SImode), (operand1))), (operand2))));





}


rtx
gen_mmx_iorv8qi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (IOR, (V8QImode), (operand1), (operand2))));




}


rtx
gen_mmx_iorv4hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (IOR, (V4HImode), (operand1), (operand2))));




}


rtx
gen_mmx_iorv2si3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (IOR, (V2SImode), (operand1), (operand2))));




}


rtx
gen_mmx_xorv8qi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (XOR, (V8QImode), (operand1), (operand2))));




}


rtx
gen_mmx_xorv4hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (XOR, (V4HImode), (operand1), (operand2))));




}


rtx
gen_mmx_xorv2si3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (XOR, (V2SImode), (operand1), (operand2))));




}


rtx
gen_mmx_packsswb (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_CONCAT, (V8QImode), (gen_rtx_fmt_e (SS_TRUNCATE, (V4QImode), (operand1))), (gen_rtx_fmt_e (SS_TRUNCATE, (V4QImode), (operand2))))));






}


rtx
gen_mmx_packssdw (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_CONCAT, (V4HImode), (gen_rtx_fmt_e (SS_TRUNCATE, (V2HImode), (operand1))), (gen_rtx_fmt_e (SS_TRUNCATE, (V2HImode), (operand2))))));






}


rtx
gen_mmx_packuswb (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_CONCAT, (V8QImode), (gen_rtx_fmt_e (US_TRUNCATE, (V4QImode), (operand1))), (gen_rtx_fmt_e (US_TRUNCATE, (V4QImode), (operand2))))));






}


rtx
gen_mmx_punpckhbw (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V8QImode), (gen_rtx_fmt_ee (VEC_CONCAT, (V16QImode), (operand1), (operand2))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (8, const_int_rtx[64 + (4)], const_int_rtx[64 + (12)], const_int_rtx[64 + (5)], const_int_rtx[64 + (13)], const_int_rtx[64 + (6)], const_int_rtx[64 + (14)], const_int_rtx[64 + (7)], const_int_rtx[64 + (15)])))))));
# 5669 "insn-emit.c"
}


rtx
gen_mmx_punpcklbw (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V8QImode), (gen_rtx_fmt_ee (VEC_CONCAT, (V16QImode), (operand1), (operand2))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (8, (const_int_rtx[64]), const_int_rtx[64 + (8)], (const_int_rtx[64 +1]), const_int_rtx[64 + (9)], const_int_rtx[64 + (2)], const_int_rtx[64 + (10)], const_int_rtx[64 + (3)], const_int_rtx[64 + (11)])))))));
# 5693 "insn-emit.c"
}


rtx
gen_mmx_punpckhwd (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V4HImode), (gen_rtx_fmt_ee (VEC_CONCAT, (V8HImode), (operand1), (operand2))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, const_int_rtx[64 + (2)], const_int_rtx[64 + (6)], const_int_rtx[64 + (3)], const_int_rtx[64 + (7)])))))));
# 5713 "insn-emit.c"
}


rtx
gen_mmx_punpcklwd (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V4HImode), (gen_rtx_fmt_ee (VEC_CONCAT, (V8HImode), (operand1), (operand2))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, (const_int_rtx[64]), const_int_rtx[64 + (4)], (const_int_rtx[64 +1]), const_int_rtx[64 + (5)])))))));
# 5733 "insn-emit.c"
}


rtx
gen_mmx_punpckhdq (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V2SImode), (gen_rtx_fmt_ee (VEC_CONCAT, (V4SImode), (operand1), (operand2))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, (const_int_rtx[64 +1]), const_int_rtx[64 + (3)])))))));
# 5751 "insn-emit.c"
}


rtx
gen_mmx_punpckldq (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V2SImode), (gen_rtx_fmt_ee (VEC_CONCAT, (V4SImode), (operand1), (operand2))), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, (const_int_rtx[64]), const_int_rtx[64 + (2)])))))));
# 5769 "insn-emit.c"
}


rtx
gen_mmx_pextrw (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (ZERO_EXTEND, (SImode), (gen_rtx_fmt_ee (VEC_SELECT, (HImode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, operand2)))))))));







}


rtx
gen_mmx_pshufw_1 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)),
 rtx operand4 __attribute__ ((__unused__)),
 rtx operand5 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V4HImode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, operand2, operand3, operand4, operand5)))))));
# 5806 "insn-emit.c"
}


rtx
gen_mmx_pswapdv2si2 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (V2SImode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, (const_int_rtx[64 +1]), (const_int_rtx[64]))))))));







}


rtx
gen_mmx_uavgv8qi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (TRUNCATE, (V8QImode), (gen_rtx_fmt_ee (LSHIFTRT, (V8HImode), (gen_rtx_fmt_ee (PLUS, (V8HImode), (gen_rtx_fmt_ee (PLUS, (V8HImode), (gen_rtx_fmt_e (ZERO_EXTEND, (V8HImode), (operand1))), (gen_rtx_fmt_e (ZERO_EXTEND, (V8HImode), (operand2))))), (gen_rtx_CONST_VECTOR (V8HImode, gen_rtvec (8, (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1])))))), ((const_int_rtx[64 +1])))))));
# 5850 "insn-emit.c"
}


rtx
gen_mmx_uavgv4hi3 (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (TRUNCATE, (V4HImode), (gen_rtx_fmt_ee (LSHIFTRT, (V4SImode), (gen_rtx_fmt_ee (PLUS, (V4SImode), (gen_rtx_fmt_ee (PLUS, (V4SImode), (gen_rtx_fmt_e (ZERO_EXTEND, (V4SImode), (operand1))), (gen_rtx_fmt_e (ZERO_EXTEND, (V4SImode), (operand2))))), (gen_rtx_CONST_VECTOR (V4SImode, gen_rtvec (4, (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1]), (const_int_rtx[64 +1])))))), ((const_int_rtx[64 +1])))))));
# 5875 "insn-emit.c"
}


rtx
gen_mmx_psadbw (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DImode), (gen_rtvec (2, operand1, operand2)), (46))));






}


rtx
gen_mmx_pmovmskb (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, operand1)), (32))));





}


rtx
gen_mmx_emms (void)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (17, gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))), (2)), gen_hard_reg_clobber (XFmode, 8), gen_hard_reg_clobber (XFmode, 9), gen_hard_reg_clobber (XFmode, 10), gen_hard_reg_clobber (XFmode, 11), gen_hard_reg_clobber (XFmode, 12), gen_hard_reg_clobber (XFmode, 13), gen_hard_reg_clobber (XFmode, 14), gen_hard_reg_clobber (XFmode, 15), gen_hard_reg_clobber (DImode, 29), gen_hard_reg_clobber (DImode, 30), gen_hard_reg_clobber (DImode, 31), gen_hard_reg_clobber (DImode, 32), gen_hard_reg_clobber (DImode, 33), gen_hard_reg_clobber (DImode, 34), gen_hard_reg_clobber (DImode, 35), gen_hard_reg_clobber (DImode, 36))));
# 5930 "insn-emit.c"
}


rtx
gen_mmx_femms (void)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (17, gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))), (5)), gen_hard_reg_clobber (XFmode, 8), gen_hard_reg_clobber (XFmode, 9), gen_hard_reg_clobber (XFmode, 10), gen_hard_reg_clobber (XFmode, 11), gen_hard_reg_clobber (XFmode, 12), gen_hard_reg_clobber (XFmode, 13), gen_hard_reg_clobber (XFmode, 14), gen_hard_reg_clobber (XFmode, 15), gen_hard_reg_clobber (DImode, 29), gen_hard_reg_clobber (DImode, 30), gen_hard_reg_clobber (DImode, 31), gen_hard_reg_clobber (DImode, 32), gen_hard_reg_clobber (DImode, 33), gen_hard_reg_clobber (DImode, 34), gen_hard_reg_clobber (DImode, 35), gen_hard_reg_clobber (DImode, 36))));
# 5957 "insn-emit.c"
}


rtx
gen_sync_compare_and_swapqi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (QImode), (gen_rtvec (3, operand1, operand2, operand3)), (10)))), gen_hard_reg_clobber (CCmode, 17))));
# 5979 "insn-emit.c"
}


rtx
gen_sync_compare_and_swaphi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (HImode), (gen_rtvec (3, operand1, operand2, operand3)), (10)))), gen_hard_reg_clobber (CCmode, 17))));
# 6001 "insn-emit.c"
}


rtx
gen_sync_compare_and_swapsi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)),
 rtx operand3 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (SImode), (gen_rtvec (3, operand1, operand2, operand3)), (10)))), gen_hard_reg_clobber (CCmode, 17))));
# 6023 "insn-emit.c"
}


rtx
gen_sync_old_addqi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (QImode), (gen_rtvec (1, operand1)), (12)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_ee (PLUS, (QImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17))));
# 6044 "insn-emit.c"
}


rtx
gen_sync_old_addhi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (HImode), (gen_rtvec (1, operand1)), (12)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_ee (PLUS, (HImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17))));
# 6065 "insn-emit.c"
}


rtx
gen_sync_old_addsi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (SImode), (gen_rtvec (1, operand1)), (12)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_ee (PLUS, (SImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17))));
# 6086 "insn-emit.c"
}


rtx
gen_sync_lock_test_and_setqi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (QImode), (gen_rtvec (1, operand1)), (12)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (operand2)))));
# 6104 "insn-emit.c"
}


rtx
gen_sync_lock_test_and_sethi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (HImode), (gen_rtvec (1, operand1)), (12)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (operand2)))));
# 6122 "insn-emit.c"
}


rtx
gen_sync_lock_test_and_setsi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)),
 rtx operand2 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (SImode), (gen_rtvec (1, operand1)), (12)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (operand2)))));
# 6140 "insn-emit.c"
}


rtx
gen_sync_addqi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (QImode), (gen_rtvec (1, gen_rtx_fmt_ee (PLUS, (QImode), (operand0), (operand1)))), (13)))), gen_hard_reg_clobber (CCmode, 17))));
# 6157 "insn-emit.c"
}


rtx
gen_sync_addhi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (HImode), (gen_rtvec (1, gen_rtx_fmt_ee (PLUS, (HImode), (operand0), (operand1)))), (13)))), gen_hard_reg_clobber (CCmode, 17))));
# 6174 "insn-emit.c"
}


rtx
gen_sync_addsi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (SImode), (gen_rtvec (1, gen_rtx_fmt_ee (PLUS, (SImode), (operand0), (operand1)))), (13)))), gen_hard_reg_clobber (CCmode, 17))));
# 6191 "insn-emit.c"
}


rtx
gen_sync_subqi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (QImode), (gen_rtvec (1, gen_rtx_fmt_ee (MINUS, (QImode), (operand0), (operand1)))), (13)))), gen_hard_reg_clobber (CCmode, 17))));
# 6208 "insn-emit.c"
}


rtx
gen_sync_subhi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (HImode), (gen_rtvec (1, gen_rtx_fmt_ee (MINUS, (HImode), (operand0), (operand1)))), (13)))), gen_hard_reg_clobber (CCmode, 17))));
# 6225 "insn-emit.c"
}


rtx
gen_sync_subsi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (SImode), (gen_rtvec (1, gen_rtx_fmt_ee (MINUS, (SImode), (operand0), (operand1)))), (13)))), gen_hard_reg_clobber (CCmode, 17))));
# 6242 "insn-emit.c"
}


rtx
gen_sync_iorqi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (QImode), (gen_rtvec (1, gen_rtx_fmt_ee (IOR, (QImode), (operand0), (operand1)))), (13)))), gen_hard_reg_clobber (CCmode, 17))));
# 6259 "insn-emit.c"
}


rtx
gen_sync_iorhi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (HImode), (gen_rtvec (1, gen_rtx_fmt_ee (IOR, (HImode), (operand0), (operand1)))), (13)))), gen_hard_reg_clobber (CCmode, 17))));
# 6276 "insn-emit.c"
}


rtx
gen_sync_iorsi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (SImode), (gen_rtvec (1, gen_rtx_fmt_ee (IOR, (SImode), (operand0), (operand1)))), (13)))), gen_hard_reg_clobber (CCmode, 17))));
# 6293 "insn-emit.c"
}


rtx
gen_sync_andqi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (QImode), (gen_rtvec (1, gen_rtx_fmt_ee (AND, (QImode), (operand0), (operand1)))), (13)))), gen_hard_reg_clobber (CCmode, 17))));
# 6310 "insn-emit.c"
}


rtx
gen_sync_andhi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (HImode), (gen_rtvec (1, gen_rtx_fmt_ee (AND, (HImode), (operand0), (operand1)))), (13)))), gen_hard_reg_clobber (CCmode, 17))));
# 6327 "insn-emit.c"
}


rtx
gen_sync_andsi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (SImode), (gen_rtvec (1, gen_rtx_fmt_ee (AND, (SImode), (operand0), (operand1)))), (13)))), gen_hard_reg_clobber (CCmode, 17))));
# 6344 "insn-emit.c"
}


rtx
gen_sync_xorqi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (QImode), (gen_rtvec (1, gen_rtx_fmt_ee (XOR, (QImode), (operand0), (operand1)))), (13)))), gen_hard_reg_clobber (CCmode, 17))));
# 6361 "insn-emit.c"
}


rtx
gen_sync_xorhi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (HImode), (gen_rtvec (1, gen_rtx_fmt_ee (XOR, (HImode), (operand0), (operand1)))), (13)))), gen_hard_reg_clobber (CCmode, 17))));
# 6378 "insn-emit.c"
}


rtx
gen_sync_xorsi (rtx operand0 __attribute__ ((__unused__)),
 rtx operand1 __attribute__ ((__unused__)))
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (SImode), (gen_rtvec (1, gen_rtx_fmt_ee (XOR, (SImode), (operand0), (operand1)))), (13)))), gen_hard_reg_clobber (CCmode, 17))));
# 6395 "insn-emit.c"
}


rtx
gen_cmpdi (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 501 "../.././gcc/config/i386/i386.md"
{
  if (((enum rtx_code) (operands[0])->code) == MEM && ((enum rtx_code) (operands[1])->code) == MEM)
    operands[0] = force_reg (DImode, operands[0]);
  ix86_compare_op0 = operands[0];
  ix86_compare_op1 = operands[1];
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCmode, 17)), (gen_rtx_fmt_ee (COMPARE, (CCmode), (operand0), (operand1)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_cmpsi (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 514 "../.././gcc/config/i386/i386.md"
{
  if (((enum rtx_code) (operands[0])->code) == MEM && ((enum rtx_code) (operands[1])->code) == MEM)
    operands[0] = force_reg (SImode, operands[0]);
  ix86_compare_op0 = operands[0];
  ix86_compare_op1 = operands[1];
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCmode, 17)), (gen_rtx_fmt_ee (COMPARE, (CCmode), (operand0), (operand1)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_cmphi (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 527 "../.././gcc/config/i386/i386.md"
{
  if (((enum rtx_code) (operands[0])->code) == MEM && ((enum rtx_code) (operands[1])->code) == MEM)
    operands[0] = force_reg (HImode, operands[0]);
  ix86_compare_op0 = operands[0];
  ix86_compare_op1 = operands[1];
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCmode, 17)), (gen_rtx_fmt_ee (COMPARE, (CCmode), (operand0), (operand1)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_cmpqi (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 540 "../.././gcc/config/i386/i386.md"
{
  if (((enum rtx_code) (operands[0])->code) == MEM && ((enum rtx_code) (operands[1])->code) == MEM)
    operands[0] = force_reg (QImode, operands[0]);
  ix86_compare_op0 = operands[0];
  ix86_compare_op1 = operands[1];
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCmode, 17)), (gen_rtx_fmt_ee (COMPARE, (CCmode), (operand0), (operand1)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_cmpsi_1 (rtx operand0,
 rtx operand1)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCmode, 17)), (gen_rtx_fmt_ee (COMPARE, (CCmode), (operand0), (operand1))));





}


rtx
gen_cmpqi_ext_3 (rtx operand0,
 rtx operand1)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCmode, 17)), (gen_rtx_fmt_ee (COMPARE, (CCmode), (gen_rtx_SUBREG (QImode, gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand0), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)])), 0)), (operand1))));
# 590 "../.././gcc/config/i386/i386.md"
}


rtx
gen_cmpxf (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 801 "../.././gcc/config/i386/i386.md"
{
  ix86_compare_op0 = operands[0];
  ix86_compare_op1 = operands[1];
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCmode, 17)), (gen_rtx_fmt_ee (COMPARE, (CCmode), (operand0), (operand1)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_cmpdf (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 812 "../.././gcc/config/i386/i386.md"
{
  ix86_compare_op0 = operands[0];
  ix86_compare_op1 = operands[1];
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCmode, 17)), (gen_rtx_fmt_ee (COMPARE, (CCmode), (operand0), (operand1)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_cmpsf (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 823 "../.././gcc/config/i386/i386.md"
{
  ix86_compare_op0 = operands[0];
  ix86_compare_op1 = operands[1];
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCmode, 17)), (gen_rtx_fmt_ee (COMPARE, (CCmode), (operand0), (operand1)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movsi (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 1068 "../.././gcc/config/i386/i386.md"
ix86_expand_move (SImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movhi (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 1270 "../.././gcc/config/i386/i386.md"
ix86_expand_move (HImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movstricthi (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 1399 "../.././gcc/config/i386/i386.md"
{

  if (((enum rtx_code) (operands[0])->code) == MEM && ((enum rtx_code) (operands[1])->code) == MEM)
    operands[1] = force_reg (HImode, operands[1]);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_e (STRICT_LOW_PART, (VOIDmode), (operand0))), (operand1)));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movqi (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 1429 "../.././gcc/config/i386/i386.md"
ix86_expand_move (QImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_reload_outqi (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 1527 "../.././gcc/config/i386/i386.md"
{
  rtx op0, op1, op2;
  op0 = operands[0]; op1 = operands[1]; op2 = operands[2];

  ((void)(!(!reg_overlap_mentioned_p (op2, op0)) ? fancy_abort ("../.././gcc/config/i386/i386.md", 1531, __FUNCTION__), 0 : 0));
  if (! q_regs_operand (op1, QImode))
    {
      emit_insn (gen_movqi (op2, op1));
      op1 = op2;
    }
  emit_insn (gen_movqi (op0, op1));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, operand0, operand1, operand2))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movstrictqi (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 1569 "../.././gcc/config/i386/i386.md"
{

  if (((enum rtx_code) (operands[0])->code) == MEM && ((enum rtx_code) (operands[1])->code) == MEM)
    operands[1] = force_reg (QImode, operands[1]);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_e (STRICT_LOW_PART, (VOIDmode), (operand0))), (operand1)));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movdi (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 1807 "../.././gcc/config/i386/i386.md"
ix86_expand_move (DImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_928 (rtx, rtx *);
rtx
gen_split_928 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 1955 "../.././gcc/config/i386/i386.md"
ix86_split_long_move (operands); return (_val = get_insns (), end_sequence (), _val);
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_929 (rtx, rtx *);
rtx
gen_split_929 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 1965 "../.././gcc/config/i386/i386.md"
ix86_split_long_move (operands); return (_val = get_insns (), end_sequence (), _val);
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movti (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 2112 "../.././gcc/config/i386/i386.md"
{
  if (0)
    ix86_expand_move (TImode, operands);
  else
    ix86_expand_vector_move (TImode, operands);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_931 (rtx, rtx *);
rtx
gen_split_931 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 2212 "../.././gcc/config/i386/i386.md"
ix86_split_long_move (operands); return (_val = get_insns (), end_sequence (), _val);
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movsf (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 2218 "../.././gcc/config/i386/i386.md"
ix86_expand_move (SFmode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_933 (rtx, rtx *);
rtx
gen_split_933 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 2254 "../.././gcc/config/i386/i386.md"
operands[1] = avoid_constant_pool_reference (operands[1]);
  operand0 = operands[0];
  operand1 = operands[1];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_934 (rtx, rtx *);
rtx
gen_split_934 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
  operand0 = operands[0];
  operand1 = operands[1];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 7)), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_REG (SImode, 7)), (const_int_rtx[64 + (-4)])))));






  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_MEM (SFmode, gen_rtx_REG (SImode, 7))), (operand1)));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movdf (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 2380 "../.././gcc/config/i386/i386.md"
ix86_expand_move (DFmode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_936 (rtx, rtx *);
rtx
gen_split_936 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 2418 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 7)), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_REG (SImode, 7)), (const_int_rtx[64 + (-8)])))));






  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_MEM (DFmode, gen_rtx_REG (SImode, 7))), (operand1)));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_937 (rtx, rtx *);
rtx
gen_split_937 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 2433 "../.././gcc/config/i386/i386.md"
ix86_split_long_move (operands); return (_val = get_insns (), end_sequence (), _val);
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_938 (rtx, rtx *);
rtx
gen_split_938 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 2692 "../.././gcc/config/i386/i386.md"
ix86_split_long_move (operands); return (_val = get_insns (), end_sequence (), _val);
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movxf (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 2713 "../.././gcc/config/i386/i386.md"
ix86_expand_move (XFmode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_940 (rtx, rtx *);
rtx
gen_split_940 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 2754 "../.././gcc/config/i386/i386.md"
ix86_split_long_move (operands); return (_val = get_insns (), end_sequence (), _val);
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_941 (rtx, rtx *);
rtx
gen_split_941 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 2762 "../.././gcc/config/i386/i386.md"
operands[2] = gen_rtx_CONST_INT (VOIDmode, (((target_flags & (1 << 0)) != 0) ? -16 : -12));
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 7)), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_REG (SImode, 7)), (operand2)))));






  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_MEM (XFmode, gen_rtx_REG (SImode, 7))), (operand1)));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_942 (rtx, rtx *);
rtx
gen_split_942 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 2855 "../.././gcc/config/i386/i386.md"
ix86_split_long_move (operands); return (_val = get_insns (), end_sequence (), _val);
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_943 (rtx, rtx *);
rtx
gen_split_943 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 2866 "../.././gcc/config/i386/i386.md"
{
  rtx c = avoid_constant_pool_reference (operands[1]);
  rtx r = operands[0];

  if (((enum rtx_code) (r)->code) == SUBREG)
    r = (((r)->u.fld[0]).rt_rtx);

  if (((((enum rtx_code) (r)->code) == REG) && ((((((r)->u.fld[0]).rt_uint)) >= (20 + 1) && ((((r)->u.fld[0]).rt_uint)) <= ((20 + 1) + 7)) || (((((r)->u.fld[0]).rt_uint)) >= (((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) && ((((r)->u.fld[0]).rt_uint)) <= ((((((((20 + 1) + 7) + 1) + 7) + 1) + 7) + 1) + 7)))))
    {
      if (!standard_sse_constant_p (c))
 return (end_sequence (), _val);
    }
  else if (((((enum rtx_code) (r)->code) == REG) && (((((r)->u.fld[0]).rt_uint)) >= 8 && ((((r)->u.fld[0]).rt_uint)) <= (8 + 7))))
    {
      if (!standard_80387_constant_p (c))
 return (end_sequence (), _val);
    }
  else if (((((enum rtx_code) (r)->code) == REG) && (((((r)->u.fld[0]).rt_uint)) >= (((20 + 1) + 7) + 1) && ((((r)->u.fld[0]).rt_uint)) <= ((((20 + 1) + 7) + 1) + 7))))
    return (end_sequence (), _val);

  operands[1] = c;
}
  operand0 = operands[0];
  operand1 = operands[1];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_944 (rtx, rtx *);
rtx
gen_split_944 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 2963 "../.././gcc/config/i386/i386.md"
ix86_split_long_move (operands); return (_val = get_insns (), end_sequence (), _val);
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_zero_extendhisi2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 2971 "../.././gcc/config/i386/i386.md"
{
  if ((x86_zero_extend_with_and & (1 << ix86_tune)) && !optimize_size)
    {
      operands[1] = force_reg (HImode, operands[1]);
      emit_insn (gen_zero_extendhisi2_and (operands[0], operands[1]));
      return (_val = get_insns (), end_sequence (), _val);
    }
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (ZERO_EXTEND, (SImode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_946 (rtx, rtx *);
rtx
gen_split_946 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx _val = 0;
  start_sequence ();
# 2996 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (AND, (SImode), (copy_rtx (operand0)), (gen_rtx_CONST_INT (VOIDmode, (65535L)))))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_zero_extendqihi2 (rtx operand0,
 rtx operand1)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (ZERO_EXTEND, (HImode), (operand1)))), gen_hard_reg_clobber (CCmode, 17))));






}


extern rtx gen_split_948 (rtx, rtx *);
rtx
gen_split_948 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
  operand0 = operands[0];
  operand1 = operands[1];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (ZERO_EXTEND, (HImode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_949 (rtx, rtx *);
rtx
gen_split_949 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 3063 "../.././gcc/config/i386/i386.md"
operands[2] = rtl_hooks.gen_lowpart (QImode, operands[0]);
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), ((const_int_rtx[64]))));


  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_e (STRICT_LOW_PART, (VOIDmode), (operand2))), (operand1)));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_950 (rtx, rtx *);
rtx
gen_split_950 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx _val = 0;
  start_sequence ();
# 3074 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (AND, (HImode), (copy_rtx (operand0)), (gen_rtx_CONST_INT (VOIDmode, (255L)))))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_zero_extendqisi2 (rtx operand0,
 rtx operand1)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (ZERO_EXTEND, (SImode), (operand1)))), gen_hard_reg_clobber (CCmode, 17))));






}


extern rtx gen_split_952 (rtx, rtx *);
rtx
gen_split_952 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
  operand0 = operands[0];
  operand1 = operands[1];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (ZERO_EXTEND, (SImode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_953 (rtx, rtx *);
rtx
gen_split_953 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 3134 "../.././gcc/config/i386/i386.md"
operands[2] = rtl_hooks.gen_lowpart (QImode, operands[0]);
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), ((const_int_rtx[64]))));


  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_e (STRICT_LOW_PART, (VOIDmode), (operand2))), (operand1)));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_954 (rtx, rtx *);
rtx
gen_split_954 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx _val = 0;
  start_sequence ();
# 3145 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (AND, (SImode), (copy_rtx (operand0)), (gen_rtx_CONST_INT (VOIDmode, (255L)))))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_zero_extendsidi2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 3152 "../.././gcc/config/i386/i386.md"
if (!0)
     {
       emit_insn (gen_zero_extendsidi2_32 (operands[0], operands[1]));
       return (_val = get_insns (), end_sequence (), _val);
     }

    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (ZERO_EXTEND, (DImode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_956 (rtx, rtx *);
rtx
gen_split_956 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx _val = 0;
  start_sequence ();
# 3199 "../.././gcc/config/i386/i386.md"
split_di (&operands[0], 1, &operands[3], &operands[4]);
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), ((const_int_rtx[64]))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_957 (rtx, rtx *);
rtx
gen_split_957 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx _val = 0;
  start_sequence ();
# 3209 "../.././gcc/config/i386/i386.md"
split_di (&operands[0], 1, &operands[3], &operands[4]);
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (operand1)));


  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), ((const_int_rtx[64]))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_extendsidi2 (rtx operand0,
 rtx operand1)
{
  rtx operand2 __attribute__ ((__unused__));
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
# 3235 "../.././gcc/config/i386/i386.md"
{
  if (0)
    {
      emit_insn (gen_extendsidi2_rex64 (operands[0], operands[1]));
      return (_val = get_insns (), end_sequence (), _val);
    }
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (SIGN_EXTEND, (DImode), (operand1)))), gen_hard_reg_clobber (CCmode, 17), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (SImode))))))));
# 3255 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_959 (rtx, rtx *);
rtx
gen_split_959 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx _val = 0;
  start_sequence ();
# 3292 "../.././gcc/config/i386/i386.md"
split_di (&operands[0], 1, &operands[3], &operands[4]);
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (operand1)));


  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (copy_rtx (operand1)), (gen_rtx_fmt_ee (ASHIFTRT, (SImode), (copy_rtx (operand1)), (const_int_rtx[64 + (31)])))), gen_hard_reg_clobber (CCmode, 17)))));







  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (copy_rtx (operand1))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_960 (rtx, rtx *);
rtx
gen_split_960 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 3302 "../.././gcc/config/i386/i386.md"
{
  split_di (&operands[0], 1, &operands[3], &operands[4]);

  emit_move_insn (operands[3], operands[1]);


  if (true_regnum (operands[1]) == 0
      && true_regnum (operands[2]) == 1
      && (optimize_size || (x86_use_cltd & (1 << ix86_tune))))
    {
      emit_insn (gen_ashrsi3_31 (operands[2], operands[1], gen_rtx_CONST_INT (VOIDmode, (31))));
    }
  else
    {
      emit_move_insn (operands[2], operands[1]);
      emit_insn (gen_ashrsi3_31 (operands[2], operands[2], gen_rtx_CONST_INT (VOIDmode, (31))));
    }
  emit_move_insn (operands[4], operands[2]);
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_961 (rtx, rtx *);
rtx
gen_split_961 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 3332 "../.././gcc/config/i386/i386.md"
{
  split_di (&operands[0], 1, &operands[3], &operands[4]);

  if (true_regnum (operands[3]) != true_regnum (operands[1]))
    emit_move_insn (operands[3], operands[1]);


  if (true_regnum (operands[3]) == 0
      && (optimize_size || (x86_use_cltd & (1 << ix86_tune))))
    {
      emit_insn (gen_ashrsi3_31 (operands[4], operands[3], gen_rtx_CONST_INT (VOIDmode, (31))));
      return (_val = get_insns (), end_sequence (), _val);
    }

  if (true_regnum (operands[4]) != true_regnum (operands[1]))
    emit_move_insn (operands[4], operands[1]);

  emit_insn (gen_ashrsi3_31 (operands[4], operands[4], gen_rtx_CONST_INT (VOIDmode, (31))));
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_962 (rtx, rtx *);
rtx
gen_split_962 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
  operand0 = operands[0];
  operand1 = operands[1];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 7)), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_REG (SImode, 7)), (const_int_rtx[64 + (-8)])))));






  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_MEM (DFmode, gen_rtx_REG (SImode, 7))), (gen_rtx_fmt_e (FLOAT_EXTEND, (DFmode), (operand1)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_963 (rtx, rtx *);
rtx
gen_split_963 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 3487 "../.././gcc/config/i386/i386.md"
operands[2] = gen_rtx_CONST_INT (VOIDmode, (((target_flags & (1 << 0)) != 0) ? -16 : -12));
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 7)), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_REG (SImode, 7)), (operand2)))));






  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_MEM (XFmode, gen_rtx_REG (SImode, 7))), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_964 (rtx, rtx *);
rtx
gen_split_964 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 3503 "../.././gcc/config/i386/i386.md"
operands[2] = gen_rtx_CONST_INT (VOIDmode, (((target_flags & (1 << 0)) != 0) ? -16 : -12));
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 7)), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_REG (SImode, 7)), (operand2)))));






  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_MEM (DFmode, gen_rtx_REG (SImode, 7))), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_extendsfdf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 3517 "../.././gcc/config/i386/i386.md"
{


  if (((enum rtx_code) (operands[1])->code) == CONST_DOUBLE)
    operands[1] = validize_mem (force_const_mem (SFmode, operands[1]));
  if (((enum rtx_code) (operands[0])->code) == MEM && ((enum rtx_code) (operands[1])->code) == MEM)
    operands[1] = force_reg (SFmode, operands[1]);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_EXTEND, (DFmode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_extendsfxf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 3590 "../.././gcc/config/i386/i386.md"
{


  if (((enum rtx_code) (operands[1])->code) == CONST_DOUBLE)
    operands[1] = validize_mem (force_const_mem (SFmode, operands[1]));
  if (((enum rtx_code) (operands[0])->code) == MEM && ((enum rtx_code) (operands[1])->code) == MEM)
    operands[1] = force_reg (SFmode, operands[1]);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_extenddfxf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 3629 "../.././gcc/config/i386/i386.md"
{


  if (((enum rtx_code) (operands[1])->code) == CONST_DOUBLE)
    operands[1] = validize_mem (force_const_mem (DFmode, operands[1]));
  if (((enum rtx_code) (operands[0])->code) == MEM && ((enum rtx_code) (operands[1])->code) == MEM)
    operands[1] = force_reg (DFmode, operands[1]);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_truncdfsf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 3677 "../.././gcc/config/i386/i386.md"
{
  if ((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))
    operands[1] = force_reg (DFmode, operands[1]);

  if (((target_flags & (1 << 18)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0) && !((ix86_fpmath & FPMATH_SSE) && (ix86_fpmath & FPMATH_387)))
    ;
  else if (flag_unsafe_math_optimizations)
    ;
  else
    {
      rtx temp = assign_386_stack_local (SFmode, SLOT_TEMP);
      emit_insn (gen_truncdfsf2_with_temp (operands[0], operands[1], temp));
      return (_val = get_insns (), end_sequence (), _val);
    }
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (SFmode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_truncdfsf2_with_temp (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (SFmode), (operand1)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand2)))));







}


extern rtx gen_split_970 (rtx, rtx *);
rtx
gen_split_970 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 3817 "../.././gcc/config/i386/i386.md"
{
  operands[1] = gen_rtx_REG (SFmode, true_regnum (operands[1]));
}
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (operand1)));


  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand2))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_truncxfsf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
# 3829 "../.././gcc/config/i386/i386.md"
{
  if (flag_unsafe_math_optimizations)
    {
      rtx reg = (((enum rtx_code) (operands[0])->code) == REG) ? operands[0] : gen_reg_rtx (SFmode);
      emit_insn (gen_truncxfsf2_i387_noop (reg, operands[1]));
      if (reg != operands[0])
 emit_move_insn (operands[0], reg);
      return (_val = get_insns (), end_sequence (), _val);
    }
  else
    operands[2] = assign_386_stack_local (SFmode, SLOT_TEMP);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (SFmode), (operand1)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand2))))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_972 (rtx, rtx *);
rtx
gen_split_972 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 3908 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (SFmode), (operand1)))));



  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand2))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_973 (rtx, rtx *);
rtx
gen_split_973 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 3917 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (SFmode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_truncxfdf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
# 3927 "../.././gcc/config/i386/i386.md"
{
  if (flag_unsafe_math_optimizations)
    {
      rtx reg = (((enum rtx_code) (operands[0])->code) == REG) ? operands[0] : gen_reg_rtx (DFmode);
      emit_insn (gen_truncxfdf2_i387_noop (reg, operands[1]));
      if (reg != operands[0])
 emit_move_insn (operands[0], reg);
      return (_val = get_insns (), end_sequence (), _val);
    }
  else
    operands[2] = assign_386_stack_local (DFmode, SLOT_TEMP);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (DFmode), (operand1)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand2))))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_975 (rtx, rtx *);
rtx
gen_split_975 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 4006 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (DFmode), (operand1)))));



  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand2))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_976 (rtx, rtx *);
rtx
gen_split_976 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 4015 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (DFmode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_fix_truncxfdi2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 4024 "../.././gcc/config/i386/i386.md"
{
  if ((((x86_fisttp & (1 << ix86_arch)) || ((target_flags & (1 << 19)) != 0)) && ((target_flags & (1 << 3)) != 0)))
   {
     emit_insn (gen_fix_truncdi_fisttp_i387_1 (operands[0], operands[1]));
     return (_val = get_insns (), end_sequence (), _val);
   }
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (DImode), (operand1)))), gen_hard_reg_clobber (CCmode, 17)))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_fix_truncsfdi2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 4037 "../.././gcc/config/i386/i386.md"
{
  if ((((x86_fisttp & (1 << ix86_arch)) || ((target_flags & (1 << 19)) != 0)) && ((target_flags & (1 << 3)) != 0))
      && !(0 && ((((target_flags & (1 << 17)) != 0) && (SFmode) == SFmode) || (((target_flags & (1 << 18)) != 0) && (SFmode) == DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
   {
     emit_insn (gen_fix_truncdi_fisttp_i387_1 (operands[0], operands[1]));
     return (_val = get_insns (), end_sequence (), _val);
   }
  if (0 && ((((target_flags & (1 << 17)) != 0) && (SFmode) == SFmode) || (((target_flags & (1 << 18)) != 0) && (SFmode) == DFmode)))
   {
     rtx out = (((enum rtx_code) (operands[0])->code) == REG) ? operands[0] : gen_reg_rtx (DImode);
     emit_insn (gen_fix_truncsfdi_sse (out, operands[1]));
     if (out != operands[0])
 emit_move_insn (operands[0], out);
     return (_val = get_insns (), end_sequence (), _val);
   }
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (DImode), (operand1)))), gen_hard_reg_clobber (CCmode, 17)))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_fix_truncdfdi2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 4037 "../.././gcc/config/i386/i386.md"
{
  if ((((x86_fisttp & (1 << ix86_arch)) || ((target_flags & (1 << 19)) != 0)) && ((target_flags & (1 << 3)) != 0))
      && !(0 && ((((target_flags & (1 << 17)) != 0) && (DFmode) == SFmode) || (((target_flags & (1 << 18)) != 0) && (DFmode) == DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
   {
     emit_insn (gen_fix_truncdi_fisttp_i387_1 (operands[0], operands[1]));
     return (_val = get_insns (), end_sequence (), _val);
   }
  if (0 && ((((target_flags & (1 << 17)) != 0) && (DFmode) == SFmode) || (((target_flags & (1 << 18)) != 0) && (DFmode) == DFmode)))
   {
     rtx out = (((enum rtx_code) (operands[0])->code) == REG) ? operands[0] : gen_reg_rtx (DImode);
     emit_insn (gen_fix_truncdfdi_sse (out, operands[1]));
     if (out != operands[0])
 emit_move_insn (operands[0], out);
     return (_val = get_insns (), end_sequence (), _val);
   }
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (DImode), (operand1)))), gen_hard_reg_clobber (CCmode, 17)))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_fix_truncxfsi2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 4061 "../.././gcc/config/i386/i386.md"
{
  if ((((x86_fisttp & (1 << ix86_arch)) || ((target_flags & (1 << 19)) != 0)) && ((target_flags & (1 << 3)) != 0)))
   {
     emit_insn (gen_fix_truncsi_fisttp_i387_1 (operands[0], operands[1]));
     return (_val = get_insns (), end_sequence (), _val);
   }
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (SImode), (operand1)))), gen_hard_reg_clobber (CCmode, 17)))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_fix_truncsfsi2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 4074 "../.././gcc/config/i386/i386.md"
{
  if ((((x86_fisttp & (1 << ix86_arch)) || ((target_flags & (1 << 19)) != 0)) && ((target_flags & (1 << 3)) != 0))
      && !(((((target_flags & (1 << 17)) != 0) && (SFmode) == SFmode) || (((target_flags & (1 << 18)) != 0) && (SFmode) == DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
   {
     emit_insn (gen_fix_truncsi_fisttp_i387_1 (operands[0], operands[1]));
     return (_val = get_insns (), end_sequence (), _val);
   }
  if (((((target_flags & (1 << 17)) != 0) && (SFmode) == SFmode) || (((target_flags & (1 << 18)) != 0) && (SFmode) == DFmode)))
   {
     rtx out = (((enum rtx_code) (operands[0])->code) == REG) ? operands[0] : gen_reg_rtx (SImode);
     emit_insn (gen_fix_truncsfsi_sse (out, operands[1]));
     if (out != operands[0])
 emit_move_insn (operands[0], out);
     return (_val = get_insns (), end_sequence (), _val);
   }
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (SImode), (operand1)))), gen_hard_reg_clobber (CCmode, 17)))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_fix_truncdfsi2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 4074 "../.././gcc/config/i386/i386.md"
{
  if ((((x86_fisttp & (1 << ix86_arch)) || ((target_flags & (1 << 19)) != 0)) && ((target_flags & (1 << 3)) != 0))
      && !(((((target_flags & (1 << 17)) != 0) && (DFmode) == SFmode) || (((target_flags & (1 << 18)) != 0) && (DFmode) == DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
   {
     emit_insn (gen_fix_truncsi_fisttp_i387_1 (operands[0], operands[1]));
     return (_val = get_insns (), end_sequence (), _val);
   }
  if (((((target_flags & (1 << 17)) != 0) && (DFmode) == SFmode) || (((target_flags & (1 << 18)) != 0) && (DFmode) == DFmode)))
   {
     rtx out = (((enum rtx_code) (operands[0])->code) == REG) ? operands[0] : gen_reg_rtx (SImode);
     emit_insn (gen_fix_truncdfsi_sse (out, operands[1]));
     if (out != operands[0])
 emit_move_insn (operands[0], out);
     return (_val = get_insns (), end_sequence (), _val);
   }
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (SImode), (operand1)))), gen_hard_reg_clobber (CCmode, 17)))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_fix_truncsfhi2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 4099 "../.././gcc/config/i386/i386.md"
{
  if ((((x86_fisttp & (1 << ix86_arch)) || ((target_flags & (1 << 19)) != 0)) && ((target_flags & (1 << 3)) != 0)))
   {
     emit_insn (gen_fix_trunchi_fisttp_i387_1 (operands[0], operands[1]));
     return (_val = get_insns (), end_sequence (), _val);
   }
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (HImode), (operand1)))), gen_hard_reg_clobber (CCmode, 17)))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_fix_truncdfhi2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 4099 "../.././gcc/config/i386/i386.md"
{
  if ((((x86_fisttp & (1 << ix86_arch)) || ((target_flags & (1 << 19)) != 0)) && ((target_flags & (1 << 3)) != 0)))
   {
     emit_insn (gen_fix_trunchi_fisttp_i387_1 (operands[0], operands[1]));
     return (_val = get_insns (), end_sequence (), _val);
   }
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (HImode), (operand1)))), gen_hard_reg_clobber (CCmode, 17)))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_fix_truncxfhi2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 4099 "../.././gcc/config/i386/i386.md"
{
  if ((((x86_fisttp & (1 << ix86_arch)) || ((target_flags & (1 << 19)) != 0)) && ((target_flags & (1 << 3)) != 0)))
   {
     emit_insn (gen_fix_trunchi_fisttp_i387_1 (operands[0], operands[1]));
     return (_val = get_insns (), end_sequence (), _val);
   }
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (HImode), (operand1)))), gen_hard_reg_clobber (CCmode, 17)))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_986 (rtx, rtx *);
rtx
gen_peephole2_986 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[2] = peep2_find_free_register (0, 0, "Y", DFmode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 4152 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (operand1)));


  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (SImode), (copy_rtx (operand2))))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_987 (rtx, rtx *);
rtx
gen_peephole2_987 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[2] = peep2_find_free_register (0, 0, "Y", DFmode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 4152 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (operand1)));


  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (DImode), (copy_rtx (operand2))))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_988 (rtx, rtx *);
rtx
gen_peephole2_988 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[2] = peep2_find_free_register (0, 0, "x", SFmode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 4161 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (operand1)));


  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (SImode), (copy_rtx (operand2))))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_989 (rtx, rtx *);
rtx
gen_peephole2_989 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[2] = peep2_find_free_register (0, 0, "x", SFmode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 4161 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (operand1)));


  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (DImode), (copy_rtx (operand2))))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_990 (rtx, rtx *);
rtx
gen_split_990 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 4175 "../.././gcc/config/i386/i386.md"
{
  if (memory_operand (operands[0], VOIDmode))
    emit_insn (gen_fix_trunchi_i387_fisttp (operands[0], operands[1]));
  else
    {
      operands[2] = assign_386_stack_local (HImode, SLOT_TEMP);
      emit_insn (gen_fix_trunchi_i387_fisttp_with_temp (operands[0],
           operands[1],
           operands[2]));
    }
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_991 (rtx, rtx *);
rtx
gen_split_991 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 4175 "../.././gcc/config/i386/i386.md"
{
  if (memory_operand (operands[0], VOIDmode))
    emit_insn (gen_fix_truncsi_i387_fisttp (operands[0], operands[1]));
  else
    {
      operands[2] = assign_386_stack_local (SImode, SLOT_TEMP);
      emit_insn (gen_fix_truncsi_i387_fisttp_with_temp (operands[0],
           operands[1],
           operands[2]));
    }
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_992 (rtx, rtx *);
rtx
gen_split_992 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 4175 "../.././gcc/config/i386/i386.md"
{
  if (memory_operand (operands[0], VOIDmode))
    emit_insn (gen_fix_truncdi_i387_fisttp (operands[0], operands[1]));
  else
    {
      operands[2] = assign_386_stack_local (DImode, SLOT_TEMP);
      emit_insn (gen_fix_truncdi_i387_fisttp_with_temp (operands[0],
           operands[1],
           operands[2]));
    }
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_993 (rtx, rtx *);
rtx
gen_split_993 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 4226 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FIX, (HImode), (operand1)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand3))))));







  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand2))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_994 (rtx, rtx *);
rtx
gen_split_994 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 4226 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FIX, (SImode), (operand1)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand3))))));







  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand2))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_995 (rtx, rtx *);
rtx
gen_split_995 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 4226 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FIX, (DImode), (operand1)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand3))))));







  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand2))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_996 (rtx, rtx *);
rtx
gen_split_996 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 4236 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (HImode), (operand1)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand3))))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_997 (rtx, rtx *);
rtx
gen_split_997 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 4236 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (SImode), (operand1)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand3))))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_998 (rtx, rtx *);
rtx
gen_split_998 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 4236 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (DImode), (operand1)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand3))))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_999 (rtx, rtx *);
rtx
gen_split_999 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 4255 "../.././gcc/config/i386/i386.md"
{
  (cfun->machine->optimize_mode_switching)[I387_TRUNC] = 1;

  operands[2] = assign_386_stack_local (HImode, SLOT_CW_STORED);
  operands[3] = assign_386_stack_local (HImode, SLOT_CW_TRUNC);
  if (memory_operand (operands[0], VOIDmode))
    emit_insn (gen_fix_trunchi_i387 (operands[0], operands[1],
      operands[2], operands[3]));
  else
    {
      operands[4] = assign_386_stack_local (HImode, SLOT_TEMP);
      emit_insn (gen_fix_trunchi_i387_with_temp (operands[0], operands[1],
           operands[2], operands[3],
           operands[4]));
    }
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1000 (rtx, rtx *);
rtx
gen_split_1000 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 4255 "../.././gcc/config/i386/i386.md"
{
  (cfun->machine->optimize_mode_switching)[I387_TRUNC] = 1;

  operands[2] = assign_386_stack_local (HImode, SLOT_CW_STORED);
  operands[3] = assign_386_stack_local (HImode, SLOT_CW_TRUNC);
  if (memory_operand (operands[0], VOIDmode))
    emit_insn (gen_fix_truncsi_i387 (operands[0], operands[1],
      operands[2], operands[3]));
  else
    {
      operands[4] = assign_386_stack_local (SImode, SLOT_TEMP);
      emit_insn (gen_fix_truncsi_i387_with_temp (operands[0], operands[1],
           operands[2], operands[3],
           operands[4]));
    }
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1001 (rtx, rtx *);
rtx
gen_split_1001 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 4255 "../.././gcc/config/i386/i386.md"
{
  (cfun->machine->optimize_mode_switching)[I387_TRUNC] = 1;

  operands[2] = assign_386_stack_local (HImode, SLOT_CW_STORED);
  operands[3] = assign_386_stack_local (HImode, SLOT_CW_TRUNC);
  if (memory_operand (operands[0], VOIDmode))
    emit_insn (gen_fix_truncdi_i387 (operands[0], operands[1],
      operands[2], operands[3]));
  else
    {
      operands[4] = assign_386_stack_local (DImode, SLOT_TEMP);
      emit_insn (gen_fix_truncdi_i387_with_temp (operands[0], operands[1],
           operands[2], operands[3],
           operands[4]));
    }
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1002 (rtx, rtx *);
rtx
gen_split_1002 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx _val = 0;
  start_sequence ();
# 4318 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  operand5 = operands[5];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_e (FIX, (DImode), (operand1)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand5))))));
# 4337 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand4))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1003 (rtx, rtx *);
rtx
gen_split_1003 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx _val = 0;
  start_sequence ();
# 4332 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  operand5 = operands[5];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (DImode), (operand1)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand5))))));
# 4351 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1004 (rtx, rtx *);
rtx
gen_split_1004 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx _val = 0;
  start_sequence ();
# 4372 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_e (FIX, (HImode), (operand1)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3))))));
# 4388 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand4))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1005 (rtx, rtx *);
rtx
gen_split_1005 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx _val = 0;
  start_sequence ();
# 4372 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_e (FIX, (SImode), (operand1)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3))))));
# 4388 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand4))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1006 (rtx, rtx *);
rtx
gen_split_1006 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 4384 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (HImode), (operand1)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3))))));
# 4399 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1007 (rtx, rtx *);
rtx
gen_split_1007 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 4384 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (SImode), (operand1)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3))))));
# 4399 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_floathisf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 4414 "../.././gcc/config/i386/i386.md"
{
  if (((ix86_fpmath & FPMATH_SSE) != 0))
    {
      emit_insn (gen_floatsisf2 (operands[0],
     convert_to_mode (SImode, operands[1], 0)));
      return (_val = get_insns (), end_sequence (), _val);
    }
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT, (SFmode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_floatsisf2 (rtx operand0,
 rtx operand1)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT, (SFmode), (operand1))));



}


rtx
gen_floatdisf2 (rtx operand0,
 rtx operand1)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT, (SFmode), (operand1))));



}


rtx
gen_floathidf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 4525 "../.././gcc/config/i386/i386.md"
{
  if (((target_flags & (1 << 18)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0))
    {
      emit_insn (gen_floatsidf2 (operands[0],
     convert_to_mode (SImode, operands[1], 0)));
      return (_val = get_insns (), end_sequence (), _val);
    }
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT, (DFmode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_floatsidf2 (rtx operand0,
 rtx operand1)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT, (DFmode), (operand1))));



}


rtx
gen_floatdidf2 (rtx operand0,
 rtx operand1)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT, (DFmode), (operand1))));



}


extern rtx gen_split_1014 (rtx, rtx *);
rtx
gen_split_1014 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 4676 "../.././gcc/config/i386/i386.md"
{
  operands[2] = ix86_force_to_memory (((enum machine_mode) (operands[1])->mode), operands[1]);
  operands[2] = gen_rtx_fmt_e (FLOAT, (((enum machine_mode) (operands[0])->mode)), (operands[2]));
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operands[0]), (operands[2])));
  ix86_free_from_memory (((enum machine_mode) (operands[1])->mode));
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_floatunssisf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 4688 "../.././gcc/config/i386/i386.md"
x86_emit_floatuns (operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_adddi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 4754 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (PLUS, DImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (DImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1017 (rtx, rtx *);
rtx
gen_split_1017 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx _val = 0;
  start_sequence ();
# 4778 "../.././gcc/config/i386/i386.md"
split_di (operands+0, 1, operands+0, operands+3);
   split_di (operands+1, 1, operands+1, operands+4);
   split_di (operands+2, 1, operands+2, operands+5);
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  operand5 = operands[5];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCmode, 17)), (gen_rtx_fmt_Ei (UNSPEC, (CCmode), (gen_rtvec (2, operand1, operand2)), (24)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (SImode), (copy_rtx (operand1)), (copy_rtx (operand2)))))))));
# 4802 "../.././gcc/config/i386/i386.md"
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_fmt_ee (LTU, (SImode), (gen_rtx_REG (CCmode, 17)), ((const_int_rtx[64])))), (operand4))), (operand5)))), gen_hard_reg_clobber (CCmode, 17)))));
# 4815 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_addsi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 4885 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (PLUS, SImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (SImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1019 (rtx, rtx *);
rtx
gen_split_1019 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 4938 "../.././gcc/config/i386/i386.md"
{
  rtx pat;
  operands[0] = rtl_hooks.gen_lowpart (SImode, operands[0]);
  operands[1] = rtl_hooks.gen_lowpart ((0 ? DImode : SImode), operands[1]);
  operands[2] = rtl_hooks.gen_lowpart ((0 ? DImode : SImode), operands[2]);
  operands[3] = rtl_hooks.gen_lowpart ((0 ? DImode : SImode), operands[3]);
  pat = gen_rtx_fmt_ee (PLUS, ((0 ? DImode : SImode)), (gen_rtx_fmt_ee (PLUS, ((0 ? DImode : SImode)), (operands[1]), (operands[2]))), (operands[3]));

  if ((0 ? DImode : SImode) != SImode)
    pat = gen_rtx_SUBREG (SImode, pat, 0);
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operands[0]), (pat)));
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1020 (rtx, rtx *);
rtx
gen_split_1020 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 4989 "../.././gcc/config/i386/i386.md"
{
  rtx pat;
  operands[0] = rtl_hooks.gen_lowpart (SImode, operands[0]);
  operands[1] = rtl_hooks.gen_lowpart ((0 ? DImode : SImode), operands[1]);
  operands[3] = rtl_hooks.gen_lowpart ((0 ? DImode : SImode), operands[3]);
  pat = gen_rtx_fmt_ee (PLUS, ((0 ? DImode : SImode)), (gen_rtx_fmt_ee (MULT, ((0 ? DImode : SImode)), (operands[1]), (operands[2]))), (operands[3]));

  if ((0 ? DImode : SImode) != SImode)
    pat = gen_rtx_SUBREG (SImode, pat, 0);
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operands[0]), (pat)));
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1021 (rtx, rtx *);
rtx
gen_split_1021 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 5038 "../.././gcc/config/i386/i386.md"
{
  rtx pat;
  operands[0] = rtl_hooks.gen_lowpart (SImode, operands[0]);
  operands[1] = rtl_hooks.gen_lowpart ((0 ? DImode : SImode), operands[1]);
  operands[3] = rtl_hooks.gen_lowpart ((0 ? DImode : SImode), operands[3]);
  operands[4] = rtl_hooks.gen_lowpart ((0 ? DImode : SImode), operands[4]);
  pat = gen_rtx_fmt_ee (PLUS, ((0 ? DImode : SImode)), (gen_rtx_fmt_ee (PLUS, ((0 ? DImode : SImode)), (gen_rtx_fmt_ee (MULT, ((0 ? DImode : SImode)), (operands[1]), (operands[2]))), (operands[3]))), (operands[4]));




  if ((0 ? DImode : SImode) != SImode)
    pat = gen_rtx_SUBREG (SImode, pat, 0);
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operands[0]), (pat)));
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1022 (rtx, rtx *);
rtx
gen_split_1022 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 5406 "../.././gcc/config/i386/i386.md"
{
  rtx pat;


  if (((enum machine_mode) (operands[0])->mode) != (0 ? DImode : SImode))
    {
      operands[1] = rtl_hooks.gen_lowpart ((0 ? DImode : SImode), operands[1]);
      operands[2] = rtl_hooks.gen_lowpart ((0 ? DImode : SImode), operands[2]);
    }
  operands[0] = rtl_hooks.gen_lowpart (SImode, operands[0]);
  pat = gen_rtx_fmt_ee (PLUS, ((0 ? DImode : SImode)), (operands[1]), (operands[2]));
  if ((0 ? DImode : SImode) != SImode)
    pat = gen_rtx_SUBREG (SImode, pat, 0);
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operands[0]), (pat)));
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_addhi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 5772 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (PLUS, HImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (HImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_addqi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 6027 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (PLUS, QImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (QImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_addxf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (XFmode), (operand1), (operand2))));




}


rtx
gen_adddf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (DFmode), (operand1), (operand2))));




}


rtx
gen_addsf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (SFmode), (operand1), (operand2))));




}


rtx
gen_subdi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 6484 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (MINUS, DImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (DImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1029 (rtx, rtx *);
rtx
gen_split_1029 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx _val = 0;
  start_sequence ();
# 6507 "../.././gcc/config/i386/i386.md"
split_di (operands+0, 1, operands+0, operands+3);
   split_di (operands+1, 1, operands+1, operands+4);
   split_di (operands+2, 1, operands+2, operands+5);
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  operand5 = operands[5];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCmode, 17)), (gen_rtx_fmt_ee (COMPARE, (CCmode), (operand1), (operand2)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (SImode), (copy_rtx (operand1)), (copy_rtx (operand2)))))))));
# 6529 "../.././gcc/config/i386/i386.md"
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_ee (MINUS, (SImode), (operand4), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_fmt_ee (LTU, (SImode), (gen_rtx_REG (CCmode, 17)), ((const_int_rtx[64])))), (operand5)))))), gen_hard_reg_clobber (CCmode, 17)))));
# 6542 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_subsi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 6614 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (MINUS, SImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (SImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_subhi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 6699 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (MINUS, HImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (HImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_subqi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 6743 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (MINUS, QImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (QImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_subxf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (XFmode), (operand1), (operand2))));




}


rtx
gen_subdf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (DFmode), (operand1), (operand2))));




}


rtx
gen_subsf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (SFmode), (operand1), (operand2))));




}


rtx
gen_mulsi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (SImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17))));







}


rtx
gen_mulhi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (HImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17))));







}


rtx
gen_mulqi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (QImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17))));







}


rtx
gen_umulqihi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (HImode), (gen_rtx_fmt_e (ZERO_EXTEND, (HImode), (operand1))), (gen_rtx_fmt_e (ZERO_EXTEND, (HImode), (operand2)))))), gen_hard_reg_clobber (CCmode, 17))));
# 6864 "../.././gcc/config/i386/i386.md"
}


rtx
gen_mulqihi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (HImode), (gen_rtx_fmt_e (SIGN_EXTEND, (HImode), (operand1))), (gen_rtx_fmt_e (SIGN_EXTEND, (HImode), (operand2)))))), gen_hard_reg_clobber (CCmode, 17))));
# 6882 "../.././gcc/config/i386/i386.md"
}


rtx
gen_umulsidi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (DImode), (gen_rtx_fmt_e (ZERO_EXTEND, (DImode), (operand1))), (gen_rtx_fmt_e (ZERO_EXTEND, (DImode), (operand2)))))), gen_hard_reg_clobber (CCmode, 17))));
# 6900 "../.././gcc/config/i386/i386.md"
}


rtx
gen_mulsidi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (DImode), (gen_rtx_fmt_e (SIGN_EXTEND, (DImode), (operand1))), (gen_rtx_fmt_e (SIGN_EXTEND, (DImode), (operand2)))))), gen_hard_reg_clobber (CCmode, 17))));
# 6918 "../.././gcc/config/i386/i386.md"
}


rtx
gen_umulsi3_highpart (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (TRUNCATE, (SImode), (gen_rtx_fmt_ee (LSHIFTRT, (DImode), (gen_rtx_fmt_ee (MULT, (DImode), (gen_rtx_fmt_e (ZERO_EXTEND, (DImode), (operand1))), (gen_rtx_fmt_e (ZERO_EXTEND, (DImode), (operand2))))), (const_int_rtx[64 + (32)])))))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (SImode)))), gen_hard_reg_clobber (CCmode, 17))));
# 6941 "../.././gcc/config/i386/i386.md"
}


rtx
gen_smulsi3_highpart (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (TRUNCATE, (SImode), (gen_rtx_fmt_ee (LSHIFTRT, (DImode), (gen_rtx_fmt_ee (MULT, (DImode), (gen_rtx_fmt_e (SIGN_EXTEND, (DImode), (operand1))), (gen_rtx_fmt_e (SIGN_EXTEND, (DImode), (operand2))))), (const_int_rtx[64 + (32)])))))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (SImode)))), gen_hard_reg_clobber (CCmode, 17))));
# 6964 "../.././gcc/config/i386/i386.md"
}


rtx
gen_mulxf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (XFmode), (operand1), (operand2))));




}


rtx
gen_muldf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (DFmode), (operand1), (operand2))));




}


rtx
gen_mulsf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (SFmode), (operand1), (operand2))));




}


rtx
gen_divxf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (DIV, (XFmode), (operand1), (operand2))));




}


rtx
gen_divdf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (DIV, (DFmode), (operand1), (operand2))));




}


rtx
gen_divsf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (DIV, (SFmode), (operand1), (operand2))));




}


rtx
gen_divmodsi4 (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (DIV, (SImode), (operand1), (operand2)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_ee (MOD, (SImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17))));
# 7064 "../.././gcc/config/i386/i386.md"
}


extern rtx gen_split_1052 (rtx, rtx *);
rtx
gen_split_1052 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx _val = 0;
  start_sequence ();
# 7513 "../.././gcc/config/i386/i386.md"
{

  if (!(x86_use_cltd & (1 << ix86_tune)) && !optimize_size)
    {
      if (true_regnum (operands[1]))
        emit_move_insn (operands[0], operands[1]);
      else
 emit_move_insn (operands[3], operands[1]);
      operands[4] = operands[3];
    }
  else
    {
      ((void)(!(!true_regnum (operands[1])) ? fancy_abort ("../.././gcc/config/i386/i386.md", 7525, __FUNCTION__), 0 : 0));
      operands[4] = operands[1];
    }
}
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_ee (ASHIFTRT, (SImode), (operand4), (const_int_rtx[64 + (31)])))), gen_hard_reg_clobber (CCmode, 17)))));







  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (DIV, (SImode), (gen_rtx_REG (SImode, 0)), (operand2)))), gen_rtx_fmt_ee (SET, (VOIDmode), (copy_rtx (operand3)), (gen_rtx_fmt_ee (MOD, (SImode), (gen_rtx_REG (SImode, 0)), (copy_rtx (operand2))))), gen_rtx_fmt_e (USE, (VOIDmode), (copy_rtx (operand3))), gen_hard_reg_clobber (CCmode, 17)))));
# 7559 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1053 (rtx, rtx *);
rtx
gen_split_1053 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 7627 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), ((const_int_rtx[64]))));


  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (UDIV, (SImode), (operand1), (operand2)))), gen_rtx_fmt_ee (SET, (VOIDmode), (copy_rtx (operand3)), (gen_rtx_fmt_ee (UMOD, (SImode), (copy_rtx (operand1)), (copy_rtx (operand2))))), gen_rtx_fmt_e (USE, (VOIDmode), (copy_rtx (operand3))), gen_hard_reg_clobber (CCmode, 17)))));
# 7650 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_udivmodhi4 (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx operand4;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 7639 "../.././gcc/config/i386/i386.md"
operands[4] = gen_reg_rtx (HImode);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), ((const_int_rtx[64]))));


  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (UDIV, (HImode), (operand1), (operand2)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_ee (UMOD, (HImode), (operand1), (operand2)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand4)), gen_hard_reg_clobber (CCmode, 17)))));
# 7664 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_testsi_ccno_1 (rtx operand0,
 rtx operand1)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCNOmode, 17)), (gen_rtx_fmt_ee (COMPARE, (CCNOmode), (gen_rtx_fmt_ee (AND, (SImode), (operand0), (operand1))), ((const_int_rtx[64])))));







}


rtx
gen_testqi_ccz_1 (rtx operand0,
 rtx operand1)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCZmode, 17)), (gen_rtx_fmt_ee (COMPARE, (CCZmode), (gen_rtx_fmt_ee (AND, (QImode), (operand0), (operand1))), ((const_int_rtx[64])))));







}


rtx
gen_testqi_ext_ccno_0 (rtx operand0,
 rtx operand1)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCNOmode, 17)), (gen_rtx_fmt_ee (COMPARE, (CCNOmode), (gen_rtx_fmt_ee (AND, (SImode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand0), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (operand1))), ((const_int_rtx[64])))));
# 7715 "../.././gcc/config/i386/i386.md"
}


extern rtx gen_split_1058 (rtx, rtx *);
rtx
gen_split_1058 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 7911 "../.././gcc/config/i386/i386.md"
{
  rtx val = operands[2];
  long len = ((operands[3])->u.hwint[0]);
  long pos = ((operands[4])->u.hwint[0]);
  long mask;
  enum machine_mode mode, submode;

  mode = ((enum machine_mode) (val)->mode);
  if (((enum rtx_code) (val)->code) == MEM)
    {


      if (! (((val))->volatil))
 {
   mode = smallest_mode_for_size (pos + len, MODE_INT);
   val = adjust_address_1 (val, mode, 0, 1, 1);
 }
    }
  else if (((enum rtx_code) (val)->code) == SUBREG
    && (submode = ((enum machine_mode) ((((val)->u.fld[0]).rt_rtx))->mode),
        ((unsigned short) (((unsigned short) mode_size[mode]) * 8)) > ((unsigned short) (((unsigned short) mode_size[submode]) * 8)))
    && pos + len <= ((unsigned short) (((unsigned short) mode_size[submode]) * 8)))
    {

      mode = submode;
      val = (((val)->u.fld[0]).rt_rtx);
    }
  else if (mode == HImode && pos + len <= 8)
    {

      mode = QImode;
      val = rtl_hooks.gen_lowpart (QImode, val);
    }

  if (len == (8 * 4))
    mask = -1;
  else
    mask = ((long)1 << len) - 1;
  mask <<= pos;

  operands[2] = gen_rtx_fmt_ee (AND, (mode), (val), (gen_int_mode (mask, mode)));
}
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (((enum rtx_code) (operand1)->code), ((enum machine_mode) (operand1)->mode), operand2, (const_int_rtx[64])))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1059 (rtx, rtx *);
rtx
gen_split_1059 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 7977 "../.././gcc/config/i386/i386.md"
operands[2] = rtl_hooks.gen_lowpart (SImode, operands[2]);
   operands[3] = gen_int_mode (((operands[3])->u.hwint[0]) >> 8, SImode);
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (((enum rtx_code) (operand1)->code), ((enum machine_mode) (operand1)->mode), gen_rtx_fmt_ee (AND, (SImode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand2), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (operand3)), (const_int_rtx[64])))));
# 7993 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1060 (rtx, rtx *);
rtx
gen_split_1060 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 7996 "../.././gcc/config/i386/i386.md"
operands[2] = rtl_hooks.gen_lowpart (QImode, operands[2]);
   operands[3] = rtl_hooks.gen_lowpart (QImode, operands[3]);
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (((enum rtx_code) (operand1)->code), ((enum machine_mode) (operand1)->mode), gen_rtx_fmt_ee (AND, (QImode), (operand2), (operand3)), (const_int_rtx[64])))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_andsi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 8075 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (AND, SImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (AND, (SImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1062 (rtx, rtx *);
rtx
gen_split_1062 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 8122 "../.././gcc/config/i386/i386.md"
operands[1] = rtl_hooks.gen_lowpart (HImode, operands[0]);
  operand0 = operands[0];
  operand1 = operands[1];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_e (STRICT_LOW_PART, (VOIDmode), (operand1))), ((const_int_rtx[64]))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1063 (rtx, rtx *);
rtx
gen_split_1063 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 8131 "../.././gcc/config/i386/i386.md"
operands[1] = rtl_hooks.gen_lowpart (QImode, operands[0]);
  operand0 = operands[0];
  operand1 = operands[1];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_e (STRICT_LOW_PART, (VOIDmode), (operand1))), ((const_int_rtx[64]))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1064 (rtx, rtx *);
rtx
gen_split_1064 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx _val = 0;
  start_sequence ();
# 8150 "../.././gcc/config/i386/i386.md"
operands[0] = rtl_hooks.gen_lowpart (SImode, operands[0]);
  operand0 = operands[0];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand0), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (gen_rtx_fmt_ee (XOR, (SImode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (copy_rtx (operand0)), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (copy_rtx (operand0)), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)])))))), gen_hard_reg_clobber (CCmode, 17)))));
# 8169 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_andhi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 8197 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (AND, HImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (AND, (HImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_andqi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 8242 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (AND, QImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (AND, (QImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1067 (rtx, rtx *);
rtx
gen_split_1067 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 8447 "../.././gcc/config/i386/i386.md"
operands[0] = rtl_hooks.gen_lowpart (SImode, operands[0]);
   operands[1] = rtl_hooks.gen_lowpart (SImode, operands[1]);
   operands[2] = gen_int_mode ((((operands[2])->u.hwint[0]) >> 8) & 0xff, SImode);
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand0), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (gen_rtx_fmt_ee (AND, (SImode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand1), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (operand2)))), gen_hard_reg_clobber (CCmode, 17)))));
# 8467 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1068 (rtx, rtx *);
rtx
gen_split_1068 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 8468 "../.././gcc/config/i386/i386.md"
operands[0] = rtl_hooks.gen_lowpart (QImode, operands[0]);
   operands[1] = rtl_hooks.gen_lowpart (QImode, operands[1]);
   operands[2] = rtl_hooks.gen_lowpart (QImode, operands[2]);
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_e (STRICT_LOW_PART, (VOIDmode), (operand0))), (gen_rtx_fmt_ee (AND, (QImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17)))));
# 8483 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_iorsi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 8530 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (IOR, SImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (IOR, (SImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_iorhi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 8623 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (IOR, HImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (IOR, (HImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_iorqi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 8666 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (IOR, QImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (IOR, (QImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1072 (rtx, rtx *);
rtx
gen_split_1072 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 8820 "../.././gcc/config/i386/i386.md"
operands[0] = rtl_hooks.gen_lowpart (SImode, operands[0]);
   operands[1] = rtl_hooks.gen_lowpart (SImode, operands[1]);
   operands[2] = gen_int_mode ((((operands[2])->u.hwint[0]) >> 8) & 0xff, SImode);
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand0), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (gen_rtx_fmt_ee (IOR, (SImode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand1), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (operand2)))), gen_hard_reg_clobber (CCmode, 17)))));
# 8840 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1073 (rtx, rtx *);
rtx
gen_split_1073 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 8841 "../.././gcc/config/i386/i386.md"
operands[0] = rtl_hooks.gen_lowpart (QImode, operands[0]);
   operands[1] = rtl_hooks.gen_lowpart (QImode, operands[1]);
   operands[2] = rtl_hooks.gen_lowpart (QImode, operands[2]);
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_e (STRICT_LOW_PART, (VOIDmode), (operand0))), (gen_rtx_fmt_ee (IOR, (QImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17)))));
# 8856 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_xorsi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 8906 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (XOR, SImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (XOR, (SImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_xorhi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 9000 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (XOR, HImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (XOR, (HImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_xorqi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 9043 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (XOR, QImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (XOR, (QImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_xorqi_cc_ext_1 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCNOmode, 17)), (gen_rtx_fmt_ee (COMPARE, (CCNOmode), (gen_rtx_fmt_ee (XOR, (SImode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand1), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (operand2))), ((const_int_rtx[64]))))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand0), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (gen_rtx_fmt_ee (XOR, (SImode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand1), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (operand2)))))));
# 9089 "../.././gcc/config/i386/i386.md"
}


extern rtx gen_split_1078 (rtx, rtx *);
rtx
gen_split_1078 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 9261 "../.././gcc/config/i386/i386.md"
operands[0] = rtl_hooks.gen_lowpart (SImode, operands[0]);
   operands[1] = rtl_hooks.gen_lowpart (SImode, operands[1]);
   operands[2] = gen_int_mode ((((operands[2])->u.hwint[0]) >> 8) & 0xff, SImode);
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand0), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (gen_rtx_fmt_ee (XOR, (SImode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand1), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (operand2)))), gen_hard_reg_clobber (CCmode, 17)))));
# 9281 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1079 (rtx, rtx *);
rtx
gen_split_1079 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 9282 "../.././gcc/config/i386/i386.md"
operands[0] = rtl_hooks.gen_lowpart (QImode, operands[0]);
   operands[1] = rtl_hooks.gen_lowpart (QImode, operands[1]);
   operands[2] = rtl_hooks.gen_lowpart (QImode, operands[2]);
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_e (STRICT_LOW_PART, (VOIDmode), (operand0))), (gen_rtx_fmt_ee (XOR, (QImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17)))));
# 9297 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_negdi2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 9330 "../.././gcc/config/i386/i386.md"
ix86_expand_unary_operator (NEG, DImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (NEG, (DImode), (operand1)))), gen_hard_reg_clobber (CCmode, 17)))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1081 (rtx, rtx *);
rtx
gen_split_1081 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 9359 "../.././gcc/config/i386/i386.md"
split_di (operands+1, 1, operands+2, operands+3);
   split_di (operands+0, 1, operands+0, operands+1);
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCZmode, 17)), (gen_rtx_fmt_ee (COMPARE, (CCZmode), (gen_rtx_fmt_e (NEG, (SImode), (operand2))), ((const_int_rtx[64]))))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (NEG, (SImode), (copy_rtx (operand2)))))))));
# 9378 "../.././gcc/config/i386/i386.md"
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_fmt_ee (LTU, (SImode), (gen_rtx_REG (CCmode, 17)), ((const_int_rtx[64])))), (operand3))), ((const_int_rtx[64]))))), gen_hard_reg_clobber (CCmode, 17)))));
# 9391 "../.././gcc/config/i386/i386.md"
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (copy_rtx (operand1)), (gen_rtx_fmt_e (NEG, (SImode), (copy_rtx (operand1))))), gen_hard_reg_clobber (CCmode, 17)))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_negsi2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 9392 "../.././gcc/config/i386/i386.md"
ix86_expand_unary_operator (NEG, SImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (NEG, (SImode), (operand1)))), gen_hard_reg_clobber (CCmode, 17)))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_neghi2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 9452 "../.././gcc/config/i386/i386.md"
ix86_expand_unary_operator (NEG, HImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (NEG, (HImode), (operand1)))), gen_hard_reg_clobber (CCmode, 17)))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_negqi2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 9479 "../.././gcc/config/i386/i386.md"
ix86_expand_unary_operator (NEG, QImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (NEG, (QImode), (operand1)))), gen_hard_reg_clobber (CCmode, 17)))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_negsf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 9507 "../.././gcc/config/i386/i386.md"
ix86_expand_fp_absneg_operator (NEG, SFmode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (NEG, (SFmode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_abssf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 9513 "../.././gcc/config/i386/i386.md"
ix86_expand_fp_absneg_operator (ABS, SFmode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (ABS, (SFmode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_copysignsf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 9550 "../.././gcc/config/i386/i386.md"
{
  ix86_expand_copysign (operands);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1088 (rtx, rtx *);
rtx
gen_split_1088 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 9566 "../.././gcc/config/i386/i386.md"
{
  ix86_split_copysign_const (operands);
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1089 (rtx, rtx *);
rtx
gen_split_1089 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 9594 "../.././gcc/config/i386/i386.md"
{
  ix86_split_copysign_var (operands);
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_negdf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 9603 "../.././gcc/config/i386/i386.md"
ix86_expand_fp_absneg_operator (NEG, DFmode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (NEG, (DFmode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_absdf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 9609 "../.././gcc/config/i386/i386.md"
ix86_expand_fp_absneg_operator (ABS, DFmode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (ABS, (DFmode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_copysigndf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 9646 "../.././gcc/config/i386/i386.md"
{
  ix86_expand_copysign (operands);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1093 (rtx, rtx *);
rtx
gen_split_1093 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 9662 "../.././gcc/config/i386/i386.md"
{
  ix86_split_copysign_const (operands);
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1094 (rtx, rtx *);
rtx
gen_split_1094 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 9690 "../.././gcc/config/i386/i386.md"
{
  ix86_split_copysign_var (operands);
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_negxf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 9699 "../.././gcc/config/i386/i386.md"
ix86_expand_fp_absneg_operator (NEG, XFmode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (NEG, (XFmode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_absxf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 9705 "../.././gcc/config/i386/i386.md"
ix86_expand_fp_absneg_operator (ABS, XFmode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (NEG, (XFmode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1097 (rtx, rtx *);
rtx
gen_split_1097 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
  operand0 = operands[0];
  operand1 = operands[1];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (((enum rtx_code) (operand1)->code), ((enum machine_mode) (operand1)->mode), copy_rtx (operand0)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1098 (rtx, rtx *);
rtx
gen_split_1098 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 9735 "../.././gcc/config/i386/i386.md"
{
  enum machine_mode mode = ((enum machine_mode) (operands[0])->mode);
  enum machine_mode vmode = ((enum machine_mode) (operands[2])->mode);
  rtx tmp;

  operands[0] = simplify_gen_subreg (vmode, operands[0], mode, 0);
  operands[1] = simplify_gen_subreg (vmode, operands[1], mode, 0);
  if (operands_match_p (operands[0], operands[2]))
    {
      tmp = operands[1];
      operands[1] = operands[2];
      operands[2] = tmp;
    }
  if (((enum rtx_code) (operands[3])->code) == ABS)
    tmp = gen_rtx_fmt_ee (AND, (vmode), (operands[1]), (operands[2]));
  else
    tmp = gen_rtx_fmt_ee (XOR, (vmode), (operands[1]), (operands[2]));
  operands[3] = tmp;
}
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand3)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1099 (rtx, rtx *);
rtx
gen_split_1099 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 9763 "../.././gcc/config/i386/i386.md"
{
  rtx tmp;
  operands[0] = rtl_hooks.gen_lowpart (SImode, operands[0]);
  if (((enum rtx_code) (operands[1])->code) == ABS)
    {
      tmp = gen_int_mode (0x7fffffff, SImode);
      tmp = gen_rtx_fmt_ee (AND, (SImode), (operands[0]), (tmp));
    }
  else
    {
      tmp = gen_int_mode (0x80000000, SImode);
      tmp = gen_rtx_fmt_ee (XOR, (SImode), (operands[0]), (tmp));
    }
  operands[1] = tmp;
}
  operand0 = operands[0];
  operand1 = operands[1];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)), gen_hard_reg_clobber (CCmode, 17)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1100 (rtx, rtx *);
rtx
gen_split_1100 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 9787 "../.././gcc/config/i386/i386.md"
{
  rtx tmp;
  if (0)
    {
      tmp = rtl_hooks.gen_lowpart (DImode, operands[0]);
      tmp = gen_rtx_fmt_eee (ZERO_EXTRACT, (DImode), (tmp), ((const_int_rtx[64 +1])), (gen_rtx_CONST_INT (VOIDmode, (63))));
      operands[0] = tmp;

      if (((enum rtx_code) (operands[1])->code) == ABS)
 tmp = (const_int_rtx[64]);
      else
 tmp = gen_rtx_fmt_e (NOT, (DImode), (tmp));
    }
  else
    {
      operands[0] = gen_highpart (SImode, operands[0]);
      if (((enum rtx_code) (operands[1])->code) == ABS)
 {
   tmp = gen_int_mode (0x7fffffff, SImode);
   tmp = gen_rtx_fmt_ee (AND, (SImode), (operands[0]), (tmp));
 }
      else
 {
   tmp = gen_int_mode (0x80000000, SImode);
   tmp = gen_rtx_fmt_ee (XOR, (SImode), (operands[0]), (tmp));
 }
    }
  operands[1] = tmp;
}
  operand0 = operands[0];
  operand1 = operands[1];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)), gen_hard_reg_clobber (CCmode, 17)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1101 (rtx, rtx *);
rtx
gen_split_1101 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 9825 "../.././gcc/config/i386/i386.md"
{
  rtx tmp;
  operands[0] = gen_rtx_REG (SImode,
        true_regnum (operands[0])
        + (0 ? 1 : 2));
  if (((enum rtx_code) (operands[1])->code) == ABS)
    {
      tmp = gen_rtx_CONST_INT (VOIDmode, (0x7fff));
      tmp = gen_rtx_fmt_ee (AND, (SImode), (operands[0]), (tmp));
    }
  else
    {
      tmp = gen_rtx_CONST_INT (VOIDmode, (0x8000));
      tmp = gen_rtx_fmt_ee (XOR, (SImode), (operands[0]), (tmp));
    }
  operands[1] = tmp;
}
  operand0 = operands[0];
  operand1 = operands[1];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)), gen_hard_reg_clobber (CCmode, 17)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1102 (rtx, rtx *);
rtx
gen_split_1102 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 9851 "../.././gcc/config/i386/i386.md"
{
  enum machine_mode mode = ((enum machine_mode) (operands[0])->mode);
  int size = mode == XFmode ? 10 : ((unsigned short) mode_size[mode]);
  rtx tmp;

  operands[0] = adjust_address_1 (operands[0], QImode, size - 1, 1, 1);
  if (((enum rtx_code) (operands[1])->code) == ABS)
    {
      tmp = gen_int_mode (0x7f, QImode);
      tmp = gen_rtx_fmt_ee (AND, (QImode), (operands[0]), (tmp));
    }
  else
    {
      tmp = gen_int_mode (0x80, QImode);
      tmp = gen_rtx_fmt_ee (XOR, (QImode), (operands[0]), (tmp));
    }
  operands[1] = tmp;
}
  operand0 = operands[0];
  operand1 = operands[1];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)), gen_hard_reg_clobber (CCmode, 17)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_one_cmplsi2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 10023 "../.././gcc/config/i386/i386.md"
ix86_expand_unary_operator (NOT, SImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (NOT, (SImode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1104 (rtx, rtx *);
rtx
gen_split_1104 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 10067 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (((enum rtx_code) (operand2)->code), ((enum machine_mode) (operand2)->mode), gen_rtx_fmt_ee (XOR, (SImode), (operand3), ((const_int_rtx[64 -1]))), (const_int_rtx[64])))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_ee (XOR, (SImode), (copy_rtx (operand3)), ((const_int_rtx[64 -1])))))))));
# 10086 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1105 (rtx, rtx *);
rtx
gen_split_1105 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 10095 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (((enum rtx_code) (operand2)->code), ((enum machine_mode) (operand2)->mode), gen_rtx_fmt_ee (XOR, (SImode), (operand3), ((const_int_rtx[64 -1]))), (const_int_rtx[64])))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_e (ZERO_EXTEND, (DImode), (gen_rtx_fmt_ee (XOR, (SImode), (copy_rtx (operand3)), ((const_int_rtx[64 -1])))))))))));
# 10115 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_one_cmplhi2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 10101 "../.././gcc/config/i386/i386.md"
ix86_expand_unary_operator (NOT, HImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (NOT, (HImode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1107 (rtx, rtx *);
rtx
gen_split_1107 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 10136 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (((enum rtx_code) (operand2)->code), ((enum machine_mode) (operand2)->mode), gen_rtx_fmt_ee (XOR, (HImode), (operand3), ((const_int_rtx[64 -1]))), (const_int_rtx[64])))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_ee (XOR, (HImode), (copy_rtx (operand3)), ((const_int_rtx[64 -1])))))))));
# 10155 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_one_cmplqi2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 10143 "../.././gcc/config/i386/i386.md"
ix86_expand_unary_operator (NOT, QImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (NOT, (QImode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1109 (rtx, rtx *);
rtx
gen_split_1109 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 10180 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (((enum rtx_code) (operand2)->code), ((enum machine_mode) (operand2)->mode), gen_rtx_fmt_ee (XOR, (QImode), (operand3), ((const_int_rtx[64 -1]))), (const_int_rtx[64])))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_ee (XOR, (QImode), (copy_rtx (operand3)), ((const_int_rtx[64 -1])))))))));
# 10199 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_ashldi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 10297 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (ASHIFT, DImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFT, (DImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1111 (rtx, rtx *);
rtx
gen_peephole2_1111 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[3] = peep2_find_free_register (0, 1, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 10416 "../.././gcc/config/i386/i386.md"
ix86_split_ashl (operands, operands[3], DImode); return (_val = get_insns (), end_sequence (), _val);
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1112 (rtx, rtx *);
rtx
gen_split_1112 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 10426 "../.././gcc/config/i386/i386.md"
ix86_split_ashl (operands, (rtx) 0, DImode); return (_val = get_insns (), end_sequence (), _val);
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_x86_shift_adj_1 (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCZmode, 17)), (gen_rtx_fmt_ee (COMPARE, (CCZmode), (gen_rtx_fmt_ee (AND, (QImode), (operand2), (const_int_rtx[64 + (32)]))), ((const_int_rtx[64]))))));







  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (IF_THEN_ELSE, (SImode), (gen_rtx_fmt_ee (NE, (VOIDmode), (gen_rtx_REG (CCZmode, 17)), ((const_int_rtx[64])))), (operand1), (operand0)))));
# 10459 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_eee (IF_THEN_ELSE, (SImode), (gen_rtx_fmt_ee (NE, (VOIDmode), (gen_rtx_REG (CCZmode, 17)), ((const_int_rtx[64])))), (operand3), (operand1)))));
# 10468 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_x86_shift_adj_2 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 10466 "../.././gcc/config/i386/i386.md"
{
  rtx label = gen_label_rtx ();
  rtx tmp;

  emit_insn (gen_testqi_ccz_1 (operands[2], gen_rtx_CONST_INT (VOIDmode, (32))));

  tmp = gen_rtx_REG (CCZmode, 17);
  tmp = gen_rtx_fmt_ee (EQ, (VOIDmode), (tmp), ((const_int_rtx[64])));
  tmp = gen_rtx_fmt_eee (IF_THEN_ELSE, (VOIDmode), (tmp), (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (label))), ((global_rtl[GR_PC])));


  tmp = emit_jump_insn (gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (tmp)));
  (((tmp)->u.fld[9]).rt_rtx) = label;

  emit_move_insn (operands[0], operands[1]);
  ix86_expand_clear (operands[1]);

  emit_label (label);
  (((label)->u.fld[4]).rt_int) = 1;

  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand2)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_ashlsi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 10495 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (ASHIFT, SImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFT, (SImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1116 (rtx, rtx *);
rtx
gen_split_1116 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 10546 "../.././gcc/config/i386/i386.md"
{
  rtx pat;
  enum machine_mode mode = ((enum machine_mode) (operands[0])->mode);

  if (((unsigned short) mode_size[mode]) < 4)
    operands[0] = rtl_hooks.gen_lowpart (SImode, operands[0]);
  if (mode != (0 ? DImode : SImode))
    operands[1] = rtl_hooks.gen_lowpart ((0 ? DImode : SImode), operands[1]);
  operands[2] = gen_int_mode (1 << ((operands[2])->u.hwint[0]), (0 ? DImode : SImode));

  pat = gen_rtx_fmt_ee (MULT, ((0 ? DImode : SImode)), (operands[1]), (operands[2]));
  if ((0 ? DImode : SImode) != SImode)
    pat = gen_rtx_SUBREG (SImode, pat, 0);
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operands[0]), (pat)));
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1117 (rtx, rtx *);
rtx
gen_split_1117 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 10572 "../.././gcc/config/i386/i386.md"
{
  rtx pat, clob;
  emit_move_insn (operands[1], operands[0]);
  pat = gen_rtx_fmt_ee (SET, (VOIDmode), (operands[0]), (gen_rtx_fmt_ee (ASHIFT, (((enum machine_mode) (operands[0])->mode)), (operands[0]), (operands[2]))));


  clob = gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_REG (CCmode, 17)));
  emit_insn (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, pat, clob))));
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_ashlhi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 10718 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (ASHIFT, HImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFT, (HImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_ashlqi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 10838 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (ASHIFT, QImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFT, (QImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_ashrdi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 11067 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (ASHIFTRT, DImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFTRT, (DImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1121 (rtx, rtx *);
rtx
gen_peephole2_1121 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[3] = peep2_find_free_register (0, 1, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 11171 "../.././gcc/config/i386/i386.md"
ix86_split_ashr (operands, operands[3], DImode); return (_val = get_insns (), end_sequence (), _val);
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1122 (rtx, rtx *);
rtx
gen_split_1122 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 11181 "../.././gcc/config/i386/i386.md"
ix86_split_ashr (operands, (rtx) 0, DImode); return (_val = get_insns (), end_sequence (), _val);
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_x86_shift_adj_3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 11204 "../.././gcc/config/i386/i386.md"
{
  rtx label = gen_label_rtx ();
  rtx tmp;

  emit_insn (gen_testqi_ccz_1 (operands[2], gen_rtx_CONST_INT (VOIDmode, (32))));

  tmp = gen_rtx_REG (CCZmode, 17);
  tmp = gen_rtx_fmt_ee (EQ, (VOIDmode), (tmp), ((const_int_rtx[64])));
  tmp = gen_rtx_fmt_eee (IF_THEN_ELSE, (VOIDmode), (tmp), (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (label))), ((global_rtl[GR_PC])));


  tmp = emit_jump_insn (gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (tmp)));
  (((tmp)->u.fld[9]).rt_rtx) = label;

  emit_move_insn (operands[0], operands[1]);
  emit_insn (gen_ashrsi3_31 (operands[1], operands[1], gen_rtx_CONST_INT (VOIDmode, (31))));

  emit_label (label);
  (((label)->u.fld[4]).rt_int) = 1;

  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand2)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_ashrsi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 11266 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (ASHIFTRT, SImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFTRT, (SImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_ashrhi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 11390 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (ASHIFTRT, HImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFTRT, (HImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_ashrqi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 11462 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (ASHIFTRT, QImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFTRT, (QImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_lshrdi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 11619 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (LSHIFTRT, DImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (LSHIFTRT, (DImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1128 (rtx, rtx *);
rtx
gen_peephole2_1128 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[3] = peep2_find_free_register (0, 1, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 11706 "../.././gcc/config/i386/i386.md"
ix86_split_lshr (operands, operands[3], DImode); return (_val = get_insns (), end_sequence (), _val);
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1129 (rtx, rtx *);
rtx
gen_split_1129 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 11716 "../.././gcc/config/i386/i386.md"
ix86_split_lshr (operands, (rtx) 0, DImode); return (_val = get_insns (), end_sequence (), _val);
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_lshrsi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 11724 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (LSHIFTRT, SImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (LSHIFTRT, (SImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_lshrhi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 11849 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (LSHIFTRT, HImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (LSHIFTRT, (HImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_lshrqi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 11921 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (LSHIFTRT, QImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (LSHIFTRT, (QImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_rotldi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 12022 "../.././gcc/config/i386/i386.md"
{
  if (0)
    {
      ix86_expand_binary_operator (ROTATE, DImode, operands);
      return (_val = get_insns (), end_sequence (), _val);
    }
  if (!const_1_to_31_operand (operands[2], VOIDmode))
    return (end_sequence (), _val);
  emit_insn (gen_ix86_rotldi3 (operands[0], operands[1], operands[2]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ROTATE, (DImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1134 (rtx, rtx *);
rtx
gen_split_1134 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx _val = 0;
  start_sequence ();
# 12058 "../.././gcc/config/i386/i386.md"
split_di (operands, 1, operands + 4, operands + 5);
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  operand5 = operands[5];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (operand4)));


  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (copy_rtx (operand4)), (gen_rtx_fmt_ee (IOR, (SImode), (gen_rtx_fmt_ee (ASHIFT, (SImode), (copy_rtx (operand4)), (operand2))), (gen_rtx_fmt_ee (LSHIFTRT, (SImode), (operand5), (gen_rtx_fmt_ee (MINUS, (QImode), (const_int_rtx[64 + (32)]), (copy_rtx (operand2))))))))), gen_hard_reg_clobber (CCmode, 17)))));
# 12082 "../.././gcc/config/i386/i386.md"
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (copy_rtx (operand5)), (gen_rtx_fmt_ee (IOR, (SImode), (gen_rtx_fmt_ee (ASHIFT, (SImode), (copy_rtx (operand5)), (copy_rtx (operand2)))), (gen_rtx_fmt_ee (LSHIFTRT, (SImode), (copy_rtx (operand3)), (gen_rtx_fmt_ee (MINUS, (QImode), (const_int_rtx[64 + (32)]), (copy_rtx (operand2))))))))), gen_hard_reg_clobber (CCmode, 17)))));
# 12096 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_rotlsi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 12092 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (ROTATE, SImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ROTATE, (SImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_rotlhi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 12151 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (ROTATE, HImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ROTATE, (HImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_rotlqi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 12185 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (ROTATE, QImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ROTATE, (QImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_rotrdi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 12246 "../.././gcc/config/i386/i386.md"
{
  if (0)
    {
      ix86_expand_binary_operator (ROTATERT, DImode, operands);
      return (_val = get_insns (), end_sequence (), _val);
    }
  if (!const_1_to_31_operand (operands[2], VOIDmode))
    return (end_sequence (), _val);
  emit_insn (gen_ix86_rotrdi3 (operands[0], operands[1], operands[2]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ROTATE, (DImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1139 (rtx, rtx *);
rtx
gen_split_1139 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx _val = 0;
  start_sequence ();
# 12282 "../.././gcc/config/i386/i386.md"
split_di (operands, 1, operands + 4, operands + 5);
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  operand5 = operands[5];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (operand4)));


  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (copy_rtx (operand4)), (gen_rtx_fmt_ee (IOR, (SImode), (gen_rtx_fmt_ee (ASHIFTRT, (SImode), (copy_rtx (operand4)), (operand2))), (gen_rtx_fmt_ee (ASHIFT, (SImode), (operand5), (gen_rtx_fmt_ee (MINUS, (QImode), (const_int_rtx[64 + (32)]), (copy_rtx (operand2))))))))), gen_hard_reg_clobber (CCmode, 17)))));
# 12306 "../.././gcc/config/i386/i386.md"
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (copy_rtx (operand5)), (gen_rtx_fmt_ee (IOR, (SImode), (gen_rtx_fmt_ee (ASHIFTRT, (SImode), (copy_rtx (operand5)), (copy_rtx (operand2)))), (gen_rtx_fmt_ee (ASHIFT, (SImode), (copy_rtx (operand3)), (gen_rtx_fmt_ee (MINUS, (QImode), (const_int_rtx[64 + (32)]), (copy_rtx (operand2))))))))), gen_hard_reg_clobber (CCmode, 17)))));
# 12320 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_rotrsi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 12316 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (ROTATERT, SImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ROTATERT, (SImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_rotrhi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 12378 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (ROTATERT, HImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ROTATERT, (HImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_rotrqi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 12412 "../.././gcc/config/i386/i386.md"
ix86_expand_binary_operator (ROTATERT, QImode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ROTATERT, (QImode), (operand1), (operand2)))));




  emit_insn (gen_hard_reg_clobber (CCmode, 17));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_extv (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 12475 "../.././gcc/config/i386/i386.md"
{

  if (((operands[2])->u.hwint[0]) != 8 || ((operands[3])->u.hwint[0]) != 8)
    return (end_sequence (), _val);



  if (! ext_register_operand (operands[1], VOIDmode))
    return (end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (SIGN_EXTRACT, (SImode), (operand1), (operand2), (operand3)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_extzv (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 12492 "../.././gcc/config/i386/i386.md"
{

  if (((operands[2])->u.hwint[0]) != 8 || ((operands[3])->u.hwint[0]) != 8)
    return (end_sequence (), _val);



  if (! ext_register_operand (operands[1], VOIDmode))
    return (end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand1), (operand2), (operand3)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_insv (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 12509 "../.././gcc/config/i386/i386.md"
{

  if (((operands[1])->u.hwint[0]) != 8 || ((operands[2])->u.hwint[0]) != 8)
    return (end_sequence (), _val);



  if (! ext_register_operand (operands[0], VOIDmode))
    return (end_sequence (), _val);

  if (0)
    emit_insn (gen_movdi_insv_1_rex64 (operands[0], operands[3]));
  else
    emit_insn (gen_movsi_insv_1 (operands[0], operands[3]));

  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (VOIDmode), (operand0), (operand1), (operand2))), (operand3)));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_seq (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 12682 "../.././gcc/config/i386/i386.md"
if (ix86_expand_setcc (EQ, operands[0])) return (_val = get_insns (), end_sequence (), _val); else return (end_sequence (), _val);
    operand0 = operands[0];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (EQ, (QImode), (gen_rtx_REG (CCmode, 17)), ((const_int_rtx[64]))))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sne (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 12688 "../.././gcc/config/i386/i386.md"
if (ix86_expand_setcc (NE, operands[0])) return (_val = get_insns (), end_sequence (), _val); else return (end_sequence (), _val);
    operand0 = operands[0];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (NE, (QImode), (gen_rtx_REG (CCmode, 17)), ((const_int_rtx[64]))))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sgt (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 12694 "../.././gcc/config/i386/i386.md"
if (ix86_expand_setcc (GT, operands[0])) return (_val = get_insns (), end_sequence (), _val); else return (end_sequence (), _val);
    operand0 = operands[0];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (GT, (QImode), (gen_rtx_REG (CCmode, 17)), ((const_int_rtx[64]))))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sgtu (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 12700 "../.././gcc/config/i386/i386.md"
if (ix86_expand_setcc (GTU, operands[0])) return (_val = get_insns (), end_sequence (), _val); else return (end_sequence (), _val);
    operand0 = operands[0];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (GTU, (QImode), (gen_rtx_REG (CCmode, 17)), ((const_int_rtx[64]))))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_slt (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 12706 "../.././gcc/config/i386/i386.md"
if (ix86_expand_setcc (LT, operands[0])) return (_val = get_insns (), end_sequence (), _val); else return (end_sequence (), _val);
    operand0 = operands[0];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (LT, (QImode), (gen_rtx_REG (CCmode, 17)), ((const_int_rtx[64]))))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sltu (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 12712 "../.././gcc/config/i386/i386.md"
if (ix86_expand_setcc (LTU, operands[0])) return (_val = get_insns (), end_sequence (), _val); else return (end_sequence (), _val);
    operand0 = operands[0];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (LTU, (QImode), (gen_rtx_REG (CCmode, 17)), ((const_int_rtx[64]))))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sge (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 12718 "../.././gcc/config/i386/i386.md"
if (ix86_expand_setcc (GE, operands[0])) return (_val = get_insns (), end_sequence (), _val); else return (end_sequence (), _val);
    operand0 = operands[0];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (GE, (QImode), (gen_rtx_REG (CCmode, 17)), ((const_int_rtx[64]))))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sgeu (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 12724 "../.././gcc/config/i386/i386.md"
if (ix86_expand_setcc (GEU, operands[0])) return (_val = get_insns (), end_sequence (), _val); else return (end_sequence (), _val);
    operand0 = operands[0];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (GEU, (QImode), (gen_rtx_REG (CCmode, 17)), ((const_int_rtx[64]))))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sle (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 12730 "../.././gcc/config/i386/i386.md"
if (ix86_expand_setcc (LE, operands[0])) return (_val = get_insns (), end_sequence (), _val); else return (end_sequence (), _val);
    operand0 = operands[0];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (LE, (QImode), (gen_rtx_REG (CCmode, 17)), ((const_int_rtx[64]))))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sleu (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 12736 "../.././gcc/config/i386/i386.md"
if (ix86_expand_setcc (LEU, operands[0])) return (_val = get_insns (), end_sequence (), _val); else return (end_sequence (), _val);
    operand0 = operands[0];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (LEU, (QImode), (gen_rtx_REG (CCmode, 17)), ((const_int_rtx[64]))))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sunordered (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 12742 "../.././gcc/config/i386/i386.md"
if (ix86_expand_setcc (UNORDERED, operands[0])) return (_val = get_insns (), end_sequence (), _val); else return (end_sequence (), _val);
    operand0 = operands[0];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (UNORDERED, (QImode), (gen_rtx_REG (CCmode, 17)), ((const_int_rtx[64]))))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sordered (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 12748 "../.././gcc/config/i386/i386.md"
if (ix86_expand_setcc (ORDERED, operands[0])) return (_val = get_insns (), end_sequence (), _val); else return (end_sequence (), _val);
    operand0 = operands[0];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ORDERED, (QImode), (gen_rtx_REG (CCmode, 17)), ((const_int_rtx[64]))))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_suneq (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 12754 "../.././gcc/config/i386/i386.md"
if (ix86_expand_setcc (UNEQ, operands[0])) return (_val = get_insns (), end_sequence (), _val); else return (end_sequence (), _val);
    operand0 = operands[0];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (UNEQ, (QImode), (gen_rtx_REG (CCmode, 17)), ((const_int_rtx[64]))))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sunge (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 12760 "../.././gcc/config/i386/i386.md"
if (ix86_expand_setcc (UNGE, operands[0])) return (_val = get_insns (), end_sequence (), _val); else return (end_sequence (), _val);
    operand0 = operands[0];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (UNGE, (QImode), (gen_rtx_REG (CCmode, 17)), ((const_int_rtx[64]))))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sungt (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 12766 "../.././gcc/config/i386/i386.md"
if (ix86_expand_setcc (UNGT, operands[0])) return (_val = get_insns (), end_sequence (), _val); else return (end_sequence (), _val);
    operand0 = operands[0];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (UNGT, (QImode), (gen_rtx_REG (CCmode, 17)), ((const_int_rtx[64]))))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sunle (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 12772 "../.././gcc/config/i386/i386.md"
if (ix86_expand_setcc (UNLE, operands[0])) return (_val = get_insns (), end_sequence (), _val); else return (end_sequence (), _val);
    operand0 = operands[0];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (UNLE, (QImode), (gen_rtx_REG (CCmode, 17)), ((const_int_rtx[64]))))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sunlt (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 12778 "../.././gcc/config/i386/i386.md"
if (ix86_expand_setcc (UNLT, operands[0])) return (_val = get_insns (), end_sequence (), _val); else return (end_sequence (), _val);
    operand0 = operands[0];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (UNLT, (QImode), (gen_rtx_REG (CCmode, 17)), ((const_int_rtx[64]))))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sltgt (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 12784 "../.././gcc/config/i386/i386.md"
if (ix86_expand_setcc (LTGT, operands[0])) return (_val = get_insns (), end_sequence (), _val); else return (end_sequence (), _val);
    operand0 = operands[0];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (LTGT, (QImode), (gen_rtx_REG (CCmode, 17)), ((const_int_rtx[64]))))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1164 (rtx, rtx *);
rtx
gen_split_1164 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 12819 "../.././gcc/config/i386/i386.md"
{
  ((operands[1])->mode = (QImode));
}
  operand0 = operands[0];
  operand1 = operands[1];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1165 (rtx, rtx *);
rtx
gen_split_1165 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 12830 "../.././gcc/config/i386/i386.md"
{
  ((operands[1])->mode = (QImode));
}
  operand0 = operands[0];
  operand1 = operands[1];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1166 (rtx, rtx *);
rtx
gen_split_1166 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 12841 "../.././gcc/config/i386/i386.md"
{
  rtx new_op1 = copy_rtx (operands[1]);
  operands[1] = new_op1;
  ((new_op1)->mode = (QImode));
  ((new_op1)->code = (ix86_reverse_condition (((enum rtx_code) (new_op1)->code), ((enum machine_mode) ((((new_op1)->u.fld[0]).rt_rtx))->mode))));




  if (! ix86_comparison_operator (new_op1, VOIDmode))
    return (end_sequence (), _val);
}
  operand0 = operands[0];
  operand1 = operands[1];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1167 (rtx, rtx *);
rtx
gen_split_1167 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 12861 "../.././gcc/config/i386/i386.md"
{
  rtx new_op1 = copy_rtx (operands[1]);
  operands[1] = new_op1;
  ((new_op1)->mode = (QImode));
  ((new_op1)->code = (ix86_reverse_condition (((enum rtx_code) (new_op1)->code), ((enum machine_mode) ((((new_op1)->u.fld[0]).rt_rtx))->mode))));




  if (! ix86_comparison_operator (new_op1, VOIDmode))
    return (end_sequence (), _val);
}
  operand0 = operands[0];
  operand1 = operands[1];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_beq (rtx operand0)
{
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
# 12911 "../.././gcc/config/i386/i386.md"
ix86_expand_branch (EQ, operands[0]); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_jump_insn (gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (gen_rtx_fmt_eee (IF_THEN_ELSE, (VOIDmode), (operand1), (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (operand0))), ((global_rtl[GR_PC]))))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_bne (rtx operand0)
{
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
# 12919 "../.././gcc/config/i386/i386.md"
ix86_expand_branch (NE, operands[0]); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_jump_insn (gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (gen_rtx_fmt_eee (IF_THEN_ELSE, (VOIDmode), (operand1), (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (operand0))), ((global_rtl[GR_PC]))))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_bgt (rtx operand0)
{
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
# 12927 "../.././gcc/config/i386/i386.md"
ix86_expand_branch (GT, operands[0]); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_jump_insn (gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (gen_rtx_fmt_eee (IF_THEN_ELSE, (VOIDmode), (operand1), (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (operand0))), ((global_rtl[GR_PC]))))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_bgtu (rtx operand0)
{
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
# 12935 "../.././gcc/config/i386/i386.md"
ix86_expand_branch (GTU, operands[0]); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_jump_insn (gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (gen_rtx_fmt_eee (IF_THEN_ELSE, (VOIDmode), (operand1), (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (operand0))), ((global_rtl[GR_PC]))))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_blt (rtx operand0)
{
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
# 12943 "../.././gcc/config/i386/i386.md"
ix86_expand_branch (LT, operands[0]); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_jump_insn (gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (gen_rtx_fmt_eee (IF_THEN_ELSE, (VOIDmode), (operand1), (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (operand0))), ((global_rtl[GR_PC]))))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_bltu (rtx operand0)
{
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
# 12951 "../.././gcc/config/i386/i386.md"
ix86_expand_branch (LTU, operands[0]); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_jump_insn (gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (gen_rtx_fmt_eee (IF_THEN_ELSE, (VOIDmode), (operand1), (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (operand0))), ((global_rtl[GR_PC]))))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_bge (rtx operand0)
{
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
# 12959 "../.././gcc/config/i386/i386.md"
ix86_expand_branch (GE, operands[0]); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_jump_insn (gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (gen_rtx_fmt_eee (IF_THEN_ELSE, (VOIDmode), (operand1), (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (operand0))), ((global_rtl[GR_PC]))))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_bgeu (rtx operand0)
{
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
# 12967 "../.././gcc/config/i386/i386.md"
ix86_expand_branch (GEU, operands[0]); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_jump_insn (gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (gen_rtx_fmt_eee (IF_THEN_ELSE, (VOIDmode), (operand1), (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (operand0))), ((global_rtl[GR_PC]))))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_ble (rtx operand0)
{
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
# 12975 "../.././gcc/config/i386/i386.md"
ix86_expand_branch (LE, operands[0]); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_jump_insn (gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (gen_rtx_fmt_eee (IF_THEN_ELSE, (VOIDmode), (operand1), (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (operand0))), ((global_rtl[GR_PC]))))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_bleu (rtx operand0)
{
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
# 12983 "../.././gcc/config/i386/i386.md"
ix86_expand_branch (LEU, operands[0]); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_jump_insn (gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (gen_rtx_fmt_eee (IF_THEN_ELSE, (VOIDmode), (operand1), (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (operand0))), ((global_rtl[GR_PC]))))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_bunordered (rtx operand0)
{
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
# 12991 "../.././gcc/config/i386/i386.md"
ix86_expand_branch (UNORDERED, operands[0]); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_jump_insn (gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (gen_rtx_fmt_eee (IF_THEN_ELSE, (VOIDmode), (operand1), (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (operand0))), ((global_rtl[GR_PC]))))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_bordered (rtx operand0)
{
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
# 12999 "../.././gcc/config/i386/i386.md"
ix86_expand_branch (ORDERED, operands[0]); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_jump_insn (gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (gen_rtx_fmt_eee (IF_THEN_ELSE, (VOIDmode), (operand1), (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (operand0))), ((global_rtl[GR_PC]))))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_buneq (rtx operand0)
{
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
# 13007 "../.././gcc/config/i386/i386.md"
ix86_expand_branch (UNEQ, operands[0]); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_jump_insn (gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (gen_rtx_fmt_eee (IF_THEN_ELSE, (VOIDmode), (operand1), (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (operand0))), ((global_rtl[GR_PC]))))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_bunge (rtx operand0)
{
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
# 13015 "../.././gcc/config/i386/i386.md"
ix86_expand_branch (UNGE, operands[0]); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_jump_insn (gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (gen_rtx_fmt_eee (IF_THEN_ELSE, (VOIDmode), (operand1), (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (operand0))), ((global_rtl[GR_PC]))))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_bungt (rtx operand0)
{
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
# 13023 "../.././gcc/config/i386/i386.md"
ix86_expand_branch (UNGT, operands[0]); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_jump_insn (gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (gen_rtx_fmt_eee (IF_THEN_ELSE, (VOIDmode), (operand1), (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (operand0))), ((global_rtl[GR_PC]))))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_bunle (rtx operand0)
{
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
# 13031 "../.././gcc/config/i386/i386.md"
ix86_expand_branch (UNLE, operands[0]); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_jump_insn (gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (gen_rtx_fmt_eee (IF_THEN_ELSE, (VOIDmode), (operand1), (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (operand0))), ((global_rtl[GR_PC]))))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_bunlt (rtx operand0)
{
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
# 13039 "../.././gcc/config/i386/i386.md"
ix86_expand_branch (UNLT, operands[0]); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_jump_insn (gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (gen_rtx_fmt_eee (IF_THEN_ELSE, (VOIDmode), (operand1), (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (operand0))), ((global_rtl[GR_PC]))))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_bltgt (rtx operand0)
{
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
# 13047 "../.././gcc/config/i386/i386.md"
ix86_expand_branch (LTGT, operands[0]); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_jump_insn (gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (gen_rtx_fmt_eee (IF_THEN_ELSE, (VOIDmode), (operand1), (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (operand0))), ((global_rtl[GR_PC]))))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1186 (rtx, rtx *);
rtx
gen_split_1186 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 13105 "../.././gcc/config/i386/i386.md"
{
  ((operands[0])->mode = (VOIDmode));
}
  operand0 = operands[0];
  operand1 = operands[1];
  emit_jump_insn (gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (gen_rtx_fmt_eee (IF_THEN_ELSE, (VOIDmode), (operand0), (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (operand1))), ((global_rtl[GR_PC]))))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1187 (rtx, rtx *);
rtx
gen_split_1187 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 13121 "../.././gcc/config/i386/i386.md"
{
  rtx new_op0 = copy_rtx (operands[0]);
  operands[0] = new_op0;
  ((new_op0)->mode = (VOIDmode));
  ((new_op0)->code = (ix86_reverse_condition (((enum rtx_code) (new_op0)->code), ((enum machine_mode) ((((new_op0)->u.fld[0]).rt_rtx))->mode))));




  if (! ix86_comparison_operator (new_op0, VOIDmode))
    return (end_sequence (), _val);
}
  operand0 = operands[0];
  operand1 = operands[1];
  emit_jump_insn (gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (gen_rtx_fmt_eee (IF_THEN_ELSE, (VOIDmode), (operand0), (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (operand1))), ((global_rtl[GR_PC]))))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1188 (rtx, rtx *);
rtx
gen_split_1188 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 13352 "../.././gcc/config/i386/i386.md"
{
  ix86_split_fp_branch (((enum rtx_code) (operands[0])->code), operands[1], operands[2],
                 operands[3], operands[4], (rtx) 0, (rtx) 0);
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1189 (rtx, rtx *);
rtx
gen_split_1189 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 13370 "../.././gcc/config/i386/i386.md"
{
  ix86_split_fp_branch (((enum rtx_code) (operands[0])->code), operands[1], operands[2],
        operands[3], operands[4], operands[5], (rtx) 0);
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1190 (rtx, rtx *);
rtx
gen_split_1190 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 13389 "../.././gcc/config/i386/i386.md"
{
  operands[7] = gen_rtx_fmt_e (FLOAT, (((enum machine_mode) (operands[1])->mode)), (operands[2]));
  ix86_split_fp_branch (swap_condition (((enum rtx_code) (operands[0])->code)),
   operands[3], operands[7],
   operands[4], operands[5], operands[6], (rtx) 0);
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1191 (rtx, rtx *);
rtx
gen_split_1191 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 13389 "../.././gcc/config/i386/i386.md"
{
  operands[7] = gen_rtx_fmt_e (FLOAT, (((enum machine_mode) (operands[1])->mode)), (operands[2]));
  ix86_split_fp_branch (swap_condition (((enum rtx_code) (operands[0])->code)),
   operands[3], operands[7],
   operands[4], operands[5], operands[6], (rtx) 0);
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1192 (rtx, rtx *);
rtx
gen_split_1192 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 13411 "../.././gcc/config/i386/i386.md"
{
  operands[7] = ix86_force_to_memory (((enum machine_mode) (operands[2])->mode), operands[2]);
  operands[7] = gen_rtx_fmt_e (FLOAT, (((enum machine_mode) (operands[1])->mode)), (operands[7]));
  ix86_split_fp_branch (swap_condition (((enum rtx_code) (operands[0])->code)),
   operands[3], operands[7],
   operands[4], operands[5], operands[6], operands[2]);
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1193 (rtx, rtx *);
rtx
gen_split_1193 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 13411 "../.././gcc/config/i386/i386.md"
{
  operands[7] = ix86_force_to_memory (((enum machine_mode) (operands[2])->mode), operands[2]);
  operands[7] = gen_rtx_fmt_e (FLOAT, (((enum machine_mode) (operands[1])->mode)), (operands[7]));
  ix86_split_fp_branch (swap_condition (((enum rtx_code) (operands[0])->code)),
   operands[3], operands[7],
   operands[4], operands[5], operands[6], operands[2]);
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_indirect_jump (rtx operand0)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (operand0));


}


rtx
gen_tablejump (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 13460 "../.././gcc/config/i386/i386.md"
{


  if (flag_pic)
    {
      rtx op0, op1;
      enum rtx_code code;

      if (0)
 {
   code = PLUS;
   op0 = operands[0];
   op1 = gen_rtx_fmt_u0 (LABEL_REF, ((0 ? DImode : SImode)), (operands[1]));
 }
      else if (0 || 1)
 {
   code = PLUS;
   op0 = operands[0];
   op1 = pic_offset_table_rtx;
 }
      else
 {
   code = MINUS;
   op0 = pic_offset_table_rtx;
   op1 = operands[0];
 }

      operands[0] = expand_simple_binop ((0 ? DImode : SImode), code, op0, op1, (rtx) 0, 0,
      OPTAB_DIRECT);
    }
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_jump_insn (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), ((global_rtl[GR_PC])), (operand0)), gen_rtx_fmt_e (USE, (VOIDmode), (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (operand1))))))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1196 (rtx, rtx *);
rtx
gen_peephole2_1196 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 13523 "../.././gcc/config/i386/i386.md"
{
  operands[4] = gen_rtx_REG (((enum machine_mode) (operands[0])->mode), 17);
  operands[5] = rtl_hooks.gen_lowpart (QImode, operands[3]);
  ix86_expand_clear (operands[3]);
}
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  operand5 = operands[5];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (operand0)));


  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_e (STRICT_LOW_PART, (VOIDmode), (operand5))), (operand2)));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1197 (rtx, rtx *);
rtx
gen_peephole2_1197 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 13545 "../.././gcc/config/i386/i386.md"
{
  operands[4] = gen_rtx_REG (((enum machine_mode) (operands[0])->mode), 17);
  operands[5] = rtl_hooks.gen_lowpart (QImode, operands[3]);
  ix86_expand_clear (operands[3]);
}
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  operand5 = operands[5];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (operand0)));


  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_e (STRICT_LOW_PART, (VOIDmode), (operand5))), (operand2)));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_call_pop (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 13566 "../.././gcc/config/i386/i386.md"
{
  ix86_expand_call (((void *)0), operands[0], operands[1], operands[2], operands[3], 0);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit_call_insn (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (CALL, (VOIDmode), (operand0), (operand1)), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 7)), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_REG (SImode, 7)), (operand3))))))));
# 13587 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_call (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 13611 "../.././gcc/config/i386/i386.md"
{
  ix86_expand_call (((void *)0), operands[0], operands[1], operands[2], ((void *)0), 0);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_call_insn (gen_rtx_fmt_ee (CALL, (VOIDmode), (operand0), (operand1)));


  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand2)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sibcall (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 13621 "../.././gcc/config/i386/i386.md"
{
  ix86_expand_call (((void *)0), operands[0], operands[1], operands[2], ((void *)0), 1);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_call_insn (gen_rtx_fmt_ee (CALL, (VOIDmode), (operand0), (operand1)));


  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand2)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_call_value_pop (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3,
 rtx operand4)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
# 13696 "../.././gcc/config/i386/i386.md"
{
  ix86_expand_call (operands[0], operands[1], operands[2],
      operands[3], operands[4], 0);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
  }
  emit_call_insn (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (CALL, (VOIDmode), (operand1), (operand2)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 7)), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_REG (SImode, 7)), (operand4))))))));
# 13721 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_call_value (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 13709 "../.././gcc/config/i386/i386.md"
{
  ix86_expand_call (operands[0], operands[1], operands[2], operands[3], ((void *)0), 0);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit_call_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (CALL, (VOIDmode), (operand1), (operand2)))));




  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand3)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sibcall_value (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 13721 "../.././gcc/config/i386/i386.md"
{
  ix86_expand_call (operands[0], operands[1], operands[2], operands[3], ((void *)0), 1);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit_call_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (CALL, (VOIDmode), (operand1), (operand2)))));




  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand3)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_untyped_call (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 13734 "../.././gcc/config/i386/i386.md"
{
  int i;






  ix86_expand_call ((((target_flags & (1 << 6)) != 0)
       ? gen_rtx_REG (XCmode, 8) : ((void *)0)),
      operands[0], (const_int_rtx[64]), gen_rtx_CONST_INT (VOIDmode, ((0 ? 8 : (((target_flags & (1 << 17)) != 0) ? 3 : 0)) - 1)),
      ((void *)0), 0);

  for (i = 0; i < (((((operands[2])->u.fld[0]).rt_rtvec))->num_elem); i++)
    {
      rtx set = (((((operands[2])->u.fld[0]).rt_rtvec))->elem[i]);
      emit_move_insn ((((set)->u.fld[0]).rt_rtx), (((set)->u.fld[1]).rt_rtx));
    }





  emit_insn (gen_blockage ((const_int_rtx[64])));

  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_call_insn (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (CALL, (VOIDmode), (operand0), ((const_int_rtx[64]))), operand1, operand2))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_return (void)
{
  rtx _val = 0;
  start_sequence ();
  {
# 13780 "../.././gcc/config/i386/i386.md"
{
  if ((cfun->pops_args))
    {
      rtx popc = gen_rtx_CONST_INT (VOIDmode, ((cfun->pops_args)));
      emit_jump_insn (gen_return_pop_internal (popc));
      return (_val = get_insns (), end_sequence (), _val);
    }
}
  }
  emit_jump_insn (gen_rtx_fmt_ (RETURN, (VOIDmode)));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_prologue (void)
{
  rtx _val = 0;
  start_sequence ();
  {
# 13858 "../.././gcc/config/i386/i386.md"
ix86_expand_prologue (); return (_val = get_insns (), end_sequence (), _val);
  }
  emit_insn ((const_int_rtx[64 +1]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_epilogue (void)
{
  rtx _val = 0;
  start_sequence ();
  {
# 13880 "../.././gcc/config/i386/i386.md"
ix86_expand_epilogue (1); return (_val = get_insns (), end_sequence (), _val);
  }
  emit_insn ((const_int_rtx[64 +1]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sibcall_epilogue (void)
{
  rtx _val = 0;
  start_sequence ();
  {
# 13885 "../.././gcc/config/i386/i386.md"
ix86_expand_epilogue (0); return (_val = get_insns (), end_sequence (), _val);
  }
  emit_insn ((const_int_rtx[64 +1]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_eh_return (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 13890 "../.././gcc/config/i386/i386.md"
{
  rtx tmp, sa = gen_rtx_REG ((0 ? DImode : SImode), 2), ra = operands[0];




  tmp = gen_rtx_fmt_ee (PLUS, ((0 ? DImode : SImode)), ((global_rtl[GR_ARG_POINTER])), (sa));
  tmp = plus_constant (tmp, -(0 ? 8 : 4));
  tmp = gen_rtx_MEM ((0 ? DImode : SImode), tmp);
  emit_move_insn (tmp, ra);

  if ((0 ? DImode : SImode) == SImode)
    emit_jump_insn (gen_eh_return_si (sa));
  else
    emit_jump_insn (gen_eh_return_di (sa));
  emit_barrier ();
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1210 (rtx, rtx *);
rtx
gen_split_1210 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 13917 "../.././gcc/config/i386/i386.md"
ix86_expand_epilogue (2); return (_val = get_insns (), end_sequence (), _val);
  emit_insn ((const_int_rtx[64 +1]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1211 (rtx, rtx *);
rtx
gen_split_1211 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 13927 "../.././gcc/config/i386/i386.md"
ix86_expand_epilogue (2); return (_val = get_insns (), end_sequence (), _val);
  emit_insn ((const_int_rtx[64 +1]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_ffssi2 (rtx operand0,
 rtx operand1)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FFS, (SImode), (operand1)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (SImode)))), gen_hard_reg_clobber (CCmode, 17))));
# 13948 "../.././gcc/config/i386/i386.md"
}


extern rtx gen_split_1213 (rtx, rtx *);
rtx
gen_split_1213 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 13971 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), ((const_int_rtx[64 -1]))));


  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCZmode, 17)), (gen_rtx_fmt_ee (COMPARE, (CCZmode), (operand1), ((const_int_rtx[64]))))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (CTZ, (SImode), (copy_rtx (operand1)))))))));
# 13990 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (copy_rtx (operand0)), (gen_rtx_fmt_eee (IF_THEN_ELSE, (SImode), (gen_rtx_fmt_ee (EQ, (VOIDmode), (gen_rtx_REG (CCZmode, 17)), ((const_int_rtx[64])))), (copy_rtx (operand2)), (copy_rtx (operand0))))));
# 13999 "../.././gcc/config/i386/i386.md"
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (copy_rtx (operand0)), (gen_rtx_fmt_ee (PLUS, (SImode), (copy_rtx (operand0)), ((const_int_rtx[64 +1]))))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1214 (rtx, rtx *);
rtx
gen_split_1214 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 13991 "../.././gcc/config/i386/i386.md"
{
  operands[3] = rtl_hooks.gen_lowpart (QImode, operands[2]);
  ix86_expand_clear (operands[2]);
}
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCZmode, 17)), (gen_rtx_fmt_ee (COMPARE, (CCZmode), (operand1), ((const_int_rtx[64]))))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (CTZ, (SImode), (copy_rtx (operand1)))))))));
# 14011 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_e (STRICT_LOW_PART, (VOIDmode), (operand3))), (gen_rtx_fmt_ee (EQ, (QImode), (gen_rtx_REG (CCZmode, 17)), ((const_int_rtx[64]))))));






  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (NEG, (SImode), (copy_rtx (operand2))))), gen_hard_reg_clobber (CCmode, 17)))));






  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (copy_rtx (operand0)), (gen_rtx_fmt_ee (IOR, (SImode), (copy_rtx (operand0)), (copy_rtx (operand2))))), gen_hard_reg_clobber (CCmode, 17)))));







  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (copy_rtx (operand0)), (gen_rtx_fmt_ee (PLUS, (SImode), (copy_rtx (operand0)), ((const_int_rtx[64 +1]))))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_clzsi2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (SImode), (const_int_rtx[64 + (31)]), (gen_rtx_fmt_e (CLZ, (SImode), (operand1)))))), gen_hard_reg_clobber (CCmode, 17)))));
# 14062 "../.././gcc/config/i386/i386.md"
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (XOR, (SImode), (operand0), (const_int_rtx[64 + (31)])))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_tls_global_dynamic_32 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4 __attribute__ ((__unused__));
  rtx operand5 __attribute__ ((__unused__));
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
# 14148 "../.././gcc/config/i386/i386.md"
{
  if (flag_pic)
    operands[2] = pic_offset_table_rtx;
  else
    {
      operands[2] = gen_reg_rtx ((0 ? DImode : SImode));
      emit_insn (gen_set_got (operands[2]));
    }
  operands[3] = ix86_tls_get_addr ();
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (3, operand2, operand1, operand3)), (17)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (SImode)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (SImode)))), gen_hard_reg_clobber (CCmode, 17)))));
# 14180 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_tls_global_dynamic_64 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
# 14176 "../.././gcc/config/i386/i386.md"
{
  operands[2] = ix86_tls_get_addr ();
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_call_insn (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (CALL, (DImode), (gen_rtx_MEM (QImode, operand2)), ((const_int_rtx[64]))))), gen_rtx_fmt_Ei (UNSPEC, (DImode), (gen_rtvec (1, operand1)), (17))))));
# 14195 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_tls_local_dynamic_base_32 (rtx operand0)
{
  rtx operand1;
  rtx operand2;
  rtx operand3 __attribute__ ((__unused__));
  rtx operand4 __attribute__ ((__unused__));
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
# 14215 "../.././gcc/config/i386/i386.md"
{
  if (flag_pic)
    operands[1] = pic_offset_table_rtx;
  else
    {
      operands[1] = gen_reg_rtx ((0 ? DImode : SImode));
      emit_insn (gen_set_got (operands[1]));
    }
  operands[2] = ix86_tls_get_addr ();
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (2, operand1, operand2)), (18)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (SImode)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (SImode)))), gen_hard_reg_clobber (CCmode, 17)))));
# 14245 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_tls_local_dynamic_base_64 (rtx operand0)
{
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
# 14241 "../.././gcc/config/i386/i386.md"
{
  operands[1] = ix86_tls_get_addr ();
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_call_insn (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (CALL, (DImode), (gen_rtx_MEM (QImode, operand1)), ((const_int_rtx[64]))))), gen_rtx_fmt_Ei (UNSPEC, (DImode), (gen_rtvec (1, (const_int_rtx[64]))), (18))))));
# 14259 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1220 (rtx, rtx *);
rtx
gen_split_1220 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx _val = 0;
  start_sequence ();
# 14268 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  operand5 = operands[5];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (3, operand1, operand3, operand2)), (17)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand4)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand5)), gen_hard_reg_clobber (CCmode, 17)))));
# 14290 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1221 (rtx, rtx *);
rtx
gen_split_1221 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 14801 "../.././gcc/config/i386/i386.md"
{
  operands[4] = ix86_force_to_memory (((enum machine_mode) (operands[1])->mode), operands[1]);
  operands[4] = gen_rtx_fmt_e (FLOAT, (((enum machine_mode) (operands[0])->mode)), (operands[4]));
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operands[0]), (gen_rtx_fmt_ee (((enum rtx_code) (operands[3])->code), ((enum machine_mode) (operands[3])->mode), operands[4], operands[2]))));




  ix86_free_from_memory (((enum machine_mode) (operands[1])->mode));
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1222 (rtx, rtx *);
rtx
gen_split_1222 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 14801 "../.././gcc/config/i386/i386.md"
{
  operands[4] = ix86_force_to_memory (((enum machine_mode) (operands[1])->mode), operands[1]);
  operands[4] = gen_rtx_fmt_e (FLOAT, (((enum machine_mode) (operands[0])->mode)), (operands[4]));
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operands[0]), (gen_rtx_fmt_ee (((enum rtx_code) (operands[3])->code), ((enum machine_mode) (operands[3])->mode), operands[4], operands[2]))));




  ix86_free_from_memory (((enum machine_mode) (operands[1])->mode));
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1223 (rtx, rtx *);
rtx
gen_split_1223 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 14821 "../.././gcc/config/i386/i386.md"
{
  operands[4] = ix86_force_to_memory (((enum machine_mode) (operands[2])->mode), operands[2]);
  operands[4] = gen_rtx_fmt_e (FLOAT, (((enum machine_mode) (operands[0])->mode)), (operands[4]));
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operands[0]), (gen_rtx_fmt_ee (((enum rtx_code) (operands[3])->code), ((enum machine_mode) (operands[3])->mode), operands[1], operands[4]))));




  ix86_free_from_memory (((enum machine_mode) (operands[2])->mode));
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1224 (rtx, rtx *);
rtx
gen_split_1224 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 14821 "../.././gcc/config/i386/i386.md"
{
  operands[4] = ix86_force_to_memory (((enum machine_mode) (operands[2])->mode), operands[2]);
  operands[4] = gen_rtx_fmt_e (FLOAT, (((enum machine_mode) (operands[0])->mode)), (operands[4]));
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operands[0]), (gen_rtx_fmt_ee (((enum rtx_code) (operands[3])->code), ((enum machine_mode) (operands[3])->mode), operands[1], operands[4]))));




  ix86_free_from_memory (((enum machine_mode) (operands[2])->mode));
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sqrtsf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 14839 "../.././gcc/config/i386/i386.md"
{
  if (!((ix86_fpmath & FPMATH_SSE) != 0))
    operands[1] = force_reg (SFmode, operands[1]);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (SQRT, (SFmode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sqrtdf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 14877 "../.././gcc/config/i386/i386.md"
{
  if (!(((target_flags & (1 << 18)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    operands[1] = force_reg (DFmode, operands[1]);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (SQRT, (DFmode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_fmodsf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 14975 "../.././gcc/config/i386/i386.md"
{
  rtx label = gen_label_rtx ();

  rtx op1 = gen_reg_rtx (XFmode);
  rtx op2 = gen_reg_rtx (XFmode);

  emit_insn(gen_extendsfxf2 (op1, operands[1]));
  emit_insn(gen_extendsfxf2 (op2, operands[2]));

  emit_label (label);

  emit_insn (gen_fpremxf4 (op1, op2, op1, op2));
  ix86_emit_fp_unordered_jump (label);

  emit_insn (gen_truncxfsf2_i387_noop (operands[0], op1));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand2)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_fmoddf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 15000 "../.././gcc/config/i386/i386.md"
{
  rtx label = gen_label_rtx ();

  rtx op1 = gen_reg_rtx (XFmode);
  rtx op2 = gen_reg_rtx (XFmode);

  emit_insn (gen_extenddfxf2 (op1, operands[1]));
  emit_insn (gen_extenddfxf2 (op2, operands[2]));

  emit_label (label);

  emit_insn (gen_fpremxf4 (op1, op2, op1, op2));
  ix86_emit_fp_unordered_jump (label);

  emit_insn (gen_truncxfdf2_i387_noop (operands[0], op1));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand2)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_fmodxf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 15024 "../.././gcc/config/i386/i386.md"
{
  rtx label = gen_label_rtx ();

  emit_label (label);

  emit_insn (gen_fpremxf4 (operands[1], operands[2],
      operands[1], operands[2]));
  ix86_emit_fp_unordered_jump (label);

  emit_move_insn (operands[0], operands[1]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand2)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_dremsf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 15060 "../.././gcc/config/i386/i386.md"
{
  rtx label = gen_label_rtx ();

  rtx op1 = gen_reg_rtx (XFmode);
  rtx op2 = gen_reg_rtx (XFmode);

  emit_insn(gen_extendsfxf2 (op1, operands[1]));
  emit_insn(gen_extendsfxf2 (op2, operands[2]));

  emit_label (label);

  emit_insn (gen_fprem1xf4 (op1, op2, op1, op2));
  ix86_emit_fp_unordered_jump (label);

  emit_insn (gen_truncxfsf2_i387_noop (operands[0], op1));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand2)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_dremdf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 15085 "../.././gcc/config/i386/i386.md"
{
  rtx label = gen_label_rtx ();

  rtx op1 = gen_reg_rtx (XFmode);
  rtx op2 = gen_reg_rtx (XFmode);

  emit_insn (gen_extenddfxf2 (op1, operands[1]));
  emit_insn (gen_extenddfxf2 (op2, operands[2]));

  emit_label (label);

  emit_insn (gen_fprem1xf4 (op1, op2, op1, op2));
  ix86_emit_fp_unordered_jump (label);

  emit_insn (gen_truncxfdf2_i387_noop (operands[0], op1));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand2)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_dremxf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 15109 "../.././gcc/config/i386/i386.md"
{
  rtx label = gen_label_rtx ();

  emit_label (label);

  emit_insn (gen_fprem1xf4 (operands[1], operands[2],
       operands[1], operands[2]));
  ix86_emit_fp_unordered_jump (label);

  emit_move_insn (operands[0], operands[1]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand2)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1233 (rtx, rtx *);
rtx
gen_split_1233 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 15232 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_Ei (UNSPEC, (DFmode), (gen_rtvec (1, operand2)), (60)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1234 (rtx, rtx *);
rtx
gen_split_1234 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 15243 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DFmode), (gen_rtvec (1, operand2)), (61)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1235 (rtx, rtx *);
rtx
gen_split_1235 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 15267 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_Ei (UNSPEC, (SFmode), (gen_rtvec (1, operand2)), (60)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1236 (rtx, rtx *);
rtx
gen_split_1236 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 15278 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SFmode), (gen_rtvec (1, operand2)), (61)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1237 (rtx, rtx *);
rtx
gen_split_1237 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 15307 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_Ei (UNSPEC, (DFmode), (gen_rtvec (1, gen_rtx_fmt_e (FLOAT_EXTEND, (DFmode), (operand2)))), (60)))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1238 (rtx, rtx *);
rtx
gen_split_1238 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 15321 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DFmode), (gen_rtvec (1, gen_rtx_fmt_e (FLOAT_EXTEND, (DFmode), (operand2)))), (61)))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1239 (rtx, rtx *);
rtx
gen_split_1239 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 15344 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand2)), (60)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1240 (rtx, rtx *);
rtx
gen_split_1240 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 15355 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand2)), (61)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1241 (rtx, rtx *);
rtx
gen_peephole2_1241 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 15386 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DFmode), (gen_rtvec (1, operand2)), (82)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_Ei (UNSPEC, (DFmode), (gen_rtvec (1, copy_rtx (operand2))), (83))))))));
# 15404 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_tandf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
# 15397 "../.././gcc/config/i386/i386.md"
{
  operands[2] = gen_reg_rtx (DFmode);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_Ei (UNSPEC, (DFmode), (gen_rtvec (1, operand1)), (82)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DFmode), (gen_rtvec (1, operand1)), (83))))))));
# 15418 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1243 (rtx, rtx *);
rtx
gen_peephole2_1243 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 15430 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SFmode), (gen_rtvec (1, operand2)), (82)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_Ei (UNSPEC, (SFmode), (gen_rtvec (1, copy_rtx (operand2))), (83))))))));
# 15448 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_tansf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
# 15441 "../.././gcc/config/i386/i386.md"
{
  operands[2] = gen_reg_rtx (SFmode);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_Ei (UNSPEC, (SFmode), (gen_rtvec (1, operand1)), (82)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SFmode), (gen_rtvec (1, operand1)), (83))))))));
# 15462 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1245 (rtx, rtx *);
rtx
gen_peephole2_1245 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 15473 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand2)), (82)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, copy_rtx (operand2))), (83))))))));
# 15491 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_tanxf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
# 15483 "../.././gcc/config/i386/i386.md"
{
  operands[2] = gen_reg_rtx (XFmode);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand1)), (82)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand1)), (83))))))));
# 15504 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_atan2df3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 15507 "../.././gcc/config/i386/i386.md"
{
  rtx copy = gen_reg_rtx (DFmode);
  emit_move_insn (copy, operands[1]);
  emit_insn (gen_atan2df3_1 (operands[0], copy, operands[2]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand2)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_atandf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3 __attribute__ ((__unused__));
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
# 15523 "../.././gcc/config/i386/i386.md"
{
  operands[2] = gen_reg_rtx (DFmode);
  emit_move_insn (operands[2], (const_tiny_rtx[1][(int) (DFmode)]));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DFmode), (gen_rtvec (2, operand2, operand1)), (62)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (DFmode))))))));
# 15543 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_atan2sf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 15548 "../.././gcc/config/i386/i386.md"
{
  rtx copy = gen_reg_rtx (SFmode);
  emit_move_insn (copy, operands[1]);
  emit_insn (gen_atan2sf3_1 (operands[0], copy, operands[2]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand2)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_atansf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3 __attribute__ ((__unused__));
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
# 15564 "../.././gcc/config/i386/i386.md"
{
  operands[2] = gen_reg_rtx (SFmode);
  emit_move_insn (operands[2], (const_tiny_rtx[1][(int) (SFmode)]));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SFmode), (gen_rtvec (2, operand2, operand1)), (62)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (SFmode))))))));
# 15584 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_atan2xf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 15587 "../.././gcc/config/i386/i386.md"
{
  rtx copy = gen_reg_rtx (XFmode);
  emit_move_insn (copy, operands[1]);
  emit_insn (gen_atan2xf3_1 (operands[0], copy, operands[2]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand2)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_atanxf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3 __attribute__ ((__unused__));
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
# 15602 "../.././gcc/config/i386/i386.md"
{
  operands[2] = gen_reg_rtx (XFmode);
  emit_move_insn (operands[2], (const_tiny_rtx[1][(int) (XFmode)]));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand2, operand1)), (62)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode))))))));
# 15622 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_asindf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx operand7;
  rtx operand8 __attribute__ ((__unused__));
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[9];
    operands[0] = operand0;
    operands[1] = operand1;
# 15622 "../.././gcc/config/i386/i386.md"
{
  int i;

  for (i=2; i<8; i++)
    operands[i] = gen_reg_rtx (XFmode);

  emit_move_insn (operands[4], (const_tiny_rtx[1][(int) (XFmode)]));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
    operand6 = operands[6];
    operand7 = operands[7];
    operand8 = operands[8];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));



  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_ee (MULT, (XFmode), (operand2), (operand2)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand5), (gen_rtx_fmt_ee (MINUS, (XFmode), (operand4), (operand3)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand6), (gen_rtx_fmt_e (SQRT, (XFmode), (operand5)))));



  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand7), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand6, operand2)), (62)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode))))))));
# 15669 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (DFmode), (operand7)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_asinsf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx operand7;
  rtx operand8 __attribute__ ((__unused__));
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[9];
    operands[0] = operand0;
    operands[1] = operand1;
# 15646 "../.././gcc/config/i386/i386.md"
{
  int i;

  for (i=2; i<8; i++)
    operands[i] = gen_reg_rtx (XFmode);

  emit_move_insn (operands[4], (const_tiny_rtx[1][(int) (XFmode)]));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
    operand6 = operands[6];
    operand7 = operands[7];
    operand8 = operands[8];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));



  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_ee (MULT, (XFmode), (operand2), (operand2)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand5), (gen_rtx_fmt_ee (MINUS, (XFmode), (operand4), (operand3)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand6), (gen_rtx_fmt_e (SQRT, (XFmode), (operand5)))));



  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand7), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand6, operand2)), (62)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode))))))));
# 15693 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (SFmode), (operand7)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_asinxf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6 __attribute__ ((__unused__));
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[7];
    operands[0] = operand0;
    operands[1] = operand1;
# 15667 "../.././gcc/config/i386/i386.md"
{
  int i;

  for (i=2; i<6; i++)
    operands[i] = gen_reg_rtx (XFmode);

  emit_move_insn (operands[3], (const_tiny_rtx[1][(int) (XFmode)]));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
    operand6 = operands[6];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_ee (MULT, (XFmode), (operand1), (operand1)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_ee (MINUS, (XFmode), (operand3), (operand2)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand5), (gen_rtx_fmt_e (SQRT, (XFmode), (operand4)))));



  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand5, operand1)), (62)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode))))))));
# 15708 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_acosdf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx operand7;
  rtx operand8 __attribute__ ((__unused__));
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[9];
    operands[0] = operand0;
    operands[1] = operand1;
# 15691 "../.././gcc/config/i386/i386.md"
{
  int i;

  for (i=2; i<8; i++)
    operands[i] = gen_reg_rtx (XFmode);

  emit_move_insn (operands[4], (const_tiny_rtx[1][(int) (XFmode)]));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
    operand6 = operands[6];
    operand7 = operands[7];
    operand8 = operands[8];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));



  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_ee (MULT, (XFmode), (operand2), (operand2)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand5), (gen_rtx_fmt_ee (MINUS, (XFmode), (operand4), (operand3)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand6), (gen_rtx_fmt_e (SQRT, (XFmode), (operand5)))));



  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand7), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand2, operand6)), (62)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode))))))));
# 15738 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (DFmode), (operand7)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_acossf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx operand7;
  rtx operand8 __attribute__ ((__unused__));
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[9];
    operands[0] = operand0;
    operands[1] = operand1;
# 15715 "../.././gcc/config/i386/i386.md"
{
  int i;

  for (i=2; i<8; i++)
    operands[i] = gen_reg_rtx (XFmode);

  emit_move_insn (operands[4], (const_tiny_rtx[1][(int) (XFmode)]));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
    operand6 = operands[6];
    operand7 = operands[7];
    operand8 = operands[8];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));



  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_ee (MULT, (XFmode), (operand2), (operand2)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand5), (gen_rtx_fmt_ee (MINUS, (XFmode), (operand4), (operand3)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand6), (gen_rtx_fmt_e (SQRT, (XFmode), (operand5)))));



  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand7), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand2, operand6)), (62)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode))))))));
# 15762 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (SFmode), (operand7)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_acosxf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6 __attribute__ ((__unused__));
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[7];
    operands[0] = operand0;
    operands[1] = operand1;
# 15736 "../.././gcc/config/i386/i386.md"
{
  int i;

  for (i=2; i<6; i++)
    operands[i] = gen_reg_rtx (XFmode);

  emit_move_insn (operands[3], (const_tiny_rtx[1][(int) (XFmode)]));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
    operand6 = operands[6];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_ee (MULT, (XFmode), (operand1), (operand1)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_ee (MINUS, (XFmode), (operand3), (operand2)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand5), (gen_rtx_fmt_e (SQRT, (XFmode), (operand4)))));



  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand1, operand5)), (62)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode))))))));
# 15777 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_logsf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5 __attribute__ ((__unused__));
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
# 15769 "../.././gcc/config/i386/i386.md"
{
  rtx temp;

  operands[2] = gen_reg_rtx (XFmode);
  operands[3] = gen_reg_rtx (XFmode);
  operands[4] = gen_reg_rtx (XFmode);

  temp = standard_80387_constant_rtx (4);
  emit_move_insn (operands[3], temp);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));



  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand2, operand3)), (63)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode))))))));
# 15801 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (SFmode), (operand4)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_logdf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5 __attribute__ ((__unused__));
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
# 15792 "../.././gcc/config/i386/i386.md"
{
  rtx temp;

  operands[2] = gen_reg_rtx (XFmode);
  operands[3] = gen_reg_rtx (XFmode);
  operands[4] = gen_reg_rtx (XFmode);

  temp = standard_80387_constant_rtx (4);
  emit_move_insn (operands[3], temp);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));



  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand2, operand3)), (63)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode))))))));
# 15824 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (DFmode), (operand4)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_logxf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3 __attribute__ ((__unused__));
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
# 15810 "../.././gcc/config/i386/i386.md"
{
  rtx temp;

  operands[2] = gen_reg_rtx (XFmode);
  temp = standard_80387_constant_rtx (4);
  emit_move_insn (operands[2], temp);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand1, operand2)), (63)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode))))))));
# 15833 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_log10sf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5 __attribute__ ((__unused__));
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
# 15830 "../.././gcc/config/i386/i386.md"
{
  rtx temp;

  operands[2] = gen_reg_rtx (XFmode);
  operands[3] = gen_reg_rtx (XFmode);
  operands[4] = gen_reg_rtx (XFmode);

  temp = standard_80387_constant_rtx (3);
  emit_move_insn (operands[3], temp);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));



  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand2, operand3)), (63)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode))))))));
# 15862 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (SFmode), (operand4)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_log10df2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5 __attribute__ ((__unused__));
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
# 15853 "../.././gcc/config/i386/i386.md"
{
  rtx temp;

  operands[2] = gen_reg_rtx (XFmode);
  operands[3] = gen_reg_rtx (XFmode);
  operands[4] = gen_reg_rtx (XFmode);

  temp = standard_80387_constant_rtx (3);
  emit_move_insn (operands[3], temp);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));



  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand2, operand3)), (63)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode))))))));
# 15885 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (DFmode), (operand4)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_log10xf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3 __attribute__ ((__unused__));
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
# 15871 "../.././gcc/config/i386/i386.md"
{
  rtx temp;

  operands[2] = gen_reg_rtx (XFmode);
  temp = standard_80387_constant_rtx (3);
  emit_move_insn (operands[2], temp);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand1, operand2)), (63)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode))))))));
# 15894 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_log2sf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5 __attribute__ ((__unused__));
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
# 15891 "../.././gcc/config/i386/i386.md"
{
  operands[2] = gen_reg_rtx (XFmode);
  operands[3] = gen_reg_rtx (XFmode);
  operands[4] = gen_reg_rtx (XFmode);

  emit_move_insn (operands[3], (const_tiny_rtx[1][(int) (XFmode)]));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));



  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand2, operand3)), (63)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode))))))));
# 15920 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (SFmode), (operand4)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_log2df2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5 __attribute__ ((__unused__));
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
# 15911 "../.././gcc/config/i386/i386.md"
{
  operands[2] = gen_reg_rtx (XFmode);
  operands[3] = gen_reg_rtx (XFmode);
  operands[4] = gen_reg_rtx (XFmode);

  emit_move_insn (operands[3], (const_tiny_rtx[1][(int) (XFmode)]));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));



  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand2, operand3)), (63)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode))))))));
# 15940 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (DFmode), (operand4)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_log2xf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3 __attribute__ ((__unused__));
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
# 15926 "../.././gcc/config/i386/i386.md"
{
  operands[2] = gen_reg_rtx (XFmode);
  emit_move_insn (operands[2], (const_tiny_rtx[1][(int) (XFmode)]));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand1, operand2)), (63)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode))))))));
# 15946 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_log1psf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 15949 "../.././gcc/config/i386/i386.md"
{
  rtx op0 = gen_reg_rtx (XFmode);
  rtx op1 = gen_reg_rtx (XFmode);

  emit_insn (gen_extendsfxf2 (op1, operands[1]));
  ix86_emit_i387_log1p (op0, op1);
  emit_insn (gen_truncxfsf2_i387_noop (operands[0], op0));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_log1pdf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 15965 "../.././gcc/config/i386/i386.md"
{
  rtx op0 = gen_reg_rtx (XFmode);
  rtx op1 = gen_reg_rtx (XFmode);

  emit_insn (gen_extenddfxf2 (op1, operands[1]));
  ix86_emit_i387_log1p (op0, op1);
  emit_insn (gen_truncxfdf2_i387_noop (operands[0], op0));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_log1pxf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 15980 "../.././gcc/config/i386/i386.md"
{
  ix86_emit_i387_log1p (operands[0], operands[1]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_logbsf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
# 16009 "../.././gcc/config/i386/i386.md"
{
  operands[2] = gen_reg_rtx (XFmode);
  operands[3] = gen_reg_rtx (XFmode);
  operands[4] = gen_reg_rtx (XFmode);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));



  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand2)), (84)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand2)), (85))))))));
# 16038 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (SFmode), (operand4)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_logbdf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
# 16027 "../.././gcc/config/i386/i386.md"
{
  operands[2] = gen_reg_rtx (XFmode);
  operands[3] = gen_reg_rtx (XFmode);
  operands[4] = gen_reg_rtx (XFmode);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));



  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand2)), (84)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand2)), (85))))))));
# 16056 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (DFmode), (operand4)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_logbxf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
# 16041 "../.././gcc/config/i386/i386.md"
{
  operands[2] = gen_reg_rtx (XFmode);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand1)), (84)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand1)), (85))))))));
# 16062 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_ilogbsi2 (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 16057 "../.././gcc/config/i386/i386.md"
{
  operands[2] = gen_reg_rtx (XFmode);
  operands[3] = gen_reg_rtx (XFmode);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand1)), (84)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand1)), (85))))))));
# 16080 "../.././gcc/config/i386/i386.md"
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FIX, (SImode), (operand3)))), gen_hard_reg_clobber (CCmode, 17)))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_expsf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx operand7;
  rtx operand8;
  rtx operand9;
  rtx operand10;
  rtx operand11;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[12];
    operands[0] = operand0;
    operands[1] = operand1;
# 16105 "../.././gcc/config/i386/i386.md"
{
  rtx temp;
  int i;

  for (i=2; i<12; i++)
    operands[i] = gen_reg_rtx (XFmode);
  temp = standard_80387_constant_rtx (5);
  emit_move_insn (operands[3], temp);
  emit_move_insn (operands[8], (const_tiny_rtx[1][(int) (XFmode)]));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
    operand6 = operands[6];
    operand7 = operands[7];
    operand8 = operands[8];
    operand9 = operands[9];
    operand10 = operands[10];
    operand11 = operands[11];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));



  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_ee (MULT, (XFmode), (operand2), (operand3)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand5), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand4)), (65)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand6), (gen_rtx_fmt_ee (MINUS, (XFmode), (operand4), (operand5)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand7), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand6)), (67)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand9), (gen_rtx_fmt_ee (PLUS, (XFmode), (operand7), (operand8)))));




  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand10), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand9, operand5)), (86)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand11), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand9, operand5)), (87))))))));
# 16175 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (SFmode), (operand10)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_expdf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx operand7;
  rtx operand8;
  rtx operand9;
  rtx operand10;
  rtx operand11;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[12];
    operands[0] = operand0;
    operands[1] = operand1;
# 16135 "../.././gcc/config/i386/i386.md"
{
  rtx temp;
  int i;

  for (i=2; i<12; i++)
    operands[i] = gen_reg_rtx (XFmode);
  temp = standard_80387_constant_rtx (5);
  emit_move_insn (operands[3], temp);
  emit_move_insn (operands[8], (const_tiny_rtx[1][(int) (XFmode)]));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
    operand6 = operands[6];
    operand7 = operands[7];
    operand8 = operands[8];
    operand9 = operands[9];
    operand10 = operands[10];
    operand11 = operands[11];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));



  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_ee (MULT, (XFmode), (operand2), (operand3)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand5), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand4)), (65)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand6), (gen_rtx_fmt_ee (MINUS, (XFmode), (operand4), (operand5)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand7), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand6)), (67)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand9), (gen_rtx_fmt_ee (PLUS, (XFmode), (operand7), (operand8)))));




  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand10), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand9, operand5)), (86)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand11), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand9, operand5)), (87))))))));
# 16205 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (DFmode), (operand10)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_expxf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx operand7;
  rtx operand8;
  rtx operand9;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[10];
    operands[0] = operand0;
    operands[1] = operand1;
# 16161 "../.././gcc/config/i386/i386.md"
{
  rtx temp;
  int i;

  for (i=2; i<10; i++)
    operands[i] = gen_reg_rtx (XFmode);
  temp = standard_80387_constant_rtx (5);
  emit_move_insn (operands[2], temp);
  emit_move_insn (operands[7], (const_tiny_rtx[1][(int) (XFmode)]));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
    operand6 = operands[6];
    operand7 = operands[7];
    operand8 = operands[8];
    operand9 = operands[9];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_ee (MULT, (XFmode), (operand1), (operand2)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand3)), (65)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand5), (gen_rtx_fmt_ee (MINUS, (XFmode), (operand3), (operand4)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand6), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand5)), (67)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand8), (gen_rtx_fmt_ee (PLUS, (XFmode), (operand6), (operand7)))));




  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand8, operand4)), (86)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand9), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand8, operand4)), (87))))))));
# 16225 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_exp10sf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx operand7;
  rtx operand8;
  rtx operand9;
  rtx operand10;
  rtx operand11;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[12];
    operands[0] = operand0;
    operands[1] = operand1;
# 16191 "../.././gcc/config/i386/i386.md"
{
  rtx temp;
  int i;

  for (i=2; i<12; i++)
    operands[i] = gen_reg_rtx (XFmode);
  temp = standard_80387_constant_rtx (6);
  emit_move_insn (operands[3], temp);
  emit_move_insn (operands[8], (const_tiny_rtx[1][(int) (XFmode)]));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
    operand6 = operands[6];
    operand7 = operands[7];
    operand8 = operands[8];
    operand9 = operands[9];
    operand10 = operands[10];
    operand11 = operands[11];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));



  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_ee (MULT, (XFmode), (operand2), (operand3)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand5), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand4)), (65)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand6), (gen_rtx_fmt_ee (MINUS, (XFmode), (operand4), (operand5)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand7), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand6)), (67)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand9), (gen_rtx_fmt_ee (PLUS, (XFmode), (operand7), (operand8)))));




  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand10), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand9, operand5)), (86)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand11), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand9, operand5)), (87))))))));
# 16261 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (SFmode), (operand10)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_exp10df2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx operand7;
  rtx operand8;
  rtx operand9;
  rtx operand10;
  rtx operand11;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[12];
    operands[0] = operand0;
    operands[1] = operand1;
# 16221 "../.././gcc/config/i386/i386.md"
{
  rtx temp;
  int i;

  for (i=2; i<12; i++)
    operands[i] = gen_reg_rtx (XFmode);
  temp = standard_80387_constant_rtx (6);
  emit_move_insn (operands[3], temp);
  emit_move_insn (operands[8], (const_tiny_rtx[1][(int) (XFmode)]));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
    operand6 = operands[6];
    operand7 = operands[7];
    operand8 = operands[8];
    operand9 = operands[9];
    operand10 = operands[10];
    operand11 = operands[11];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));



  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_ee (MULT, (XFmode), (operand2), (operand3)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand5), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand4)), (65)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand6), (gen_rtx_fmt_ee (MINUS, (XFmode), (operand4), (operand5)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand7), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand6)), (67)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand9), (gen_rtx_fmt_ee (PLUS, (XFmode), (operand7), (operand8)))));




  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand10), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand9, operand5)), (86)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand11), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand9, operand5)), (87))))))));
# 16291 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (DFmode), (operand10)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_exp10xf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx operand7;
  rtx operand8;
  rtx operand9;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[10];
    operands[0] = operand0;
    operands[1] = operand1;
# 16247 "../.././gcc/config/i386/i386.md"
{
  rtx temp;
  int i;

  for (i=2; i<10; i++)
    operands[i] = gen_reg_rtx (XFmode);
  temp = standard_80387_constant_rtx (6);
  emit_move_insn (operands[2], temp);
  emit_move_insn (operands[7], (const_tiny_rtx[1][(int) (XFmode)]));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
    operand6 = operands[6];
    operand7 = operands[7];
    operand8 = operands[8];
    operand9 = operands[9];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_ee (MULT, (XFmode), (operand1), (operand2)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand3)), (65)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand5), (gen_rtx_fmt_ee (MINUS, (XFmode), (operand3), (operand4)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand6), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand5)), (67)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand8), (gen_rtx_fmt_ee (PLUS, (XFmode), (operand6), (operand7)))));




  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand8, operand4)), (86)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand9), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand8, operand4)), (87))))))));
# 16311 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_exp2sf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx operand7;
  rtx operand8;
  rtx operand9;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[10];
    operands[0] = operand0;
    operands[1] = operand1;
# 16276 "../.././gcc/config/i386/i386.md"
{
  int i;

  for (i=2; i<10; i++)
    operands[i] = gen_reg_rtx (XFmode);
  emit_move_insn (operands[6], (const_tiny_rtx[1][(int) (XFmode)]));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
    operand6 = operands[6];
    operand7 = operands[7];
    operand8 = operands[8];
    operand9 = operands[9];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));



  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand2)), (65)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_ee (MINUS, (XFmode), (operand2), (operand3)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand5), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand4)), (67)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand7), (gen_rtx_fmt_ee (PLUS, (XFmode), (operand5), (operand6)))));




  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand8), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand7, operand3)), (86)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand9), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand7, operand3)), (87))))))));
# 16336 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (SFmode), (operand8)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_exp2df2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx operand7;
  rtx operand8;
  rtx operand9;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[10];
    operands[0] = operand0;
    operands[1] = operand1;
# 16302 "../.././gcc/config/i386/i386.md"
{
  int i;

  for (i=2; i<10; i++)
    operands[i] = gen_reg_rtx (XFmode);
  emit_move_insn (operands[6], (const_tiny_rtx[1][(int) (XFmode)]));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
    operand6 = operands[6];
    operand7 = operands[7];
    operand8 = operands[8];
    operand9 = operands[9];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));



  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand2)), (65)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_ee (MINUS, (XFmode), (operand2), (operand3)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand5), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand4)), (67)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand7), (gen_rtx_fmt_ee (PLUS, (XFmode), (operand5), (operand6)))));




  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand8), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand7, operand3)), (86)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand9), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand7, operand3)), (87))))))));
# 16362 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (DFmode), (operand8)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_exp2xf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx operand7;
  rtx operand8;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[9];
    operands[0] = operand0;
    operands[1] = operand1;
# 16324 "../.././gcc/config/i386/i386.md"
{
  int i;

  for (i=2; i<9; i++)
    operands[i] = gen_reg_rtx (XFmode);
  emit_move_insn (operands[6], (const_tiny_rtx[1][(int) (XFmode)]));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
    operand6 = operands[6];
    operand7 = operands[7];
    operand8 = operands[8];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (operand1)));


  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand2)), (65)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_ee (MINUS, (XFmode), (operand2), (operand3)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand5), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand4)), (67)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand7), (gen_rtx_fmt_ee (PLUS, (XFmode), (operand5), (operand6)))));




  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand7, operand3)), (86)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand8), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand7, operand3)), (87))))))));
# 16382 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_expm1df2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx operand7;
  rtx operand8;
  rtx operand9;
  rtx operand10;
  rtx operand11;
  rtx operand12;
  rtx operand13;
  rtx operand14;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[15];
    operands[0] = operand0;
    operands[1] = operand1;
# 16358 "../.././gcc/config/i386/i386.md"
{
  rtx temp;
  int i;

  for (i=2; i<15; i++)
    operands[i] = gen_reg_rtx (XFmode);
  temp = standard_80387_constant_rtx (5);
  emit_move_insn (operands[3], temp);
  emit_move_insn (operands[10], (const_tiny_rtx[1][(int) (XFmode)]));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
    operand6 = operands[6];
    operand7 = operands[7];
    operand8 = operands[8];
    operand9 = operands[9];
    operand10 = operands[10];
    operand11 = operands[11];
    operand12 = operands[12];
    operand13 = operands[13];
    operand14 = operands[14];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));



  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_ee (MULT, (XFmode), (operand2), (operand3)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand5), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand4)), (65)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand6), (gen_rtx_fmt_ee (MINUS, (XFmode), (operand4), (operand5)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand7), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand6)), (67)))));





  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand8), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand7, operand5)), (86)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand9), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand7, operand5)), (87))))))));
# 16426 "../.././gcc/config/i386/i386.md"
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand11), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand10, operand9)), (86)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand12), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand10, operand9)), (87))))))));
# 16442 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand13), (gen_rtx_fmt_ee (MINUS, (XFmode), (operand11), (operand10)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand14), (gen_rtx_fmt_ee (PLUS, (XFmode), (operand13), (operand8)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (DFmode), (operand14)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_expm1sf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx operand7;
  rtx operand8;
  rtx operand9;
  rtx operand10;
  rtx operand11;
  rtx operand12;
  rtx operand13;
  rtx operand14;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[15];
    operands[0] = operand0;
    operands[1] = operand1;
# 16395 "../.././gcc/config/i386/i386.md"
{
  rtx temp;
  int i;

  for (i=2; i<15; i++)
    operands[i] = gen_reg_rtx (XFmode);
  temp = standard_80387_constant_rtx (5);
  emit_move_insn (operands[3], temp);
  emit_move_insn (operands[10], (const_tiny_rtx[1][(int) (XFmode)]));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
    operand6 = operands[6];
    operand7 = operands[7];
    operand8 = operands[8];
    operand9 = operands[9];
    operand10 = operands[10];
    operand11 = operands[11];
    operand12 = operands[12];
    operand13 = operands[13];
    operand14 = operands[14];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));



  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_ee (MULT, (XFmode), (operand2), (operand3)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand5), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand4)), (65)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand6), (gen_rtx_fmt_ee (MINUS, (XFmode), (operand4), (operand5)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand7), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand6)), (67)))));





  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand8), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand7, operand5)), (86)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand9), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand7, operand5)), (87))))))));
# 16463 "../.././gcc/config/i386/i386.md"
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand11), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand10, operand9)), (86)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand12), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand10, operand9)), (87))))))));
# 16479 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand13), (gen_rtx_fmt_ee (MINUS, (XFmode), (operand11), (operand10)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand14), (gen_rtx_fmt_ee (PLUS, (XFmode), (operand13), (operand8)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (SFmode), (operand14)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_expm1xf2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx operand7;
  rtx operand8;
  rtx operand9;
  rtx operand10;
  rtx operand11;
  rtx operand12;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[13];
    operands[0] = operand0;
    operands[1] = operand1;
# 16429 "../.././gcc/config/i386/i386.md"
{
  rtx temp;
  int i;

  for (i=2; i<13; i++)
    operands[i] = gen_reg_rtx (XFmode);
  temp = standard_80387_constant_rtx (5);
  emit_move_insn (operands[2], temp);
  emit_move_insn (operands[9], (const_tiny_rtx[1][(int) (XFmode)]));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
    operand6 = operands[6];
    operand7 = operands[7];
    operand8 = operands[8];
    operand9 = operands[9];
    operand10 = operands[10];
    operand11 = operands[11];
    operand12 = operands[12];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_ee (MULT, (XFmode), (operand1), (operand2)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand3)), (65)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand5), (gen_rtx_fmt_ee (MINUS, (XFmode), (operand3), (operand4)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand6), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (1, operand5)), (67)))));





  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand7), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand6, operand4)), (86)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand8), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand6, operand4)), (87))))))));
# 16491 "../.././gcc/config/i386/i386.md"
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand10), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand9, operand8)), (86)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand11), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand9, operand8)), (87))))))));
# 16507 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand12), (gen_rtx_fmt_ee (MINUS, (XFmode), (operand10), (operand9)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (XFmode), (operand12), (operand7)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_ldexpdf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[7];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 16456 "../.././gcc/config/i386/i386.md"
{
  int i;

  for (i=3; i<7; i++)
    operands[i] = gen_reg_rtx (XFmode);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
    operand6 = operands[6];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));



  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_e (FLOAT, (XFmode), (operand2)))));



  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand5), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand3, operand4)), (86)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand6), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand3, operand4)), (87))))))));
# 16494 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (DFmode), (operand5)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_ldexpsf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[7];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 16479 "../.././gcc/config/i386/i386.md"
{
  int i;

  for (i=3; i<7; i++)
    operands[i] = gen_reg_rtx (XFmode);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
    operand6 = operands[6];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_e (FLOAT_EXTEND, (XFmode), (operand1)))));



  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_e (FLOAT, (XFmode), (operand2)))));



  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand5), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand3, operand4)), (86)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand6), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand3, operand4)), (87))))))));
# 16517 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (SFmode), (operand5)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_ldexpxf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx operand3;
  rtx operand4;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 16498 "../.././gcc/config/i386/i386.md"
{
  int i;

  for (i=3; i<5; i++)
    operands[i] = gen_reg_rtx (XFmode);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_e (FLOAT, (XFmode), (operand2)))));



  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand1, operand3)), (86)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_Ei (UNSPEC, (XFmode), (gen_rtvec (2, operand1, operand3)), (87))))))));
# 16530 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_rintdf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 16522 "../.././gcc/config/i386/i386.md"
{
  rtx op0 = gen_reg_rtx (XFmode);
  rtx op1 = gen_reg_rtx (XFmode);

  emit_insn (gen_extenddfxf2 (op1, operands[1]));
  emit_insn (gen_frndintxf2 (op0, op1));

  emit_insn (gen_truncxfdf2_i387_noop (operands[0], op0));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_rintsf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 16539 "../.././gcc/config/i386/i386.md"
{
  rtx op0 = gen_reg_rtx (XFmode);
  rtx op1 = gen_reg_rtx (XFmode);

  emit_insn (gen_extendsfxf2 (op1, operands[1]));
  emit_insn (gen_frndintxf2 (op0, op1));

  emit_insn (gen_truncxfsf2_i387_noop (operands[0], op0));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_rintxf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 16555 "../.././gcc/config/i386/i386.md"
{
  emit_insn (gen_frndintxf2 (operands[0], operands[1]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1293 (rtx, rtx *);
rtx
gen_split_1293 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 16570 "../.././gcc/config/i386/i386.md"
{
  if (memory_operand (operands[0], VOIDmode))
    emit_insn (gen_fistdi2 (operands[0], operands[1]));
  else
    {
      operands[2] = assign_386_stack_local (DImode, SLOT_TEMP);
      emit_insn (gen_fistdi2_with_temp (operands[0], operands[1],
      operands[2]));
    }
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1294 (rtx, rtx *);
rtx
gen_split_1294 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 16617 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_Ei (UNSPEC, (DImode), (gen_rtvec (1, operand1)), (66)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand3))))));
# 16632 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand2))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1295 (rtx, rtx *);
rtx
gen_split_1295 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 16628 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DImode), (gen_rtvec (1, operand1)), (66)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand3))))));
# 16643 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1296 (rtx, rtx *);
rtx
gen_split_1296 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 16640 "../.././gcc/config/i386/i386.md"
{
  operands[2] = assign_386_stack_local (HImode, SLOT_TEMP);
  emit_insn (gen_fisthi2_with_temp (operands[0], operands[1],
     operands[2]));
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1297 (rtx, rtx *);
rtx
gen_split_1297 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 16640 "../.././gcc/config/i386/i386.md"
{
  operands[2] = assign_386_stack_local (SImode, SLOT_TEMP);
  emit_insn (gen_fistsi2_with_temp (operands[0], operands[1],
     operands[2]));
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1298 (rtx, rtx *);
rtx
gen_split_1298 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 16679 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_Ei (UNSPEC, (HImode), (gen_rtvec (1, operand1)), (66)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand2))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1299 (rtx, rtx *);
rtx
gen_split_1299 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 16679 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, operand1)), (66)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand2))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1300 (rtx, rtx *);
rtx
gen_split_1300 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 16689 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (HImode), (gen_rtvec (1, operand1)), (66)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1301 (rtx, rtx *);
rtx
gen_split_1301 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 16689 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, operand1)), (66)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_lrinthi2 (rtx operand0,
 rtx operand1)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (HImode), (gen_rtvec (1, operand1)), (66))));





}


rtx
gen_lrintsi2 (rtx operand0,
 rtx operand1)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, operand1)), (66))));





}


rtx
gen_lrintdi2 (rtx operand0,
 rtx operand1)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DImode), (gen_rtvec (1, operand1)), (66))));





}


extern rtx gen_split_1305 (rtx, rtx *);
rtx
gen_split_1305 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 16712 "../.././gcc/config/i386/i386.md"
{
  (cfun->machine->optimize_mode_switching)[I387_FLOOR] = 1;

  operands[2] = assign_386_stack_local (HImode, SLOT_CW_STORED);
  operands[3] = assign_386_stack_local (HImode, SLOT_CW_FLOOR);

  emit_insn (gen_frndintxf2_floor_i387 (operands[0], operands[1],
     operands[2], operands[3]));
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_floorxf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 16744 "../.././gcc/config/i386/i386.md"
{
  emit_insn (gen_frndintxf2_floor (operands[0], operands[1]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_floordf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 16755 "../.././gcc/config/i386/i386.md"
{
  rtx op0 = gen_reg_rtx (XFmode);
  rtx op1 = gen_reg_rtx (XFmode);

  emit_insn (gen_extenddfxf2 (op1, operands[1]));
  emit_insn (gen_frndintxf2_floor (op0, op1));

  emit_insn (gen_truncxfdf2_i387_noop (operands[0], op0));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_floorsf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 16772 "../.././gcc/config/i386/i386.md"
{
  rtx op0 = gen_reg_rtx (XFmode);
  rtx op1 = gen_reg_rtx (XFmode);

  emit_insn (gen_extendsfxf2 (op1, operands[1]));
  emit_insn (gen_frndintxf2_floor (op0, op1));

  emit_insn (gen_truncxfsf2_i387_noop (operands[0], op0));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1309 (rtx, rtx *);
rtx
gen_split_1309 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 16794 "../.././gcc/config/i386/i386.md"
{
  (cfun->machine->optimize_mode_switching)[I387_FLOOR] = 1;

  operands[2] = assign_386_stack_local (HImode, SLOT_CW_STORED);
  operands[3] = assign_386_stack_local (HImode, SLOT_CW_FLOOR);
  if (memory_operand (operands[0], VOIDmode))
    emit_insn (gen_fisthi2_floor (operands[0], operands[1],
          operands[2], operands[3]));
  else
    {
      operands[4] = assign_386_stack_local (HImode, SLOT_TEMP);
      emit_insn (gen_fisthi2_floor_with_temp (operands[0], operands[1],
        operands[2], operands[3],
        operands[4]));
    }
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1310 (rtx, rtx *);
rtx
gen_split_1310 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 16794 "../.././gcc/config/i386/i386.md"
{
  (cfun->machine->optimize_mode_switching)[I387_FLOOR] = 1;

  operands[2] = assign_386_stack_local (HImode, SLOT_CW_STORED);
  operands[3] = assign_386_stack_local (HImode, SLOT_CW_FLOOR);
  if (memory_operand (operands[0], VOIDmode))
    emit_insn (gen_fistsi2_floor (operands[0], operands[1],
          operands[2], operands[3]));
  else
    {
      operands[4] = assign_386_stack_local (SImode, SLOT_TEMP);
      emit_insn (gen_fistsi2_floor_with_temp (operands[0], operands[1],
        operands[2], operands[3],
        operands[4]));
    }
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1311 (rtx, rtx *);
rtx
gen_split_1311 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 16794 "../.././gcc/config/i386/i386.md"
{
  (cfun->machine->optimize_mode_switching)[I387_FLOOR] = 1;

  operands[2] = assign_386_stack_local (HImode, SLOT_CW_STORED);
  operands[3] = assign_386_stack_local (HImode, SLOT_CW_FLOOR);
  if (memory_operand (operands[0], VOIDmode))
    emit_insn (gen_fistdi2_floor (operands[0], operands[1],
          operands[2], operands[3]));
  else
    {
      operands[4] = assign_386_stack_local (DImode, SLOT_TEMP);
      emit_insn (gen_fistdi2_floor_with_temp (operands[0], operands[1],
        operands[2], operands[3],
        operands[4]));
    }
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1312 (rtx, rtx *);
rtx
gen_split_1312 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx _val = 0;
  start_sequence ();
# 16858 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  operand5 = operands[5];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_Ei (UNSPEC, (DImode), (gen_rtvec (1, operand1)), (74)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand5))))));
# 16879 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand4))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1313 (rtx, rtx *);
rtx
gen_split_1313 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx _val = 0;
  start_sequence ();
# 16873 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  operand5 = operands[5];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DImode), (gen_rtvec (1, operand1)), (74)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand5))))));
# 16894 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1314 (rtx, rtx *);
rtx
gen_split_1314 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx _val = 0;
  start_sequence ();
# 16915 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_Ei (UNSPEC, (HImode), (gen_rtvec (1, operand1)), (74)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3))))));
# 16933 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand4))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1315 (rtx, rtx *);
rtx
gen_split_1315 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx _val = 0;
  start_sequence ();
# 16915 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, operand1)), (74)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3))))));
# 16933 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand4))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1316 (rtx, rtx *);
rtx
gen_split_1316 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 16929 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (HImode), (gen_rtvec (1, operand1)), (74)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3))))));
# 16946 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1317 (rtx, rtx *);
rtx
gen_split_1317 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 16929 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, operand1)), (74)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3))))));
# 16946 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_lfloorhi2 (rtx operand0,
 rtx operand1)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (HImode), (gen_rtvec (1, operand1)), (74)))), gen_hard_reg_clobber (CCmode, 17))));
# 16965 "../.././gcc/config/i386/i386.md"
}


rtx
gen_lfloorsi2 (rtx operand0,
 rtx operand1)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, operand1)), (74)))), gen_hard_reg_clobber (CCmode, 17))));
# 16981 "../.././gcc/config/i386/i386.md"
}


rtx
gen_lfloordi2 (rtx operand0,
 rtx operand1)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DImode), (gen_rtvec (1, operand1)), (74)))), gen_hard_reg_clobber (CCmode, 17))));
# 16997 "../.././gcc/config/i386/i386.md"
}


extern rtx gen_split_1321 (rtx, rtx *);
rtx
gen_split_1321 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 16953 "../.././gcc/config/i386/i386.md"
{
  (cfun->machine->optimize_mode_switching)[I387_CEIL] = 1;

  operands[2] = assign_386_stack_local (HImode, SLOT_CW_STORED);
  operands[3] = assign_386_stack_local (HImode, SLOT_CW_CEIL);

  emit_insn (gen_frndintxf2_ceil_i387 (operands[0], operands[1],
           operands[2], operands[3]));
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_ceilxf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 16985 "../.././gcc/config/i386/i386.md"
{
  emit_insn (gen_frndintxf2_ceil (operands[0], operands[1]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_ceildf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 16996 "../.././gcc/config/i386/i386.md"
{
  rtx op0 = gen_reg_rtx (XFmode);
  rtx op1 = gen_reg_rtx (XFmode);

  emit_insn (gen_extenddfxf2 (op1, operands[1]));
  emit_insn (gen_frndintxf2_ceil (op0, op1));

  emit_insn (gen_truncxfdf2_i387_noop (operands[0], op0));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_ceilsf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 17013 "../.././gcc/config/i386/i386.md"
{
  rtx op0 = gen_reg_rtx (XFmode);
  rtx op1 = gen_reg_rtx (XFmode);

  emit_insn (gen_extendsfxf2 (op1, operands[1]));
  emit_insn (gen_frndintxf2_ceil (op0, op1));

  emit_insn (gen_truncxfsf2_i387_noop (operands[0], op0));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1325 (rtx, rtx *);
rtx
gen_split_1325 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 17035 "../.././gcc/config/i386/i386.md"
{
  (cfun->machine->optimize_mode_switching)[I387_CEIL] = 1;

  operands[2] = assign_386_stack_local (HImode, SLOT_CW_STORED);
  operands[3] = assign_386_stack_local (HImode, SLOT_CW_CEIL);
  if (memory_operand (operands[0], VOIDmode))
    emit_insn (gen_fisthi2_ceil (operands[0], operands[1],
         operands[2], operands[3]));
  else
    {
      operands[4] = assign_386_stack_local (HImode, SLOT_TEMP);
      emit_insn (gen_fisthi2_ceil_with_temp (operands[0], operands[1],
       operands[2], operands[3],
       operands[4]));
    }
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1326 (rtx, rtx *);
rtx
gen_split_1326 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 17035 "../.././gcc/config/i386/i386.md"
{
  (cfun->machine->optimize_mode_switching)[I387_CEIL] = 1;

  operands[2] = assign_386_stack_local (HImode, SLOT_CW_STORED);
  operands[3] = assign_386_stack_local (HImode, SLOT_CW_CEIL);
  if (memory_operand (operands[0], VOIDmode))
    emit_insn (gen_fistsi2_ceil (operands[0], operands[1],
         operands[2], operands[3]));
  else
    {
      operands[4] = assign_386_stack_local (SImode, SLOT_TEMP);
      emit_insn (gen_fistsi2_ceil_with_temp (operands[0], operands[1],
       operands[2], operands[3],
       operands[4]));
    }
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1327 (rtx, rtx *);
rtx
gen_split_1327 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 17035 "../.././gcc/config/i386/i386.md"
{
  (cfun->machine->optimize_mode_switching)[I387_CEIL] = 1;

  operands[2] = assign_386_stack_local (HImode, SLOT_CW_STORED);
  operands[3] = assign_386_stack_local (HImode, SLOT_CW_CEIL);
  if (memory_operand (operands[0], VOIDmode))
    emit_insn (gen_fistdi2_ceil (operands[0], operands[1],
         operands[2], operands[3]));
  else
    {
      operands[4] = assign_386_stack_local (DImode, SLOT_TEMP);
      emit_insn (gen_fistdi2_ceil_with_temp (operands[0], operands[1],
       operands[2], operands[3],
       operands[4]));
    }
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1328 (rtx, rtx *);
rtx
gen_split_1328 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx _val = 0;
  start_sequence ();
# 17099 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  operand5 = operands[5];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_Ei (UNSPEC, (DImode), (gen_rtvec (1, operand1)), (75)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand5))))));
# 17120 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand4))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1329 (rtx, rtx *);
rtx
gen_split_1329 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx _val = 0;
  start_sequence ();
# 17114 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  operand5 = operands[5];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DImode), (gen_rtvec (1, operand1)), (75)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand5))))));
# 17135 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1330 (rtx, rtx *);
rtx
gen_split_1330 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx _val = 0;
  start_sequence ();
# 17156 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_Ei (UNSPEC, (HImode), (gen_rtvec (1, operand1)), (75)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3))))));
# 17174 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand4))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1331 (rtx, rtx *);
rtx
gen_split_1331 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx _val = 0;
  start_sequence ();
# 17156 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, operand1)), (75)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3))))));
# 17174 "../.././gcc/config/i386/i386.md"
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand4))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1332 (rtx, rtx *);
rtx
gen_split_1332 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 17170 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (HImode), (gen_rtvec (1, operand1)), (75)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3))))));
# 17187 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1333 (rtx, rtx *);
rtx
gen_split_1333 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 17170 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, operand1)), (75)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3))))));
# 17187 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_lceilhi2 (rtx operand0,
 rtx operand1)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (HImode), (gen_rtvec (1, operand1)), (75)))), gen_hard_reg_clobber (CCmode, 17))));
# 17206 "../.././gcc/config/i386/i386.md"
}


rtx
gen_lceilsi2 (rtx operand0,
 rtx operand1)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (1, operand1)), (75)))), gen_hard_reg_clobber (CCmode, 17))));
# 17222 "../.././gcc/config/i386/i386.md"
}


rtx
gen_lceildi2 (rtx operand0,
 rtx operand1)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DImode), (gen_rtvec (1, operand1)), (75)))), gen_hard_reg_clobber (CCmode, 17))));
# 17238 "../.././gcc/config/i386/i386.md"
}


extern rtx gen_split_1337 (rtx, rtx *);
rtx
gen_split_1337 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 17194 "../.././gcc/config/i386/i386.md"
{
  (cfun->machine->optimize_mode_switching)[I387_TRUNC] = 1;

  operands[2] = assign_386_stack_local (HImode, SLOT_CW_STORED);
  operands[3] = assign_386_stack_local (HImode, SLOT_CW_TRUNC);

  emit_insn (gen_frndintxf2_trunc_i387 (operands[0], operands[1],
     operands[2], operands[3]));
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_btruncxf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 17226 "../.././gcc/config/i386/i386.md"
{
  emit_insn (gen_frndintxf2_trunc (operands[0], operands[1]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_btruncdf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 17237 "../.././gcc/config/i386/i386.md"
{
  rtx op0 = gen_reg_rtx (XFmode);
  rtx op1 = gen_reg_rtx (XFmode);

  emit_insn (gen_extenddfxf2 (op1, operands[1]));
  emit_insn (gen_frndintxf2_trunc (op0, op1));

  emit_insn (gen_truncxfdf2_i387_noop (operands[0], op0));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_btruncsf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 17254 "../.././gcc/config/i386/i386.md"
{
  rtx op0 = gen_reg_rtx (XFmode);
  rtx op1 = gen_reg_rtx (XFmode);

  emit_insn (gen_extendsfxf2 (op1, operands[1]));
  emit_insn (gen_frndintxf2_trunc (op0, op1));

  emit_insn (gen_truncxfsf2_i387_noop (operands[0], op0));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1341 (rtx, rtx *);
rtx
gen_split_1341 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 17277 "../.././gcc/config/i386/i386.md"
{
  (cfun->machine->optimize_mode_switching)[I387_MASK_PM] = 1;

  operands[2] = assign_386_stack_local (HImode, SLOT_CW_STORED);
  operands[3] = assign_386_stack_local (HImode, SLOT_CW_MASK_PM);

  emit_insn (gen_frndintxf2_mask_pm_i387 (operands[0], operands[1],
       operands[2], operands[3]));
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_nearbyintxf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 17309 "../.././gcc/config/i386/i386.md"
{
  emit_insn (gen_frndintxf2_mask_pm (operands[0], operands[1]));

  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_nearbyintdf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 17321 "../.././gcc/config/i386/i386.md"
{
  rtx op0 = gen_reg_rtx (XFmode);
  rtx op1 = gen_reg_rtx (XFmode);

  emit_insn (gen_extenddfxf2 (op1, operands[1]));
  emit_insn (gen_frndintxf2_mask_pm (op0, op1));

  emit_insn (gen_truncxfdf2_i387_noop (operands[0], op0));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_nearbyintsf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 17338 "../.././gcc/config/i386/i386.md"
{
  rtx op0 = gen_reg_rtx (XFmode);
  rtx op1 = gen_reg_rtx (XFmode);

  emit_insn (gen_extendsfxf2 (op1, operands[1]));
  emit_insn (gen_frndintxf2_mask_pm (op0, op1));

  emit_insn (gen_truncxfsf2_i387_noop (operands[0], op0));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movmemsi (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 17364 "../.././gcc/config/i386/i386.md"
{
 if (ix86_expand_movmem (operands[0], operands[1], operands[2], operands[3]))
   return (_val = get_insns (), end_sequence (), _val);
 else
   return (end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand2)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand3)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_strmov (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[7];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 17395 "../.././gcc/config/i386/i386.md"
{
  rtx adjust = gen_rtx_CONST_INT (VOIDmode, (((unsigned short) mode_size[((enum machine_mode) (operands[1])->mode)])));



  operands[5] = gen_rtx_fmt_ee (PLUS, ((0 ? DImode : SImode)), (operands[0]), (adjust));
  operands[6] = gen_rtx_fmt_ee (PLUS, ((0 ? DImode : SImode)), (operands[2]), (adjust));

  if ((x86_single_stringop & (1 << ix86_tune)) || optimize_size)
    {
      emit_insn (gen_strmov_singleop (operands[0], operands[1],
          operands[2], operands[3],
          operands[5], operands[6]));
      return (_val = get_insns (), end_sequence (), _val);
    }

  operands[4] = gen_reg_rtx (((enum machine_mode) (operands[1])->mode));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
    operand6 = operands[6];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (operand3)));


  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (operand4)));


  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand5)), gen_hard_reg_clobber (CCmode, 17)))));





  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (operand6)), gen_hard_reg_clobber (CCmode, 17)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_strmov_singleop (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3,
 rtx operand4,
 rtx operand5)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (operand3)), gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand4)), gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (operand5)), gen_rtx_fmt_e (USE, (VOIDmode), (gen_rtx_REG (SImode, 19))))));
# 17467 "../.././gcc/config/i386/i386.md"
}


rtx
gen_rep_mov (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3,
 rtx operand4,
 rtx operand5,
 rtx operand6)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (6, gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), ((const_int_rtx[64]))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand5)), gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (operand6)), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (operand3)), gen_rtx_fmt_e (USE, (VOIDmode), (operand4)), gen_rtx_fmt_e (USE, (VOIDmode), (gen_rtx_REG (SImode, 19))))));
# 17498 "../.././gcc/config/i386/i386.md"
}


rtx
gen_setmemsi (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 17652 "../.././gcc/config/i386/i386.md"
{

 if (operands[2] != (const_int_rtx[64]))
   return (end_sequence (), _val);

 if (ix86_expand_clrmem (operands[0], operands[1], operands[3]))
   return (_val = get_insns (), end_sequence (), _val);
 else
   return (end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand1)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand2)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand3)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_strset (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 17690 "../.././gcc/config/i386/i386.md"
{
  if (((enum machine_mode) (operands[1])->mode) != ((enum machine_mode) (operands[2])->mode))
    operands[1] = adjust_address_1 (operands[1], ((enum machine_mode) (operands[2])->mode), 0, 0, 1);



  operands[3] = gen_rtx_fmt_ee (PLUS, ((0 ? DImode : SImode)), (operands[0]), (gen_rtx_CONST_INT (VOIDmode, (((unsigned short) mode_size[((enum machine_mode) (operands[2])->mode)])))));


  if ((x86_single_stringop & (1 << ix86_tune)) || optimize_size)
    {
      emit_insn (gen_strset_singleop (operands[0], operands[1], operands[2],
          operands[3]));
      return (_val = get_insns (), end_sequence (), _val);
    }
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (operand2)));


  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand3)), gen_hard_reg_clobber (CCmode, 17)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_strset_singleop (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (operand2)), gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand3)), gen_rtx_fmt_e (USE, (VOIDmode), (gen_rtx_REG (SImode, 19))))));
# 17743 "../.././gcc/config/i386/i386.md"
}


rtx
gen_rep_stos (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3,
 rtx operand4)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (6, gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), ((const_int_rtx[64]))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand4)), gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), ((const_int_rtx[64]))), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)), gen_rtx_fmt_e (USE, (VOIDmode), (operand1)), gen_rtx_fmt_e (USE, (VOIDmode), (gen_rtx_REG (SImode, 19))))));
# 17771 "../.././gcc/config/i386/i386.md"
}


rtx
gen_cmpstrnsi (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3,
 rtx operand4)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
# 17913 "../.././gcc/config/i386/i386.md"
{
  rtx addr1, addr2, out, outlow, count, countreg, align;


  if (global_regs[4] || global_regs[5])
    return (end_sequence (), _val);

  out = operands[0];
  if (((enum rtx_code) (out)->code) != REG)
    out = gen_reg_rtx (SImode);

  addr1 = copy_to_mode_reg ((0 ? DImode : SImode), (((operands[1])->u.fld[0]).rt_rtx));
  addr2 = copy_to_mode_reg ((0 ? DImode : SImode), (((operands[2])->u.fld[0]).rt_rtx));
  if (addr1 != (((operands[1])->u.fld[0]).rt_rtx))
    operands[1] = replace_equiv_address_nv (operands[1], addr1);
  if (addr2 != (((operands[2])->u.fld[0]).rt_rtx))
    operands[2] = replace_equiv_address_nv (operands[2], addr2);

  count = operands[3];
  countreg = ix86_zero_extend_to_Pmode (count);




  align = operands[4];

  emit_insn (gen_cld ());
  if (((enum rtx_code) (count)->code) == CONST_INT)
    {
      if (((count)->u.hwint[0]) == 0)
 {
   emit_move_insn (operands[0], (const_int_rtx[64]));
   return (_val = get_insns (), end_sequence (), _val);
 }
      emit_insn (gen_cmpstrnqi_nz_1 (addr1, addr2, countreg, align,
         operands[1], operands[2]));
    }
  else
    {
      if (0)
 emit_insn (gen_cmpdi_1_rex64 (countreg, countreg));
      else
 emit_insn (gen_cmpsi_1 (countreg, countreg));
      emit_insn (gen_cmpstrnqi_1 (addr1, addr2, countreg, align,
      operands[1], operands[2]));
    }

  outlow = rtl_hooks.gen_lowpart (QImode, out);
  emit_insn (gen_cmpintqi (outlow));
  emit_move_insn (out, gen_rtx_fmt_e (SIGN_EXTEND, (SImode), (outlow)));

  if (operands[0] != out)
    emit_move_insn (operands[0], out);

  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (COMPARE, (SImode), (operand1), (operand2)))));




  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand3)));

  emit_insn (gen_rtx_fmt_e (USE, (VOIDmode), (operand4)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_cmpintqi (rtx operand0)
{
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
# 17982 "../.././gcc/config/i386/i386.md"
operands[1] = gen_reg_rtx (QImode);
   operands[2] = gen_reg_rtx (QImode);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_ee (GTU, (QImode), (gen_rtx_REG (CCmode, 17)), ((const_int_rtx[64]))))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_ee (LTU, (QImode), (gen_rtx_REG (CCmode, 17)), ((const_int_rtx[64]))))));





  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (QImode), (operand1), (operand2)))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_cmpstrnqi_nz_1 (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3,
 rtx operand4,
 rtx operand5)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (7, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCmode, 17)), (gen_rtx_fmt_ee (COMPARE, (CCmode), (operand4), (operand5)))), gen_rtx_fmt_e (USE, (VOIDmode), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)), gen_rtx_fmt_e (USE, (VOIDmode), (gen_rtx_REG (SImode, 19))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand0)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand1)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand2)))));
# 18043 "../.././gcc/config/i386/i386.md"
}


rtx
gen_cmpstrnqi_1 (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3,
 rtx operand4,
 rtx operand5)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (7, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCmode, 17)), (gen_rtx_fmt_eee (IF_THEN_ELSE, (CCmode), (gen_rtx_fmt_ee (NE, (VOIDmode), (operand2), ((const_int_rtx[64])))), (gen_rtx_fmt_ee (COMPARE, (CCmode), (operand4), (operand5))), ((const_int_rtx[64]))))), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)), gen_rtx_fmt_e (USE, (VOIDmode), (gen_rtx_REG (CCmode, 17))), gen_rtx_fmt_e (USE, (VOIDmode), (gen_rtx_REG (SImode, 19))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand0)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand1)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand2)))));
# 18081 "../.././gcc/config/i386/i386.md"
}


rtx
gen_strlensi (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 18095 "../.././gcc/config/i386/i386.md"
{
 if (ix86_expand_strlen (operands[0], operands[1], operands[2], operands[3]))
   return (_val = get_insns (), end_sequence (), _val);
 else
   return (end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (SImode), (gen_rtvec (3, operand1, operand2, operand3)), (20)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_strlendi (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 18108 "../.././gcc/config/i386/i386.md"
{
 if (ix86_expand_strlen (operands[0], operands[1], operands[2], operands[3]))
   return (_val = get_insns (), end_sequence (), _val);
 else
   return (end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (DImode), (gen_rtvec (3, operand1, operand2, operand3)), (20)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_strlenqi_1 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand2)), gen_rtx_fmt_e (USE, (VOIDmode), (gen_rtx_REG (SImode, 19))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand1)), gen_hard_reg_clobber (CCmode, 17))));
# 18149 "../.././gcc/config/i386/i386.md"
}


extern rtx gen_peephole2_1360 (rtx, rtx *);
rtx
gen_peephole2_1360 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 18196 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  operand5 = operands[5];
  operand6 = operands[6];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (7, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCmode, 17)), (gen_rtx_fmt_ee (COMPARE, (CCmode), (gen_rtx_MEM (BLKmode, operand4)), (gen_rtx_MEM (BLKmode, operand5))))), gen_rtx_fmt_e (USE, (VOIDmode), (operand6)), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)), gen_rtx_fmt_e (USE, (VOIDmode), (gen_rtx_REG (SImode, 19))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand0)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand1)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand2))))));
# 18227 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1361 (rtx, rtx *);
rtx
gen_peephole2_1361 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 18234 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  operand5 = operands[5];
  operand6 = operands[6];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (7, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (CCmode, 17)), (gen_rtx_fmt_eee (IF_THEN_ELSE, (CCmode), (gen_rtx_fmt_ee (NE, (VOIDmode), (operand6), ((const_int_rtx[64])))), (gen_rtx_fmt_ee (COMPARE, (CCmode), (gen_rtx_MEM (BLKmode, operand4)), (gen_rtx_MEM (BLKmode, operand5)))), ((const_int_rtx[64]))))), gen_rtx_fmt_e (USE, (VOIDmode), (operand3)), gen_rtx_fmt_e (USE, (VOIDmode), (gen_rtx_REG (CCmode, 17))), gen_rtx_fmt_e (USE, (VOIDmode), (gen_rtx_REG (SImode, 19))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand0)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand1)), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand2))))));
# 18271 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movsicc (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 18285 "../.././gcc/config/i386/i386.md"
if (!ix86_expand_int_movcc (operands)) return (end_sequence (), _val); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (IF_THEN_ELSE, (SImode), (operand1), (operand2), (operand3)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movhicc (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 18328 "../.././gcc/config/i386/i386.md"
if (!ix86_expand_int_movcc (operands)) return (end_sequence (), _val); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (IF_THEN_ELSE, (HImode), (operand1), (operand2), (operand3)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movqicc (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 18350 "../.././gcc/config/i386/i386.md"
if (!ix86_expand_int_movcc (operands)) return (end_sequence (), _val); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (IF_THEN_ELSE, (QImode), (operand1), (operand2), (operand3)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1365 (rtx, rtx *);
rtx
gen_split_1365 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx _val = 0;
  start_sequence ();
# 18366 "../.././gcc/config/i386/i386.md"
operands[0] = rtl_hooks.gen_lowpart (SImode, operands[0]);
   operands[2] = rtl_hooks.gen_lowpart (SImode, operands[2]);
   operands[3] = rtl_hooks.gen_lowpart (SImode, operands[3]);
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (IF_THEN_ELSE, (SImode), (gen_rtx_fmt_ee (((enum rtx_code) (operand1)->code), ((enum machine_mode) (operand1)->mode), operand4, (const_int_rtx[64]))), (operand2), (operand3)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movsfcc (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 18378 "../.././gcc/config/i386/i386.md"
if (! ix86_expand_fp_movcc (operands)) return (end_sequence (), _val); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (IF_THEN_ELSE, (SFmode), (operand1), (operand2), (operand3)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movdfcc (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 18402 "../.././gcc/config/i386/i386.md"
if (! ix86_expand_fp_movcc (operands)) return (end_sequence (), _val); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (IF_THEN_ELSE, (DFmode), (operand1), (operand2), (operand3)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1368 (rtx, rtx *);
rtx
gen_split_1368 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx operand5;
  rtx operand6;
  rtx operand7;
  rtx operand8;
  rtx _val = 0;
  start_sequence ();
# 18452 "../.././gcc/config/i386/i386.md"
split_di (operands+2, 1, operands+5, operands+6);
   split_di (operands+3, 1, operands+7, operands+8);
   split_di (operands, 1, operands+2, operands+3);
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  operand5 = operands[5];
  operand6 = operands[6];
  operand7 = operands[7];
  operand8 = operands[8];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (gen_rtx_fmt_eee (IF_THEN_ELSE, (SImode), (gen_rtx_fmt_ee (((enum rtx_code) (operand1)->code), ((enum machine_mode) (operand1)->mode), operand4, (const_int_rtx[64]))), (operand5), (operand7)))));







  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_eee (IF_THEN_ELSE, (SImode), (gen_rtx_fmt_ee (((enum rtx_code) (operand1)->code), ((enum machine_mode) (operand1)->mode), copy_rtx (operand4), (const_int_rtx[64]))), (operand6), (operand8)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movxfcc (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 18462 "../.././gcc/config/i386/i386.md"
if (! ix86_expand_fp_movcc (operands)) return (end_sequence (), _val); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (IF_THEN_ELSE, (XFmode), (operand1), (operand2), (operand3)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_addqicc (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 18571 "../.././gcc/config/i386/i386.md"
if (!ix86_expand_int_addcc (operands)) return (end_sequence (), _val); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  emit (operand3);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_addhicc (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 18579 "../.././gcc/config/i386/i386.md"
if (!ix86_expand_int_addcc (operands)) return (end_sequence (), _val); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  emit (operand3);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_addsicc (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 18587 "../.././gcc/config/i386/i386.md"
if (!ix86_expand_int_addcc (operands)) return (end_sequence (), _val); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  emit (operand3);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_allocate_stack_worker (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 18721 "../.././gcc/config/i386/i386.md"
{
  if (reload_completed)
    {
      if (0)
 emit_insn (gen_allocate_stack_worker_rex64_postreload (operands[0]));
      else
 emit_insn (gen_allocate_stack_worker_postreload (operands[0]));
    }
  else
    {
      if (0)
 emit_insn (gen_allocate_stack_worker_rex64 (operands[0]));
      else
 emit_insn (gen_allocate_stack_worker_1 (operands[0]));
    }
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
  }
  emit (operand0);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_allocate_stack_worker_postreload (rtx operand0)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (SImode), (gen_rtvec (1, operand0)), (1)), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 7)), (gen_rtx_fmt_ee (MINUS, (SImode), (gen_rtx_REG (SImode, 7)), (operand0)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand0)), gen_hard_reg_clobber (CCmode, 17))));
# 18766 "../.././gcc/config/i386/i386.md"
}


rtx
gen_allocate_stack_worker_rex64_postreload (rtx operand0)
{
  return gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (4, gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (DImode), (gen_rtvec (1, operand0)), (1)), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (DImode, 7)), (gen_rtx_fmt_ee (MINUS, (DImode), (gen_rtx_REG (DImode, 7)), (operand0)))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand0)), gen_hard_reg_clobber (CCmode, 17))));
# 18788 "../.././gcc/config/i386/i386.md"
}


rtx
gen_allocate_stack (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 18788 "../.././gcc/config/i386/i386.md"
{







    emit_insn (gen_allocate_stack_worker (copy_to_mode_reg (SImode,
           operands[1])));

  emit_move_insn (operands[0], (global_rtl[GR_VIRTUAL_STACK_DYNAMIC]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (SImode), (gen_rtx_REG (SImode, 7)), (operand1)))), gen_hard_reg_clobber (CCmode, 17)))));
# 18814 "../.././gcc/config/i386/i386.md"
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 7)), (gen_rtx_fmt_ee (MINUS, (SImode), (gen_rtx_REG (SImode, 7)), (operand1)))), gen_hard_reg_clobber (CCmode, 17)))));
# 18824 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_builtin_setjmp_receiver (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 18806 "../.././gcc/config/i386/i386.md"
{
  emit_insn (gen_set_got (pic_offset_table_rtx));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
  }
  emit_insn (gen_rtx_fmt_u0 (LABEL_REF, (VOIDmode), (operand0)));

  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1378 (rtx, rtx *);
rtx
gen_split_1378 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 18829 "../.././gcc/config/i386/i386.md"
operands[0] = rtl_hooks.gen_lowpart (SImode, operands[0]);
   operands[1] = rtl_hooks.gen_lowpart (SImode, operands[1]);
   if (((enum rtx_code) (operands[3])->code) != ASHIFT)
     operands[2] = rtl_hooks.gen_lowpart (SImode, operands[2]);
   ((operands[3])->mode = (SImode));
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (((enum rtx_code) (operand3)->code), ((enum machine_mode) (operand3)->mode), operand1, operand2))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1379 (rtx, rtx *);
rtx
gen_split_1379 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx _val = 0;
  start_sequence ();
# 18858 "../.././gcc/config/i386/i386.md"
{
  operands[4]
    = gen_int_mode (((operands[4])->u.hwint[0])
      & mode_mask_array[((enum machine_mode) (operands[1])->mode)], SImode);
  operands[1] = rtl_hooks.gen_lowpart (SImode, operands[1]);
  operands[3] = rtl_hooks.gen_lowpart (SImode, operands[3]);
}
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (((enum rtx_code) (operand2)->code), ((enum machine_mode) (operand2)->mode), gen_rtx_fmt_ee (AND, (SImode), (operand3), (operand4)), (const_int_rtx[64])))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_ee (AND, (SImode), (copy_rtx (operand3)), (copy_rtx (operand4)))))))));
# 18884 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1380 (rtx, rtx *);
rtx
gen_split_1380 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 18884 "../.././gcc/config/i386/i386.md"
{
  operands[3]
    = gen_int_mode (((operands[3])->u.hwint[0])
      & mode_mask_array[((enum machine_mode) (operands[2])->mode)], SImode);
  operands[2] = rtl_hooks.gen_lowpart (SImode, operands[2]);
}
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (((enum rtx_code) (operand1)->code), ((enum machine_mode) (operand1)->mode), gen_rtx_fmt_ee (AND, (SImode), (operand2), (operand3)), (const_int_rtx[64])))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1381 (rtx, rtx *);
rtx
gen_split_1381 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 18902 "../.././gcc/config/i386/i386.md"
operands[0] = rtl_hooks.gen_lowpart (SImode, operands[0]);
   operands[1] = rtl_hooks.gen_lowpart (SImode, operands[1]);
  operand0 = operands[0];
  operand1 = operands[1];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (NEG, (SImode), (operand1)))), gen_hard_reg_clobber (CCmode, 17)))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1382 (rtx, rtx *);
rtx
gen_split_1382 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 18914 "../.././gcc/config/i386/i386.md"
operands[0] = rtl_hooks.gen_lowpart (SImode, operands[0]);
   operands[1] = rtl_hooks.gen_lowpart (SImode, operands[1]);
  operand0 = operands[0];
  operand1 = operands[1];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (NOT, (SImode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1383 (rtx, rtx *);
rtx
gen_split_1383 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
# 18929 "../.././gcc/config/i386/i386.md"
operands[0] = rtl_hooks.gen_lowpart (SImode, operands[0]);
   operands[2] = rtl_hooks.gen_lowpart (SImode, operands[2]);
   operands[3] = rtl_hooks.gen_lowpart (SImode, operands[3]);
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (IF_THEN_ELSE, (SImode), (operand1), (operand2), (operand3)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1384 (rtx, rtx *);
rtx
gen_peephole2_1384 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[2] = peep2_find_free_register (1, 1, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 18946 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (operand1)));


  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand2))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1385 (rtx, rtx *);
rtx
gen_peephole2_1385 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[2] = peep2_find_free_register (1, 1, "r", DImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 18956 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (operand1)));


  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand2))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1386 (rtx, rtx *);
rtx
gen_peephole2_1386 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[2] = peep2_find_free_register (1, 1, "r", SFmode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 18968 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (operand1)));


  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand2))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1387 (rtx, rtx *);
rtx
gen_peephole2_1387 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[2] = peep2_find_free_register (1, 1, "r", HImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 18978 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (operand1)));


  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand2))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1388 (rtx, rtx *);
rtx
gen_peephole2_1388 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[2] = peep2_find_free_register (1, 1, "q", QImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 18988 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (operand1)));


  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand2))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1389 (rtx, rtx *);
rtx
gen_peephole2_1389 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[1] = peep2_find_free_register (0, 0, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19004 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), ((const_int_rtx[64]))), gen_hard_reg_clobber (CCmode, 17)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand1))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1390 (rtx, rtx *);
rtx
gen_peephole2_1390 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[1] = peep2_find_free_register (0, 0, "r", HImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19018 "../.././gcc/config/i386/i386.md"
operands[2] = rtl_hooks.gen_lowpart (SImode, operands[1]);
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), ((const_int_rtx[64]))), gen_hard_reg_clobber (CCmode, 17)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1391 (rtx, rtx *);
rtx
gen_peephole2_1391 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[1] = peep2_find_free_register (0, 0, "q", QImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19032 "../.././gcc/config/i386/i386.md"
operands[2] = rtl_hooks.gen_lowpart (SImode, operands[1]);
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), ((const_int_rtx[64]))), gen_hard_reg_clobber (CCmode, 17)))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1392 (rtx, rtx *);
rtx
gen_peephole2_1392 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[2] = peep2_find_free_register (0, 0, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19043 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (operand1)));


  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand2))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1393 (rtx, rtx *);
rtx
gen_peephole2_1393 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[2] = peep2_find_free_register (0, 0, "r", HImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19053 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (operand1)));


  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand2))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1394 (rtx, rtx *);
rtx
gen_peephole2_1394 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[2] = peep2_find_free_register (0, 0, "q", QImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19063 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (operand1)));


  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (copy_rtx (operand2))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1395 (rtx, rtx *);
rtx
gen_peephole2_1395 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[3] = peep2_find_free_register (1, 1, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19075 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (operand2)));


  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (((enum rtx_code) (operand1)->code), ((enum machine_mode) (operand1)->mode), copy_rtx (operand3), (const_int_rtx[64])))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1396 (rtx, rtx *);
rtx
gen_peephole2_1396 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 19100 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (XOR, (SImode), (operand1), ((const_int_rtx[64 -1]))))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1397 (rtx, rtx *);
rtx
gen_peephole2_1397 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 19114 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (XOR, (HImode), (operand1), ((const_int_rtx[64 -1]))))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1398 (rtx, rtx *);
rtx
gen_peephole2_1398 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 19128 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (XOR, (QImode), (operand1), ((const_int_rtx[64 -1]))))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1399 (rtx, rtx *);
rtx
gen_peephole2_1399 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 19154 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (((enum rtx_code) (operand1)->code), ((enum machine_mode) (operand1)->mode), gen_rtx_fmt_ee (AND, (SImode), (operand2), (operand3)), (const_int_rtx[64])))), gen_rtx_fmt_ee (SET, (VOIDmode), (copy_rtx (operand2)), (gen_rtx_fmt_ee (AND, (SImode), (copy_rtx (operand2)), (copy_rtx (operand3)))))))));
# 19173 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1400 (rtx, rtx *);
rtx
gen_peephole2_1400 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 19175 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (((enum rtx_code) (operand1)->code), ((enum machine_mode) (operand1)->mode), gen_rtx_fmt_ee (AND, (QImode), (operand2), (operand3)), (const_int_rtx[64])))), gen_rtx_fmt_ee (SET, (VOIDmode), (copy_rtx (operand2)), (gen_rtx_fmt_ee (AND, (QImode), (copy_rtx (operand2)), (copy_rtx (operand3)))))))));
# 19194 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1401 (rtx, rtx *);
rtx
gen_peephole2_1401 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 19209 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (((enum rtx_code) (operand1)->code), ((enum machine_mode) (operand1)->mode), gen_rtx_fmt_ee (AND, (SImode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (operand2), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (operand3)), (const_int_rtx[64])))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (copy_rtx (operand2)), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (gen_rtx_fmt_ee (AND, (SImode), (gen_rtx_fmt_eee (ZERO_EXTRACT, (SImode), (copy_rtx (operand2)), (const_int_rtx[64 + (8)]), (const_int_rtx[64 + (8)]))), (copy_rtx (operand3)))))))));
# 19237 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1402 (rtx, rtx *);
rtx
gen_peephole2_1402 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[2] = peep2_find_free_register (0, 0, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19224 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (operand1)));


  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (((enum rtx_code) (operand3)->code), ((enum machine_mode) (operand3)->mode), copy_rtx (operand0), copy_rtx (operand2)))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1403 (rtx, rtx *);
rtx
gen_peephole2_1403 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[2] = peep2_find_free_register (0, 0, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19238 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (operand1)));


  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (((enum rtx_code) (operand3)->code), ((enum machine_mode) (operand3)->mode), copy_rtx (operand2), copy_rtx (operand0)))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1404 (rtx, rtx *);
rtx
gen_peephole2_1404 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[2] = peep2_find_free_register (0, 0, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19259 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (operand0)));


  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (copy_rtx (operand2)), (gen_rtx_fmt_ee (((enum rtx_code) (operand3)->code), ((enum machine_mode) (operand3)->mode), copy_rtx (operand2), operand1))), gen_hard_reg_clobber (CCmode, 17)))));







  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (copy_rtx (operand0)), (copy_rtx (operand2))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1405 (rtx, rtx *);
rtx
gen_peephole2_1405 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[2] = peep2_find_free_register (0, 0, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19274 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand2), (operand0)));


  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (copy_rtx (operand2)), (gen_rtx_fmt_ee (((enum rtx_code) (operand3)->code), ((enum machine_mode) (operand3)->mode), operand1, copy_rtx (operand2)))), gen_hard_reg_clobber (CCmode, 17)))));







  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (copy_rtx (operand0)), (copy_rtx (operand2))));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1406 (rtx, rtx *);
rtx
gen_peephole2_1406 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 19286 "../.././gcc/config/i386/i386.md"
{
  operands[0] = rtl_hooks.gen_lowpart (word_mode, operands[0]);
}
  operand0 = operands[0];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), ((const_int_rtx[64]))), gen_hard_reg_clobber (CCmode, 17)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1407 (rtx, rtx *);
rtx
gen_peephole2_1407 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
  operand0 = operands[0];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_fmt_e (STRICT_LOW_PART, (VOIDmode), (operand0))), ((const_int_rtx[64]))), gen_hard_reg_clobber (CCmode, 17)))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1408 (rtx, rtx *);
rtx
gen_peephole2_1408 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 19311 "../.././gcc/config/i386/i386.md"
operands[0] = rtl_hooks.gen_lowpart (((enum machine_mode) (operands[0])->mode) == DImode ? DImode : SImode,
         operands[0]);
  operand0 = operands[0];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), ((const_int_rtx[64 -1]))), gen_hard_reg_clobber (CCmode, 17)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1409 (rtx, rtx *);
rtx
gen_peephole2_1409 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 19323 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (SImode), (copy_rtx (operand0)), (operand1)))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1410 (rtx, rtx *);
rtx
gen_peephole2_1410 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 19332 "../.././gcc/config/i386/i386.md"
operands[2] = rtl_hooks.gen_lowpart (SImode, operands[2]);
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (SImode), (copy_rtx (operand0)), (operand2)))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1411 (rtx, rtx *);
rtx
gen_peephole2_1411 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 19341 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (DImode), (copy_rtx (operand0)), (operand1)))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1412 (rtx, rtx *);
rtx
gen_peephole2_1412 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 19351 "../.././gcc/config/i386/i386.md"
operands[2] = gen_rtx_CONST_INT (VOIDmode, (exact_log2 (((operands[1])->u.hwint[0]))));
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFT, (SImode), (copy_rtx (operand0)), (operand2)))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1413 (rtx, rtx *);
rtx
gen_peephole2_1413 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 19361 "../.././gcc/config/i386/i386.md"
operands[2] = gen_rtx_CONST_INT (VOIDmode, (exact_log2 (((operands[1])->u.hwint[0]))));
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFT, (DImode), (copy_rtx (operand0)), (operand2)))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1414 (rtx, rtx *);
rtx
gen_peephole2_1414 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 19372 "../.././gcc/config/i386/i386.md"
operands[2] = gen_rtx_CONST_INT (VOIDmode, (exact_log2 (((operands[2])->u.hwint[0]))));
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFT, (SImode), (copy_rtx (operand0)), (operand2)))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1415 (rtx, rtx *);
rtx
gen_peephole2_1415 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[0] = peep2_find_free_register (0, 0, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
  operand0 = operands[0];
  emit_insn (gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand0)));

  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_MEM (SImode, gen_rtx_fmt_e (PRE_DEC, (SImode), (gen_rtx_REG (SImode, 7))))), (copy_rtx (operand0))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_MEM (BLKmode, gen_rtx_fmt_0 (SCRATCH, (VOIDmode)))))))));
# 19415 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1416 (rtx, rtx *);
rtx
gen_peephole2_1416 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[0] = peep2_find_free_register (0, 0, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
  operand0 = operands[0];
  emit_insn (gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_MEM (SImode, gen_rtx_fmt_e (PRE_DEC, (SImode), (gen_rtx_REG (SImode, 7))))), (copy_rtx (operand0))));





  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_MEM (SImode, gen_rtx_fmt_e (PRE_DEC, (SImode), (gen_rtx_REG (SImode, 7))))), (copy_rtx (operand0))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_MEM (BLKmode, gen_rtx_fmt_0 (SCRATCH, (VOIDmode)))))))));
# 19452 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1417 (rtx, rtx *);
rtx
gen_peephole2_1417 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[0] = peep2_find_free_register (0, 0, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
  operand0 = operands[0];
  emit_insn (gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_MEM (SImode, gen_rtx_fmt_e (PRE_DEC, (SImode), (gen_rtx_REG (SImode, 7))))), (copy_rtx (operand0))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1418 (rtx, rtx *);
rtx
gen_peephole2_1418 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[0] = peep2_find_free_register (0, 0, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
  operand0 = operands[0];
  emit_insn (gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_MEM (SImode, gen_rtx_fmt_e (PRE_DEC, (SImode), (gen_rtx_REG (SImode, 7))))), (copy_rtx (operand0))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_MEM (SImode, gen_rtx_fmt_e (PRE_DEC, (SImode), (gen_rtx_REG (SImode, 7))))), (copy_rtx (operand0))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1419 (rtx, rtx *);
rtx
gen_peephole2_1419 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[0] = peep2_find_free_register (0, 0, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19442 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_MEM (SImode, gen_rtx_REG (SImode, 7)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 7)), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_REG (SImode, 7)), (const_int_rtx[64 + (4)])))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_MEM (BLKmode, gen_rtx_fmt_0 (SCRATCH, (VOIDmode)))))))));
# 19461 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1420 (rtx, rtx *);
rtx
gen_peephole2_1420 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[0] = peep2_find_free_register (0, 0, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  if ((operands[1] = peep2_find_free_register (0, 0, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19458 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_MEM (SImode, gen_rtx_REG (SImode, 7)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 7)), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_REG (SImode, 7)), (const_int_rtx[64 + (4)])))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_MEM (BLKmode, gen_rtx_fmt_0 (SCRATCH, (VOIDmode)))))))));
# 19478 "../.././gcc/config/i386/i386.md"
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_MEM (SImode, gen_rtx_REG (SImode, 7)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 7)), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_REG (SImode, 7)), (const_int_rtx[64 + (4)]))))))));
# 19492 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1421 (rtx, rtx *);
rtx
gen_peephole2_1421 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[0] = peep2_find_free_register (0, 0, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19471 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_MEM (SImode, gen_rtx_REG (SImode, 7)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 7)), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_REG (SImode, 7)), (const_int_rtx[64 + (4)])))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_MEM (BLKmode, gen_rtx_fmt_0 (SCRATCH, (VOIDmode)))))))));
# 19490 "../.././gcc/config/i386/i386.md"
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (copy_rtx (operand0)), (gen_rtx_MEM (SImode, gen_rtx_REG (SImode, 7)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 7)), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_REG (SImode, 7)), (const_int_rtx[64 + (4)]))))))));
# 19504 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1422 (rtx, rtx *);
rtx
gen_peephole2_1422 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[0] = peep2_find_free_register (0, 0, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19481 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_MEM (SImode, gen_rtx_REG (SImode, 7)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 7)), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_REG (SImode, 7)), (const_int_rtx[64 + (4)]))))))));
# 19497 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1423 (rtx, rtx *);
rtx
gen_peephole2_1423 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[0] = peep2_find_free_register (0, 0, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  if ((operands[1] = peep2_find_free_register (0, 0, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19495 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_MEM (SImode, gen_rtx_REG (SImode, 7)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 7)), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_REG (SImode, 7)), (const_int_rtx[64 + (4)]))))))));
# 19512 "../.././gcc/config/i386/i386.md"
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_MEM (SImode, gen_rtx_REG (SImode, 7)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 7)), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_REG (SImode, 7)), (const_int_rtx[64 + (4)]))))))));
# 19526 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1424 (rtx, rtx *);
rtx
gen_peephole2_1424 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[0] = peep2_find_free_register (0, 0, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19506 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_MEM (SImode, gen_rtx_REG (SImode, 7)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 7)), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_REG (SImode, 7)), (const_int_rtx[64 + (4)]))))))));
# 19522 "../.././gcc/config/i386/i386.md"
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (copy_rtx (operand0)), (gen_rtx_MEM (SImode, gen_rtx_REG (SImode, 7)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (SImode, 7)), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_REG (SImode, 7)), (const_int_rtx[64 + (4)]))))))));
# 19536 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1425 (rtx, rtx *);
rtx
gen_peephole2_1425 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 19523 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (((enum rtx_code) (operand1)->code), ((enum machine_mode) (operand1)->mode), operand2, operand3))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (copy_rtx (operand2)))))));
# 19537 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1426 (rtx, rtx *);
rtx
gen_peephole2_1426 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[0] = peep2_find_free_register (0, 0, "r", DImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
  operand0 = operands[0];
  emit_insn (gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand0)));

  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_MEM (DImode, gen_rtx_fmt_e (PRE_DEC, (DImode), (gen_rtx_REG (DImode, 7))))), (copy_rtx (operand0))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_MEM (BLKmode, gen_rtx_fmt_0 (SCRATCH, (VOIDmode)))))))));
# 19568 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1427 (rtx, rtx *);
rtx
gen_peephole2_1427 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[0] = peep2_find_free_register (0, 0, "r", DImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
  operand0 = operands[0];
  emit_insn (gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_MEM (DImode, gen_rtx_fmt_e (PRE_DEC, (DImode), (gen_rtx_REG (DImode, 7))))), (copy_rtx (operand0))));





  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_MEM (DImode, gen_rtx_fmt_e (PRE_DEC, (DImode), (gen_rtx_REG (DImode, 7))))), (copy_rtx (operand0))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_MEM (BLKmode, gen_rtx_fmt_0 (SCRATCH, (VOIDmode)))))))));
# 19605 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1428 (rtx, rtx *);
rtx
gen_peephole2_1428 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[0] = peep2_find_free_register (0, 0, "r", DImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
  operand0 = operands[0];
  emit_insn (gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_MEM (DImode, gen_rtx_fmt_e (PRE_DEC, (DImode), (gen_rtx_REG (DImode, 7))))), (copy_rtx (operand0))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1429 (rtx, rtx *);
rtx
gen_peephole2_1429 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[0] = peep2_find_free_register (0, 0, "r", DImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
  operand0 = operands[0];
  emit_insn (gen_rtx_fmt_e (CLOBBER, (VOIDmode), (operand0)));

  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_MEM (DImode, gen_rtx_fmt_e (PRE_DEC, (DImode), (gen_rtx_REG (DImode, 7))))), (copy_rtx (operand0))));





  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_MEM (DImode, gen_rtx_fmt_e (PRE_DEC, (DImode), (gen_rtx_REG (DImode, 7))))), (copy_rtx (operand0))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1430 (rtx, rtx *);
rtx
gen_peephole2_1430 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[0] = peep2_find_free_register (0, 0, "r", DImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19574 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_MEM (DImode, gen_rtx_REG (DImode, 7)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (DImode, 7)), (gen_rtx_fmt_ee (PLUS, (DImode), (gen_rtx_REG (DImode, 7)), (const_int_rtx[64 + (8)])))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_MEM (BLKmode, gen_rtx_fmt_0 (SCRATCH, (VOIDmode)))))))));
# 19593 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1431 (rtx, rtx *);
rtx
gen_peephole2_1431 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[0] = peep2_find_free_register (0, 0, "r", DImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  if ((operands[1] = peep2_find_free_register (0, 0, "r", DImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19590 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_MEM (DImode, gen_rtx_REG (DImode, 7)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (DImode, 7)), (gen_rtx_fmt_ee (PLUS, (DImode), (gen_rtx_REG (DImode, 7)), (const_int_rtx[64 + (8)])))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_MEM (BLKmode, gen_rtx_fmt_0 (SCRATCH, (VOIDmode)))))))));
# 19610 "../.././gcc/config/i386/i386.md"
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_MEM (DImode, gen_rtx_REG (DImode, 7)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (DImode, 7)), (gen_rtx_fmt_ee (PLUS, (DImode), (gen_rtx_REG (DImode, 7)), (const_int_rtx[64 + (8)]))))))));
# 19624 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1432 (rtx, rtx *);
rtx
gen_peephole2_1432 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[0] = peep2_find_free_register (0, 0, "r", DImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19603 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_MEM (DImode, gen_rtx_REG (DImode, 7)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (DImode, 7)), (gen_rtx_fmt_ee (PLUS, (DImode), (gen_rtx_REG (DImode, 7)), (const_int_rtx[64 + (8)])))), gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_MEM (BLKmode, gen_rtx_fmt_0 (SCRATCH, (VOIDmode)))))))));
# 19622 "../.././gcc/config/i386/i386.md"
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (copy_rtx (operand0)), (gen_rtx_MEM (DImode, gen_rtx_REG (DImode, 7)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (DImode, 7)), (gen_rtx_fmt_ee (PLUS, (DImode), (gen_rtx_REG (DImode, 7)), (const_int_rtx[64 + (8)]))))))));
# 19636 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1433 (rtx, rtx *);
rtx
gen_peephole2_1433 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[0] = peep2_find_free_register (0, 0, "r", DImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19613 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_MEM (DImode, gen_rtx_REG (DImode, 7)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (DImode, 7)), (gen_rtx_fmt_ee (PLUS, (DImode), (gen_rtx_REG (DImode, 7)), (const_int_rtx[64 + (8)]))))))));
# 19629 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1434 (rtx, rtx *);
rtx
gen_peephole2_1434 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[0] = peep2_find_free_register (0, 0, "r", DImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  if ((operands[1] = peep2_find_free_register (0, 0, "r", DImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19627 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_MEM (DImode, gen_rtx_REG (DImode, 7)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (DImode, 7)), (gen_rtx_fmt_ee (PLUS, (DImode), (gen_rtx_REG (DImode, 7)), (const_int_rtx[64 + (8)]))))))));
# 19644 "../.././gcc/config/i386/i386.md"
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_MEM (DImode, gen_rtx_REG (DImode, 7)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (DImode, 7)), (gen_rtx_fmt_ee (PLUS, (DImode), (gen_rtx_REG (DImode, 7)), (const_int_rtx[64 + (8)]))))))));
# 19658 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1435 (rtx, rtx *);
rtx
gen_peephole2_1435 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[0] = peep2_find_free_register (0, 0, "r", DImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19638 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_MEM (DImode, gen_rtx_REG (DImode, 7)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (DImode, 7)), (gen_rtx_fmt_ee (PLUS, (DImode), (gen_rtx_REG (DImode, 7)), (const_int_rtx[64 + (8)]))))))));
# 19654 "../.././gcc/config/i386/i386.md"
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (copy_rtx (operand0)), (gen_rtx_MEM (DImode, gen_rtx_REG (DImode, 7)))), gen_rtx_fmt_ee (SET, (VOIDmode), (gen_rtx_REG (DImode, 7)), (gen_rtx_fmt_ee (PLUS, (DImode), (gen_rtx_REG (DImode, 7)), (const_int_rtx[64 + (8)]))))))));
# 19668 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1436 (rtx, rtx *);
rtx
gen_peephole2_1436 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 19653 "../.././gcc/config/i386/i386.md"
{ operands[2] = gen_rtx_CONST_INT (VOIDmode, (((operands[2])->u.hwint[0]) - 1)); }
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_fmt_ee (MULT, (SImode), (operand1), (operand2))), (copy_rtx (operand1))))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1437 (rtx, rtx *);
rtx
gen_peephole2_1437 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 19669 "../.././gcc/config/i386/i386.md"
{ operands[2] = gen_rtx_CONST_INT (VOIDmode, (((operands[2])->u.hwint[0]) - 1)); }
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (copy_rtx (operand0)), (gen_rtx_fmt_ee (PLUS, (SImode), (gen_rtx_fmt_ee (MULT, (SImode), (copy_rtx (operand0)), (operand2))), (copy_rtx (operand0))))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1438 (rtx, rtx *);
rtx
gen_peephole2_1438 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[3] = peep2_find_free_register (0, 0, "r", DImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19717 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (operand1)));


  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (DImode), (copy_rtx (operand3)), (operand2)))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1439 (rtx, rtx *);
rtx
gen_peephole2_1439 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[3] = peep2_find_free_register (0, 0, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19731 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (operand1)));


  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (SImode), (copy_rtx (operand3)), (operand2)))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1440 (rtx, rtx *);
rtx
gen_peephole2_1440 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[3] = peep2_find_free_register (0, 0, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19746 "../.././gcc/config/i386/i386.md"

  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (operand1)));


  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (ZERO_EXTEND, (DImode), (gen_rtx_fmt_ee (MULT, (SImode), (copy_rtx (operand3)), (operand2)))))), gen_hard_reg_clobber (CCmode, 17)))));
# 19763 "../.././gcc/config/i386/i386.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1441 (rtx, rtx *);
rtx
gen_peephole2_1441 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[3] = peep2_find_free_register (1, 1, "r", DImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19763 "../.././gcc/config/i386/i386.md"
{
  if (!rtx_equal_p (operands[0], operands[1]))
    emit_move_insn (operands[0], operands[1]);
}
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (operand2)));


  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (DImode), (copy_rtx (operand0)), (copy_rtx (operand3))))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1442 (rtx, rtx *);
rtx
gen_peephole2_1442 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[3] = peep2_find_free_register (1, 1, "r", SImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19779 "../.././gcc/config/i386/i386.md"
{
  if (!rtx_equal_p (operands[0], operands[1]))
    emit_move_insn (operands[0], operands[1]);
}
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (operand2)));


  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (SImode), (copy_rtx (operand0)), (copy_rtx (operand3))))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1443 (rtx, rtx *);
rtx
gen_peephole2_1443 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  if ((operands[3] = peep2_find_free_register (1, 1, "r", HImode, &_regs_allocated)) == (rtx) 0)
    return ((void *)0);
  start_sequence ();
# 19794 "../.././gcc/config/i386/i386.md"
{
  if (!rtx_equal_p (operands[0], operands[1]))
    emit_move_insn (operands[0], operands[1]);
}
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (operand2)));


  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (2, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (HImode), (copy_rtx (operand0)), (copy_rtx (operand3))))), gen_hard_reg_clobber (CCmode, 17)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_peephole2_1444 (rtx, rtx *);
rtx
gen_peephole2_1444 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx operand3;
  rtx operand4;
  rtx _val = 0;
  HARD_REG_SET _regs_allocated;
  do { HARD_REG_ELT_TYPE *scan_tp_ = (_regs_allocated); scan_tp_[0] = 0; scan_tp_[1] = 0; } while (0);
  start_sequence ();
# 19843 "../.././gcc/config/i386/i386.md"
{
  enum machine_mode mode = ((enum machine_mode) (operands[5])->mode) == DImode ? DImode : SImode;
  int scale = 1 << ((operands[2])->u.hwint[0]);
  rtx index = rtl_hooks.gen_lowpart ((0 ? DImode : SImode), operands[1]);
  rtx base = rtl_hooks.gen_lowpart ((0 ? DImode : SImode), operands[3]);
  rtx dest = rtl_hooks.gen_lowpart (mode, operands[5]);

  operands[1] = gen_rtx_fmt_ee (PLUS, ((0 ? DImode : SImode)), (base), (gen_rtx_fmt_ee (MULT, ((0 ? DImode : SImode)), (index), (gen_rtx_CONST_INT (VOIDmode, (scale))))));

  if (mode != (0 ? DImode : SImode))
    operands[1] = gen_rtx_SUBREG (mode, operands[1], 0);
  operands[0] = dest;
}
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  operand3 = operands[3];
  operand4 = operands[4];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (operand4)));


  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_prefetch (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 20052 "../.././gcc/config/i386/i386.md"
{
  int rw = ((operands[1])->u.hwint[0]);
  int locality = ((operands[2])->u.hwint[0]);

  ((void)(!(rw == 0 || rw == 1) ? fancy_abort ("../.././gcc/config/i386/i386.md", 20056, __FUNCTION__), 0 : 0));
  ((void)(!(locality >= 0 && locality <= 3) ? fancy_abort ("../.././gcc/config/i386/i386.md", 20057, __FUNCTION__), 0 : 0));
  ((void)(!(((enum machine_mode) (operands[0])->mode) == (0 ? DImode : SImode) || ((enum machine_mode) (operands[0])->mode) == VOIDmode) ? fancy_abort ("../.././gcc/config/i386/i386.md", 20059, __FUNCTION__), 0 : 0));






  if (((target_flags & (1 << 1)) != 0) && (!(x86_prefetch_sse) || rw))
    operands[2] = gen_rtx_CONST_INT (VOIDmode, (3));
  else
    operands[1] = (const_int_rtx[64]);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_eee (PREFETCH, (VOIDmode), (operand0), (operand1), (operand2)));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_stack_protect_set (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 20139 "../.././gcc/config/i386/i386.md"
{

  if (0)
    emit_insn (gen_stack_tls_protect_set_di (operands[0],
     gen_rtx_CONST_INT (VOIDmode, (0x14))));
  else
    emit_insn (gen_stack_tls_protect_set_si (operands[0],
     gen_rtx_CONST_INT (VOIDmode, (0x14))));






  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (operand0);
  emit (operand1);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_stack_protect_test (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 20197 "../.././gcc/config/i386/i386.md"
{
  rtx flags = gen_rtx_REG (CCZmode, 17);
  ix86_compare_op0 = operands[0];
  ix86_compare_op1 = operands[1];
  ix86_compare_emitted = flags;


  if (0)
    emit_insn (gen_stack_tls_protect_test_di (flags, operands[0],
     gen_rtx_CONST_INT (VOIDmode, (0x14))));
  else
    emit_insn (gen_stack_tls_protect_test_si (flags, operands[0],
     gen_rtx_CONST_INT (VOIDmode, (0x14))));






  emit_jump_insn (gen_beq (operands[2]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movv16qi (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 55 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_move (V16QImode, operands);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movv8hi (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 55 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_move (V8HImode, operands);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movv4si (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 55 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_move (V4SImode, operands);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movv2di (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 55 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_move (V2DImode, operands);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movv4sf (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 107 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_move (V4SFmode, operands);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1453 (rtx, rtx *);
rtx
gen_split_1453 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 132 "../.././gcc/config/i386/sse.md"
{
  operands[1] = simplify_gen_subreg (SFmode, operands[1], V4SFmode, 0);
  operands[2] = (const_tiny_rtx[0][(int) (V4SFmode)]);
}
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V4SFmode), (gen_rtx_fmt_e (VEC_DUPLICATE, (V4SFmode), (operand1))), (operand2), ((const_int_rtx[64 +1]))))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movv2df (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 141 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_move (V2DFmode, operands);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1455 (rtx, rtx *);
rtx
gen_split_1455 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
# 193 "../.././gcc/config/i386/sse.md"
{
  operands[1] = simplify_gen_subreg (DFmode, operands[1], V2DFmode, 0);
  operands[2] = (const_tiny_rtx[0][(int) (DFmode)]);
}
  operand0 = operands[0];
  operand1 = operands[1];
  operand2 = operands[2];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_CONCAT, (V2DFmode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_pushv16qi1 (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 201 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_push (V16QImode, operands[0]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
  }
  emit (operand0);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_pushv8hi1 (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 201 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_push (V8HImode, operands[0]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
  }
  emit (operand0);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_pushv4si1 (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 201 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_push (V4SImode, operands[0]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
  }
  emit (operand0);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_pushv2di1 (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 201 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_push (V2DImode, operands[0]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
  }
  emit (operand0);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_pushv4sf1 (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 201 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_push (V4SFmode, operands[0]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
  }
  emit (operand0);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_pushv2df1 (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 201 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_push (V2DFmode, operands[0]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
  }
  emit (operand0);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movmisalignv16qi (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 210 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_move_misalign (V16QImode, operands);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movmisalignv8hi (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 210 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_move_misalign (V8HImode, operands);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movmisalignv4si (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 210 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_move_misalign (V4SImode, operands);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movmisalignv2di (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 210 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_move_misalign (V2DImode, operands);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movmisalignv4sf (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 210 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_move_misalign (V4SFmode, operands);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movmisalignv2df (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 210 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_move_misalign (V2DFmode, operands);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_negv4sf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 297 "../.././gcc/config/i386/sse.md"
ix86_expand_fp_absneg_operator (NEG, V4SFmode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (NEG, (V4SFmode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_absv4sf2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 303 "../.././gcc/config/i386/sse.md"
ix86_expand_fp_absneg_operator (ABS, V4SFmode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (ABS, (V4SFmode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_addv4sf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 310 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (PLUS, V4SFmode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (V4SFmode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_subv4sf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 338 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (MINUS, V4SFmode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (V4SFmode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_mulv4sf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 366 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (MULT, V4SFmode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (V4SFmode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_divv4sf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 394 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (DIV, V4SFmode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (DIV, (V4SFmode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_smaxv4sf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 487 "../.././gcc/config/i386/sse.md"
{
  if (!flag_finite_math_only)
    operands[1] = force_reg (V4SFmode, operands[1]);
  ix86_fixup_binary_operands_no_copy (SMAX, V4SFmode, operands);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SMAX, (V4SFmode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sminv4sf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 542 "../.././gcc/config/i386/sse.md"
{
  if (!flag_finite_math_only)
    operands[1] = force_reg (V4SFmode, operands[1]);
  ix86_fixup_binary_operands_no_copy (SMIN, V4SFmode, operands);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SMIN, (V4SFmode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_reduc_splus_v4sf (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 707 "../.././gcc/config/i386/sse.md"
{
  if (((target_flags & (1 << 19)) != 0))
    {
      rtx tmp = gen_reg_rtx (V4SFmode);
      emit_insn (gen_sse3_haddv4sf3 (tmp, operands[1], operands[1]));
      emit_insn (gen_sse3_haddv4sf3 (operands[0], tmp, tmp));
    }
  else
    ix86_expand_reduc_v4sf (gen_addv4sf3, operands[0], operands[1]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (operand0);
  emit (operand1);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_reduc_smax_v4sf (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 723 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_reduc_v4sf (gen_smaxv4sf3, operands[0], operands[1]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (operand0);
  emit (operand1);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_reduc_smin_v4sf (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 732 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_reduc_v4sf (gen_sminv4sf3, operands[0], operands[1]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (operand0);
  emit (operand1);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vcondv4sf (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3,
 rtx operand4,
 rtx operand5)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
# 803 "../.././gcc/config/i386/sse.md"
{
  if (ix86_expand_fp_vcond (operands))
    return (_val = get_insns (), end_sequence (), _val);
  else
    return (end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (IF_THEN_ELSE, (V4SFmode), (gen_rtx_fmt_ee (((enum rtx_code) (operand3)->code), VOIDmode, operand4, operand5)), (operand1), (operand2)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_andv4sf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 821 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (AND, V4SFmode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (AND, (V4SFmode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_iorv4sf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 846 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (IOR, V4SFmode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (IOR, (V4SFmode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_xorv4sf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 862 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (XOR, V4SFmode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (XOR, (V4SFmode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sse_shufps (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 1162 "../.././gcc/config/i386/sse.md"
{
  int mask = ((operands[3])->u.hwint[0]);
  emit_insn (gen_sse_shufps_1 (operands[0], operands[1], operands[2],
          gen_rtx_CONST_INT (VOIDmode, ((mask >> 0) & 3)),
          gen_rtx_CONST_INT (VOIDmode, ((mask >> 2) & 3)),
          gen_rtx_CONST_INT (VOIDmode, (((mask >> 4) & 3) + 4)),
          gen_rtx_CONST_INT (VOIDmode, (((mask >> 6) & 3) + 4))));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  emit (operand3);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_initv4sf (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 1305 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_init (0, operands[0], operands[1]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (operand0);
  emit (operand1);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1485 (rtx, rtx *);
rtx
gen_split_1485 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 1335 "../.././gcc/config/i386/sse.md"
{
  emit_move_insn (adjust_address_1 (operands[0], SFmode, 0, 1, 1), operands[1]);
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_setv4sf (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 1345 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_set (0, operands[0], operands[1],
     ((operands[2])->u.hwint[0]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1487 (rtx, rtx *);
rtx
gen_split_1487 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 1360 "../.././gcc/config/i386/sse.md"
{
  rtx op1 = operands[1];
  if ((((enum rtx_code) (op1)->code) == REG))
    op1 = gen_rtx_REG (SFmode, (((op1)->u.fld[0]).rt_uint));
  else
    op1 = rtl_hooks.gen_lowpart (SFmode, op1);
  emit_move_insn (operands[0], op1);
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_extractv4sf (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 1375 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_extract (0, operands[0], operands[1],
         ((operands[2])->u.hwint[0]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_negv2df2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 1391 "../.././gcc/config/i386/sse.md"
ix86_expand_fp_absneg_operator (NEG, V2DFmode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (NEG, (V2DFmode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_absv2df2 (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 1397 "../.././gcc/config/i386/sse.md"
ix86_expand_fp_absneg_operator (ABS, V2DFmode, operands); return (_val = get_insns (), end_sequence (), _val);
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_e (ABS, (V2DFmode), (operand1)))));



  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_addv2df3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 1404 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (PLUS, V2DFmode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (V2DFmode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_subv2df3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 1432 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (MINUS, V2DFmode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (V2DFmode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_mulv2df3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 1460 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (MULT, V2DFmode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (V2DFmode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_divv2df3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 1488 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (DIV, V2DFmode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (DIV, (V2DFmode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_smaxv2df3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 1539 "../.././gcc/config/i386/sse.md"
{
  if (!flag_finite_math_only)
    operands[1] = force_reg (V2DFmode, operands[1]);
  ix86_fixup_binary_operands_no_copy (SMAX, V2DFmode, operands);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SMAX, (V2DFmode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sminv2df3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 1594 "../.././gcc/config/i386/sse.md"
{
  if (!flag_finite_math_only)
    operands[1] = force_reg (V2DFmode, operands[1]);
  ix86_fixup_binary_operands_no_copy (SMIN, V2DFmode, operands);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SMIN, (V2DFmode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_reduc_splus_v2df (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 1697 "../.././gcc/config/i386/sse.md"
{
  emit_insn (gen_sse3_haddv2df3 (operands[0], operands[1], operands[1]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (operand0);
  emit (operand1);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vcondv2df (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3,
 rtx operand4,
 rtx operand5)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
# 1768 "../.././gcc/config/i386/sse.md"
{
  if (ix86_expand_fp_vcond (operands))
    return (_val = get_insns (), end_sequence (), _val);
  else
    return (end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (IF_THEN_ELSE, (V2DFmode), (gen_rtx_fmt_ee (((enum rtx_code) (operand3)->code), VOIDmode, operand4, operand5)), (operand1), (operand2)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_andv2df3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 1786 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (AND, V2DFmode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (AND, (V2DFmode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_iorv2df3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 1811 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (IOR, V2DFmode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (IOR, (V2DFmode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_xorv2df3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 1827 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (XOR, V2DFmode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (XOR, (V2DFmode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sse2_cvtpd2dq (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
# 2007 "../.././gcc/config/i386/sse.md"
operands[2] = (const_tiny_rtx[0][(int) (V2SImode)]);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_CONCAT, (V4SImode), (gen_rtx_fmt_Ei (UNSPEC, (V2SImode), (gen_rtvec (1, operand1)), (30))), (operand2)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sse2_cvttpd2dq (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
# 2026 "../.././gcc/config/i386/sse.md"
operands[2] = (const_tiny_rtx[0][(int) (V2SImode)]);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_CONCAT, (V4SImode), (gen_rtx_fmt_e (FIX, (V2SImode), (operand1))), (operand2)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sse2_cvtpd2ps (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
# 2073 "../.././gcc/config/i386/sse.md"
operands[2] = (const_tiny_rtx[0][(int) (V2SFmode)]);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_CONCAT, (V4SFmode), (gen_rtx_fmt_e (FLOAT_TRUNCATE, (V2SFmode), (operand1))), (operand2)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1505 (rtx, rtx *);
rtx
gen_split_1505 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 2144 "../.././gcc/config/i386/sse.md"
{
  rtx low = gen_rtx_REG (DFmode, (((operands[1])->u.fld[0]).rt_uint));
  emit_move_insn (adjust_address_1 (operands[0], DFmode, 0, 1, 1), low);
  emit_move_insn (adjust_address_1 (operands[0], DFmode, 8, 1, 1), low);
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sse2_shufpd (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 2173 "../.././gcc/config/i386/sse.md"
{
  int mask = ((operands[3])->u.hwint[0]);
  emit_insn (gen_sse2_shufpd_1 (operands[0], operands[1], operands[2],
    gen_rtx_CONST_INT (VOIDmode, (mask & 1)),
    gen_rtx_CONST_INT (VOIDmode, (mask & 2 ? 3 : 2))));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  emit (operand3);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1507 (rtx, rtx *);
rtx
gen_split_1507 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 2221 "../.././gcc/config/i386/sse.md"
{
  operands[1] = adjust_address_1 (operands[1], DFmode, 8, 1, 1);
}
  operand0 = operands[0];
  operand1 = operands[1];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1508 (rtx, rtx *);
rtx
gen_split_1508 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 2245 "../.././gcc/config/i386/sse.md"
{
  rtx op1 = operands[1];
  if ((((enum rtx_code) (op1)->code) == REG))
    op1 = gen_rtx_REG (DFmode, (((op1)->u.fld[0]).rt_uint));
  else
    op1 = rtl_hooks.gen_lowpart (DFmode, op1);
  emit_move_insn (operands[0], op1);
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1509 (rtx, rtx *);
rtx
gen_split_1509 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 2278 "../.././gcc/config/i386/sse.md"
{
  operands[0] = adjust_address_1 (operands[0], DFmode, 8, 1, 1);
}
  operand0 = operands[0];
  operand1 = operands[1];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1510 (rtx, rtx *);
rtx
gen_split_1510 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 2307 "../.././gcc/config/i386/sse.md"
{
  operands[0] = adjust_address_1 (operands[0], DFmode, 8, 1, 1);
}
  operand0 = operands[0];
  operand1 = operands[1];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_setv2df (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2376 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_set (0, operands[0], operands[1],
     ((operands[2])->u.hwint[0]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_extractv2df (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2387 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_extract (0, operands[0], operands[1],
         ((operands[2])->u.hwint[0]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_initv2df (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 2397 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_init (0, operands[0], operands[1]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (operand0);
  emit (operand1);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_negv16qi2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
# 2414 "../.././gcc/config/i386/sse.md"
operands[2] = force_reg (V16QImode, (const_tiny_rtx[0][(int) (V16QImode)]));
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (V16QImode), (operand2), (operand1)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_negv8hi2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
# 2414 "../.././gcc/config/i386/sse.md"
operands[2] = force_reg (V8HImode, (const_tiny_rtx[0][(int) (V8HImode)]));
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (V8HImode), (operand2), (operand1)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_negv4si2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
# 2414 "../.././gcc/config/i386/sse.md"
operands[2] = force_reg (V4SImode, (const_tiny_rtx[0][(int) (V4SImode)]));
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (V4SImode), (operand2), (operand1)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_negv2di2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
# 2414 "../.././gcc/config/i386/sse.md"
operands[2] = force_reg (V2DImode, (const_tiny_rtx[0][(int) (V2DImode)]));
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (V2DImode), (operand2), (operand1)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_addv16qi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2421 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (PLUS, V16QImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (V16QImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_addv8hi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2421 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (PLUS, V8HImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (V8HImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_addv4si3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2421 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (PLUS, V4SImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (V4SImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_addv2di3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2421 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (PLUS, V2DImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (PLUS, (V2DImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_subv16qi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2458 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (MINUS, V16QImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (V16QImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_subv8hi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2458 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (MINUS, V8HImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (V8HImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_subv4si3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2458 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (MINUS, V4SImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (V4SImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_subv2di3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2458 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (MINUS, V2DImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (V2DImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_mulv16qi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2495 "../.././gcc/config/i386/sse.md"
{
  rtx t[12], op0;
  int i;

  for (i = 0; i < 12; ++i)
    t[i] = gen_reg_rtx (V16QImode);





  emit_insn (gen_sse2_punpckhbw (t[0], operands[1], operands[1]));
  emit_insn (gen_sse2_punpckhbw (t[1], operands[2], operands[2]));
  emit_insn (gen_sse2_punpcklbw (t[2], operands[1], operands[1]));
  emit_insn (gen_sse2_punpcklbw (t[3], operands[2], operands[2]));




  emit_insn (gen_mulv8hi3 (rtl_hooks.gen_lowpart (V8HImode, t[4]),
      rtl_hooks.gen_lowpart (V8HImode, t[0]),
      rtl_hooks.gen_lowpart (V8HImode, t[1])));
  emit_insn (gen_mulv8hi3 (rtl_hooks.gen_lowpart (V8HImode, t[5]),
      rtl_hooks.gen_lowpart (V8HImode, t[2]),
      rtl_hooks.gen_lowpart (V8HImode, t[3])));


  emit_insn (gen_sse2_punpckhbw (t[6], t[5], t[4]));
  emit_insn (gen_sse2_punpcklbw (t[7], t[5], t[4]));
  emit_insn (gen_sse2_punpckhbw (t[8], t[7], t[6]));
  emit_insn (gen_sse2_punpcklbw (t[9], t[7], t[6]));
  emit_insn (gen_sse2_punpckhbw (t[10], t[9], t[8]));
  emit_insn (gen_sse2_punpcklbw (t[11], t[9], t[8]));

  op0 = operands[0];
  emit_insn (gen_sse2_punpcklbw (op0, t[11], t[10]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (V16QImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_mulv8hi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2539 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (MULT, V8HImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (V8HImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_mulv4si3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2637 "../.././gcc/config/i386/sse.md"
{
  rtx t1, t2, t3, t4, t5, t6, thirtytwo;
  rtx op0, op1, op2;

  op0 = operands[0];
  op1 = operands[1];
  op2 = operands[2];
  t1 = gen_reg_rtx (V4SImode);
  t2 = gen_reg_rtx (V4SImode);
  t3 = gen_reg_rtx (V4SImode);
  t4 = gen_reg_rtx (V4SImode);
  t5 = gen_reg_rtx (V4SImode);
  t6 = gen_reg_rtx (V4SImode);
  thirtytwo = gen_rtx_CONST_INT (VOIDmode, (32));


  emit_insn (gen_sse2_umulv2siv2di3 (rtl_hooks.gen_lowpart (V2DImode, t1), op1, op2));




  emit_insn (gen_sse2_lshrti3 (rtl_hooks.gen_lowpart (TImode, t2),
          rtl_hooks.gen_lowpart (TImode, op1), thirtytwo));
  emit_insn (gen_sse2_lshrti3 (rtl_hooks.gen_lowpart (TImode, t3),
          rtl_hooks.gen_lowpart (TImode, op2), thirtytwo));


  emit_insn (gen_sse2_umulv2siv2di3 (rtl_hooks.gen_lowpart (V2DImode, t4), t2, t3));



  emit_insn (gen_sse2_pshufd_1 (t5, t1, (const_int_rtx[64]), (const_int_rtx[64 +2]),
    (const_int_rtx[64]), (const_int_rtx[64])));
  emit_insn (gen_sse2_pshufd_1 (t6, t4, (const_int_rtx[64]), (const_int_rtx[64 +2]),
    (const_int_rtx[64]), (const_int_rtx[64])));


  emit_insn (gen_sse2_punpckldq (op0, t5, t6));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (V4SImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_mulv2di3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2683 "../.././gcc/config/i386/sse.md"
{
  rtx t1, t2, t3, t4, t5, t6, thirtytwo;
  rtx op0, op1, op2;

  op0 = operands[0];
  op1 = operands[1];
  op2 = operands[2];
  t1 = gen_reg_rtx (V2DImode);
  t2 = gen_reg_rtx (V2DImode);
  t3 = gen_reg_rtx (V2DImode);
  t4 = gen_reg_rtx (V2DImode);
  t5 = gen_reg_rtx (V2DImode);
  t6 = gen_reg_rtx (V2DImode);
  thirtytwo = gen_rtx_CONST_INT (VOIDmode, (32));


  emit_insn (gen_sse2_umulv2siv2di3 (t1, rtl_hooks.gen_lowpart (V4SImode, op1),
         rtl_hooks.gen_lowpart (V4SImode, op2)));


  emit_insn (gen_lshrv2di3 (t2, op1, thirtytwo));
  emit_insn (gen_lshrv2di3 (t3, op2, thirtytwo));


  emit_insn (gen_sse2_umulv2siv2di3 (t4, rtl_hooks.gen_lowpart (V4SImode, op1),
         rtl_hooks.gen_lowpart (V4SImode, t3)));
  emit_insn (gen_sse2_umulv2siv2di3 (t5, rtl_hooks.gen_lowpart (V4SImode, op2),
         rtl_hooks.gen_lowpart (V4SImode, t2)));


  emit_insn (gen_ashlv2di3 (t4, t4, thirtytwo));
  emit_insn (gen_ashlv2di3 (t5, t5, thirtytwo));


  emit_insn (gen_addv2di3 (t6, t1, t4));
  emit_insn (gen_addv2di3 (op0, t6, t5));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MULT, (V2DImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_shl_v16qi (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2769 "../.././gcc/config/i386/sse.md"
{
  if (!const_0_to_255_mul_8_operand (operands[2], SImode))
    return (end_sequence (), _val);
  operands[0] = rtl_hooks.gen_lowpart (TImode, operands[0]);
  operands[1] = rtl_hooks.gen_lowpart (TImode, operands[1]);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFT, (TImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_shl_v8hi (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2769 "../.././gcc/config/i386/sse.md"
{
  if (!const_0_to_255_mul_8_operand (operands[2], SImode))
    return (end_sequence (), _val);
  operands[0] = rtl_hooks.gen_lowpart (TImode, operands[0]);
  operands[1] = rtl_hooks.gen_lowpart (TImode, operands[1]);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFT, (TImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_shl_v4si (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2769 "../.././gcc/config/i386/sse.md"
{
  if (!const_0_to_255_mul_8_operand (operands[2], SImode))
    return (end_sequence (), _val);
  operands[0] = rtl_hooks.gen_lowpart (TImode, operands[0]);
  operands[1] = rtl_hooks.gen_lowpart (TImode, operands[1]);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFT, (TImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_shl_v2di (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2769 "../.././gcc/config/i386/sse.md"
{
  if (!const_0_to_255_mul_8_operand (operands[2], SImode))
    return (end_sequence (), _val);
  operands[0] = rtl_hooks.gen_lowpart (TImode, operands[0]);
  operands[1] = rtl_hooks.gen_lowpart (TImode, operands[1]);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (ASHIFT, (TImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_shr_v16qi (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2793 "../.././gcc/config/i386/sse.md"
{
  if (!const_0_to_255_mul_8_operand (operands[2], SImode))
    return (end_sequence (), _val);
  operands[0] = rtl_hooks.gen_lowpart (TImode, operands[0]);
  operands[1] = rtl_hooks.gen_lowpart (TImode, operands[1]);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (LSHIFTRT, (TImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_shr_v8hi (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2793 "../.././gcc/config/i386/sse.md"
{
  if (!const_0_to_255_mul_8_operand (operands[2], SImode))
    return (end_sequence (), _val);
  operands[0] = rtl_hooks.gen_lowpart (TImode, operands[0]);
  operands[1] = rtl_hooks.gen_lowpart (TImode, operands[1]);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (LSHIFTRT, (TImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_shr_v4si (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2793 "../.././gcc/config/i386/sse.md"
{
  if (!const_0_to_255_mul_8_operand (operands[2], SImode))
    return (end_sequence (), _val);
  operands[0] = rtl_hooks.gen_lowpart (TImode, operands[0]);
  operands[1] = rtl_hooks.gen_lowpart (TImode, operands[1]);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (LSHIFTRT, (TImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_shr_v2di (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2793 "../.././gcc/config/i386/sse.md"
{
  if (!const_0_to_255_mul_8_operand (operands[2], SImode))
    return (end_sequence (), _val);
  operands[0] = rtl_hooks.gen_lowpart (TImode, operands[0]);
  operands[1] = rtl_hooks.gen_lowpart (TImode, operands[1]);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (LSHIFTRT, (TImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_umaxv16qi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2805 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (UMAX, V16QImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (UMAX, (V16QImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_smaxv8hi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2821 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (SMAX, V8HImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SMAX, (V8HImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_umaxv8hi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx operand3;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2839 "../.././gcc/config/i386/sse.md"
{
  operands[3] = operands[0];
  if (rtx_equal_p (operands[0], operands[2]))
    operands[0] = gen_reg_rtx (V8HImode);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (US_MINUS, (V8HImode), (operand1), (operand2)))));




  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand3), (gen_rtx_fmt_ee (PLUS, (V8HImode), (operand0), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_smaxv16qi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2850 "../.././gcc/config/i386/sse.md"
{
  rtx xops[6];
  unsigned char ok;

  xops[0] = operands[0];
  xops[1] = operands[1];
  xops[2] = operands[2];
  xops[3] = gen_rtx_fmt_ee (GT, (VOIDmode), (operands[1]), (operands[2]));
  xops[4] = operands[1];
  xops[5] = operands[2];
  ok = ix86_expand_int_vcond (xops);
  ((void)(!(ok) ? fancy_abort ("../.././gcc/config/i386/sse.md", 2861, __FUNCTION__), 0 : 0));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SMAX, (V16QImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_smaxv4si3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2850 "../.././gcc/config/i386/sse.md"
{
  rtx xops[6];
  unsigned char ok;

  xops[0] = operands[0];
  xops[1] = operands[1];
  xops[2] = operands[2];
  xops[3] = gen_rtx_fmt_ee (GT, (VOIDmode), (operands[1]), (operands[2]));
  xops[4] = operands[1];
  xops[5] = operands[2];
  ok = ix86_expand_int_vcond (xops);
  ((void)(!(ok) ? fancy_abort ("../.././gcc/config/i386/sse.md", 2861, __FUNCTION__), 0 : 0));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SMAX, (V4SImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_umaxv4si3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2870 "../.././gcc/config/i386/sse.md"
{
  rtx xops[6];
  unsigned char ok;

  xops[0] = operands[0];
  xops[1] = operands[1];
  xops[2] = operands[2];
  xops[3] = gen_rtx_fmt_ee (GTU, (VOIDmode), (operands[1]), (operands[2]));
  xops[4] = operands[1];
  xops[5] = operands[2];
  ok = ix86_expand_int_vcond (xops);
  ((void)(!(ok) ? fancy_abort ("../.././gcc/config/i386/sse.md", 2881, __FUNCTION__), 0 : 0));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (UMAX, (V4SImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_uminv16qi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2890 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (UMAX, V16QImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (UMIN, (V16QImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sminv8hi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2906 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (SMIN, V8HImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SMIN, (V8HImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sminv16qi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2922 "../.././gcc/config/i386/sse.md"
{
  rtx xops[6];
  unsigned char ok;

  xops[0] = operands[0];
  xops[1] = operands[2];
  xops[2] = operands[1];
  xops[3] = gen_rtx_fmt_ee (GT, (VOIDmode), (operands[1]), (operands[2]));
  xops[4] = operands[1];
  xops[5] = operands[2];
  ok = ix86_expand_int_vcond (xops);
  ((void)(!(ok) ? fancy_abort ("../.././gcc/config/i386/sse.md", 2933, __FUNCTION__), 0 : 0));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SMIN, (V16QImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sminv4si3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2922 "../.././gcc/config/i386/sse.md"
{
  rtx xops[6];
  unsigned char ok;

  xops[0] = operands[0];
  xops[1] = operands[2];
  xops[2] = operands[1];
  xops[3] = gen_rtx_fmt_ee (GT, (VOIDmode), (operands[1]), (operands[2]));
  xops[4] = operands[1];
  xops[5] = operands[2];
  ok = ix86_expand_int_vcond (xops);
  ((void)(!(ok) ? fancy_abort ("../.././gcc/config/i386/sse.md", 2933, __FUNCTION__), 0 : 0));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (SMIN, (V4SImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_uminv8hi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2942 "../.././gcc/config/i386/sse.md"
{
  rtx xops[6];
  unsigned char ok;

  xops[0] = operands[0];
  xops[1] = operands[2];
  xops[2] = operands[1];
  xops[3] = gen_rtx_fmt_ee (GTU, (VOIDmode), (operands[1]), (operands[2]));
  xops[4] = operands[1];
  xops[5] = operands[2];
  ok = ix86_expand_int_vcond (xops);
  ((void)(!(ok) ? fancy_abort ("../.././gcc/config/i386/sse.md", 2953, __FUNCTION__), 0 : 0));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (UMIN, (V8HImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_uminv4si3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 2942 "../.././gcc/config/i386/sse.md"
{
  rtx xops[6];
  unsigned char ok;

  xops[0] = operands[0];
  xops[1] = operands[2];
  xops[2] = operands[1];
  xops[3] = gen_rtx_fmt_ee (GTU, (VOIDmode), (operands[1]), (operands[2]));
  xops[4] = operands[1];
  xops[5] = operands[2];
  ok = ix86_expand_int_vcond (xops);
  ((void)(!(ok) ? fancy_abort ("../.././gcc/config/i386/sse.md", 2953, __FUNCTION__), 0 : 0));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (UMIN, (V4SImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vcondv16qi (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3,
 rtx operand4,
 rtx operand5)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
# 2992 "../.././gcc/config/i386/sse.md"
{
  if (ix86_expand_int_vcond (operands))
    return (_val = get_insns (), end_sequence (), _val);
  else
    return (end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (IF_THEN_ELSE, (V16QImode), (gen_rtx_fmt_ee (((enum rtx_code) (operand3)->code), VOIDmode, operand4, operand5)), (operand1), (operand2)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vcondv8hi (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3,
 rtx operand4,
 rtx operand5)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
# 2992 "../.././gcc/config/i386/sse.md"
{
  if (ix86_expand_int_vcond (operands))
    return (_val = get_insns (), end_sequence (), _val);
  else
    return (end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (IF_THEN_ELSE, (V8HImode), (gen_rtx_fmt_ee (((enum rtx_code) (operand3)->code), VOIDmode, operand4, operand5)), (operand1), (operand2)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vcondv4si (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3,
 rtx operand4,
 rtx operand5)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
# 2992 "../.././gcc/config/i386/sse.md"
{
  if (ix86_expand_int_vcond (operands))
    return (_val = get_insns (), end_sequence (), _val);
  else
    return (end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (IF_THEN_ELSE, (V4SImode), (gen_rtx_fmt_ee (((enum rtx_code) (operand3)->code), VOIDmode, operand4, operand5)), (operand1), (operand2)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vconduv16qi (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3,
 rtx operand4,
 rtx operand5)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
# 3008 "../.././gcc/config/i386/sse.md"
{
  if (ix86_expand_int_vcond (operands))
    return (_val = get_insns (), end_sequence (), _val);
  else
    return (end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (IF_THEN_ELSE, (V16QImode), (gen_rtx_fmt_ee (((enum rtx_code) (operand3)->code), VOIDmode, operand4, operand5)), (operand1), (operand2)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vconduv8hi (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3,
 rtx operand4,
 rtx operand5)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
# 3008 "../.././gcc/config/i386/sse.md"
{
  if (ix86_expand_int_vcond (operands))
    return (_val = get_insns (), end_sequence (), _val);
  else
    return (end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (IF_THEN_ELSE, (V8HImode), (gen_rtx_fmt_ee (((enum rtx_code) (operand3)->code), VOIDmode, operand4, operand5)), (operand1), (operand2)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vconduv4si (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3,
 rtx operand4,
 rtx operand5)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[6];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
    operands[4] = operand4;
    operands[5] = operand5;
# 3008 "../.././gcc/config/i386/sse.md"
{
  if (ix86_expand_int_vcond (operands))
    return (_val = get_insns (), end_sequence (), _val);
  else
    return (end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
    operand5 = operands[5];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (IF_THEN_ELSE, (V4SImode), (gen_rtx_fmt_ee (((enum rtx_code) (operand3)->code), VOIDmode, operand4, operand5)), (operand1), (operand2)))));







  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_one_cmplv16qi2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
# 3026 "../.././gcc/config/i386/sse.md"
{
  int i, n = mode_nunits[V16QImode];
  rtvec v = rtvec_alloc (n);

  for (i = 0; i < n; ++i)
    ((v)->elem[i]) = (const_int_rtx[64 -1]);

  operands[2] = force_reg (V16QImode, gen_rtx_CONST_VECTOR (V16QImode, v));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (XOR, (V16QImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_one_cmplv8hi2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
# 3026 "../.././gcc/config/i386/sse.md"
{
  int i, n = mode_nunits[V8HImode];
  rtvec v = rtvec_alloc (n);

  for (i = 0; i < n; ++i)
    ((v)->elem[i]) = (const_int_rtx[64 -1]);

  operands[2] = force_reg (V8HImode, gen_rtx_CONST_VECTOR (V8HImode, v));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (XOR, (V8HImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_one_cmplv4si2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
# 3026 "../.././gcc/config/i386/sse.md"
{
  int i, n = mode_nunits[V4SImode];
  rtvec v = rtvec_alloc (n);

  for (i = 0; i < n; ++i)
    ((v)->elem[i]) = (const_int_rtx[64 -1]);

  operands[2] = force_reg (V4SImode, gen_rtx_CONST_VECTOR (V4SImode, v));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (XOR, (V4SImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_one_cmplv2di2 (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
# 3026 "../.././gcc/config/i386/sse.md"
{
  int i, n = mode_nunits[V2DImode];
  rtvec v = rtvec_alloc (n);

  for (i = 0; i < n; ++i)
    ((v)->elem[i]) = (const_int_rtx[64 -1]);

  operands[2] = force_reg (V2DImode, gen_rtx_CONST_VECTOR (V2DImode, v));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (XOR, (V2DImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_andv16qi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 3041 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (AND, V16QImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (AND, (V16QImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_andv8hi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 3041 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (AND, V8HImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (AND, (V8HImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_andv4si3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 3041 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (AND, V4SImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (AND, (V4SImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_andv2di3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 3041 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (AND, V2DImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (AND, (V2DImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_iorv16qi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 3068 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (IOR, V16QImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (IOR, (V16QImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_iorv8hi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 3068 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (IOR, V8HImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (IOR, (V8HImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_iorv4si3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 3068 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (IOR, V4SImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (IOR, (V4SImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_iorv2di3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 3068 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (IOR, V2DImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (IOR, (V2DImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_xorv16qi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 3085 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (XOR, V16QImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (XOR, (V16QImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_xorv8hi3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 3085 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (XOR, V8HImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (XOR, (V8HImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_xorv4si3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 3085 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (XOR, V4SImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (XOR, (V4SImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_xorv2di3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 3085 "../.././gcc/config/i386/sse.md"
ix86_fixup_binary_operands_no_copy (XOR, V2DImode, operands);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (XOR, (V2DImode), (operand1), (operand2)))));




  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sse2_pinsrw (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 3267 "../.././gcc/config/i386/sse.md"
{
  operands[2] = rtl_hooks.gen_lowpart (HImode, operands[2]);
  operands[3] = gen_rtx_CONST_INT (VOIDmode, ((1 << ((operands[3])->u.hwint[0]))));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V8HImode), (gen_rtx_fmt_e (VEC_DUPLICATE, (V8HImode), (operand2))), (operand1), (operand3)))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sse2_pshufd (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 3303 "../.././gcc/config/i386/sse.md"
{
  int mask = ((operands[2])->u.hwint[0]);
  emit_insn (gen_sse2_pshufd_1 (operands[0], operands[1],
    gen_rtx_CONST_INT (VOIDmode, ((mask >> 0) & 3)),
    gen_rtx_CONST_INT (VOIDmode, ((mask >> 2) & 3)),
    gen_rtx_CONST_INT (VOIDmode, ((mask >> 4) & 3)),
    gen_rtx_CONST_INT (VOIDmode, ((mask >> 6) & 3))));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sse2_pshuflw (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 3340 "../.././gcc/config/i386/sse.md"
{
  int mask = ((operands[2])->u.hwint[0]);
  emit_insn (gen_sse2_pshuflw_1 (operands[0], operands[1],
     gen_rtx_CONST_INT (VOIDmode, ((mask >> 0) & 3)),
     gen_rtx_CONST_INT (VOIDmode, ((mask >> 2) & 3)),
     gen_rtx_CONST_INT (VOIDmode, ((mask >> 4) & 3)),
     gen_rtx_CONST_INT (VOIDmode, ((mask >> 6) & 3))));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sse2_pshufhw (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 3381 "../.././gcc/config/i386/sse.md"
{
  int mask = ((operands[2])->u.hwint[0]);
  emit_insn (gen_sse2_pshufhw_1 (operands[0], operands[1],
     gen_rtx_CONST_INT (VOIDmode, (((mask >> 0) & 3) + 4)),
     gen_rtx_CONST_INT (VOIDmode, (((mask >> 2) & 3) + 4)),
     gen_rtx_CONST_INT (VOIDmode, (((mask >> 4) & 3) + 4)),
     gen_rtx_CONST_INT (VOIDmode, (((mask >> 6) & 3) + 4))));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sse2_loadd (rtx operand0,
 rtx operand1)
{
  rtx operand2;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
# 3425 "../.././gcc/config/i386/sse.md"
operands[2] = (const_tiny_rtx[0][(int) (V4SImode)]);
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V4SImode), (gen_rtx_fmt_e (VEC_DUPLICATE, (V4SImode), (operand1))), (operand2), ((const_int_rtx[64 +1]))))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1577 (rtx, rtx *);
rtx
gen_split_1577 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 3453 "../.././gcc/config/i386/sse.md"
{
  operands[1] = gen_rtx_REG (SImode, (((operands[1])->u.fld[0]).rt_uint));
}
  operand0 = operands[0];
  operand1 = operands[1];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sse_storeq (rtx operand0,
 rtx operand1)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (VEC_SELECT, (DImode), (operand1), (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (1, (const_int_rtx[64]))))))));






}


extern rtx gen_split_1579 (rtx, rtx *);
rtx
gen_split_1579 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands)
{
  rtx operand0;
  rtx operand1;
  rtx _val = 0;
  start_sequence ();
# 3482 "../.././gcc/config/i386/sse.md"
{
  operands[1] = gen_rtx_REG (DImode, (((operands[1])->u.fld[0]).rt_uint));
}
  operand0 = operands[0];
  operand1 = operands[1];
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_setv2di (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 3573 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_set (0, operands[0], operands[1],
     ((operands[2])->u.hwint[0]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_extractv2di (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 3584 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_extract (0, operands[0], operands[1],
         ((operands[2])->u.hwint[0]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_initv2di (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 3594 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_init (0, operands[0], operands[1]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (operand0);
  emit (operand1);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_setv4si (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 3604 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_set (0, operands[0], operands[1],
     ((operands[2])->u.hwint[0]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_extractv4si (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 3615 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_extract (0, operands[0], operands[1],
         ((operands[2])->u.hwint[0]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_initv4si (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 3625 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_init (0, operands[0], operands[1]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (operand0);
  emit (operand1);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_setv8hi (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 3635 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_set (0, operands[0], operands[1],
     ((operands[2])->u.hwint[0]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_extractv8hi (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 3646 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_extract (0, operands[0], operands[1],
         ((operands[2])->u.hwint[0]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_initv8hi (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 3656 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_init (0, operands[0], operands[1]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (operand0);
  emit (operand1);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_setv16qi (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 3666 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_set (0, operands[0], operands[1],
     ((operands[2])->u.hwint[0]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_extractv16qi (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 3677 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_extract (0, operands[0], operands[1],
         ((operands[2])->u.hwint[0]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_initv16qi (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 3687 "../.././gcc/config/i386/sse.md"
{
  ix86_expand_vector_init (0, operands[0], operands[1]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (operand0);
  emit (operand1);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sse2_maskmovdqu (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (V16QImode), (gen_rtvec (3, operand1, operand2, operand0)), (31))));







}


rtx
gen_sse_sfence (void)
{
  rtx operand0;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
# 3834 "../.././gcc/config/i386/sse.md"
{
  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_fmt_0 (SCRATCH, ((0 ? DImode : SImode))));
  (((operands[0]))->volatil) = 1;
}
    operand0 = operands[0];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (BLKmode), (gen_rtvec (1, operand0)), (37)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sse2_mfence (void)
{
  rtx operand0;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
# 3859 "../.././gcc/config/i386/sse.md"
{
  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_fmt_0 (SCRATCH, ((0 ? DImode : SImode))));
  (((operands[0]))->volatil) = 1;
}
    operand0 = operands[0];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (BLKmode), (gen_rtvec (1, operand0)), (44)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sse2_lfence (void)
{
  rtx operand0;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
# 3876 "../.././gcc/config/i386/sse.md"
{
  operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_fmt_0 (SCRATCH, ((0 ? DImode : SImode))));
  (((operands[0]))->volatil) = 1;
}
    operand0 = operands[0];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (BLKmode), (gen_rtvec (1, operand0)), (45)))));





  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movv8qi (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 60 "../.././gcc/config/i386/mmx.md"
{
  ix86_expand_vector_move (V8QImode, operands);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movv4hi (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 60 "../.././gcc/config/i386/mmx.md"
{
  ix86_expand_vector_move (V4HImode, operands);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movv2si (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 60 "../.././gcc/config/i386/mmx.md"
{
  ix86_expand_vector_move (V2SImode, operands);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movv2sf (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 119 "../.././gcc/config/i386/mmx.md"
{
  ix86_expand_vector_move (V2SFmode, operands);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1600 (rtx, rtx *);
rtx
gen_split_1600 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 180 "../.././gcc/config/i386/mmx.md"
ix86_split_long_move (operands); return (_val = get_insns (), end_sequence (), _val);
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1601 (rtx, rtx *);
rtx
gen_split_1601 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 180 "../.././gcc/config/i386/mmx.md"
ix86_split_long_move (operands); return (_val = get_insns (), end_sequence (), _val);
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1602 (rtx, rtx *);
rtx
gen_split_1602 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 180 "../.././gcc/config/i386/mmx.md"
ix86_split_long_move (operands); return (_val = get_insns (), end_sequence (), _val);
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1603 (rtx, rtx *);
rtx
gen_split_1603 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 180 "../.././gcc/config/i386/mmx.md"
ix86_split_long_move (operands); return (_val = get_insns (), end_sequence (), _val);
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_pushv8qi1 (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 185 "../.././gcc/config/i386/mmx.md"
{
  ix86_expand_push (V8QImode, operands[0]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
  }
  emit (operand0);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_pushv4hi1 (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 185 "../.././gcc/config/i386/mmx.md"
{
  ix86_expand_push (V4HImode, operands[0]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
  }
  emit (operand0);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_pushv2si1 (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 185 "../.././gcc/config/i386/mmx.md"
{
  ix86_expand_push (V2SImode, operands[0]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
  }
  emit (operand0);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_pushv2sf1 (rtx operand0)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[1];
    operands[0] = operand0;
# 185 "../.././gcc/config/i386/mmx.md"
{
  ix86_expand_push (V2SFmode, operands[0]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
  }
  emit (operand0);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movmisalignv8qi (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 194 "../.././gcc/config/i386/mmx.md"
{
  ix86_expand_vector_move (V8QImode, operands);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movmisalignv4hi (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 194 "../.././gcc/config/i386/mmx.md"
{
  ix86_expand_vector_move (V4HImode, operands);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movmisalignv2si (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 194 "../.././gcc/config/i386/mmx.md"
{
  ix86_expand_vector_move (V2SImode, operands);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_movmisalignv2sf (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 194 "../.././gcc/config/i386/mmx.md"
{
  ix86_expand_vector_move (V2SFmode, operands);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)));


  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_mmx_subrv2sf3 (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_ee (MINUS, (V2SFmode), (operand2), (operand1))));




}


rtx
gen_vec_setv2sf (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 483 "../.././gcc/config/i386/mmx.md"
{
  ix86_expand_vector_set (0, operands[0], operands[1],
     ((operands[2])->u.hwint[0]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1614 (rtx, rtx *);
rtx
gen_split_1614 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 498 "../.././gcc/config/i386/mmx.md"
{
  rtx op1 = operands[1];
  if ((((enum rtx_code) (op1)->code) == REG))
    op1 = gen_rtx_REG (SFmode, (((op1)->u.fld[0]).rt_uint));
  else
    op1 = rtl_hooks.gen_lowpart (SFmode, op1);
  emit_move_insn (operands[0], op1);
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1615 (rtx, rtx *);
rtx
gen_split_1615 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 528 "../.././gcc/config/i386/mmx.md"
{
  operands[1] = adjust_address_1 (operands[1], SFmode, 4, 1, 1);
  emit_move_insn (operands[0], operands[1]);
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_extractv2sf (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 539 "../.././gcc/config/i386/mmx.md"
{
  ix86_expand_vector_extract (0, operands[0], operands[1],
         ((operands[2])->u.hwint[0]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_initv2sf (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 549 "../.././gcc/config/i386/mmx.md"
{
  ix86_expand_vector_init (0, operands[0], operands[1]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (operand0);
  emit (operand1);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_mmx_pinsrw (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[4];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 1035 "../.././gcc/config/i386/mmx.md"
{
  operands[2] = rtl_hooks.gen_lowpart (HImode, operands[2]);
  operands[3] = gen_rtx_CONST_INT (VOIDmode, (1 << ((operands[3])->u.hwint[0])));
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
  }
  emit_insn (gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_eee (VEC_MERGE, (V4HImode), (gen_rtx_fmt_e (VEC_DUPLICATE, (V4HImode), (operand2))), (operand1), (operand3)))));






  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_mmx_pshufw (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 1071 "../.././gcc/config/i386/mmx.md"
{
  int mask = ((operands[2])->u.hwint[0]);
  emit_insn (gen_mmx_pshufw_1 (operands[0], operands[1],
                               gen_rtx_CONST_INT (VOIDmode, ((mask >> 0) & 3)),
                               gen_rtx_CONST_INT (VOIDmode, ((mask >> 2) & 3)),
                               gen_rtx_CONST_INT (VOIDmode, ((mask >> 4) & 3)),
                               gen_rtx_CONST_INT (VOIDmode, ((mask >> 6) & 3))));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_setv2si (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 1149 "../.././gcc/config/i386/mmx.md"
{
  ix86_expand_vector_set (0, operands[0], operands[1],
     ((operands[2])->u.hwint[0]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1621 (rtx, rtx *);
rtx
gen_split_1621 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 1164 "../.././gcc/config/i386/mmx.md"
{
  rtx op1 = operands[1];
  if ((((enum rtx_code) (op1)->code) == REG))
    op1 = gen_rtx_REG (SImode, (((op1)->u.fld[0]).rt_uint));
  else
    op1 = rtl_hooks.gen_lowpart (SImode, op1);
  emit_move_insn (operands[0], op1);
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


extern rtx gen_split_1622 (rtx, rtx *);
rtx
gen_split_1622 (rtx curr_insn __attribute__ ((__unused__)), rtx *operands __attribute__ ((__unused__)))
{
  rtx _val = 0;
  start_sequence ();
# 1196 "../.././gcc/config/i386/mmx.md"
{
  operands[1] = adjust_address_1 (operands[1], SImode, 4, 1, 1);
  emit_move_insn (operands[0], operands[1]);
  return (_val = get_insns (), end_sequence (), _val);
}
  emit_insn ((const_int_rtx[64]));
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_extractv2si (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 1207 "../.././gcc/config/i386/mmx.md"
{
  ix86_expand_vector_extract (0, operands[0], operands[1],
         ((operands[2])->u.hwint[0]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_initv2si (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 1217 "../.././gcc/config/i386/mmx.md"
{
  ix86_expand_vector_init (0, operands[0], operands[1]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (operand0);
  emit (operand1);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_setv4hi (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 1227 "../.././gcc/config/i386/mmx.md"
{
  ix86_expand_vector_set (0, operands[0], operands[1],
     ((operands[2])->u.hwint[0]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_extractv4hi (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 1238 "../.././gcc/config/i386/mmx.md"
{
  ix86_expand_vector_extract (0, operands[0], operands[1],
         ((operands[2])->u.hwint[0]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_initv4hi (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 1248 "../.././gcc/config/i386/mmx.md"
{
  ix86_expand_vector_init (0, operands[0], operands[1]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (operand0);
  emit (operand1);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_setv8qi (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 1258 "../.././gcc/config/i386/mmx.md"
{
  ix86_expand_vector_set (0, operands[0], operands[1],
     ((operands[2])->u.hwint[0]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_extractv8qi (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[3];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
# 1269 "../.././gcc/config/i386/mmx.md"
{
  ix86_expand_vector_extract (0, operands[0], operands[1],
         ((operands[2])->u.hwint[0]));
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
  }
  emit (operand0);
  emit (operand1);
  emit (operand2);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_vec_initv8qi (rtx operand0,
 rtx operand1)
{
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[2];
    operands[0] = operand0;
    operands[1] = operand1;
# 1279 "../.././gcc/config/i386/mmx.md"
{
  ix86_expand_vector_init (0, operands[0], operands[1]);
  return (_val = get_insns (), end_sequence (), _val);
}
    operand0 = operands[0];
    operand1 = operands[1];
  }
  emit (operand0);
  emit (operand1);
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_mmx_maskmovq (rtx operand0,
 rtx operand1,
 rtx operand2)
{
  return gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (gen_rtx_fmt_Ei (UNSPEC, (V8QImode), (gen_rtvec (3, operand1, operand2, operand0)), (31))));







}


rtx
gen_sync_compare_and_swap_ccqi (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx operand4;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 62 "../.././gcc/config/i386/sync.md"
{
  operands[4] = gen_rtx_REG (CCZmode, 17);
  ix86_compare_op0 = operands[3];
  ix86_compare_op1 = ((void *)0);
  ix86_compare_emitted = operands[4];
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (QImode), (gen_rtvec (3, operand1, operand2, operand3)), (10)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_ee (COMPARE, (CCZmode), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (QImode), (gen_rtvec (3, operand1, operand2, operand3)), (11))), (operand2))))))));
# 97 "../.././gcc/config/i386/sync.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sync_compare_and_swap_cchi (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx operand4;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 62 "../.././gcc/config/i386/sync.md"
{
  operands[4] = gen_rtx_REG (CCZmode, 17);
  ix86_compare_op0 = operands[3];
  ix86_compare_op1 = ((void *)0);
  ix86_compare_emitted = operands[4];
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (HImode), (gen_rtvec (3, operand1, operand2, operand3)), (10)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_ee (COMPARE, (CCZmode), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (HImode), (gen_rtvec (3, operand1, operand2, operand3)), (11))), (operand2))))))));
# 97 "../.././gcc/config/i386/sync.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}


rtx
gen_sync_compare_and_swap_ccsi (rtx operand0,
 rtx operand1,
 rtx operand2,
 rtx operand3)
{
  rtx operand4;
  rtx _val = 0;
  start_sequence ();
  {
    rtx operands[5];
    operands[0] = operand0;
    operands[1] = operand1;
    operands[2] = operand2;
    operands[3] = operand3;
# 62 "../.././gcc/config/i386/sync.md"
{
  operands[4] = gen_rtx_REG (CCZmode, 17);
  ix86_compare_op0 = operands[3];
  ix86_compare_op1 = ((void *)0);
  ix86_compare_emitted = operands[4];
}
    operand0 = operands[0];
    operand1 = operands[1];
    operand2 = operands[2];
    operand3 = operands[3];
    operand4 = operands[4];
  }
  emit (gen_rtx_fmt_E (PARALLEL, (VOIDmode), (gen_rtvec (3, gen_rtx_fmt_ee (SET, (VOIDmode), (operand0), (operand1)), gen_rtx_fmt_ee (SET, (VOIDmode), (operand1), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (SImode), (gen_rtvec (3, operand1, operand2, operand3)), (10)))), gen_rtx_fmt_ee (SET, (VOIDmode), (operand4), (gen_rtx_fmt_ee (COMPARE, (CCZmode), (gen_rtx_fmt_Ei (UNSPEC_VOLATILE, (SImode), (gen_rtvec (3, operand1, operand2, operand3)), (11))), (operand2))))))));
# 97 "../.././gcc/config/i386/sync.md"
  _val = get_insns ();
  end_sequence ();
  return _val;
}



void
add_clobbers (rtx pattern __attribute__ ((__unused__)), int insn_code_number)
{
  switch (insn_code_number)
    {
    case 884:
    case 883:
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[1]) = gen_hard_reg_clobber (XFmode, 8);
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[2]) = gen_hard_reg_clobber (XFmode, 9);
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[3]) = gen_hard_reg_clobber (XFmode, 10);
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[4]) = gen_hard_reg_clobber (XFmode, 11);
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[5]) = gen_hard_reg_clobber (XFmode, 12);
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[6]) = gen_hard_reg_clobber (XFmode, 13);
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[7]) = gen_hard_reg_clobber (XFmode, 14);
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[8]) = gen_hard_reg_clobber (XFmode, 15);
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[9]) = gen_hard_reg_clobber (DImode, 29);
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[10]) = gen_hard_reg_clobber (DImode, 30);
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[11]) = gen_hard_reg_clobber (DImode, 31);
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[12]) = gen_hard_reg_clobber (DImode, 32);
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[13]) = gen_hard_reg_clobber (DImode, 33);
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[14]) = gen_hard_reg_clobber (DImode, 34);
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[15]) = gen_hard_reg_clobber (DImode, 35);
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[16]) = gen_hard_reg_clobber (DImode, 36);
      break;

    case 528:
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[2]) = gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (SImode))));

      (((((pattern)->u.fld[0]).rt_rtvec))->elem[3]) = gen_hard_reg_clobber (CCmode, 17);
      break;

    case 455:
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[1]) = gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (SFmode))));

      break;

    case 454:
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[1]) = gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (DFmode))));

      break;

    case 392:
    case 391:
    case 390:
    case 389:
    case 388:
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[1]) = gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (SImode))));

      (((((pattern)->u.fld[0]).rt_rtvec))->elem[2]) = gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (SImode))));

      (((((pattern)->u.fld[0]).rt_rtvec))->elem[3]) = gen_hard_reg_clobber (CCmode, 17);
      break;

    case 364:
    case 363:
    case 362:
    case 361:
    case 360:
    case 359:
    case 358:
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[1]) = gen_hard_reg_clobber (CCFPmode, 18);
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[2]) = gen_hard_reg_clobber (CCFPmode, 17);
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[3]) = gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (HImode))));

      break;

    case 357:
    case 356:
    case 355:
    case 354:
    case 353:
    case 352:
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[1]) = gen_hard_reg_clobber (CCFPmode, 18);
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[2]) = gen_hard_reg_clobber (CCFPmode, 17);
      break;

    case 266:
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[1]) = gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (V2DFmode))));

      break;

    case 261:
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[1]) = gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (V4SFmode))));

      break;

    case 511:
    case 199:
    case 198:
    case 195:
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[3]) = gen_hard_reg_clobber (CCmode, 17);
      break;

    case 893:
    case 892:
    case 891:
    case 887:
    case 886:
    case 885:
    case 538:
    case 537:
    case 267:
    case 264:
    case 263:
    case 262:
    case 259:
    case 258:
    case 257:
    case 197:
    case 196:
    case 194:
    case 193:
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[2]) = gen_hard_reg_clobber (CCmode, 17);
      break;

    case 384:
    case 383:
    case 190:
    case 189:
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[1]) = gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (SImode))));

      (((((pattern)->u.fld[0]).rt_rtvec))->elem[2]) = gen_hard_reg_clobber (CCmode, 17);
      break;

    case 248:
    case 231:
    case 165:
    case 164:
    case 163:
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[1]) = gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (QImode))));

      break;

    case 240:
    case 226:
    case 158:
    case 157:
    case 156:
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[1]) = gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (HImode))));

      break;

    case 540:
    case 539:
    case 237:
    case 223:
    case 152:
    case 151:
    case 150:
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[1]) = gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (SImode))));

      break;

    case 489:
    case 478:
    case 118:
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[4]) = gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode))));

      break;

    case 488:
    case 477:
    case 117:
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[3]) = gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode))));

      break;

    case 465:
    case 113:
    case 112:
    case 111:
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[2]) = gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode))));

      break;

    case 464:
    case 458:
    case 457:
    case 456:
    case 110:
    case 109:
    case 108:
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[1]) = gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (XFmode))));

      break;

    case 337:
    case 328:
    case 80:
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[1]) = gen_hard_reg_clobber (CCmode, 17);
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[2]) = gen_rtx_fmt_e (CLOBBER, (VOIDmode), (gen_rtx_fmt_0 (SCRATCH, (SImode))));

      break;

    case 911:
    case 910:
    case 909:
    case 908:
    case 907:
    case 906:
    case 905:
    case 904:
    case 903:
    case 902:
    case 901:
    case 900:
    case 899:
    case 898:
    case 897:
    case 512:
    case 496:
    case 494:
    case 487:
    case 486:
    case 485:
    case 483:
    case 476:
    case 475:
    case 474:
    case 472:
    case 394:
    case 387:
    case 386:
    case 380:
    case 345:
    case 344:
    case 343:
    case 342:
    case 341:
    case 340:
    case 339:
    case 338:
    case 336:
    case 335:
    case 334:
    case 333:
    case 332:
    case 331:
    case 330:
    case 329:
    case 325:
    case 324:
    case 323:
    case 322:
    case 319:
    case 318:
    case 315:
    case 314:
    case 313:
    case 310:
    case 309:
    case 308:
    case 307:
    case 304:
    case 303:
    case 300:
    case 299:
    case 298:
    case 297:
    case 296:
    case 294:
    case 293:
    case 291:
    case 290:
    case 288:
    case 287:
    case 286:
    case 255:
    case 253:
    case 251:
    case 250:
    case 245:
    case 244:
    case 243:
    case 242:
    case 241:
    case 238:
    case 235:
    case 234:
    case 233:
    case 232:
    case 228:
    case 227:
    case 224:
    case 221:
    case 220:
    case 219:
    case 217:
    case 213:
    case 212:
    case 210:
    case 208:
    case 192:
    case 191:
    case 188:
    case 187:
    case 186:
    case 185:
    case 184:
    case 183:
    case 182:
    case 179:
    case 178:
    case 175:
    case 172:
    case 171:
    case 170:
    case 169:
    case 168:
    case 167:
    case 166:
    case 161:
    case 160:
    case 159:
    case 154:
    case 153:
    case 148:
    case 141:
    case 140:
    case 139:
    case 138:
    case 116:
    case 115:
    case 114:
    case 79:
    case 77:
    case 76:
    case 74:
    case 73:
    case 71:
    case 47:
    case 41:
    case 33:
    case 32:
      (((((pattern)->u.fld[0]).rt_rtvec))->elem[1]) = gen_hard_reg_clobber (CCmode, 17);
      break;

    default:
      (fancy_abort ("../.././gcc/config/i386/sync.md", 442, __FUNCTION__));
    }
}


int
added_clobbers_hard_reg_p (int insn_code_number)
{
  switch (insn_code_number)
    {
    case 455:
    case 454:
    case 266:
    case 261:
    case 248:
    case 231:
    case 165:
    case 164:
    case 163:
    case 240:
    case 226:
    case 158:
    case 157:
    case 156:
    case 540:
    case 539:
    case 237:
    case 223:
    case 152:
    case 151:
    case 150:
    case 489:
    case 478:
    case 118:
    case 488:
    case 477:
    case 117:
    case 465:
    case 113:
    case 112:
    case 111:
    case 464:
    case 458:
    case 457:
    case 456:
    case 110:
    case 109:
    case 108:
      return 0;

    case 884:
    case 883:
    case 528:
    case 392:
    case 391:
    case 390:
    case 389:
    case 388:
    case 364:
    case 363:
    case 362:
    case 361:
    case 360:
    case 359:
    case 358:
    case 357:
    case 356:
    case 355:
    case 354:
    case 353:
    case 352:
    case 511:
    case 199:
    case 198:
    case 195:
    case 893:
    case 892:
    case 891:
    case 887:
    case 886:
    case 885:
    case 538:
    case 537:
    case 267:
    case 264:
    case 263:
    case 262:
    case 259:
    case 258:
    case 257:
    case 197:
    case 196:
    case 194:
    case 193:
    case 384:
    case 383:
    case 190:
    case 189:
    case 337:
    case 328:
    case 80:
    case 911:
    case 910:
    case 909:
    case 908:
    case 907:
    case 906:
    case 905:
    case 904:
    case 903:
    case 902:
    case 901:
    case 900:
    case 899:
    case 898:
    case 897:
    case 512:
    case 496:
    case 494:
    case 487:
    case 486:
    case 485:
    case 483:
    case 476:
    case 475:
    case 474:
    case 472:
    case 394:
    case 387:
    case 386:
    case 380:
    case 345:
    case 344:
    case 343:
    case 342:
    case 341:
    case 340:
    case 339:
    case 338:
    case 336:
    case 335:
    case 334:
    case 333:
    case 332:
    case 331:
    case 330:
    case 329:
    case 325:
    case 324:
    case 323:
    case 322:
    case 319:
    case 318:
    case 315:
    case 314:
    case 313:
    case 310:
    case 309:
    case 308:
    case 307:
    case 304:
    case 303:
    case 300:
    case 299:
    case 298:
    case 297:
    case 296:
    case 294:
    case 293:
    case 291:
    case 290:
    case 288:
    case 287:
    case 286:
    case 255:
    case 253:
    case 251:
    case 250:
    case 245:
    case 244:
    case 243:
    case 242:
    case 241:
    case 238:
    case 235:
    case 234:
    case 233:
    case 232:
    case 228:
    case 227:
    case 224:
    case 221:
    case 220:
    case 219:
    case 217:
    case 213:
    case 212:
    case 210:
    case 208:
    case 192:
    case 191:
    case 188:
    case 187:
    case 186:
    case 185:
    case 184:
    case 183:
    case 182:
    case 179:
    case 178:
    case 175:
    case 172:
    case 171:
    case 170:
    case 169:
    case 168:
    case 167:
    case 166:
    case 161:
    case 160:
    case 159:
    case 154:
    case 153:
    case 148:
    case 141:
    case 140:
    case 139:
    case 138:
    case 116:
    case 115:
    case 114:
    case 79:
    case 77:
    case 76:
    case 74:
    case 73:
    case 71:
    case 47:
    case 41:
    case 33:
    case 32:
      return 1;

    default:
      (fancy_abort ("../.././gcc/config/i386/sync.md", 686, __FUNCTION__));
    }
}
