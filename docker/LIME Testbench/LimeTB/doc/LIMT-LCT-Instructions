How to use the monitoring tool and the testing tool together
============================================================

This file contains a quick overview of how to use LCT to generate tests for
programs that use LIME interface specifications. 

Example:
--------

To illustrate how LIMT and LCT can be used together, let us take a look at 
a simple example program provided in folder examples/limt-lct/example_factory.

The main method in the example is a simple test driver that calls the methods
of the Factory interface based on the input values computed by LCT. (Similar
test drivers can be automatically generated by using LJUT.) The
ExceptionOverride.setCallException(test, InconclusiveException.class) statement
is used to set all LIME call exceptions to be of the class InconclusiveException.
This is because in this example we want to test that the FactoryImplementation
satisfies its return specifications and disregard all call exceptions as
inconclusive test runs. For an example that does not use ExceptionOverride, 
see the example_lock example in examples/limt-lct/.

Let us first complile the program using limejc:

examples/limt-lct$ limejc example_factory

After the compilation is finished, the compiled version is located in 
example_factory/spoon directory. To use LCT on the compiled version, it must 
first be instrumented. This can be done using the following command. 

limt-lct/example_factory/spoon$ LCTinstrument example_factory.Main

(IMPORTANT: do not use the -noreplacement option of LCTinstrument when 
instrumenting classes compiled with limejc. This is because LIMT uses
AspectJ which in turn uses core Java classes (e.g., Integer) to store values.)

After the instrumentation the modified program is located in /output directory.
To test the program, start LCTserver as instructed in LCT README and use
LCTrun (as shown bellow) to run the program. 

limt-lct/example_factory/spoon/output$ LCTrun example_factory.Main all

-------------------------------------------
Server started.
Listening on port: 10253
Search strategy: random selection
Maximum number of test runs: infinite
Maximum number of defects to be searched: infinite
-------------------------------------------
Testing started at 02:27:00 EEST
-------------------------------------------
 
Error found!
Input values used: 1 1 3 4 0
Seed value used: 1251890822835

Error found!
Input values used: 1 1 4 0
Seed value used: 1251890824397

Error found!
Input values used: 2 1 4 0 4 0
Seed value used: 1251890825925

Error found!
Input values used: 1 1 1 4 0
Seed value used: 1251890826700

-------------------------------------------
Testing finished at 02:27:09 EEST
-------------------------------------------
Errors found in 4 symbolic execution path(s).
Depth limit reached in 0 symbolic execution path(s).
Failed to follow correct path: 0 time(s).
Total number of explored paths: 23
Total time spent: 8624 ms
-------------------------------------------


LCT should explore 23 execution paths. None of the test runs violates
the return specifications but LCT finds division by zero errors in 4
test runs. (There all are caused by the single same bug in the program.)



How to guide the testing to cover the specifications:
-----------------------------------------------------

It is possible to guide the testing process based on the LIME specifications 
that are being monitored. To enable this guiding, the "random priority", 
"random selection" or "branch coverage" strategy must be used in LCT. In
addition, heuristicPercentage, heuristicClass and heuristicMethod properties 
must be set in the usersettings.properties file. 

heuristicPercentage indicates how often the selection of next test inputs is
based on the specifications on how often it is based on the underlying search
strategy. For example, value 80 with random selection strategy means that
80% of the time the next execution path to be tested is selected based on the
specifications and 20% of the time it is selected using the random selection
strategy.

heuristicClass must be set to fi.hut.ics.lime.aspectmonitor.lctsupport.LCTHeuristic

heuristicMethod can be one of the following alternatives:

seekErrors
avoidInconclusive
seekErrorsAvoidInconclusive
decayingBest

Example:

heuristicPercentage         = 100
heuristicClass              = fi.hut.ics.lime.aspectmonitor.lctsupport.LCTHeuristic
heuristicMethod             = seekErrors

For more information about guiding the testing process, see the research report
Design and Implementation of a Heuristic for Directing Dynamic Symbolic 
Execution.


