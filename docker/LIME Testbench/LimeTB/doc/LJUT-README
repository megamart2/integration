ljut - LIME JUnit Tools
==========================

These tools generate test drivers to be used with the LIME Concolic 
Tester and generate JUnit tests based on those test runs. Please refer 
to the LCT readme file for further info on it.

================
Using the tools:
================

All the included programs print usage messages when called with --help.

The jopt-simple library must be found on the classpath.

The driver generation programs write a .properties file that contains 
info used in the JUnit test generation program.

Workflow:
---------

(1) Create test driver. Simple drivers test a single method with 
different parameters while interface drivers test all methods in some 
interface. This step creates a .java file that is the driver and a 
.properties file that has information on the driver.

(2) Run the LCT. The .java file from step (1) must be compiled and 
instrumented with the LCTinstrument command. Then a LCTserver must be 
started and the instrumented class file be run with LCTrun. The server 
writes a file containing the test cases in its work folder. If the LCT 
encountered errors correct them and do this step again.

(3) Generate the JUnit test case. The file containing the test cases 
obtained in step (2) should either be renamed to <drivername>.parameters 
and moved to the same folder as the .properties file is in or a path to 
it can be supplied to the JUnitGen program. Run the JUnitGen with the 
.properties file as a parameter. It will generate a .java file of the 
JUnit tests.

(4) Use JUnit test case file generated in step (3) to cheaply rerun the 
tests.

Note that the JUnit test case calls exactly the same functions with the 
same parameters as the LCT did. If the code to test is changed in such a 
way that introduces a significant new conditionally executed code path 
then new JUnit tests should be generated by running steps (2)-(4).

If an interface tested with an interface driver is changed steps (1)-(4) 
should be rerun.

Simple drivers:
---------------

SimpleDriverGen in the package fi.hut.ics.lime.ljut generates an LCT 
test driver that instantiates a class (possibly with parameters from 
LCT) and calls one method in it with parameters from the LCT. The 
program must be supplied with a constructor and method to call. Running
it for a function foo taking a long and an int in the class TestClass 
constructed by its nullary constructor would be accomplished by:

<command> TestClass() foo(long,int)

, where <command> is the command that accomplishes calling the main 
method in SimpleDriverGen. The included ljut-simple shell script does 
this.

The generated class would be:

public class TestClassLCTDriver {
    public static void main(String[] args) {
        TestClass testObject = new TestClass();
        long methodParam0 = LCT.getLong();
        int methodParam1 = LCT.getInteger();
        testObject.foo(methodParam0,methodParam1);
    }
}

Note that the class the driver is generated for must be found on the 
java classpath.

Interface drivers:
------------------

InterfaceDriverGen generates an LCT test driver for testing and 
implementation of some interface. This is really meant to be used with 
the return specifications from the Lime Interface Monitoring Toolkit.

The program must be supplied with an interface name, constructor for an 
implementing class and number of methods to call on each testing pass. 
It can optionally be supplied with a semicolon separated list of methods 
that can be used to limit the testing to a subset of the callable 
methods. If no such list is supplied the test driver is generated for 
all the methods that can be called with parameters from the LCT, namely 
those with only primitive types or classes containing a nullary 
constructor.

Running the program for an interface File and its implementation 
FileImpl testing all permutations of calling three methods from the 
interface would be accomplished by:

<command> File FileImpl() 3

, where <command> is the command that accomplishes running the main 
method in InterfaceDriverGen. The included ljut-interface shell script 
does this.

The driver generated might look like this:

public class FileLCTDriver {
    private static final int ITERATIONS = 3;
    public static void main(String[] args) {
        File obj = new FileImpl();
        int i = 0;
        while (i < ITERATIONS) {
            ++i;
            int methodNumber = LCT.getInteger(0, 2);
            switch (methodNumber) {
                case 0: {
                    obj.length();
                    break;
                }
                case 1: {
                    String methodParam0 = (String) LCT.getObject("String");
                    obj.write(methodParam0);
                    break;
                }
                case 2: {
                    obj.read();
                    break;
                }
            }
        }
    }
}

Note that both the interface and the implementing class the driver is 
generated for must be found on the java classpath.

Running the drivers:
--------------------

The drivers are instrumented just like any other program used with the 
LCT. The testing parameters selected by the server are written to a 
file. This file must (if other options were not specified) in the next 
step have the name <driver class name>.parameters.

JUnit test generation:
----------------------

The JUnit test are generated with JUnitGen. The program must be supplied 
with the .properties file from the driver generation step. It expects to 
find the testing parameters in a file named <drivername>.parameters.

Running the JUnit test generator for the driver generated in the 
interface driver generator sections example would be accomplished by:

<command> FileImplLCTDriver.properties

, where <command> is the command that accomplishes running the main 
method in JUnitTestGen. The included ljut-junit shell script does this.

The default location, where the tool searches for the testing parameters 
file is <drivername>.parameters in the same directory as the .properties 
file. In the example above this would be FileImplLCTDriver.parameters.

The resulting class will contain JUnit test methods annotated with @Test 
for each line in the .parameters file that call the constructor and 
methods with the parameters used in that testing pass.

=============
Dependencies:
=============

The JOpt Simple library is used for command line parsing. ljut was 
written for version 3.1. The library is available from 
http://jopt-simple.sourceforge.net/ and is licensed under the MIT 
license.
